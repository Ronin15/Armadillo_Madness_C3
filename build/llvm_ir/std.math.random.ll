; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.long" = comdat any

$"$sel.set_seed" = comdat any

$"$sel.next_long" = comdat any

$"$sel.next_bytes" = comdat any

$"$sel.next_int128" = comdat any

$"$sel.next_int" = comdat any

$"$sel.next_short" = comdat any

$"$sel.next_byte" = comdat any

@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.default_random = weak thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !0
@std.math.random.default_random_initialized = weak thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [15 x i8] c"math_random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !12
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !16
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !18
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !21
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !24
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !26
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !28
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !30
@.panic_msg.14 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.15 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.func.16 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.17 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.18 = internal constant [10 x i8] c"next_long\00", align 1
@.panic_msg.19 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.20 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.21 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.22 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.23 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.24 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.func.27 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.28 = internal constant [9 x i8] c"next_int\00", align 1
@.func.29 = internal constant [11 x i8] c"next_short\00", align 1
@.func.30 = internal constant [10 x i8] c"next_byte\00", align 1
@.str.31 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.34 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !32
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !35
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !37
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !39
@.file.43 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.45 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.46 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.47 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.49 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.50 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.52 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.53 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.55 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.60 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !41
@std.math.random.ODD_PHI64.61 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !44
@std.math.random.ODD_PHI32.62 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !46
@std.math.random.ODD_PHI16.63 = internal unnamed_addr constant i16 -25033, align 2, !dbg !48
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !50
@.file.64 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.panic_msg.65 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.66 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.str.67 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.69 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.70 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.73 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.75 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.76 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.77 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.78 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.79 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.80 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.89 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !53
@std.math.random.ODD_PHI64.90 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !56
@std.math.random.ODD_PHI32.91 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !58
@std.math.random.ODD_PHI16.92 = internal unnamed_addr constant i16 -25033, align 2, !dbg !60
@std.math.random.MUL_LCG128.93 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !62
@std.math.random.MUL_LCG64.94 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !64
@std.math.random.MUL_LCG32.95 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !66
@std.math.random.MUL_LCG16.96 = internal unnamed_addr constant i16 -28323, align 2, !dbg !68
@.file.97 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !70
@.str.98 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.100 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !73
@.str.101 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.103 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !75
@.str.104 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.105 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.106 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !77
@.str.107 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.109 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.112 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !79
@std.math.random.MUL_MCG64.113 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !82
@std.math.random.MUL_LCG64.114 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !84
@std.core.mem.allocator.thread_temp_allocator = external thread_local global ptr, align 8
@.panic_msg.115 = internal constant [49 x i8] c"Dereference of null pointer, 'current' was null.\00", align 1
@.file.116 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.117 = internal constant [7 x i8] c"seeder\00", align 1
@.file.118 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.panic_msg.119 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.120 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.121 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.122 = internal constant [64 x i8] c"Dereference of null pointer, 'char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.123 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !86
@.str.124 = private unnamed_addr constant [9 x i8] c"15:48:11\00", align 1
@.func.125 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@std.math.random.ODD_PHI128.130 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !88
@std.math.random.ODD_PHI64.131 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !90
@std.math.random.ODD_PHI32.132 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !92
@std.math.random.ODD_PHI16.133 = internal unnamed_addr constant i16 -25033, align 2, !dbg !94
@std.math.random.ODD_PHI8.134 = internal unnamed_addr constant i8 -97, align 1, !dbg !96
@.file.135 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.136 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.138 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.139 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.140 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.141 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.142 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.143 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.144 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.145 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.146 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.148 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.149 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.150 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.151 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.152 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !98
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !102
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !104
@.file.155 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.156 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.157 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.158 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.srand(i64 %0) #0 comdat !dbg !111 {
entry:
  %seed = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  store i64 %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !115, metadata !DIExpression()), !dbg !116
  store ptr %seed, ptr %value, align 8
  %1 = load ptr, ptr %value, align 8, !dbg !117
  store ptr %1, ptr %taddr, align 8
  %2 = load ptr, ptr %taddr, align 8
  %3 = insertvalue %"char[]" undef, ptr %2, 0
  %4 = insertvalue %"char[]" %3, i64 8, 1
  store %"char[]" %4, ptr %indirectarg, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, ptr align 8 %indirectarg), !dbg !121
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !122
  ret void, !dbg !122
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !123 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %random5 = alloca ptr, align 8
  %range6 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
  call void @llvm.dbg.declare(metadata ptr %range, metadata !126, metadata !DIExpression()), !dbg !127
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !128
  %2 = trunc i8 %1 to i1, !dbg !128
  %not = xor i1 %2, true, !dbg !128
  br i1 %not, label %if.then, label %if.exit, !dbg !128

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !131

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg3, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 24), !dbg !133
  unreachable, !dbg !133

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !138
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !138
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !138
  %7 = load ptr, ptr %random, align 8, !dbg !138
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr align 8 %indirectarg4), !dbg !139
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !140
  br label %if.exit, !dbg !140

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random5, align 8
  %8 = load i32, ptr %range, align 4
  store i32 %8, ptr %range6, align 4
  %9 = load ptr, ptr %random5, align 8
  store ptr %9, ptr %random7, align 8
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !141

assert_fail8:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 34), !dbg !143
  unreachable, !dbg !143

assert_ok12:                                      ; preds = %if.exit
  %11 = load i32, ptr %range6, align 4, !dbg !147
  %lt = icmp ult i32 0, %11, !dbg !147
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !147

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 35), !dbg !147
  unreachable, !dbg !147

assert_ok17:                                      ; preds = %assert_ok12
  %13 = load i32, ptr %range6, align 4, !dbg !148
  %eq = icmp eq i32 1, %13, !dbg !148
  br i1 %eq, label %if.then18, label %if.exit19, !dbg !148

if.then18:                                        ; preds = %assert_ok17
  store i32 0, ptr %blockret, align 4, !dbg !149
  br label %expr_block.exit, !dbg !149

if.exit19:                                        ; preds = %assert_ok17
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !150, metadata !DIExpression()), !dbg !151
  store i32 -1, ptr %mask, align 4, !dbg !152
  %14 = load i32, ptr %range6, align 4, !dbg !153
  %sub = sub i32 %14, 1, !dbg !153
  store i32 %sub, ptr %range6, align 4, !dbg !153
  %15 = load i32, ptr %mask, align 4, !dbg !154
  %16 = load i32, ptr %range6, align 4
  store i32 %16, ptr %self, align 4
  %17 = load i32, ptr %self, align 4, !dbg !155
  %18 = call i32 @llvm.ctlz.i32(i32 %17, i1 false), !dbg !155
  %shift_exceeds = icmp uge i32 %18, 32, !dbg !154
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !154
  br i1 %19, label %panic, label %checkok, !dbg !154

checkok:                                          ; preds = %if.exit19
  %lshr = lshr i32 %15, %18, !dbg !154
  %20 = freeze i32 %lshr, !dbg !154
  store i32 %20, ptr %mask, align 4, !dbg !154
  call void @llvm.dbg.declare(metadata ptr %x, metadata !159, metadata !DIExpression()), !dbg !160
  br label %loop.body, !dbg !161

loop.cond:                                        ; preds = %loop.body
  %21 = load i32, ptr %x, align 4, !dbg !162
  %22 = load i32, ptr %range6, align 4, !dbg !164
  %gt = icmp ugt i32 %21, %22, !dbg !162
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !162

loop.body:                                        ; preds = %loop.cond, %checkok
  %23 = load ptr, ptr %random5, align 8, !dbg !165
  %24 = call i32 @std.math.random.Sfc64Random.next_int(ptr %23), !dbg !165
  %25 = load i32, ptr %mask, align 4, !dbg !167
  %and = and i32 %24, %25, !dbg !165
  store i32 %and, ptr %x, align 4, !dbg !165
  br label %loop.cond, !dbg !165

loop.exit:                                        ; preds = %loop.cond
  %26 = load i32, ptr %x, align 4, !dbg !168
  store i32 %26, ptr %blockret, align 4, !dbg !168
  br label %expr_block.exit, !dbg !168

expr_block.exit:                                  ; preds = %loop.exit, %if.then18
  %27 = load i32, ptr %blockret, align 4, !dbg !168
  ret i32 %27, !dbg !168

panic:                                            ; preds = %if.exit19
  store i32 %18, ptr %taddr, align 4
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg22, align 8
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 42, ptr align 8 %indirectarg23), !dbg !154
  unreachable, !dbg !154
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !169 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %random = alloca ptr, align 8
  %random3 = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg9 = alloca %"char[]", align 8
  %random10 = alloca ptr, align 8
  %min11 = alloca i32, align 4
  %max12 = alloca i32, align 4
  %random13 = alloca ptr, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %random25 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random26 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
  call void @llvm.dbg.declare(metadata ptr %min, metadata !172, metadata !DIExpression()), !dbg !173
  store i32 %1, ptr %max, align 4
  call void @llvm.dbg.declare(metadata ptr %max, metadata !174, metadata !DIExpression()), !dbg !175
  %2 = load i32, ptr %max, align 4, !dbg !176
  %3 = load i32, ptr %min, align 4, !dbg !178
  %ge = icmp sge i32 %2, %3, !dbg !176
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !176

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88), !dbg !176
  unreachable, !dbg !176

assert_ok:                                        ; preds = %entry
  %5 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !179
  %6 = trunc i8 %5 to i1, !dbg !179
  %not = xor i1 %6, true, !dbg !179
  br i1 %not, label %if.then, label %if.exit, !dbg !179

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %7 = load ptr, ptr %random, align 8
  store ptr %7, ptr %random3, align 8
  br i1 true, label %assert_ok8, label %assert_fail4, !dbg !182

assert_fail4:                                     ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg7, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 24), !dbg !184
  unreachable, !dbg !184

assert_ok8:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !189
  %9 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !189
  %10 = insertvalue %"char[]" %9, i64 32, 1, !dbg !189
  %11 = load ptr, ptr %random, align 8, !dbg !189
  store %"char[]" %10, ptr %indirectarg9, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %11, ptr align 8 %indirectarg9), !dbg !190
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !191
  br label %if.exit, !dbg !191

if.exit:                                          ; preds = %assert_ok8, %assert_ok
  store ptr @std.math.random.default_random, ptr %random10, align 8
  %12 = load i32, ptr %min, align 4
  store i32 %12, ptr %min11, align 4
  %13 = load i32, ptr %max, align 4
  store i32 %13, ptr %max12, align 4
  %14 = load ptr, ptr %random10, align 8
  store ptr %14, ptr %random13, align 8
  br i1 true, label %assert_ok18, label %assert_fail14, !dbg !192

assert_fail14:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg17, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 55), !dbg !194
  unreachable, !dbg !194

assert_ok18:                                      ; preds = %if.exit
  %16 = load i32, ptr %max12, align 4, !dbg !198
  %17 = load i32, ptr %min11, align 4, !dbg !199
  %ge19 = icmp sge i32 %16, %17, !dbg !198
  br i1 %ge19, label %assert_ok24, label %assert_fail20, !dbg !198

assert_fail20:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg23, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 56), !dbg !198
  unreachable, !dbg !198

assert_ok24:                                      ; preds = %assert_ok18
  %19 = load ptr, ptr %random10, align 8
  store ptr %19, ptr %random25, align 8
  %20 = load i32, ptr %max12, align 4, !dbg !200
  %21 = load i32, ptr %min11, align 4, !dbg !201
  %sub = sub i32 %20, %21, !dbg !200
  %add = add i32 %sub, 1, !dbg !200
  store i32 %add, ptr %range, align 4
  %22 = load ptr, ptr %random25, align 8
  store ptr %22, ptr %random26, align 8
  br i1 true, label %assert_ok31, label %assert_fail27, !dbg !202

assert_fail27:                                    ; preds = %assert_ok24
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg30, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 34), !dbg !204
  unreachable, !dbg !204

assert_ok31:                                      ; preds = %assert_ok24
  %24 = load i32, ptr %range, align 4, !dbg !208
  %lt = icmp ult i32 0, %24, !dbg !208
  br i1 %lt, label %assert_ok36, label %assert_fail32, !dbg !208

assert_fail32:                                    ; preds = %assert_ok31
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg35, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 35), !dbg !208
  unreachable, !dbg !208

assert_ok36:                                      ; preds = %assert_ok31
  %26 = load i32, ptr %range, align 4, !dbg !209
  %eq = icmp eq i32 1, %26, !dbg !209
  br i1 %eq, label %if.then37, label %if.exit38, !dbg !209

if.then37:                                        ; preds = %assert_ok36
  store i32 0, ptr %blockret, align 4, !dbg !210
  br label %expr_block.exit, !dbg !210

if.exit38:                                        ; preds = %assert_ok36
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !211, metadata !DIExpression()), !dbg !212
  store i32 -1, ptr %mask, align 4, !dbg !213
  %27 = load i32, ptr %range, align 4, !dbg !214
  %sub39 = sub i32 %27, 1, !dbg !214
  store i32 %sub39, ptr %range, align 4, !dbg !214
  %28 = load i32, ptr %mask, align 4, !dbg !215
  %29 = load i32, ptr %range, align 4
  store i32 %29, ptr %self, align 4
  %30 = load i32, ptr %self, align 4, !dbg !216
  %31 = call i32 @llvm.ctlz.i32(i32 %30, i1 false), !dbg !216
  %shift_exceeds = icmp uge i32 %31, 32, !dbg !215
  %32 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !215
  br i1 %32, label %panic, label %checkok, !dbg !215

checkok:                                          ; preds = %if.exit38
  %lshr = lshr i32 %28, %31, !dbg !215
  %33 = freeze i32 %lshr, !dbg !215
  store i32 %33, ptr %mask, align 4, !dbg !215
  call void @llvm.dbg.declare(metadata ptr %x, metadata !219, metadata !DIExpression()), !dbg !220
  br label %loop.body, !dbg !221

loop.cond:                                        ; preds = %loop.body
  %34 = load i32, ptr %x, align 4, !dbg !222
  %35 = load i32, ptr %range, align 4, !dbg !224
  %gt = icmp ugt i32 %34, %35, !dbg !222
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !222

loop.body:                                        ; preds = %loop.cond, %checkok
  %36 = load ptr, ptr %random25, align 8, !dbg !225
  %37 = call i32 @std.math.random.Sfc64Random.next_int(ptr %36), !dbg !225
  %38 = load i32, ptr %mask, align 4, !dbg !227
  %and = and i32 %37, %38, !dbg !225
  store i32 %and, ptr %x, align 4, !dbg !225
  br label %loop.cond, !dbg !225

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %x, align 4, !dbg !228
  store i32 %39, ptr %blockret, align 4, !dbg !228
  br label %expr_block.exit, !dbg !228

expr_block.exit:                                  ; preds = %loop.exit, %if.then37
  %40 = load i32, ptr %blockret, align 4, !dbg !228
  %41 = load i32, ptr %min11, align 4, !dbg !229
  %add44 = add i32 %40, %41, !dbg !207
  ret i32 %add44, !dbg !207

panic:                                            ; preds = %if.exit38
  store i32 %31, ptr %taddr, align 4
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg42, align 8
  store %any %43, ptr %varargslots, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 42, ptr align 8 %indirectarg43), !dbg !215
  unreachable, !dbg !215
}

; Function Attrs: nounwind ssp uwtable
define weak double @std.math.random.rnd() #0 comdat !dbg !230 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !234
  %1 = trunc i8 %0 to i1, !dbg !234
  %not = xor i1 %1, true, !dbg !234
  br i1 %not, label %if.then, label %if.exit, !dbg !234

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !237

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.6, i64 3 }, ptr %indirectarg3, align 8
  %3 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %3(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 24), !dbg !239
  unreachable, !dbg !239

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !244
  %4 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !244
  %5 = insertvalue %"char[]" %4, i64 32, 1, !dbg !244
  %6 = load ptr, ptr %random, align 8, !dbg !244
  store %"char[]" %5, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %6, ptr align 8 %indirectarg4), !dbg !245
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !246
  br label %if.exit, !dbg !246

if.exit:                                          ; preds = %assert_ok, %entry
  call void @llvm.dbg.declare(metadata ptr %val, metadata !247, metadata !DIExpression()), !dbg !248
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !249
  %and = and i64 %7, 9007199254740991, !dbg !249
  store i64 %and, ptr %val, align 8, !dbg !249
  %8 = load i64, ptr %val, align 8, !dbg !250
  %uifp = uitofp i64 %8 to double, !dbg !250
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !250
  ret double %fmul, !dbg !250
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !251 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !262
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !262
  br i1 %3, label %panic, label %checkok, !dbg !262

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !263, metadata !DIExpression()), !dbg !264
  call void @llvm.dbg.declare(metadata ptr %1, metadata !265, metadata !DIExpression()), !dbg !266
  %4 = load ptr, ptr %self, align 8, !dbg !267
  %checknull = icmp eq ptr %4, null, !dbg !267
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !267
  br i1 %5, label %panic3, label %checkok7, !dbg !267

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !268, metadata !DIExpression()), !dbg !270
  store i128 0, ptr %return_value, align 16, !dbg !270
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !272
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !275
  %10 = load i128, ptr %return_value, align 16, !dbg !276
  store i128 %10, ptr %4, align 16, !dbg !276
  ret void, !dbg !276

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18), !dbg !264
  unreachable, !dbg !264

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 20), !dbg !267
  unreachable, !dbg !267
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !277 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !280
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !280
  br i1 %2, label %panic, label %checkok, !dbg !280

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !281, metadata !DIExpression()), !dbg !282
  call void @llvm.dbg.declare(metadata ptr %s, metadata !283, metadata !DIExpression()), !dbg !285
  %3 = load ptr, ptr %self, align 8, !dbg !286
  store ptr %3, ptr %s, align 8, !dbg !286
  call void @llvm.dbg.declare(metadata ptr %result, metadata !287, metadata !DIExpression()), !dbg !288
  %4 = load ptr, ptr %s, align 8, !dbg !289
  %checknull = icmp eq ptr %4, null, !dbg !289
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !289
  br i1 %5, label %panic3, label %checkok7, !dbg !289

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !289
  %lshr = lshr i128 %6, 64, !dbg !290
  %7 = freeze i128 %lshr, !dbg !290
  %trunc = trunc i128 %7 to i64, !dbg !290
  store i64 %trunc, ptr %result, align 8, !dbg !290
  %8 = load ptr, ptr %s, align 8, !dbg !291
  %checknull8 = icmp eq ptr %8, null, !dbg !291
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !291
  br i1 %9, label %panic9, label %checkok13, !dbg !291

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !292
  %checknull14 = icmp eq ptr %10, null, !dbg !292
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !292
  br i1 %11, label %panic15, label %checkok19, !dbg !292

checkok19:                                        ; preds = %checkok13
  %12 = load i128, ptr %10, align 16, !dbg !292
  %mul = mul i128 %12, -48899967401452674293065485854872568811, !dbg !293
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !293
  store i128 %add, ptr %8, align 16, !dbg !293
  %13 = load i64, ptr %result, align 8, !dbg !294
  ret i64 %13, !dbg !294

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 24), !dbg !282
  unreachable, !dbg !282

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 27), !dbg !289
  unreachable, !dbg !289

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 28), !dbg !291
  unreachable, !dbg !291

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 28), !dbg !292
  unreachable, !dbg !292
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !295 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !296
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !296
  br i1 %3, label %panic, label %checkok, !dbg !296

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !297, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata ptr %1, metadata !299, metadata !DIExpression()), !dbg !300
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !301
  %4 = load i64, ptr %ptradd, align 8, !dbg !301
  %lt = icmp ult i64 0, %4, !dbg !301
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !301

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 33), !dbg !301
  unreachable, !dbg !301

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !303, metadata !DIExpression()), !dbg !305
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !306
  %6 = load i64, ptr %ptradd6, align 8, !dbg !306
  store i64 %6, ptr %len, align 8, !dbg !306
  br label %loop.cond, !dbg !307

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !308
  %lt7 = icmp ult i64 0, %7, !dbg !308
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !308

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !310, metadata !DIExpression()), !dbg !312
  %8 = load ptr, ptr %self, align 8, !dbg !313
  %9 = call i64 @std.math.random.Lcg128Random.next_long(ptr %8), !dbg !314
  store i64 %9, ptr %value, align 8, !dbg !314
  %10 = load i64, ptr %len, align 8, !dbg !315
  %le = icmp ule i64 %10, 8, !dbg !315
  br i1 %le, label %if.then, label %if.exit, !dbg !315

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !316
  %add = add i64 0, %12, !dbg !316
  %size = sub i64 %add, 0, !dbg !316
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !316
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !316
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !318
  %16 = extractvalue %"char[]" %15, 0, !dbg !318
  %17 = extractvalue %"char[]" %15, 1, !dbg !319
  %gt = icmp ugt i64 0, %17, !dbg !319
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !319
  br i1 %18, label %panic8, label %checkok16, !dbg !319

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !318
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !318
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !318
  %21 = extractvalue %"char[]" %20, 0, !dbg !318
  %22 = extractvalue %"char[]" %14, 0, !dbg !318
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !318
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !318
  br label %expr_block.exit, !dbg !320

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !321
  %31 = extractvalue %"char[]" %30, 0, !dbg !321
  %32 = extractvalue %"char[]" %30, 1, !dbg !321
  %gt34 = icmp sgt i64 0, %32, !dbg !321
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !321
  br i1 %33, label %panic35, label %checkok45, !dbg !321

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !321
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !321
  br i1 %34, label %panic47, label %checkok57, !dbg !321

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !321
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !321
  %37 = extractvalue %"char[]" %36, 0, !dbg !321
  %38 = extractvalue %"char[]" %29, 0, !dbg !321
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !321
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !321
  %43 = load i64, ptr %len, align 8, !dbg !322
  %sub = sub i64 %43, 8, !dbg !322
  store i64 %sub, ptr %len, align 8, !dbg !322
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !323
  %45 = extractvalue %"char[]" %44, 0, !dbg !323
  %46 = extractvalue %"char[]" %44, 1, !dbg !324
  %gt74 = icmp ugt i64 8, %46, !dbg !324
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !324
  br i1 %47, label %panic75, label %checkok85, !dbg !324

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !323
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !323
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !323
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !323
  store %"char[]" %49, ptr %bytes, align 8, !dbg !323
  br label %loop.cond, !dbg !323

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.25, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.26, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 35, ptr align 8 %indirectarg91), !dbg !325
  unreachable, !dbg !328

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !328

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !298
  unreachable, !dbg !298

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !318
  unreachable, !dbg !318

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !318
  unreachable, !dbg !318

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !321
  unreachable, !dbg !321

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !321
  unreachable, !dbg !321

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !321
  unreachable, !dbg !321

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !323
  unreachable, !dbg !323
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !329 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !332
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !332
  br i1 %2, label %panic, label %checkok, !dbg !332

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !333, metadata !DIExpression()), !dbg !334
  %3 = load ptr, ptr %self, align 8, !dbg !335
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !337
  %zext = zext i64 %4 to i128, !dbg !337
  %shl = shl i128 %zext, 64, !dbg !337
  %5 = freeze i128 %shl, !dbg !337
  %6 = load ptr, ptr %self, align 8, !dbg !335
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !338
  %zext3 = zext i64 %7 to i128, !dbg !338
  %add = add i128 %5, %zext3, !dbg !337
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !334
  unreachable, !dbg !334
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !339 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !342
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !342
  br i1 %2, label %panic, label %checkok, !dbg !342

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !343, metadata !DIExpression()), !dbg !344
  %3 = load ptr, ptr %self, align 8, !dbg !345
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !346
  %trunc = trunc i64 %4 to i32, !dbg !346
  ret i32 %trunc, !dbg !346

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37), !dbg !344
  unreachable, !dbg !344
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !347 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !350
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !350
  br i1 %2, label %panic, label %checkok, !dbg !350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !351, metadata !DIExpression()), !dbg !352
  %3 = load ptr, ptr %self, align 8, !dbg !353
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !354
  %trunc = trunc i64 %4 to i16, !dbg !354
  ret i16 %trunc, !dbg !354

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38), !dbg !352
  unreachable, !dbg !352
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !355 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !358
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !358
  br i1 %2, label %panic, label %checkok, !dbg !358

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !359, metadata !DIExpression()), !dbg !360
  %3 = load ptr, ptr %self, align 8, !dbg !361
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !362
  %trunc = trunc i64 %4 to i8, !dbg !362
  ret i8 %trunc, !dbg !362

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !360
  unreachable, !dbg !360
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !363 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !368
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !368
  br i1 %3, label %panic, label %checkok, !dbg !368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !369, metadata !DIExpression()), !dbg !370
  call void @llvm.dbg.declare(metadata ptr %1, metadata !371, metadata !DIExpression()), !dbg !372
  %4 = load ptr, ptr %self, align 8, !dbg !373
  %checknull = icmp eq ptr %4, null, !dbg !373
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !373
  br i1 %5, label %panic3, label %checkok7, !dbg !373

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !374, metadata !DIExpression()), !dbg !376
  store i64 0, ptr %return_value, align 8, !dbg !376
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !378
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !381
  %10 = load i64, ptr %return_value, align 8, !dbg !382
  store i64 %10, ptr %4, align 8, !dbg !382
  ret void, !dbg !382

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !370
  unreachable, !dbg !370

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !373
  unreachable, !dbg !373
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !383 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !386
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !386
  br i1 %2, label %panic, label %checkok, !dbg !386

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !387, metadata !DIExpression()), !dbg !388
  call void @llvm.dbg.declare(metadata ptr %s, metadata !389, metadata !DIExpression()), !dbg !391
  %3 = load ptr, ptr %self, align 8, !dbg !392
  store ptr %3, ptr %s, align 8, !dbg !392
  call void @llvm.dbg.declare(metadata ptr %result, metadata !393, metadata !DIExpression()), !dbg !394
  %4 = load ptr, ptr %s, align 8, !dbg !395
  %checknull = icmp eq ptr %4, null, !dbg !395
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !395
  br i1 %5, label %panic3, label %checkok7, !dbg !395

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !395
  %lshr = lshr i64 %6, 32, !dbg !396
  %7 = freeze i64 %lshr, !dbg !396
  %trunc = trunc i64 %7 to i32, !dbg !396
  store i32 %trunc, ptr %result, align 4, !dbg !396
  %8 = load ptr, ptr %s, align 8, !dbg !397
  %checknull8 = icmp eq ptr %8, null, !dbg !397
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !397
  br i1 %9, label %panic9, label %checkok13, !dbg !397

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !398
  %checknull14 = icmp eq ptr %10, null, !dbg !398
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !398
  br i1 %11, label %panic15, label %checkok19, !dbg !398

checkok19:                                        ; preds = %checkok13
  %12 = load i64, ptr %10, align 8, !dbg !398
  %mul = mul i64 %12, -3372029247567499371, !dbg !399
  %add = add i64 %mul, -7046029254386353131, !dbg !399
  store i64 %add, ptr %8, align 8, !dbg !399
  %13 = load i32, ptr %result, align 4, !dbg !400
  ret i32 %13, !dbg !400

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 51), !dbg !388
  unreachable, !dbg !388

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 54), !dbg !395
  unreachable, !dbg !395

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 55), !dbg !397
  unreachable, !dbg !397

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 55), !dbg !398
  unreachable, !dbg !398
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !401 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !402
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !402
  br i1 %3, label %panic, label %checkok, !dbg !402

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !403, metadata !DIExpression()), !dbg !404
  call void @llvm.dbg.declare(metadata ptr %1, metadata !405, metadata !DIExpression()), !dbg !406
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !407
  %4 = load i64, ptr %ptradd, align 8, !dbg !407
  %lt = icmp ult i64 0, %4, !dbg !407
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !407

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 60), !dbg !407
  unreachable, !dbg !407

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !409, metadata !DIExpression()), !dbg !411
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !412
  %6 = load i64, ptr %ptradd6, align 8, !dbg !412
  store i64 %6, ptr %len, align 8, !dbg !412
  br label %loop.cond, !dbg !413

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !414
  %lt7 = icmp ult i64 0, %7, !dbg !414
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !414

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !416, metadata !DIExpression()), !dbg !418
  %8 = load ptr, ptr %self, align 8, !dbg !419
  %9 = call i32 @std.math.random.Lcg64Random.next_int(ptr %8), !dbg !420
  store i32 %9, ptr %value, align 4, !dbg !420
  %10 = load i64, ptr %len, align 8, !dbg !421
  %le = icmp ule i64 %10, 4, !dbg !421
  br i1 %le, label %if.then, label %if.exit, !dbg !421

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !422
  %add = add i64 0, %12, !dbg !422
  %size = sub i64 %add, 0, !dbg !422
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !422
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !422
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !424
  %16 = extractvalue %"char[]" %15, 0, !dbg !424
  %17 = extractvalue %"char[]" %15, 1, !dbg !425
  %gt = icmp ugt i64 0, %17, !dbg !425
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !425
  br i1 %18, label %panic8, label %checkok16, !dbg !425

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !424
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !424
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !424
  %21 = extractvalue %"char[]" %20, 0, !dbg !424
  %22 = extractvalue %"char[]" %14, 0, !dbg !424
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !424
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !424
  br label %expr_block.exit, !dbg !426

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !427
  %31 = extractvalue %"char[]" %30, 0, !dbg !427
  %32 = extractvalue %"char[]" %30, 1, !dbg !427
  %gt34 = icmp sgt i64 0, %32, !dbg !427
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !427
  br i1 %33, label %panic35, label %checkok45, !dbg !427

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !427
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !427
  br i1 %34, label %panic47, label %checkok57, !dbg !427

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !427
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !427
  %37 = extractvalue %"char[]" %36, 0, !dbg !427
  %38 = extractvalue %"char[]" %29, 0, !dbg !427
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !427
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !427
  %43 = load i64, ptr %len, align 8, !dbg !428
  %sub = sub i64 %43, 4, !dbg !428
  store i64 %sub, ptr %len, align 8, !dbg !428
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !429
  %45 = extractvalue %"char[]" %44, 0, !dbg !429
  %46 = extractvalue %"char[]" %44, 1, !dbg !430
  %gt74 = icmp ugt i64 4, %46, !dbg !430
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !430
  br i1 %47, label %panic75, label %checkok85, !dbg !430

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !429
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !429
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !429
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !429
  store %"char[]" %49, ptr %bytes, align 8, !dbg !429
  br label %loop.cond, !dbg !429

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.31, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.32, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.33, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 62, ptr align 8 %indirectarg91), !dbg !431
  unreachable, !dbg !434

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !434

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 62), !dbg !404
  unreachable, !dbg !404

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !424
  unreachable, !dbg !424

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !424
  unreachable, !dbg !424

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !427
  unreachable, !dbg !427

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !427
  unreachable, !dbg !427

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !427
  unreachable, !dbg !427

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !429
  unreachable, !dbg !429
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !435 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !438
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !438
  br i1 %2, label %panic, label %checkok, !dbg !438

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !439, metadata !DIExpression()), !dbg !440
  %3 = load ptr, ptr %self, align 8, !dbg !441
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !443
  %zext = zext i64 %4 to i128, !dbg !443
  %shl = shl i128 %zext, 64, !dbg !443
  %5 = freeze i128 %shl, !dbg !443
  %6 = load ptr, ptr %self, align 8, !dbg !441
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !444
  %zext3 = zext i64 %7 to i128, !dbg !444
  %add = add i128 %5, %zext3, !dbg !443
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 63), !dbg !440
  unreachable, !dbg !440
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !445 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !448
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !448
  br i1 %2, label %panic, label %checkok, !dbg !448

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !449, metadata !DIExpression()), !dbg !450
  %3 = load ptr, ptr %self, align 8, !dbg !451
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !453
  %zext = zext i32 %4 to i64, !dbg !453
  %shl = shl i64 %zext, 32, !dbg !453
  %5 = freeze i64 %shl, !dbg !453
  %6 = load ptr, ptr %self, align 8, !dbg !451
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !454
  %zext3 = zext i32 %7 to i64, !dbg !454
  %add = add i64 %5, %zext3, !dbg !453
  ret i64 %add, !dbg !453

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64), !dbg !450
  unreachable, !dbg !450
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !455 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !458
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !458
  br i1 %2, label %panic, label %checkok, !dbg !458

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !459, metadata !DIExpression()), !dbg !460
  %3 = load ptr, ptr %self, align 8, !dbg !461
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !462
  %trunc = trunc i32 %4 to i16, !dbg !462
  ret i16 %trunc, !dbg !462

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !460
  unreachable, !dbg !460
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !463 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !466
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !466
  br i1 %2, label %panic, label %checkok, !dbg !466

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !467, metadata !DIExpression()), !dbg !468
  %3 = load ptr, ptr %self, align 8, !dbg !469
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !470
  %trunc = trunc i32 %4 to i8, !dbg !470
  ret i8 %trunc, !dbg !470

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !468
  unreachable, !dbg !468
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !471 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !476
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !476
  br i1 %3, label %panic, label %checkok, !dbg !476

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !477, metadata !DIExpression()), !dbg !478
  call void @llvm.dbg.declare(metadata ptr %1, metadata !479, metadata !DIExpression()), !dbg !480
  %4 = load ptr, ptr %self, align 8, !dbg !481
  %checknull = icmp eq ptr %4, null, !dbg !481
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !481
  br i1 %5, label %panic3, label %checkok7, !dbg !481

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !482, metadata !DIExpression()), !dbg !484
  store i32 0, ptr %return_value, align 4, !dbg !484
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !486
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !489
  %10 = load i32, ptr %return_value, align 4, !dbg !490
  store i32 %10, ptr %4, align 4, !dbg !490
  ret void, !dbg !490

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 72), !dbg !478
  unreachable, !dbg !478

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 74), !dbg !481
  unreachable, !dbg !481
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !491 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !494
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !494
  br i1 %2, label %panic, label %checkok, !dbg !494

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !495, metadata !DIExpression()), !dbg !496
  call void @llvm.dbg.declare(metadata ptr %s, metadata !497, metadata !DIExpression()), !dbg !499
  %3 = load ptr, ptr %self, align 8, !dbg !500
  store ptr %3, ptr %s, align 8, !dbg !500
  call void @llvm.dbg.declare(metadata ptr %result, metadata !501, metadata !DIExpression()), !dbg !502
  %4 = load ptr, ptr %s, align 8, !dbg !503
  %checknull = icmp eq ptr %4, null, !dbg !503
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !503
  br i1 %5, label %panic3, label %checkok7, !dbg !503

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !503
  %lshr = lshr i32 %6, 16, !dbg !504
  %7 = freeze i32 %lshr, !dbg !504
  %trunc = trunc i32 %7 to i16, !dbg !504
  store i16 %trunc, ptr %result, align 2, !dbg !504
  %8 = load ptr, ptr %s, align 8, !dbg !505
  %checknull8 = icmp eq ptr %8, null, !dbg !505
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !505
  br i1 %9, label %panic9, label %checkok13, !dbg !505

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !506
  %checknull14 = icmp eq ptr %10, null, !dbg !506
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !506
  br i1 %11, label %panic15, label %checkok19, !dbg !506

checkok19:                                        ; preds = %checkok13
  %12 = load i32, ptr %10, align 4, !dbg !506
  %mul = mul i32 %12, -1856014347, !dbg !507
  %add = add i32 %mul, -1640531527, !dbg !507
  store i32 %add, ptr %8, align 4, !dbg !507
  %13 = load i16, ptr %result, align 2, !dbg !508
  ret i16 %13, !dbg !508

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 77), !dbg !496
  unreachable, !dbg !496

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 80), !dbg !503
  unreachable, !dbg !503

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 81), !dbg !505
  unreachable, !dbg !505

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 81), !dbg !506
  unreachable, !dbg !506
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !509 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !510
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !510
  br i1 %3, label %panic, label %checkok, !dbg !510

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !511, metadata !DIExpression()), !dbg !512
  call void @llvm.dbg.declare(metadata ptr %1, metadata !513, metadata !DIExpression()), !dbg !514
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !515, metadata !DIExpression()), !dbg !517
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !518
  %4 = load i64, ptr %ptradd, align 8, !dbg !518
  store i64 %4, ptr %len, align 8, !dbg !518
  br label %loop.cond, !dbg !519

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !520
  %lt = icmp ult i64 0, %5, !dbg !520
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !520

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !522, metadata !DIExpression()), !dbg !524
  %6 = load ptr, ptr %self, align 8, !dbg !525
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !526
  store i16 %7, ptr %value, align 2, !dbg !526
  %8 = load i64, ptr %len, align 8, !dbg !527
  %le = icmp ule i64 %8, 2, !dbg !527
  br i1 %le, label %if.then, label %if.exit, !dbg !527

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !528
  %add = add i64 0, %10, !dbg !528
  %size = sub i64 %add, 0, !dbg !528
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !528
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !528
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !530
  %14 = extractvalue %"char[]" %13, 0, !dbg !530
  %15 = extractvalue %"char[]" %13, 1, !dbg !531
  %gt = icmp ugt i64 0, %15, !dbg !531
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !531
  br i1 %16, label %panic3, label %checkok11, !dbg !531

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !530
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !530
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !530
  %19 = extractvalue %"char[]" %18, 0, !dbg !530
  %20 = extractvalue %"char[]" %12, 0, !dbg !530
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !530
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !530
  br label %expr_block.exit, !dbg !532

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 2, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !533
  %29 = extractvalue %"char[]" %28, 0, !dbg !533
  %30 = extractvalue %"char[]" %28, 1, !dbg !533
  %gt29 = icmp sgt i64 0, %30, !dbg !533
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !533
  br i1 %31, label %panic30, label %checkok40, !dbg !533

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 2, !dbg !533
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !533
  br i1 %32, label %panic42, label %checkok52, !dbg !533

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !533
  %34 = insertvalue %"char[]" %33, i64 2, 1, !dbg !533
  %35 = extractvalue %"char[]" %34, 0, !dbg !533
  %36 = extractvalue %"char[]" %27, 0, !dbg !533
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !533
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !533
  %41 = load i64, ptr %len, align 8, !dbg !534
  %sub = sub i64 %41, 2, !dbg !534
  store i64 %sub, ptr %len, align 8, !dbg !534
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !535
  %43 = extractvalue %"char[]" %42, 0, !dbg !535
  %44 = extractvalue %"char[]" %42, 1, !dbg !536
  %gt69 = icmp ugt i64 2, %44, !dbg !536
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !536
  br i1 %45, label %panic70, label %checkok80, !dbg !536

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 2, !dbg !535
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 2, !dbg !535
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !535
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !535
  store %"char[]" %47, ptr %bytes, align 8, !dbg !535
  br label %loop.cond, !dbg !535

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.34, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.35, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.36, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 85, ptr align 8 %indirectarg86), !dbg !537
  unreachable, !dbg !540

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !540

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 85), !dbg !512
  unreachable, !dbg !512

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !530
  unreachable, !dbg !530

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !530
  unreachable, !dbg !530

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !533
  unreachable, !dbg !533

panic42:                                          ; preds = %checkok40
  store i64 1, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !533
  unreachable, !dbg !533

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !533
  unreachable, !dbg !533

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !535
  unreachable, !dbg !535
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !541 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !544
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !544
  br i1 %2, label %panic, label %checkok, !dbg !544

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !545, metadata !DIExpression()), !dbg !546
  %3 = load ptr, ptr %self, align 8, !dbg !547
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !549
  %zext = zext i64 %4 to i128, !dbg !549
  %shl = shl i128 %zext, 64, !dbg !549
  %5 = freeze i128 %shl, !dbg !549
  %6 = load ptr, ptr %self, align 8, !dbg !547
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !550
  %zext3 = zext i64 %7 to i128, !dbg !550
  %add = add i128 %5, %zext3, !dbg !549
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 86), !dbg !546
  unreachable, !dbg !546
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !551 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !554
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !554
  br i1 %2, label %panic, label %checkok, !dbg !554

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !555, metadata !DIExpression()), !dbg !556
  %3 = load ptr, ptr %self, align 8, !dbg !557
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !559
  %zext = zext i32 %4 to i64, !dbg !559
  %shl = shl i64 %zext, 32, !dbg !559
  %5 = freeze i64 %shl, !dbg !559
  %6 = load ptr, ptr %self, align 8, !dbg !557
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !560
  %zext3 = zext i32 %7 to i64, !dbg !560
  %add = add i64 %5, %zext3, !dbg !559
  ret i64 %add, !dbg !559

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 87), !dbg !556
  unreachable, !dbg !556
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !561 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !564
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !564
  br i1 %2, label %panic, label %checkok, !dbg !564

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !565, metadata !DIExpression()), !dbg !566
  %3 = load ptr, ptr %self, align 8, !dbg !567
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !569
  %zext = zext i16 %4 to i32, !dbg !569
  %shl = shl i32 %zext, 16, !dbg !569
  %5 = freeze i32 %shl, !dbg !569
  %6 = load ptr, ptr %self, align 8, !dbg !567
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !570
  %zext3 = zext i16 %7 to i32, !dbg !570
  %add = add i32 %5, %zext3, !dbg !569
  ret i32 %add, !dbg !569

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88), !dbg !566
  unreachable, !dbg !566
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !571 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !574
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !574
  br i1 %2, label %panic, label %checkok, !dbg !574

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !575, metadata !DIExpression()), !dbg !576
  %3 = load ptr, ptr %self, align 8, !dbg !577
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !578
  %trunc = trunc i16 %4 to i8, !dbg !578
  ret i8 %trunc, !dbg !578

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 89), !dbg !576
  unreachable, !dbg !576
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !579 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !584
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !584
  br i1 %3, label %panic, label %checkok, !dbg !584

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !585, metadata !DIExpression()), !dbg !586
  call void @llvm.dbg.declare(metadata ptr %1, metadata !587, metadata !DIExpression()), !dbg !588
  %4 = load ptr, ptr %self, align 8, !dbg !589
  %checknull = icmp eq ptr %4, null, !dbg !589
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !589
  br i1 %5, label %panic3, label %checkok7, !dbg !589

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !590, metadata !DIExpression()), !dbg !592
  store i16 0, ptr %return_value, align 2, !dbg !592
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !594
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !597
  %10 = load i16, ptr %return_value, align 2, !dbg !598
  store i16 %10, ptr %4, align 2, !dbg !598
  ret void, !dbg !598

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !586
  unreachable, !dbg !586

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 97), !dbg !589
  unreachable, !dbg !589
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !599 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !602
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !602
  br i1 %2, label %panic, label %checkok, !dbg !602

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !603, metadata !DIExpression()), !dbg !604
  call void @llvm.dbg.declare(metadata ptr %s, metadata !605, metadata !DIExpression()), !dbg !607
  %3 = load ptr, ptr %self, align 8, !dbg !608
  store ptr %3, ptr %s, align 8, !dbg !608
  call void @llvm.dbg.declare(metadata ptr %result, metadata !609, metadata !DIExpression()), !dbg !610
  %4 = load ptr, ptr %s, align 8, !dbg !611
  %checknull = icmp eq ptr %4, null, !dbg !611
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !611
  br i1 %5, label %panic3, label %checkok7, !dbg !611

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !611
  %zext = zext i16 %6 to i32, !dbg !611
  %lshr = lshr i32 %zext, 8, !dbg !612
  %7 = freeze i32 %lshr, !dbg !612
  %trunc = trunc i32 %7 to i8, !dbg !612
  store i8 %trunc, ptr %result, align 1, !dbg !612
  %8 = load ptr, ptr %s, align 8, !dbg !613
  %checknull8 = icmp eq ptr %8, null, !dbg !613
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !613
  br i1 %9, label %panic9, label %checkok13, !dbg !613

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !614
  %checknull14 = icmp eq ptr %10, null, !dbg !614
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !614
  br i1 %11, label %panic15, label %checkok19, !dbg !614

checkok19:                                        ; preds = %checkok13
  %12 = load i16, ptr %10, align 2, !dbg !614
  %zext20 = zext i16 %12 to i32, !dbg !614
  %mul = mul i32 %zext20, 37213, !dbg !615
  %add = add i32 %mul, 40503, !dbg !615
  %trunc21 = trunc i32 %add to i16, !dbg !615
  store i16 %trunc21, ptr %8, align 2, !dbg !615
  %13 = load i8, ptr %result, align 1, !dbg !616
  ret i8 %13, !dbg !616

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100), !dbg !604
  unreachable, !dbg !604

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 103), !dbg !611
  unreachable, !dbg !611

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 104), !dbg !613
  unreachable, !dbg !613

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 104), !dbg !614
  unreachable, !dbg !614
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !617 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !618
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !618
  br i1 %3, label %panic, label %checkok, !dbg !618

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !619, metadata !DIExpression()), !dbg !620
  call void @llvm.dbg.declare(metadata ptr %1, metadata !621, metadata !DIExpression()), !dbg !622
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !623, metadata !DIExpression()), !dbg !625
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !626
  %4 = load i64, ptr %ptradd, align 8, !dbg !626
  store i64 %4, ptr %len, align 8, !dbg !626
  br label %loop.cond, !dbg !627

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !628
  %lt = icmp ult i64 0, %5, !dbg !628
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !628

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !630, metadata !DIExpression()), !dbg !632
  %6 = load ptr, ptr %self, align 8, !dbg !633
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !634
  store i8 %7, ptr %value, align 1, !dbg !634
  %8 = load i64, ptr %len, align 8, !dbg !635
  %le = icmp ule i64 %8, 1, !dbg !635
  br i1 %le, label %if.then, label %if.exit, !dbg !635

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !636
  %add = add i64 0, %10, !dbg !636
  %size = sub i64 %add, 0, !dbg !636
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !636
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !636
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !638
  %14 = extractvalue %"char[]" %13, 0, !dbg !638
  %15 = extractvalue %"char[]" %13, 1, !dbg !639
  %gt = icmp ugt i64 0, %15, !dbg !639
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !639
  br i1 %16, label %panic3, label %checkok11, !dbg !639

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !638
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !638
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !638
  %19 = extractvalue %"char[]" %18, 0, !dbg !638
  %20 = extractvalue %"char[]" %12, 0, !dbg !638
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !638
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !638
  br label %expr_block.exit, !dbg !640

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !641
  %29 = extractvalue %"char[]" %28, 0, !dbg !641
  %30 = extractvalue %"char[]" %28, 1, !dbg !641
  %gt29 = icmp sgt i64 0, %30, !dbg !641
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !641
  br i1 %31, label %panic30, label %checkok40, !dbg !641

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !641
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !641
  br i1 %32, label %panic42, label %checkok52, !dbg !641

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !641
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !641
  %35 = extractvalue %"char[]" %34, 0, !dbg !641
  %36 = extractvalue %"char[]" %27, 0, !dbg !641
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !641
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !641
  %41 = load i64, ptr %len, align 8, !dbg !642
  %sub = sub i64 %41, 1, !dbg !642
  store i64 %sub, ptr %len, align 8, !dbg !642
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !643
  %43 = extractvalue %"char[]" %42, 0, !dbg !643
  %44 = extractvalue %"char[]" %42, 1, !dbg !644
  %gt69 = icmp ugt i64 1, %44, !dbg !644
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !644
  br i1 %45, label %panic70, label %checkok80, !dbg !644

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !643
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !643
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !643
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !643
  store %"char[]" %47, ptr %bytes, align 8, !dbg !643
  br label %loop.cond, !dbg !643

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.37, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.38, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.39, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 108, ptr align 8 %indirectarg86), !dbg !645
  unreachable, !dbg !648

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !648

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 108), !dbg !620
  unreachable, !dbg !620

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !638
  unreachable, !dbg !638

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !638
  unreachable, !dbg !638

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !641
  unreachable, !dbg !641

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !641
  unreachable, !dbg !641

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !641
  unreachable, !dbg !641

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !643
  unreachable, !dbg !643
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !649 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !652
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !652
  br i1 %2, label %panic, label %checkok, !dbg !652

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !653, metadata !DIExpression()), !dbg !654
  %3 = load ptr, ptr %self, align 8, !dbg !655
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !657
  %zext = zext i64 %4 to i128, !dbg !657
  %shl = shl i128 %zext, 64, !dbg !657
  %5 = freeze i128 %shl, !dbg !657
  %6 = load ptr, ptr %self, align 8, !dbg !655
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !658
  %zext3 = zext i64 %7 to i128, !dbg !658
  %add = add i128 %5, %zext3, !dbg !657
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109), !dbg !654
  unreachable, !dbg !654
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !659 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !662
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !662
  br i1 %2, label %panic, label %checkok, !dbg !662

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !663, metadata !DIExpression()), !dbg !664
  %3 = load ptr, ptr %self, align 8, !dbg !665
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !667
  %zext = zext i32 %4 to i64, !dbg !667
  %shl = shl i64 %zext, 32, !dbg !667
  %5 = freeze i64 %shl, !dbg !667
  %6 = load ptr, ptr %self, align 8, !dbg !665
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !668
  %zext3 = zext i32 %7 to i64, !dbg !668
  %add = add i64 %5, %zext3, !dbg !667
  ret i64 %add, !dbg !667

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 110), !dbg !664
  unreachable, !dbg !664
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !669 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !672
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !672
  br i1 %2, label %panic, label %checkok, !dbg !672

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !673, metadata !DIExpression()), !dbg !674
  %3 = load ptr, ptr %self, align 8, !dbg !675
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !677
  %zext = zext i16 %4 to i32, !dbg !677
  %shl = shl i32 %zext, 16, !dbg !677
  %5 = freeze i32 %shl, !dbg !677
  %6 = load ptr, ptr %self, align 8, !dbg !675
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !678
  %zext3 = zext i16 %7 to i32, !dbg !678
  %add = add i32 %5, %zext3, !dbg !677
  ret i32 %add, !dbg !677

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111), !dbg !674
  unreachable, !dbg !674
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !679 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !682
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !682
  br i1 %2, label %panic, label %checkok, !dbg !682

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !683, metadata !DIExpression()), !dbg !684
  %3 = load ptr, ptr %self, align 8, !dbg !685
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !687
  %zext = zext i8 %4 to i16, !dbg !687
  %zext3 = zext i16 %zext to i32, !dbg !687
  %shl = shl i32 %zext3, 8, !dbg !687
  %5 = freeze i32 %shl, !dbg !687
  %6 = load ptr, ptr %self, align 8, !dbg !685
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !688
  %zext4 = zext i8 %7 to i32, !dbg !688
  %add = add i32 %5, %zext4, !dbg !687
  %trunc = trunc i32 %add to i16, !dbg !687
  ret i16 %trunc, !dbg !687

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 112), !dbg !684
  unreachable, !dbg !684
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !689 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !694
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !694
  br i1 %3, label %panic, label %checkok, !dbg !694

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !695, metadata !DIExpression()), !dbg !696
  call void @llvm.dbg.declare(metadata ptr %1, metadata !697, metadata !DIExpression()), !dbg !698
  %4 = load ptr, ptr %self, align 8, !dbg !699
  %checknull = icmp eq ptr %4, null, !dbg !699
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !699
  br i1 %5, label %panic3, label %checkok7, !dbg !699

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !700, metadata !DIExpression()), !dbg !702
  store i128 0, ptr %return_value, align 16, !dbg !702
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !704
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !707
  %10 = load i128, ptr %return_value, align 16, !dbg !708
  %or = or i128 %10, 1, !dbg !709
  store i128 %or, ptr %4, align 16, !dbg !709
  ret void, !dbg !709

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 12), !dbg !696
  unreachable, !dbg !696

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 14), !dbg !699
  unreachable, !dbg !699
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !710 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !711
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !711
  br i1 %3, label %panic, label %checkok, !dbg !711

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !712, metadata !DIExpression()), !dbg !713
  call void @llvm.dbg.declare(metadata ptr %1, metadata !714, metadata !DIExpression()), !dbg !715
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !716
  %4 = load i64, ptr %ptradd, align 8, !dbg !716
  %lt = icmp ult i64 0, %4, !dbg !716
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !716

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 18), !dbg !716
  unreachable, !dbg !716

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !718, metadata !DIExpression()), !dbg !720
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !722
  %6 = load i64, ptr %ptradd6, align 8, !dbg !722
  store i64 %6, ptr %len, align 8, !dbg !722
  br label %loop.cond, !dbg !723

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !724
  %lt7 = icmp ult i64 0, %7, !dbg !724
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !724

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !726, metadata !DIExpression()), !dbg !728
  %8 = load ptr, ptr %self, align 8, !dbg !729
  %9 = call i64 @std.math.random.Mcg128Random.next_long(ptr %8), !dbg !730
  store i64 %9, ptr %value, align 8, !dbg !730
  %10 = load i64, ptr %len, align 8, !dbg !731
  %le = icmp ule i64 %10, 8, !dbg !731
  br i1 %le, label %if.then, label %if.exit, !dbg !731

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !732
  %add = add i64 0, %12, !dbg !732
  %size = sub i64 %add, 0, !dbg !732
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !732
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !732
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !734
  %16 = extractvalue %"char[]" %15, 0, !dbg !734
  %17 = extractvalue %"char[]" %15, 1, !dbg !735
  %gt = icmp ugt i64 0, %17, !dbg !735
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !735
  br i1 %18, label %panic8, label %checkok16, !dbg !735

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !734
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !734
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !734
  %21 = extractvalue %"char[]" %20, 0, !dbg !734
  %22 = extractvalue %"char[]" %14, 0, !dbg !734
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !734
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !734
  br label %expr_block.exit, !dbg !736

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !737
  %31 = extractvalue %"char[]" %30, 0, !dbg !737
  %32 = extractvalue %"char[]" %30, 1, !dbg !737
  %gt34 = icmp sgt i64 0, %32, !dbg !737
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !737
  br i1 %33, label %panic35, label %checkok45, !dbg !737

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !737
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !737
  br i1 %34, label %panic47, label %checkok57, !dbg !737

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !737
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !737
  %37 = extractvalue %"char[]" %36, 0, !dbg !737
  %38 = extractvalue %"char[]" %29, 0, !dbg !737
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !737
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !737
  %43 = load i64, ptr %len, align 8, !dbg !738
  %sub = sub i64 %43, 8, !dbg !738
  store i64 %sub, ptr %len, align 8, !dbg !738
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !739
  %45 = extractvalue %"char[]" %44, 0, !dbg !739
  %46 = extractvalue %"char[]" %44, 1, !dbg !740
  %gt74 = icmp ugt i64 8, %46, !dbg !740
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !740
  br i1 %47, label %panic75, label %checkok85, !dbg !740

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !739
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !739
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !739
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !739
  store %"char[]" %49, ptr %bytes, align 8, !dbg !739
  br label %loop.cond, !dbg !739

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.44, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.45, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.46, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 22, ptr align 8 %indirectarg91), !dbg !741
  unreachable, !dbg !744

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !744

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !713
  unreachable, !dbg !713

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !734
  unreachable, !dbg !734

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !734
  unreachable, !dbg !734

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !737
  unreachable, !dbg !737

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !737
  unreachable, !dbg !737

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !737
  unreachable, !dbg !737

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !739
  unreachable, !dbg !739
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !745 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !748
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !748
  br i1 %2, label %panic, label %checkok, !dbg !748

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !749, metadata !DIExpression()), !dbg !750
  call void @llvm.dbg.declare(metadata ptr %s, metadata !751, metadata !DIExpression()), !dbg !752
  %3 = load ptr, ptr %self, align 8, !dbg !753
  store ptr %3, ptr %s, align 8, !dbg !753
  call void @llvm.dbg.declare(metadata ptr %result, metadata !754, metadata !DIExpression()), !dbg !755
  %4 = load ptr, ptr %s, align 8, !dbg !756
  %checknull = icmp eq ptr %4, null, !dbg !756
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !756
  br i1 %5, label %panic3, label %checkok7, !dbg !756

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !756
  %lshr = lshr i128 %6, 64, !dbg !757
  %7 = freeze i128 %lshr, !dbg !757
  %trunc = trunc i128 %7 to i64, !dbg !757
  store i64 %trunc, ptr %result, align 8, !dbg !757
  %8 = load ptr, ptr %s, align 8, !dbg !758
  %checknull8 = icmp eq ptr %8, null, !dbg !758
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !758
  br i1 %9, label %panic9, label %checkok13, !dbg !758

checkok13:                                        ; preds = %checkok7
  %10 = load i128, ptr %8, align 16, !dbg !758
  %mul = mul i128 %10, -129976298391535590297638237547755878347, !dbg !759
  store i128 %mul, ptr %8, align 16, !dbg !759
  %11 = load i64, ptr %result, align 8, !dbg !760
  ret i64 %11, !dbg !760

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25), !dbg !750
  unreachable, !dbg !750

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 28), !dbg !756
  unreachable, !dbg !756

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 29), !dbg !758
  unreachable, !dbg !758
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !761 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !764
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !764
  br i1 %2, label %panic, label %checkok, !dbg !764

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !765, metadata !DIExpression()), !dbg !766
  %3 = load ptr, ptr %self, align 8, !dbg !767
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !769
  %zext = zext i64 %4 to i128, !dbg !769
  %shl = shl i128 %zext, 64, !dbg !769
  %5 = freeze i128 %shl, !dbg !769
  %6 = load ptr, ptr %self, align 8, !dbg !767
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !770
  %zext3 = zext i64 %7 to i128, !dbg !770
  %add = add i128 %5, %zext3, !dbg !769
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 33), !dbg !766
  unreachable, !dbg !766
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !771 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !774
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !774
  br i1 %2, label %panic, label %checkok, !dbg !774

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !775, metadata !DIExpression()), !dbg !776
  %3 = load ptr, ptr %self, align 8, !dbg !777
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !778
  %trunc = trunc i64 %4 to i32, !dbg !778
  ret i32 %trunc, !dbg !778

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !776
  unreachable, !dbg !776
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !779 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !782
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !782
  br i1 %2, label %panic, label %checkok, !dbg !782

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !783, metadata !DIExpression()), !dbg !784
  %3 = load ptr, ptr %self, align 8, !dbg !785
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !786
  %trunc = trunc i64 %4 to i16, !dbg !786
  ret i16 %trunc, !dbg !786

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !784
  unreachable, !dbg !784
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !787 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !790
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !790
  br i1 %2, label %panic, label %checkok, !dbg !790

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !791, metadata !DIExpression()), !dbg !792
  %3 = load ptr, ptr %self, align 8, !dbg !793
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !794
  %trunc = trunc i64 %4 to i8, !dbg !794
  ret i8 %trunc, !dbg !794

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !792
  unreachable, !dbg !792
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !795 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !800
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !800
  br i1 %3, label %panic, label %checkok, !dbg !800

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !801, metadata !DIExpression()), !dbg !802
  call void @llvm.dbg.declare(metadata ptr %1, metadata !803, metadata !DIExpression()), !dbg !804
  %4 = load ptr, ptr %self, align 8, !dbg !805
  %checknull = icmp eq ptr %4, null, !dbg !805
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !805
  br i1 %5, label %panic3, label %checkok7, !dbg !805

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !806, metadata !DIExpression()), !dbg !808
  store i64 0, ptr %return_value, align 8, !dbg !808
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !810
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !813
  %10 = load i64, ptr %return_value, align 8, !dbg !814
  %or = or i64 %10, 1, !dbg !809
  store i64 %or, ptr %4, align 8, !dbg !809
  ret void, !dbg !809

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !802
  unreachable, !dbg !802

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !805
  unreachable, !dbg !805
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !815 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !816
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !816
  br i1 %3, label %panic, label %checkok, !dbg !816

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !817, metadata !DIExpression()), !dbg !818
  call void @llvm.dbg.declare(metadata ptr %1, metadata !819, metadata !DIExpression()), !dbg !820
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !821
  %4 = load i64, ptr %ptradd, align 8, !dbg !821
  %lt = icmp ult i64 0, %4, !dbg !821
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !821

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 51), !dbg !821
  unreachable, !dbg !821

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !823, metadata !DIExpression()), !dbg !825
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !827
  %6 = load i64, ptr %ptradd6, align 8, !dbg !827
  store i64 %6, ptr %len, align 8, !dbg !827
  br label %loop.cond, !dbg !828

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !829
  %lt7 = icmp ult i64 0, %7, !dbg !829
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !829

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !831, metadata !DIExpression()), !dbg !833
  %8 = load ptr, ptr %self, align 8, !dbg !834
  %9 = call i32 @std.math.random.Mcg64Random.next_int(ptr %8), !dbg !835
  store i32 %9, ptr %value, align 4, !dbg !835
  %10 = load i64, ptr %len, align 8, !dbg !836
  %le = icmp ule i64 %10, 4, !dbg !836
  br i1 %le, label %if.then, label %if.exit, !dbg !836

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !837
  %add = add i64 0, %12, !dbg !837
  %size = sub i64 %add, 0, !dbg !837
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !837
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !837
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !839
  %16 = extractvalue %"char[]" %15, 0, !dbg !839
  %17 = extractvalue %"char[]" %15, 1, !dbg !840
  %gt = icmp ugt i64 0, %17, !dbg !840
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !840
  br i1 %18, label %panic8, label %checkok16, !dbg !840

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !839
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !839
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !839
  %21 = extractvalue %"char[]" %20, 0, !dbg !839
  %22 = extractvalue %"char[]" %14, 0, !dbg !839
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !839
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !839
  br label %expr_block.exit, !dbg !841

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !842
  %31 = extractvalue %"char[]" %30, 0, !dbg !842
  %32 = extractvalue %"char[]" %30, 1, !dbg !842
  %gt34 = icmp sgt i64 0, %32, !dbg !842
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !842
  br i1 %33, label %panic35, label %checkok45, !dbg !842

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !842
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !842
  br i1 %34, label %panic47, label %checkok57, !dbg !842

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !842
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !842
  %37 = extractvalue %"char[]" %36, 0, !dbg !842
  %38 = extractvalue %"char[]" %29, 0, !dbg !842
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !842
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !842
  %43 = load i64, ptr %len, align 8, !dbg !843
  %sub = sub i64 %43, 4, !dbg !843
  store i64 %sub, ptr %len, align 8, !dbg !843
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !844
  %45 = extractvalue %"char[]" %44, 0, !dbg !844
  %46 = extractvalue %"char[]" %44, 1, !dbg !845
  %gt74 = icmp ugt i64 4, %46, !dbg !845
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !845
  br i1 %47, label %panic75, label %checkok85, !dbg !845

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !844
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !844
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !844
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !844
  store %"char[]" %49, ptr %bytes, align 8, !dbg !844
  br label %loop.cond, !dbg !844

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.47, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.48, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.49, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 55, ptr align 8 %indirectarg91), !dbg !846
  unreachable, !dbg !849

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !849

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 53), !dbg !818
  unreachable, !dbg !818

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !839
  unreachable, !dbg !839

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !839
  unreachable, !dbg !839

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !842
  unreachable, !dbg !842

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !842
  unreachable, !dbg !842

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !842
  unreachable, !dbg !842

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !844
  unreachable, !dbg !844
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !850 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !853
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !853
  br i1 %2, label %panic, label %checkok, !dbg !853

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !854, metadata !DIExpression()), !dbg !855
  call void @llvm.dbg.declare(metadata ptr %s, metadata !856, metadata !DIExpression()), !dbg !857
  %3 = load ptr, ptr %self, align 8, !dbg !858
  store ptr %3, ptr %s, align 8, !dbg !858
  call void @llvm.dbg.declare(metadata ptr %result, metadata !859, metadata !DIExpression()), !dbg !860
  %4 = load ptr, ptr %s, align 8, !dbg !861
  %checknull = icmp eq ptr %4, null, !dbg !861
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !861
  br i1 %5, label %panic3, label %checkok7, !dbg !861

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !861
  %lshr = lshr i64 %6, 32, !dbg !862
  %7 = freeze i64 %lshr, !dbg !862
  %trunc = trunc i64 %7 to i32, !dbg !862
  store i32 %trunc, ptr %result, align 4, !dbg !862
  %8 = load ptr, ptr %s, align 8, !dbg !863
  %checknull8 = icmp eq ptr %8, null, !dbg !863
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !863
  br i1 %9, label %panic9, label %checkok13, !dbg !863

checkok13:                                        ; preds = %checkok7
  %10 = load i64, ptr %8, align 8, !dbg !863
  %mul = mul i64 %10, -1065810590584100411, !dbg !864
  store i64 %mul, ptr %8, align 8, !dbg !864
  %11 = load i32, ptr %result, align 4, !dbg !865
  ret i32 %11, !dbg !865

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58), !dbg !855
  unreachable, !dbg !855

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 61), !dbg !861
  unreachable, !dbg !861

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 62), !dbg !863
  unreachable, !dbg !863
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !866 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !869
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !869
  br i1 %2, label %panic, label %checkok, !dbg !869

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !870, metadata !DIExpression()), !dbg !871
  %3 = load ptr, ptr %self, align 8, !dbg !872
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !874
  %zext = zext i64 %4 to i128, !dbg !874
  %shl = shl i128 %zext, 64, !dbg !874
  %5 = freeze i128 %shl, !dbg !874
  %6 = load ptr, ptr %self, align 8, !dbg !872
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !875
  %zext3 = zext i64 %7 to i128, !dbg !875
  %add = add i128 %5, %zext3, !dbg !874
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !871
  unreachable, !dbg !871
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !876 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !879
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !879
  br i1 %2, label %panic, label %checkok, !dbg !879

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !880, metadata !DIExpression()), !dbg !881
  %3 = load ptr, ptr %self, align 8, !dbg !882
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !884
  %zext = zext i32 %4 to i64, !dbg !884
  %shl = shl i64 %zext, 32, !dbg !884
  %5 = freeze i64 %shl, !dbg !884
  %6 = load ptr, ptr %self, align 8, !dbg !882
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !885
  %zext3 = zext i32 %7 to i64, !dbg !885
  %add = add i64 %5, %zext3, !dbg !884
  ret i64 %add, !dbg !884

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !881
  unreachable, !dbg !881
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !886 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !889
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !889
  br i1 %2, label %panic, label %checkok, !dbg !889

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !890, metadata !DIExpression()), !dbg !891
  %3 = load ptr, ptr %self, align 8, !dbg !892
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !893
  %trunc = trunc i32 %4 to i16, !dbg !893
  ret i16 %trunc, !dbg !893

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !891
  unreachable, !dbg !891
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !894 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !897
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !897
  br i1 %2, label %panic, label %checkok, !dbg !897

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !898, metadata !DIExpression()), !dbg !899
  %3 = load ptr, ptr %self, align 8, !dbg !900
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !901
  %trunc = trunc i32 %4 to i8, !dbg !901
  ret i8 %trunc, !dbg !901

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69), !dbg !899
  unreachable, !dbg !899
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !902 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !907
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !907
  br i1 %3, label %panic, label %checkok, !dbg !907

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !908, metadata !DIExpression()), !dbg !909
  call void @llvm.dbg.declare(metadata ptr %1, metadata !910, metadata !DIExpression()), !dbg !911
  %4 = load ptr, ptr %self, align 8, !dbg !912
  %checknull = icmp eq ptr %4, null, !dbg !912
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !912
  br i1 %5, label %panic3, label %checkok7, !dbg !912

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !913, metadata !DIExpression()), !dbg !915
  store i32 0, ptr %return_value, align 4, !dbg !915
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !917
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !920
  %10 = load i32, ptr %return_value, align 4, !dbg !921
  %or = or i32 %10, 1, !dbg !916
  store i32 %or, ptr %4, align 4, !dbg !916
  ret void, !dbg !916

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 76), !dbg !909
  unreachable, !dbg !909

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 78), !dbg !912
  unreachable, !dbg !912
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !922 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !925
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !925
  br i1 %2, label %panic, label %checkok, !dbg !925

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !926, metadata !DIExpression()), !dbg !927
  call void @llvm.dbg.declare(metadata ptr %s, metadata !928, metadata !DIExpression()), !dbg !929
  %3 = load ptr, ptr %self, align 8, !dbg !930
  store ptr %3, ptr %s, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata ptr %result, metadata !931, metadata !DIExpression()), !dbg !932
  %4 = load ptr, ptr %s, align 8, !dbg !933
  %checknull = icmp eq ptr %4, null, !dbg !933
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !933
  br i1 %5, label %panic3, label %checkok7, !dbg !933

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !933
  %lshr = lshr i32 %6, 16, !dbg !934
  %7 = freeze i32 %lshr, !dbg !934
  %trunc = trunc i32 %7 to i16, !dbg !934
  store i16 %trunc, ptr %result, align 2, !dbg !934
  %8 = load ptr, ptr %s, align 8, !dbg !935
  %checknull8 = icmp eq ptr %8, null, !dbg !935
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !935
  br i1 %9, label %panic9, label %checkok13, !dbg !935

checkok13:                                        ; preds = %checkok7
  %10 = load i32, ptr %8, align 4, !dbg !935
  %mul = mul i32 %10, -1814600227, !dbg !936
  store i32 %mul, ptr %8, align 4, !dbg !936
  %11 = load i16, ptr %result, align 2, !dbg !937
  ret i16 %11, !dbg !937

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81), !dbg !927
  unreachable, !dbg !927

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 84), !dbg !933
  unreachable, !dbg !933

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 85), !dbg !935
  unreachable, !dbg !935
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !938 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !939
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !939
  br i1 %3, label %panic, label %checkok, !dbg !939

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !940, metadata !DIExpression()), !dbg !941
  call void @llvm.dbg.declare(metadata ptr %1, metadata !942, metadata !DIExpression()), !dbg !943
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !944
  %4 = load i64, ptr %ptradd, align 8, !dbg !944
  %lt = icmp ult i64 0, %4, !dbg !944
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !944

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 90), !dbg !944
  unreachable, !dbg !944

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !946, metadata !DIExpression()), !dbg !948
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !949
  %6 = load i64, ptr %ptradd6, align 8, !dbg !949
  store i64 %6, ptr %len, align 8, !dbg !949
  br label %loop.cond, !dbg !950

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !951
  %lt7 = icmp ult i64 0, %7, !dbg !951
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !951

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !953, metadata !DIExpression()), !dbg !955
  %8 = load ptr, ptr %self, align 8, !dbg !956
  %9 = call i16 @std.math.random.Mcg32Random.next_short(ptr %8), !dbg !957
  store i16 %9, ptr %value, align 2, !dbg !957
  %10 = load i64, ptr %len, align 8, !dbg !958
  %le = icmp ule i64 %10, 2, !dbg !958
  br i1 %le, label %if.then, label %if.exit, !dbg !958

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !959
  %add = add i64 0, %12, !dbg !959
  %size = sub i64 %add, 0, !dbg !959
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !959
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !959
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !961
  %16 = extractvalue %"char[]" %15, 0, !dbg !961
  %17 = extractvalue %"char[]" %15, 1, !dbg !962
  %gt = icmp ugt i64 0, %17, !dbg !962
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !962
  br i1 %18, label %panic8, label %checkok16, !dbg !962

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !961
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !961
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !961
  %21 = extractvalue %"char[]" %20, 0, !dbg !961
  %22 = extractvalue %"char[]" %14, 0, !dbg !961
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !961
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !961
  br label %expr_block.exit, !dbg !963

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !964
  %31 = extractvalue %"char[]" %30, 0, !dbg !964
  %32 = extractvalue %"char[]" %30, 1, !dbg !964
  %gt34 = icmp sgt i64 0, %32, !dbg !964
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !964
  br i1 %33, label %panic35, label %checkok45, !dbg !964

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !964
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !964
  br i1 %34, label %panic47, label %checkok57, !dbg !964

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !964
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !964
  %37 = extractvalue %"char[]" %36, 0, !dbg !964
  %38 = extractvalue %"char[]" %29, 0, !dbg !964
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !964
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !964
  %43 = load i64, ptr %len, align 8, !dbg !965
  %sub = sub i64 %43, 2, !dbg !965
  store i64 %sub, ptr %len, align 8, !dbg !965
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !966
  %45 = extractvalue %"char[]" %44, 0, !dbg !966
  %46 = extractvalue %"char[]" %44, 1, !dbg !967
  %gt74 = icmp ugt i64 2, %46, !dbg !967
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !967
  br i1 %47, label %panic75, label %checkok85, !dbg !967

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !966
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !966
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !966
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !966
  store %"char[]" %49, ptr %bytes, align 8, !dbg !966
  br label %loop.cond, !dbg !966

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.50, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.51, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.52, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 92, ptr align 8 %indirectarg91), !dbg !968
  unreachable, !dbg !971

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !971

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 92), !dbg !941
  unreachable, !dbg !941

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !961
  unreachable, !dbg !961

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !961
  unreachable, !dbg !961

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !964
  unreachable, !dbg !964

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !964
  unreachable, !dbg !964

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !964
  unreachable, !dbg !964

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !966
  unreachable, !dbg !966
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !972 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !975
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !975
  br i1 %2, label %panic, label %checkok, !dbg !975

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !976, metadata !DIExpression()), !dbg !977
  %3 = load ptr, ptr %self, align 8, !dbg !978
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !980
  %zext = zext i64 %4 to i128, !dbg !980
  %shl = shl i128 %zext, 64, !dbg !980
  %5 = freeze i128 %shl, !dbg !980
  %6 = load ptr, ptr %self, align 8, !dbg !978
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !981
  %zext3 = zext i64 %7 to i128, !dbg !981
  %add = add i128 %5, %zext3, !dbg !980
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93), !dbg !977
  unreachable, !dbg !977
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !982 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !985
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !985
  br i1 %2, label %panic, label %checkok, !dbg !985

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !986, metadata !DIExpression()), !dbg !987
  %3 = load ptr, ptr %self, align 8, !dbg !988
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !990
  %zext = zext i32 %4 to i64, !dbg !990
  %shl = shl i64 %zext, 32, !dbg !990
  %5 = freeze i64 %shl, !dbg !990
  %6 = load ptr, ptr %self, align 8, !dbg !988
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !991
  %zext3 = zext i32 %7 to i64, !dbg !991
  %add = add i64 %5, %zext3, !dbg !990
  ret i64 %add, !dbg !990

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94), !dbg !987
  unreachable, !dbg !987
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !992 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !995
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !995
  br i1 %2, label %panic, label %checkok, !dbg !995

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !996, metadata !DIExpression()), !dbg !997
  %3 = load ptr, ptr %self, align 8, !dbg !998
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !1000
  %zext = zext i16 %4 to i32, !dbg !1000
  %shl = shl i32 %zext, 16, !dbg !1000
  %5 = freeze i32 %shl, !dbg !1000
  %6 = load ptr, ptr %self, align 8, !dbg !998
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !1001
  %zext3 = zext i16 %7 to i32, !dbg !1001
  %add = add i32 %5, %zext3, !dbg !1000
  ret i32 %add, !dbg !1000

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !997
  unreachable, !dbg !997
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !1002 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1005
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1005
  br i1 %2, label %panic, label %checkok, !dbg !1005

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1006, metadata !DIExpression()), !dbg !1007
  %3 = load ptr, ptr %self, align 8, !dbg !1008
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !1009
  %trunc = trunc i16 %4 to i8, !dbg !1009
  ret i8 %trunc, !dbg !1009

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !1007
  unreachable, !dbg !1007
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1010 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1015
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1015
  br i1 %3, label %panic, label %checkok, !dbg !1015

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1016, metadata !DIExpression()), !dbg !1017
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1018, metadata !DIExpression()), !dbg !1019
  %4 = load ptr, ptr %self, align 8, !dbg !1020
  %checknull = icmp eq ptr %4, null, !dbg !1020
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1020
  br i1 %5, label %panic3, label %checkok7, !dbg !1020

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1021, metadata !DIExpression()), !dbg !1023
  store i16 0, ptr %return_value, align 2, !dbg !1023
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1025
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1028
  %10 = load i16, ptr %return_value, align 2, !dbg !1029
  %or = or i16 %10, 1, !dbg !1024
  store i16 %or, ptr %4, align 2, !dbg !1024
  ret void, !dbg !1024

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 102), !dbg !1017
  unreachable, !dbg !1017

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 104), !dbg !1020
  unreachable, !dbg !1020
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !1030 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1033
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1033
  br i1 %2, label %panic, label %checkok, !dbg !1033

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1034, metadata !DIExpression()), !dbg !1035
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1036, metadata !DIExpression()), !dbg !1037
  %3 = load ptr, ptr %self, align 8, !dbg !1038
  store ptr %3, ptr %s, align 8, !dbg !1038
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1039, metadata !DIExpression()), !dbg !1040
  %4 = load ptr, ptr %s, align 8, !dbg !1041
  %checknull = icmp eq ptr %4, null, !dbg !1041
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1041
  br i1 %5, label %panic3, label %checkok7, !dbg !1041

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !1041
  %zext = zext i16 %6 to i32, !dbg !1041
  %lshr = lshr i32 %zext, 8, !dbg !1042
  %7 = freeze i32 %lshr, !dbg !1042
  %trunc = trunc i32 %7 to i8, !dbg !1042
  store i8 %trunc, ptr %result, align 1, !dbg !1042
  %8 = load ptr, ptr %s, align 8, !dbg !1043
  %checknull8 = icmp eq ptr %8, null, !dbg !1043
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1043
  br i1 %9, label %panic9, label %checkok13, !dbg !1043

checkok13:                                        ; preds = %checkok7
  %10 = load i16, ptr %8, align 2, !dbg !1043
  %mul = mul i16 %10, -27691, !dbg !1044
  store i16 %mul, ptr %8, align 2, !dbg !1044
  %11 = load i8, ptr %result, align 1, !dbg !1045
  ret i8 %11, !dbg !1045

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107), !dbg !1035
  unreachable, !dbg !1035

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 110), !dbg !1041
  unreachable, !dbg !1041

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 111), !dbg !1043
  unreachable, !dbg !1043
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1046 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1047
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1047
  br i1 %3, label %panic, label %checkok, !dbg !1047

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1048, metadata !DIExpression()), !dbg !1049
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1050, metadata !DIExpression()), !dbg !1051
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1052, metadata !DIExpression()), !dbg !1054
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1055
  %4 = load i64, ptr %ptradd, align 8, !dbg !1055
  store i64 %4, ptr %len, align 8, !dbg !1055
  br label %loop.cond, !dbg !1056

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1057
  %lt = icmp ult i64 0, %5, !dbg !1057
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1057

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1059, metadata !DIExpression()), !dbg !1061
  %6 = load ptr, ptr %self, align 8, !dbg !1062
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !1063
  store i8 %7, ptr %value, align 1, !dbg !1063
  %8 = load i64, ptr %len, align 8, !dbg !1064
  %le = icmp ule i64 %8, 1, !dbg !1064
  br i1 %le, label %if.then, label %if.exit, !dbg !1064

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1065
  %add = add i64 0, %10, !dbg !1065
  %size = sub i64 %add, 0, !dbg !1065
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1065
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1065
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !1067
  %14 = extractvalue %"char[]" %13, 0, !dbg !1067
  %15 = extractvalue %"char[]" %13, 1, !dbg !1068
  %gt = icmp ugt i64 0, %15, !dbg !1068
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1068
  br i1 %16, label %panic3, label %checkok11, !dbg !1068

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !1067
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1067
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !1067
  %19 = extractvalue %"char[]" %18, 0, !dbg !1067
  %20 = extractvalue %"char[]" %12, 0, !dbg !1067
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !1067
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !1067
  br label %expr_block.exit, !dbg !1069

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !1070
  %29 = extractvalue %"char[]" %28, 0, !dbg !1070
  %30 = extractvalue %"char[]" %28, 1, !dbg !1070
  %gt29 = icmp sgt i64 0, %30, !dbg !1070
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !1070
  br i1 %31, label %panic30, label %checkok40, !dbg !1070

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !1070
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !1070
  br i1 %32, label %panic42, label %checkok52, !dbg !1070

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !1070
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !1070
  %35 = extractvalue %"char[]" %34, 0, !dbg !1070
  %36 = extractvalue %"char[]" %27, 0, !dbg !1070
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !1070
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !1070
  %41 = load i64, ptr %len, align 8, !dbg !1071
  %sub = sub i64 %41, 1, !dbg !1071
  store i64 %sub, ptr %len, align 8, !dbg !1071
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !1072
  %43 = extractvalue %"char[]" %42, 0, !dbg !1072
  %44 = extractvalue %"char[]" %42, 1, !dbg !1073
  %gt69 = icmp ugt i64 1, %44, !dbg !1073
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !1073
  br i1 %45, label %panic70, label %checkok80, !dbg !1073

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !1072
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1072
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !1072
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !1072
  store %"char[]" %47, ptr %bytes, align 8, !dbg !1072
  br label %loop.cond, !dbg !1072

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.53, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.54, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.55, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 115, ptr align 8 %indirectarg86), !dbg !1074
  unreachable, !dbg !1077

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !1077

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115), !dbg !1049
  unreachable, !dbg !1049

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !1067
  unreachable, !dbg !1067

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !1067
  unreachable, !dbg !1067

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !1070
  unreachable, !dbg !1070

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !1070
  unreachable, !dbg !1070

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !1070
  unreachable, !dbg !1070

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !1072
  unreachable, !dbg !1072
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !1078 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1081
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1081
  br i1 %2, label %panic, label %checkok, !dbg !1081

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1082, metadata !DIExpression()), !dbg !1083
  %3 = load ptr, ptr %self, align 8, !dbg !1084
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !1086
  %zext = zext i64 %4 to i128, !dbg !1086
  %shl = shl i128 %zext, 64, !dbg !1086
  %5 = freeze i128 %shl, !dbg !1086
  %6 = load ptr, ptr %self, align 8, !dbg !1084
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !1087
  %zext3 = zext i64 %7 to i128, !dbg !1087
  %add = add i128 %5, %zext3, !dbg !1086
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116), !dbg !1083
  unreachable, !dbg !1083
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !1088 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1091
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1091
  br i1 %2, label %panic, label %checkok, !dbg !1091

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1092, metadata !DIExpression()), !dbg !1093
  %3 = load ptr, ptr %self, align 8, !dbg !1094
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !1096
  %zext = zext i32 %4 to i64, !dbg !1096
  %shl = shl i64 %zext, 32, !dbg !1096
  %5 = freeze i64 %shl, !dbg !1096
  %6 = load ptr, ptr %self, align 8, !dbg !1094
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !1097
  %zext3 = zext i32 %7 to i64, !dbg !1097
  %add = add i64 %5, %zext3, !dbg !1096
  ret i64 %add, !dbg !1096

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117), !dbg !1093
  unreachable, !dbg !1093
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !1098 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1101
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1101
  br i1 %2, label %panic, label %checkok, !dbg !1101

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1102, metadata !DIExpression()), !dbg !1103
  %3 = load ptr, ptr %self, align 8, !dbg !1104
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !1106
  %zext = zext i16 %4 to i32, !dbg !1106
  %shl = shl i32 %zext, 16, !dbg !1106
  %5 = freeze i32 %shl, !dbg !1106
  %6 = load ptr, ptr %self, align 8, !dbg !1104
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !1107
  %zext3 = zext i16 %7 to i32, !dbg !1107
  %add = add i32 %5, %zext3, !dbg !1106
  ret i32 %add, !dbg !1106

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118), !dbg !1103
  unreachable, !dbg !1103
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !1108 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1111
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1111
  br i1 %2, label %panic, label %checkok, !dbg !1111

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1112, metadata !DIExpression()), !dbg !1113
  %3 = load ptr, ptr %self, align 8, !dbg !1114
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !1116
  %zext = zext i8 %4 to i16, !dbg !1116
  %zext3 = zext i16 %zext to i32, !dbg !1116
  %shl = shl i32 %zext3, 8, !dbg !1116
  %5 = freeze i32 %shl, !dbg !1116
  %6 = load ptr, ptr %self, align 8, !dbg !1114
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !1117
  %zext4 = zext i8 %7 to i32, !dbg !1117
  %add = add i32 %5, %zext4, !dbg !1116
  %trunc = trunc i32 %add to i16, !dbg !1116
  ret i16 %trunc, !dbg !1116

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119), !dbg !1113
  unreachable, !dbg !1113
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1118 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %expr = alloca [4 x i128], align 16
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1128
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1128
  br i1 %3, label %panic, label %checkok, !dbg !1128

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1129, metadata !DIExpression()), !dbg !1130
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1131, metadata !DIExpression()), !dbg !1132
  %4 = load ptr, ptr %self, align 8, !dbg !1133
  %checknull = icmp eq ptr %4, null, !dbg !1133
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1133
  br i1 %5, label %panic3, label %checkok7, !dbg !1133

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1134, metadata !DIExpression()), !dbg !1137
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1137
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1139
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1142
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !1143
  %10 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !1143
  br i1 %10, label %panic11, label %checkok15, !dbg !1143

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %expr, i32 64, i1 false), !dbg !1146
  ret void, !dbg !1146

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17), !dbg !1130
  unreachable, !dbg !1130

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 19), !dbg !1133
  unreachable, !dbg !1133

panic11:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 212), !dbg !1146
  unreachable, !dbg !1146
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !1147 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %self44 = alloca i128, align 16
  %shift = alloca i128, align 16
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %s1 = alloca i128, align 16
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %self104 = alloca i128, align 16
  %shift105 = alloca i128, align 16
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1150
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1150
  br i1 %2, label %panic, label %checkok, !dbg !1150

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1151, metadata !DIExpression()), !dbg !1152
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1153, metadata !DIExpression()), !dbg !1154
  %3 = load ptr, ptr %self, align 8, !dbg !1155
  %checknull = icmp eq ptr %3, null, !dbg !1155
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1155
  br i1 %4, label %panic3, label %checkok7, !dbg !1155

checkok7:                                         ; preds = %checkok
  %5 = load i128, ptr %3, align 16, !dbg !1155
  store i128 %5, ptr %s0, align 16, !dbg !1155
  %6 = load ptr, ptr %self, align 8, !dbg !1156
  %checknull8 = icmp eq ptr %6, null, !dbg !1156
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1156
  br i1 %7, label %panic9, label %checkok13, !dbg !1156

checkok13:                                        ; preds = %checkok7
  %8 = load ptr, ptr %self, align 8, !dbg !1157
  %checknull14 = icmp eq ptr %8, null, !dbg !1157
  %9 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1157
  br i1 %9, label %panic15, label %checkok19, !dbg !1157

checkok19:                                        ; preds = %checkok13
  %10 = load i128, ptr %8, align 16, !dbg !1157
  %11 = load ptr, ptr %self, align 8, !dbg !1158
  %checknull20 = icmp eq ptr %11, null, !dbg !1158
  %12 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !1158
  br i1 %12, label %panic21, label %checkok25, !dbg !1158

checkok25:                                        ; preds = %checkok19
  %13 = load i128, ptr %11, align 16, !dbg !1158
  %mul = mul i128 %10, %13, !dbg !1157
  %14 = load ptr, ptr %self, align 8, !dbg !1159
  %checknull26 = icmp eq ptr %14, null, !dbg !1159
  %15 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1159
  br i1 %15, label %panic27, label %checkok31, !dbg !1159

checkok31:                                        ; preds = %checkok25
  %ptradd = getelementptr inbounds i8, ptr %14, i64 32, !dbg !1159
  %16 = load i128, ptr %ptradd, align 16, !dbg !1159
  %add = add i128 %mul, %16, !dbg !1157
  store i128 %add, ptr %6, align 16, !dbg !1157
  %17 = load ptr, ptr %self, align 8, !dbg !1160
  %checknull32 = icmp eq ptr %17, null, !dbg !1160
  %18 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !1160
  br i1 %18, label %panic33, label %checkok37, !dbg !1160

checkok37:                                        ; preds = %checkok31
  %19 = load ptr, ptr %self, align 8, !dbg !1161
  %checknull38 = icmp eq ptr %19, null, !dbg !1161
  %20 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !1161
  br i1 %20, label %panic39, label %checkok43, !dbg !1161

checkok43:                                        ; preds = %checkok37
  %21 = load i128, ptr %19, align 16
  store i128 %21, ptr %self44, align 16
  store i128 64, ptr %shift, align 16
  %22 = load i128, ptr %self44, align 16, !dbg !1162
  %23 = load i128, ptr %self44, align 16, !dbg !1164
  %24 = load i128, ptr %shift, align 16, !dbg !1165
  %25 = call i128 @llvm.fshr.i128(i128 %22, i128 %23, i128 %24), !dbg !1165
  store i128 %25, ptr %17, align 16, !dbg !1165
  %26 = load ptr, ptr %self, align 8, !dbg !1166
  %checknull45 = icmp eq ptr %26, null, !dbg !1166
  %27 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !1166
  br i1 %27, label %panic46, label %checkok50, !dbg !1166

checkok50:                                        ; preds = %checkok43
  %ptradd51 = getelementptr inbounds i8, ptr %26, i64 32, !dbg !1166
  %28 = load i128, ptr %ptradd51, align 16, !dbg !1166
  %add52 = add i128 %28, -129976298391535590297638237547755878347, !dbg !1166
  store i128 %add52, ptr %ptradd51, align 16, !dbg !1166
  %29 = load ptr, ptr %self, align 8, !dbg !1167
  %checknull53 = icmp eq ptr %29, null, !dbg !1167
  %30 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !1167
  br i1 %30, label %panic54, label %checkok58, !dbg !1167

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !1167
  %31 = load ptr, ptr %self, align 8, !dbg !1168
  %checknull60 = icmp eq ptr %31, null, !dbg !1168
  %32 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !1168
  br i1 %32, label %panic61, label %checkok65, !dbg !1168

checkok65:                                        ; preds = %checkok58
  %ptradd66 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1168
  %33 = load i128, ptr %ptradd66, align 16, !dbg !1168
  %34 = load ptr, ptr %self, align 8, !dbg !1169
  %checknull67 = icmp eq ptr %34, null, !dbg !1169
  %35 = call i1 @llvm.expect.i1(i1 %checknull67, i1 false), !dbg !1169
  br i1 %35, label %panic68, label %checkok72, !dbg !1169

checkok72:                                        ; preds = %checkok65
  %ptradd73 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !1169
  %36 = load i128, ptr %ptradd73, align 16, !dbg !1169
  %mul74 = mul i128 %33, %36, !dbg !1168
  %37 = load ptr, ptr %self, align 8, !dbg !1170
  %checknull75 = icmp eq ptr %37, null, !dbg !1170
  %38 = call i1 @llvm.expect.i1(i1 %checknull75, i1 false), !dbg !1170
  br i1 %38, label %panic76, label %checkok80, !dbg !1170

checkok80:                                        ; preds = %checkok72
  %ptradd81 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !1170
  %39 = load i128, ptr %ptradd81, align 16, !dbg !1170
  %add82 = add i128 %mul74, %39, !dbg !1168
  store i128 %add82, ptr %ptradd59, align 16, !dbg !1168
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1171, metadata !DIExpression()), !dbg !1172
  %40 = load ptr, ptr %self, align 8, !dbg !1173
  %checknull83 = icmp eq ptr %40, null, !dbg !1173
  %41 = call i1 @llvm.expect.i1(i1 %checknull83, i1 false), !dbg !1173
  br i1 %41, label %panic84, label %checkok88, !dbg !1173

checkok88:                                        ; preds = %checkok80
  %ptradd89 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !1173
  %42 = load i128, ptr %ptradd89, align 16, !dbg !1173
  store i128 %42, ptr %s1, align 16, !dbg !1173
  %43 = load ptr, ptr %self, align 8, !dbg !1174
  %checknull90 = icmp eq ptr %43, null, !dbg !1174
  %44 = call i1 @llvm.expect.i1(i1 %checknull90, i1 false), !dbg !1174
  br i1 %44, label %panic91, label %checkok95, !dbg !1174

checkok95:                                        ; preds = %checkok88
  %ptradd96 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !1174
  %45 = load ptr, ptr %self, align 8, !dbg !1175
  %checknull97 = icmp eq ptr %45, null, !dbg !1175
  %46 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !1175
  br i1 %46, label %panic98, label %checkok102, !dbg !1175

checkok102:                                       ; preds = %checkok95
  %ptradd103 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !1175
  %47 = load i128, ptr %ptradd103, align 16
  store i128 %47, ptr %self104, align 16
  store i128 64, ptr %shift105, align 16
  %48 = load i128, ptr %self104, align 16, !dbg !1176
  %49 = load i128, ptr %self104, align 16, !dbg !1178
  %50 = load i128, ptr %shift105, align 16, !dbg !1179
  %51 = call i128 @llvm.fshr.i128(i128 %48, i128 %49, i128 %50), !dbg !1179
  store i128 %51, ptr %ptradd96, align 16, !dbg !1179
  %52 = load ptr, ptr %self, align 8, !dbg !1180
  %checknull106 = icmp eq ptr %52, null, !dbg !1180
  %53 = call i1 @llvm.expect.i1(i1 %checknull106, i1 false), !dbg !1180
  br i1 %53, label %panic107, label %checkok111, !dbg !1180

checkok111:                                       ; preds = %checkok102
  %ptradd112 = getelementptr inbounds i8, ptr %52, i64 48, !dbg !1180
  %54 = load i128, ptr %ptradd112, align 16, !dbg !1180
  %sub = sub i128 %54, -129976298391535590297638237547755878347, !dbg !1180
  store i128 %sub, ptr %ptradd112, align 16, !dbg !1180
  %55 = load i128, ptr %s0, align 16, !dbg !1181
  %56 = load i128, ptr %s1, align 16, !dbg !1182
  %add113 = add i128 %55, %56, !dbg !1181
  store i128 %add113, ptr %taddr, align 16
  %57 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %57

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 23), !dbg !1152
  unreachable, !dbg !1152

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg6, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 25), !dbg !1155
  unreachable, !dbg !1155

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg12, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 26), !dbg !1156
  unreachable, !dbg !1156

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg18, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 26), !dbg !1157
  unreachable, !dbg !1157

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg24, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 26), !dbg !1158
  unreachable, !dbg !1158

panic27:                                          ; preds = %checkok25
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg30, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 26), !dbg !1159
  unreachable, !dbg !1159

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg36, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 27), !dbg !1160
  unreachable, !dbg !1160

panic39:                                          ; preds = %checkok37
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg42, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 27), !dbg !1161
  unreachable, !dbg !1161

panic46:                                          ; preds = %checkok43
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg49, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 28), !dbg !1166
  unreachable, !dbg !1166

panic54:                                          ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg57, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 30), !dbg !1167
  unreachable, !dbg !1167

panic61:                                          ; preds = %checkok58
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg64, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 30), !dbg !1168
  unreachable, !dbg !1168

panic68:                                          ; preds = %checkok65
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg71, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 30), !dbg !1169
  unreachable, !dbg !1169

panic76:                                          ; preds = %checkok72
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg79, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 30), !dbg !1170
  unreachable, !dbg !1170

panic84:                                          ; preds = %checkok80
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg87, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 31), !dbg !1173
  unreachable, !dbg !1173

panic91:                                          ; preds = %checkok88
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg94, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 32), !dbg !1174
  unreachable, !dbg !1174

panic98:                                          ; preds = %checkok95
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg101, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 32), !dbg !1175
  unreachable, !dbg !1175

panic107:                                         ; preds = %checkok102
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg110, align 8
  %74 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %74(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 33), !dbg !1180
  unreachable, !dbg !1180
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1183 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1184
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1184
  br i1 %3, label %panic, label %checkok, !dbg !1184

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1185, metadata !DIExpression()), !dbg !1186
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1187, metadata !DIExpression()), !dbg !1188
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1189
  %4 = load i64, ptr %ptradd, align 8, !dbg !1189
  %lt = icmp ult i64 0, %4, !dbg !1189
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1189

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 39), !dbg !1189
  unreachable, !dbg !1189

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1191, metadata !DIExpression()), !dbg !1193
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1194
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1194
  store i64 %6, ptr %len, align 8, !dbg !1194
  br label %loop.cond, !dbg !1195

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1196
  %lt7 = icmp ult i64 0, %7, !dbg !1196
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1196

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1198, metadata !DIExpression()), !dbg !1200
  %8 = load ptr, ptr %self, align 8, !dbg !1201
  %9 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %8), !dbg !1202
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !1203
  %le = icmp ule i64 %11, 16, !dbg !1203
  br i1 %le, label %if.then, label %if.exit, !dbg !1203

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1204
  %add = add i64 0, %13, !dbg !1204
  %size = sub i64 %add, 0, !dbg !1204
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1204
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1204
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1206
  %17 = extractvalue %"char[]" %16, 0, !dbg !1206
  %18 = extractvalue %"char[]" %16, 1, !dbg !1207
  %gt = icmp ugt i64 0, %18, !dbg !1207
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1207
  br i1 %19, label %panic8, label %checkok16, !dbg !1207

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %18, 0, !dbg !1206
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1206
  %21 = insertvalue %"char[]" %20, i64 %size17, 1, !dbg !1206
  %22 = extractvalue %"char[]" %21, 0, !dbg !1206
  %23 = extractvalue %"char[]" %15, 0, !dbg !1206
  store %"char[]" %15, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %24 = load i64, ptr %ptradd19, align 8
  store %"char[]" %21, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %25 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %27 = mul i64 %24, 1, !dbg !1206
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1206
  br label %expr_block.exit, !dbg !1208

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %28 = load ptr, ptr %taddr33, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 16, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1209
  %32 = extractvalue %"char[]" %31, 0, !dbg !1209
  %33 = extractvalue %"char[]" %31, 1, !dbg !1209
  %gt34 = icmp sgt i64 0, %33, !dbg !1209
  %34 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1209
  br i1 %34, label %panic35, label %checkok45, !dbg !1209

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %33, 16, !dbg !1209
  %35 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1209
  br i1 %35, label %panic47, label %checkok57, !dbg !1209

checkok57:                                        ; preds = %checkok45
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1209
  %37 = insertvalue %"char[]" %36, i64 16, 1, !dbg !1209
  %38 = extractvalue %"char[]" %37, 0, !dbg !1209
  %39 = extractvalue %"char[]" %30, 0, !dbg !1209
  store %"char[]" %30, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %40 = load i64, ptr %ptradd59, align 8
  store %"char[]" %37, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %41 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %42, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %43 = mul i64 %40, 1, !dbg !1209
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1209
  %44 = load i64, ptr %len, align 8, !dbg !1210
  %sub = sub i64 %44, 16, !dbg !1210
  store i64 %sub, ptr %len, align 8, !dbg !1210
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1211
  %46 = extractvalue %"char[]" %45, 0, !dbg !1211
  %47 = extractvalue %"char[]" %45, 1, !dbg !1212
  %gt74 = icmp ugt i64 16, %47, !dbg !1212
  %48 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1212
  br i1 %48, label %panic75, label %checkok85, !dbg !1212

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %47, 16, !dbg !1211
  %ptradd87 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !1211
  %49 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1211
  %50 = insertvalue %"char[]" %49, i64 %size86, 1, !dbg !1211
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1211
  br label %loop.cond, !dbg !1211

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.67, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.68, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.69, i64 24 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 41, ptr align 8 %indirectarg91), !dbg !1213
  unreachable, !dbg !1216

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1216

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41), !dbg !1186
  unreachable, !dbg !1186

panic8:                                           ; preds = %if.then
  store i64 %18, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %54 = insertvalue %any undef, ptr %taddr10, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %53, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd14, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1206
  unreachable, !dbg !1206

panic22:                                          ; preds = %checkok16
  store i64 %25, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %59 = insertvalue %any undef, ptr %taddr24, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %58, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %60, ptr %ptradd29, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1206
  unreachable, !dbg !1206

panic35:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr36, align 8
  %62 = insertvalue %any undef, ptr %taddr36, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %64 = insertvalue %any undef, ptr %taddr37, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %63, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %65, ptr %ptradd42, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1209
  unreachable, !dbg !1209

panic47:                                          ; preds = %checkok45
  store i64 15, ptr %taddr48, align 8
  %67 = insertvalue %any undef, ptr %taddr48, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr49, align 8
  %69 = insertvalue %any undef, ptr %taddr49, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %68, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %70, ptr %ptradd54, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1209
  unreachable, !dbg !1209

panic63:                                          ; preds = %checkok57
  store i64 %41, ptr %taddr64, align 8
  %72 = insertvalue %any undef, ptr %taddr64, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr65, align 8
  %74 = insertvalue %any undef, ptr %taddr65, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %73, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %75, ptr %ptradd70, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1209
  unreachable, !dbg !1209

panic75:                                          ; preds = %checkok73
  store i64 %47, ptr %taddr76, align 8
  %77 = insertvalue %any undef, ptr %taddr76, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr77, align 8
  %79 = insertvalue %any undef, ptr %taddr77, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %78, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %80, ptr %ptradd82, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1211
  unreachable, !dbg !1211
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !1217 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1220
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1220
  br i1 %2, label %panic, label %checkok, !dbg !1220

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1221, metadata !DIExpression()), !dbg !1222
  %3 = load ptr, ptr %self, align 8, !dbg !1223
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1224
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !1222
  unreachable, !dbg !1222
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !1225 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1228
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1228
  br i1 %2, label %panic, label %checkok, !dbg !1228

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1229, metadata !DIExpression()), !dbg !1230
  %3 = load ptr, ptr %self, align 8, !dbg !1231
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1232
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43), !dbg !1230
  unreachable, !dbg !1230
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !1233 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1236
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1236
  br i1 %2, label %panic, label %checkok, !dbg !1236

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1237, metadata !DIExpression()), !dbg !1238
  %3 = load ptr, ptr %self, align 8, !dbg !1239
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1240
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 44), !dbg !1238
  unreachable, !dbg !1238
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !1241 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1244
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1244
  br i1 %2, label %panic, label %checkok, !dbg !1244

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1245, metadata !DIExpression()), !dbg !1246
  %3 = load ptr, ptr %self, align 8, !dbg !1247
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1248
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !1246
  unreachable, !dbg !1246
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1249 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %expr = alloca [4 x i64], align 16
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1259
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1259
  br i1 %3, label %panic, label %checkok, !dbg !1259

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1260, metadata !DIExpression()), !dbg !1261
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1262, metadata !DIExpression()), !dbg !1263
  %4 = load ptr, ptr %self, align 8, !dbg !1264
  %checknull = icmp eq ptr %4, null, !dbg !1264
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1264
  br i1 %5, label %panic3, label %checkok7, !dbg !1264

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1265, metadata !DIExpression()), !dbg !1267
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1267
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1269
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1272
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !1273
  %10 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !1273
  br i1 %10, label %panic11, label %checkok15, !dbg !1273

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %expr, i32 32, i1 false), !dbg !1276
  ret void, !dbg !1276

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 55), !dbg !1261
  unreachable, !dbg !1261

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 57), !dbg !1264
  unreachable, !dbg !1264

panic11:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 212), !dbg !1276
  unreachable, !dbg !1276
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !1277 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %self44 = alloca i64, align 8
  %shift = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %s1 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %self104 = alloca i64, align 8
  %shift105 = alloca i64, align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1280
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1280
  br i1 %2, label %panic, label %checkok, !dbg !1280

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1281, metadata !DIExpression()), !dbg !1282
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1283, metadata !DIExpression()), !dbg !1284
  %3 = load ptr, ptr %self, align 8, !dbg !1285
  %checknull = icmp eq ptr %3, null, !dbg !1285
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1285
  br i1 %4, label %panic3, label %checkok7, !dbg !1285

checkok7:                                         ; preds = %checkok
  %5 = load i64, ptr %3, align 8, !dbg !1285
  store i64 %5, ptr %s0, align 8, !dbg !1285
  %6 = load ptr, ptr %self, align 8, !dbg !1286
  %checknull8 = icmp eq ptr %6, null, !dbg !1286
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1286
  br i1 %7, label %panic9, label %checkok13, !dbg !1286

checkok13:                                        ; preds = %checkok7
  %8 = load ptr, ptr %self, align 8, !dbg !1287
  %checknull14 = icmp eq ptr %8, null, !dbg !1287
  %9 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1287
  br i1 %9, label %panic15, label %checkok19, !dbg !1287

checkok19:                                        ; preds = %checkok13
  %10 = load i64, ptr %8, align 8, !dbg !1287
  %11 = load ptr, ptr %self, align 8, !dbg !1288
  %checknull20 = icmp eq ptr %11, null, !dbg !1288
  %12 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !1288
  br i1 %12, label %panic21, label %checkok25, !dbg !1288

checkok25:                                        ; preds = %checkok19
  %13 = load i64, ptr %11, align 8, !dbg !1288
  %mul = mul i64 %10, %13, !dbg !1287
  %14 = load ptr, ptr %self, align 8, !dbg !1289
  %checknull26 = icmp eq ptr %14, null, !dbg !1289
  %15 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1289
  br i1 %15, label %panic27, label %checkok31, !dbg !1289

checkok31:                                        ; preds = %checkok25
  %ptradd = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1289
  %16 = load i64, ptr %ptradd, align 8, !dbg !1289
  %add = add i64 %mul, %16, !dbg !1287
  store i64 %add, ptr %6, align 8, !dbg !1287
  %17 = load ptr, ptr %self, align 8, !dbg !1290
  %checknull32 = icmp eq ptr %17, null, !dbg !1290
  %18 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !1290
  br i1 %18, label %panic33, label %checkok37, !dbg !1290

checkok37:                                        ; preds = %checkok31
  %19 = load ptr, ptr %self, align 8, !dbg !1291
  %checknull38 = icmp eq ptr %19, null, !dbg !1291
  %20 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !1291
  br i1 %20, label %panic39, label %checkok43, !dbg !1291

checkok43:                                        ; preds = %checkok37
  %21 = load i64, ptr %19, align 8
  store i64 %21, ptr %self44, align 8
  store i64 32, ptr %shift, align 8
  %22 = load i64, ptr %self44, align 8, !dbg !1292
  %23 = load i64, ptr %self44, align 8, !dbg !1294
  %24 = load i64, ptr %shift, align 8, !dbg !1295
  %25 = call i64 @llvm.fshr.i64(i64 %22, i64 %23, i64 %24), !dbg !1295
  store i64 %25, ptr %17, align 8, !dbg !1295
  %26 = load ptr, ptr %self, align 8, !dbg !1296
  %checknull45 = icmp eq ptr %26, null, !dbg !1296
  %27 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !1296
  br i1 %27, label %panic46, label %checkok50, !dbg !1296

checkok50:                                        ; preds = %checkok43
  %ptradd51 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !1296
  %28 = load i64, ptr %ptradd51, align 8, !dbg !1296
  %add52 = add i64 %28, -7046029254386353131, !dbg !1296
  store i64 %add52, ptr %ptradd51, align 8, !dbg !1296
  %29 = load ptr, ptr %self, align 8, !dbg !1297
  %checknull53 = icmp eq ptr %29, null, !dbg !1297
  %30 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !1297
  br i1 %30, label %panic54, label %checkok58, !dbg !1297

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !1297
  %31 = load ptr, ptr %self, align 8, !dbg !1298
  %checknull60 = icmp eq ptr %31, null, !dbg !1298
  %32 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !1298
  br i1 %32, label %panic61, label %checkok65, !dbg !1298

checkok65:                                        ; preds = %checkok58
  %ptradd66 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1298
  %33 = load i64, ptr %ptradd66, align 8, !dbg !1298
  %34 = load ptr, ptr %self, align 8, !dbg !1299
  %checknull67 = icmp eq ptr %34, null, !dbg !1299
  %35 = call i1 @llvm.expect.i1(i1 %checknull67, i1 false), !dbg !1299
  br i1 %35, label %panic68, label %checkok72, !dbg !1299

checkok72:                                        ; preds = %checkok65
  %ptradd73 = getelementptr inbounds i8, ptr %34, i64 8, !dbg !1299
  %36 = load i64, ptr %ptradd73, align 8, !dbg !1299
  %mul74 = mul i64 %33, %36, !dbg !1298
  %37 = load ptr, ptr %self, align 8, !dbg !1300
  %checknull75 = icmp eq ptr %37, null, !dbg !1300
  %38 = call i1 @llvm.expect.i1(i1 %checknull75, i1 false), !dbg !1300
  br i1 %38, label %panic76, label %checkok80, !dbg !1300

checkok80:                                        ; preds = %checkok72
  %ptradd81 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !1300
  %39 = load i64, ptr %ptradd81, align 8, !dbg !1300
  %add82 = add i64 %mul74, %39, !dbg !1298
  store i64 %add82, ptr %ptradd59, align 8, !dbg !1298
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1301, metadata !DIExpression()), !dbg !1302
  %40 = load ptr, ptr %self, align 8, !dbg !1303
  %checknull83 = icmp eq ptr %40, null, !dbg !1303
  %41 = call i1 @llvm.expect.i1(i1 %checknull83, i1 false), !dbg !1303
  br i1 %41, label %panic84, label %checkok88, !dbg !1303

checkok88:                                        ; preds = %checkok80
  %ptradd89 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1303
  %42 = load i64, ptr %ptradd89, align 8, !dbg !1303
  store i64 %42, ptr %s1, align 8, !dbg !1303
  %43 = load ptr, ptr %self, align 8, !dbg !1304
  %checknull90 = icmp eq ptr %43, null, !dbg !1304
  %44 = call i1 @llvm.expect.i1(i1 %checknull90, i1 false), !dbg !1304
  br i1 %44, label %panic91, label %checkok95, !dbg !1304

checkok95:                                        ; preds = %checkok88
  %ptradd96 = getelementptr inbounds i8, ptr %43, i64 8, !dbg !1304
  %45 = load ptr, ptr %self, align 8, !dbg !1305
  %checknull97 = icmp eq ptr %45, null, !dbg !1305
  %46 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !1305
  br i1 %46, label %panic98, label %checkok102, !dbg !1305

checkok102:                                       ; preds = %checkok95
  %ptradd103 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1305
  %47 = load i64, ptr %ptradd103, align 8
  store i64 %47, ptr %self104, align 8
  store i64 32, ptr %shift105, align 8
  %48 = load i64, ptr %self104, align 8, !dbg !1306
  %49 = load i64, ptr %self104, align 8, !dbg !1308
  %50 = load i64, ptr %shift105, align 8, !dbg !1309
  %51 = call i64 @llvm.fshr.i64(i64 %48, i64 %49, i64 %50), !dbg !1309
  store i64 %51, ptr %ptradd96, align 8, !dbg !1309
  %52 = load ptr, ptr %self, align 8, !dbg !1310
  %checknull106 = icmp eq ptr %52, null, !dbg !1310
  %53 = call i1 @llvm.expect.i1(i1 %checknull106, i1 false), !dbg !1310
  br i1 %53, label %panic107, label %checkok111, !dbg !1310

checkok111:                                       ; preds = %checkok102
  %ptradd112 = getelementptr inbounds i8, ptr %52, i64 24, !dbg !1310
  %54 = load i64, ptr %ptradd112, align 8, !dbg !1310
  %sub = sub i64 %54, -7046029254386353131, !dbg !1310
  store i64 %sub, ptr %ptradd112, align 8, !dbg !1310
  %55 = load i64, ptr %s0, align 8, !dbg !1311
  %56 = load i64, ptr %s1, align 8, !dbg !1312
  %add113 = add i64 %55, %56, !dbg !1311
  ret i64 %add113, !dbg !1311

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 60), !dbg !1282
  unreachable, !dbg !1282

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 62), !dbg !1285
  unreachable, !dbg !1285

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 63), !dbg !1286
  unreachable, !dbg !1286

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg18, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 63), !dbg !1287
  unreachable, !dbg !1287

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg24, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 63), !dbg !1288
  unreachable, !dbg !1288

panic27:                                          ; preds = %checkok25
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg30, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 63), !dbg !1289
  unreachable, !dbg !1289

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg36, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 64), !dbg !1290
  unreachable, !dbg !1290

panic39:                                          ; preds = %checkok37
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg42, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 64), !dbg !1291
  unreachable, !dbg !1291

panic46:                                          ; preds = %checkok43
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg49, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 65), !dbg !1296
  unreachable, !dbg !1296

panic54:                                          ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg57, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 67), !dbg !1297
  unreachable, !dbg !1297

panic61:                                          ; preds = %checkok58
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg64, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 67), !dbg !1298
  unreachable, !dbg !1298

panic68:                                          ; preds = %checkok65
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg71, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 67), !dbg !1299
  unreachable, !dbg !1299

panic76:                                          ; preds = %checkok72
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg79, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 67), !dbg !1300
  unreachable, !dbg !1300

panic84:                                          ; preds = %checkok80
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg87, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 68), !dbg !1303
  unreachable, !dbg !1303

panic91:                                          ; preds = %checkok88
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg94, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 69), !dbg !1304
  unreachable, !dbg !1304

panic98:                                          ; preds = %checkok95
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg101, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 69), !dbg !1305
  unreachable, !dbg !1305

panic107:                                         ; preds = %checkok102
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg110, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 70), !dbg !1310
  unreachable, !dbg !1310
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1313 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1314
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1314
  br i1 %3, label %panic, label %checkok, !dbg !1314

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1315, metadata !DIExpression()), !dbg !1316
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1317, metadata !DIExpression()), !dbg !1318
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1319
  %4 = load i64, ptr %ptradd, align 8, !dbg !1319
  %lt = icmp ult i64 0, %4, !dbg !1319
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1319

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 76), !dbg !1319
  unreachable, !dbg !1319

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1321, metadata !DIExpression()), !dbg !1323
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1324
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1324
  store i64 %6, ptr %len, align 8, !dbg !1324
  br label %loop.cond, !dbg !1325

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1326
  %lt7 = icmp ult i64 0, %7, !dbg !1326
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1326

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1328, metadata !DIExpression()), !dbg !1330
  %8 = load ptr, ptr %self, align 8, !dbg !1331
  %9 = call i64 @std.math.random.Msws64Random.next_long(ptr %8), !dbg !1332
  store i64 %9, ptr %value, align 8, !dbg !1332
  %10 = load i64, ptr %len, align 8, !dbg !1333
  %le = icmp ule i64 %10, 8, !dbg !1333
  br i1 %le, label %if.then, label %if.exit, !dbg !1333

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1334
  %add = add i64 0, %12, !dbg !1334
  %size = sub i64 %add, 0, !dbg !1334
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1334
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1334
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1336
  %16 = extractvalue %"char[]" %15, 0, !dbg !1336
  %17 = extractvalue %"char[]" %15, 1, !dbg !1337
  %gt = icmp ugt i64 0, %17, !dbg !1337
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1337
  br i1 %18, label %panic8, label %checkok16, !dbg !1337

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1336
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1336
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1336
  %21 = extractvalue %"char[]" %20, 0, !dbg !1336
  %22 = extractvalue %"char[]" %14, 0, !dbg !1336
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1336
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1336
  br label %expr_block.exit, !dbg !1338

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1339
  %31 = extractvalue %"char[]" %30, 0, !dbg !1339
  %32 = extractvalue %"char[]" %30, 1, !dbg !1339
  %gt34 = icmp sgt i64 0, %32, !dbg !1339
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1339
  br i1 %33, label %panic35, label %checkok45, !dbg !1339

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !1339
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1339
  br i1 %34, label %panic47, label %checkok57, !dbg !1339

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1339
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !1339
  %37 = extractvalue %"char[]" %36, 0, !dbg !1339
  %38 = extractvalue %"char[]" %29, 0, !dbg !1339
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1339
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1339
  %43 = load i64, ptr %len, align 8, !dbg !1340
  %sub = sub i64 %43, 8, !dbg !1340
  store i64 %sub, ptr %len, align 8, !dbg !1340
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1341
  %45 = extractvalue %"char[]" %44, 0, !dbg !1341
  %46 = extractvalue %"char[]" %44, 1, !dbg !1342
  %gt74 = icmp ugt i64 8, %46, !dbg !1342
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1342
  br i1 %47, label %panic75, label %checkok85, !dbg !1342

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !1341
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1341
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1341
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1341
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1341
  br label %loop.cond, !dbg !1341

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.70, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.71, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.72, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 78, ptr align 8 %indirectarg91), !dbg !1343
  unreachable, !dbg !1346

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1346

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78), !dbg !1316
  unreachable, !dbg !1316

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1336
  unreachable, !dbg !1336

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1336
  unreachable, !dbg !1336

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1339
  unreachable, !dbg !1339

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1339
  unreachable, !dbg !1339

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1339
  unreachable, !dbg !1339

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1341
  unreachable, !dbg !1341
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !1347 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1350
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1350
  br i1 %2, label %panic, label %checkok, !dbg !1350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1351, metadata !DIExpression()), !dbg !1352
  %3 = load ptr, ptr %self, align 8, !dbg !1353
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1355
  %zext = zext i64 %4 to i128, !dbg !1355
  %shl = shl i128 %zext, 64, !dbg !1355
  %5 = freeze i128 %shl, !dbg !1355
  %6 = load ptr, ptr %self, align 8, !dbg !1353
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !1356
  %zext3 = zext i64 %7 to i128, !dbg !1356
  %add = add i128 %5, %zext3, !dbg !1355
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79), !dbg !1352
  unreachable, !dbg !1352
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !1357 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1360
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1360
  br i1 %2, label %panic, label %checkok, !dbg !1360

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1361, metadata !DIExpression()), !dbg !1362
  %3 = load ptr, ptr %self, align 8, !dbg !1363
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1364
  %trunc = trunc i64 %4 to i32, !dbg !1364
  ret i32 %trunc, !dbg !1364

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 80), !dbg !1362
  unreachable, !dbg !1362
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !1365 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1368
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1368
  br i1 %2, label %panic, label %checkok, !dbg !1368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1369, metadata !DIExpression()), !dbg !1370
  %3 = load ptr, ptr %self, align 8, !dbg !1371
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1372
  %trunc = trunc i64 %4 to i16, !dbg !1372
  ret i16 %trunc, !dbg !1372

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81), !dbg !1370
  unreachable, !dbg !1370
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !1373 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1376
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1376
  br i1 %2, label %panic, label %checkok, !dbg !1376

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1377, metadata !DIExpression()), !dbg !1378
  %3 = load ptr, ptr %self, align 8, !dbg !1379
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1380
  %trunc = trunc i64 %4 to i8, !dbg !1380
  ret i8 %trunc, !dbg !1380

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 82), !dbg !1378
  unreachable, !dbg !1378
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1381 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i32], align 16
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1391
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1391
  br i1 %3, label %panic, label %checkok, !dbg !1391

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1392, metadata !DIExpression()), !dbg !1393
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1394, metadata !DIExpression()), !dbg !1395
  %4 = load ptr, ptr %self, align 8, !dbg !1396
  %checknull = icmp eq ptr %4, null, !dbg !1396
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1396
  br i1 %5, label %panic3, label %checkok7, !dbg !1396

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1397, metadata !DIExpression()), !dbg !1400
  store i32 0, ptr %return_value, align 4, !dbg !1400
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1400
  store i32 0, ptr %ptradd, align 4, !dbg !1400
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1400
  store i32 0, ptr %ptradd8, align 4, !dbg !1400
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1400
  store i32 0, ptr %ptradd9, align 4, !dbg !1400
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1402
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1405
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1406
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1406
  br i1 %10, label %panic13, label %checkok17, !dbg !1406

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 4 %expr, i32 16, i1 false), !dbg !1409
  ret void, !dbg !1409

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 91), !dbg !1393
  unreachable, !dbg !1393

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 93), !dbg !1396
  unreachable, !dbg !1396

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1409
  unreachable, !dbg !1409
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !1410 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %self44 = alloca i32, align 4
  %shift = alloca i32, align 4
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %s1 = alloca i32, align 4
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %self104 = alloca i32, align 4
  %shift105 = alloca i32, align 4
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1413
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1413
  br i1 %2, label %panic, label %checkok, !dbg !1413

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1414, metadata !DIExpression()), !dbg !1415
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1416, metadata !DIExpression()), !dbg !1417
  %3 = load ptr, ptr %self, align 8, !dbg !1418
  %checknull = icmp eq ptr %3, null, !dbg !1418
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1418
  br i1 %4, label %panic3, label %checkok7, !dbg !1418

checkok7:                                         ; preds = %checkok
  %5 = load i32, ptr %3, align 4, !dbg !1418
  store i32 %5, ptr %s0, align 4, !dbg !1418
  %6 = load ptr, ptr %self, align 8, !dbg !1419
  %checknull8 = icmp eq ptr %6, null, !dbg !1419
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1419
  br i1 %7, label %panic9, label %checkok13, !dbg !1419

checkok13:                                        ; preds = %checkok7
  %8 = load ptr, ptr %self, align 8, !dbg !1420
  %checknull14 = icmp eq ptr %8, null, !dbg !1420
  %9 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1420
  br i1 %9, label %panic15, label %checkok19, !dbg !1420

checkok19:                                        ; preds = %checkok13
  %10 = load i32, ptr %8, align 4, !dbg !1420
  %11 = load ptr, ptr %self, align 8, !dbg !1421
  %checknull20 = icmp eq ptr %11, null, !dbg !1421
  %12 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !1421
  br i1 %12, label %panic21, label %checkok25, !dbg !1421

checkok25:                                        ; preds = %checkok19
  %13 = load i32, ptr %11, align 4, !dbg !1421
  %mul = mul i32 %10, %13, !dbg !1420
  %14 = load ptr, ptr %self, align 8, !dbg !1422
  %checknull26 = icmp eq ptr %14, null, !dbg !1422
  %15 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1422
  br i1 %15, label %panic27, label %checkok31, !dbg !1422

checkok31:                                        ; preds = %checkok25
  %ptradd = getelementptr inbounds i8, ptr %14, i64 8, !dbg !1422
  %16 = load i32, ptr %ptradd, align 4, !dbg !1422
  %add = add i32 %mul, %16, !dbg !1420
  store i32 %add, ptr %6, align 4, !dbg !1420
  %17 = load ptr, ptr %self, align 8, !dbg !1423
  %checknull32 = icmp eq ptr %17, null, !dbg !1423
  %18 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !1423
  br i1 %18, label %panic33, label %checkok37, !dbg !1423

checkok37:                                        ; preds = %checkok31
  %19 = load ptr, ptr %self, align 8, !dbg !1424
  %checknull38 = icmp eq ptr %19, null, !dbg !1424
  %20 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !1424
  br i1 %20, label %panic39, label %checkok43, !dbg !1424

checkok43:                                        ; preds = %checkok37
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %self44, align 4
  store i32 16, ptr %shift, align 4
  %22 = load i32, ptr %self44, align 4, !dbg !1425
  %23 = load i32, ptr %self44, align 4, !dbg !1427
  %24 = load i32, ptr %shift, align 4, !dbg !1428
  %25 = call i32 @llvm.fshr.i32(i32 %22, i32 %23, i32 %24), !dbg !1428
  store i32 %25, ptr %17, align 4, !dbg !1428
  %26 = load ptr, ptr %self, align 8, !dbg !1429
  %checknull45 = icmp eq ptr %26, null, !dbg !1429
  %27 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !1429
  br i1 %27, label %panic46, label %checkok50, !dbg !1429

checkok50:                                        ; preds = %checkok43
  %ptradd51 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !1429
  %28 = load i32, ptr %ptradd51, align 4, !dbg !1429
  %add52 = add i32 %28, -1640531527, !dbg !1429
  store i32 %add52, ptr %ptradd51, align 4, !dbg !1429
  %29 = load ptr, ptr %self, align 8, !dbg !1430
  %checknull53 = icmp eq ptr %29, null, !dbg !1430
  %30 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !1430
  br i1 %30, label %panic54, label %checkok58, !dbg !1430

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %29, i64 4, !dbg !1430
  %31 = load ptr, ptr %self, align 8, !dbg !1431
  %checknull60 = icmp eq ptr %31, null, !dbg !1431
  %32 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !1431
  br i1 %32, label %panic61, label %checkok65, !dbg !1431

checkok65:                                        ; preds = %checkok58
  %ptradd66 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !1431
  %33 = load i32, ptr %ptradd66, align 4, !dbg !1431
  %34 = load ptr, ptr %self, align 8, !dbg !1432
  %checknull67 = icmp eq ptr %34, null, !dbg !1432
  %35 = call i1 @llvm.expect.i1(i1 %checknull67, i1 false), !dbg !1432
  br i1 %35, label %panic68, label %checkok72, !dbg !1432

checkok72:                                        ; preds = %checkok65
  %ptradd73 = getelementptr inbounds i8, ptr %34, i64 4, !dbg !1432
  %36 = load i32, ptr %ptradd73, align 4, !dbg !1432
  %mul74 = mul i32 %33, %36, !dbg !1431
  %37 = load ptr, ptr %self, align 8, !dbg !1433
  %checknull75 = icmp eq ptr %37, null, !dbg !1433
  %38 = call i1 @llvm.expect.i1(i1 %checknull75, i1 false), !dbg !1433
  br i1 %38, label %panic76, label %checkok80, !dbg !1433

checkok80:                                        ; preds = %checkok72
  %ptradd81 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !1433
  %39 = load i32, ptr %ptradd81, align 4, !dbg !1433
  %add82 = add i32 %mul74, %39, !dbg !1431
  store i32 %add82, ptr %ptradd59, align 4, !dbg !1431
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1434, metadata !DIExpression()), !dbg !1435
  %40 = load ptr, ptr %self, align 8, !dbg !1436
  %checknull83 = icmp eq ptr %40, null, !dbg !1436
  %41 = call i1 @llvm.expect.i1(i1 %checknull83, i1 false), !dbg !1436
  br i1 %41, label %panic84, label %checkok88, !dbg !1436

checkok88:                                        ; preds = %checkok80
  %ptradd89 = getelementptr inbounds i8, ptr %40, i64 4, !dbg !1436
  %42 = load i32, ptr %ptradd89, align 4, !dbg !1436
  store i32 %42, ptr %s1, align 4, !dbg !1436
  %43 = load ptr, ptr %self, align 8, !dbg !1437
  %checknull90 = icmp eq ptr %43, null, !dbg !1437
  %44 = call i1 @llvm.expect.i1(i1 %checknull90, i1 false), !dbg !1437
  br i1 %44, label %panic91, label %checkok95, !dbg !1437

checkok95:                                        ; preds = %checkok88
  %ptradd96 = getelementptr inbounds i8, ptr %43, i64 4, !dbg !1437
  %45 = load ptr, ptr %self, align 8, !dbg !1438
  %checknull97 = icmp eq ptr %45, null, !dbg !1438
  %46 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !1438
  br i1 %46, label %panic98, label %checkok102, !dbg !1438

checkok102:                                       ; preds = %checkok95
  %ptradd103 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !1438
  %47 = load i32, ptr %ptradd103, align 4
  store i32 %47, ptr %self104, align 4
  store i32 16, ptr %shift105, align 4
  %48 = load i32, ptr %self104, align 4, !dbg !1439
  %49 = load i32, ptr %self104, align 4, !dbg !1441
  %50 = load i32, ptr %shift105, align 4, !dbg !1442
  %51 = call i32 @llvm.fshr.i32(i32 %48, i32 %49, i32 %50), !dbg !1442
  store i32 %51, ptr %ptradd96, align 4, !dbg !1442
  %52 = load ptr, ptr %self, align 8, !dbg !1443
  %checknull106 = icmp eq ptr %52, null, !dbg !1443
  %53 = call i1 @llvm.expect.i1(i1 %checknull106, i1 false), !dbg !1443
  br i1 %53, label %panic107, label %checkok111, !dbg !1443

checkok111:                                       ; preds = %checkok102
  %ptradd112 = getelementptr inbounds i8, ptr %52, i64 12, !dbg !1443
  %54 = load i32, ptr %ptradd112, align 4, !dbg !1443
  %sub = sub i32 %54, -1640531527, !dbg !1443
  store i32 %sub, ptr %ptradd112, align 4, !dbg !1443
  %55 = load i32, ptr %s0, align 4, !dbg !1444
  %56 = load i32, ptr %s1, align 4, !dbg !1445
  %add113 = add i32 %55, %56, !dbg !1444
  ret i32 %add113, !dbg !1444

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !1415
  unreachable, !dbg !1415

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 99), !dbg !1418
  unreachable, !dbg !1418

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 100), !dbg !1419
  unreachable, !dbg !1419

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg18, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 100), !dbg !1420
  unreachable, !dbg !1420

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg24, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 100), !dbg !1421
  unreachable, !dbg !1421

panic27:                                          ; preds = %checkok25
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg30, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 100), !dbg !1422
  unreachable, !dbg !1422

panic33:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg36, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 101), !dbg !1423
  unreachable, !dbg !1423

panic39:                                          ; preds = %checkok37
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg42, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 101), !dbg !1424
  unreachable, !dbg !1424

panic46:                                          ; preds = %checkok43
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg49, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 102), !dbg !1429
  unreachable, !dbg !1429

panic54:                                          ; preds = %checkok50
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg57, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 104), !dbg !1430
  unreachable, !dbg !1430

panic61:                                          ; preds = %checkok58
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg64, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 104), !dbg !1431
  unreachable, !dbg !1431

panic68:                                          ; preds = %checkok65
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg71, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 104), !dbg !1432
  unreachable, !dbg !1432

panic76:                                          ; preds = %checkok72
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg79, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, i32 104), !dbg !1433
  unreachable, !dbg !1433

panic84:                                          ; preds = %checkok80
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg87, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 105), !dbg !1436
  unreachable, !dbg !1436

panic91:                                          ; preds = %checkok88
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg94, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 106), !dbg !1437
  unreachable, !dbg !1437

panic98:                                          ; preds = %checkok95
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg101, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 106), !dbg !1438
  unreachable, !dbg !1438

panic107:                                         ; preds = %checkok102
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg110, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 107), !dbg !1443
  unreachable, !dbg !1443
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1446 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1447
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1447
  br i1 %3, label %panic, label %checkok, !dbg !1447

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1448, metadata !DIExpression()), !dbg !1449
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1450, metadata !DIExpression()), !dbg !1451
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1452
  %4 = load i64, ptr %ptradd, align 8, !dbg !1452
  %lt = icmp ult i64 0, %4, !dbg !1452
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1452

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 113), !dbg !1452
  unreachable, !dbg !1452

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1454, metadata !DIExpression()), !dbg !1456
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1457
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1457
  store i64 %6, ptr %len, align 8, !dbg !1457
  br label %loop.cond, !dbg !1458

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1459
  %lt7 = icmp ult i64 0, %7, !dbg !1459
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1459

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1461, metadata !DIExpression()), !dbg !1463
  %8 = load ptr, ptr %self, align 8, !dbg !1464
  %9 = call i32 @std.math.random.Msws32Random.next_int(ptr %8), !dbg !1465
  store i32 %9, ptr %value, align 4, !dbg !1465
  %10 = load i64, ptr %len, align 8, !dbg !1466
  %le = icmp ule i64 %10, 4, !dbg !1466
  br i1 %le, label %if.then, label %if.exit, !dbg !1466

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1467
  %add = add i64 0, %12, !dbg !1467
  %size = sub i64 %add, 0, !dbg !1467
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1467
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1467
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1469
  %16 = extractvalue %"char[]" %15, 0, !dbg !1469
  %17 = extractvalue %"char[]" %15, 1, !dbg !1470
  %gt = icmp ugt i64 0, %17, !dbg !1470
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1470
  br i1 %18, label %panic8, label %checkok16, !dbg !1470

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1469
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1469
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1469
  %21 = extractvalue %"char[]" %20, 0, !dbg !1469
  %22 = extractvalue %"char[]" %14, 0, !dbg !1469
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1469
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1469
  br label %expr_block.exit, !dbg !1471

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1472
  %31 = extractvalue %"char[]" %30, 0, !dbg !1472
  %32 = extractvalue %"char[]" %30, 1, !dbg !1472
  %gt34 = icmp sgt i64 0, %32, !dbg !1472
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1472
  br i1 %33, label %panic35, label %checkok45, !dbg !1472

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !1472
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1472
  br i1 %34, label %panic47, label %checkok57, !dbg !1472

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1472
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !1472
  %37 = extractvalue %"char[]" %36, 0, !dbg !1472
  %38 = extractvalue %"char[]" %29, 0, !dbg !1472
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1472
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1472
  %43 = load i64, ptr %len, align 8, !dbg !1473
  %sub = sub i64 %43, 4, !dbg !1473
  store i64 %sub, ptr %len, align 8, !dbg !1473
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1474
  %45 = extractvalue %"char[]" %44, 0, !dbg !1474
  %46 = extractvalue %"char[]" %44, 1, !dbg !1475
  %gt74 = icmp ugt i64 4, %46, !dbg !1475
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1475
  br i1 %47, label %panic75, label %checkok85, !dbg !1475

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !1474
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !1474
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1474
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1474
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1474
  br label %loop.cond, !dbg !1474

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.73, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.74, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.75, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 115, ptr align 8 %indirectarg91), !dbg !1476
  unreachable, !dbg !1479

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1479

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115), !dbg !1449
  unreachable, !dbg !1449

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1469
  unreachable, !dbg !1469

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1469
  unreachable, !dbg !1469

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1472
  unreachable, !dbg !1472

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1472
  unreachable, !dbg !1472

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1472
  unreachable, !dbg !1472

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1474
  unreachable, !dbg !1474
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !1480 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1483
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1483
  br i1 %2, label %panic, label %checkok, !dbg !1483

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1484, metadata !DIExpression()), !dbg !1485
  %3 = load ptr, ptr %self, align 8, !dbg !1486
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !1488
  %zext = zext i64 %4 to i128, !dbg !1488
  %shl = shl i128 %zext, 64, !dbg !1488
  %5 = freeze i128 %shl, !dbg !1488
  %6 = load ptr, ptr %self, align 8, !dbg !1486
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !1489
  %zext3 = zext i64 %7 to i128, !dbg !1489
  %add = add i128 %5, %zext3, !dbg !1488
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116), !dbg !1485
  unreachable, !dbg !1485
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !1490 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1493
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1493
  br i1 %2, label %panic, label %checkok, !dbg !1493

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1494, metadata !DIExpression()), !dbg !1495
  %3 = load ptr, ptr %self, align 8, !dbg !1496
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1498
  %zext = zext i32 %4 to i64, !dbg !1498
  %shl = shl i64 %zext, 32, !dbg !1498
  %5 = freeze i64 %shl, !dbg !1498
  %6 = load ptr, ptr %self, align 8, !dbg !1496
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !1499
  %zext3 = zext i32 %7 to i64, !dbg !1499
  %add = add i64 %5, %zext3, !dbg !1498
  ret i64 %add, !dbg !1498

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117), !dbg !1495
  unreachable, !dbg !1495
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !1500 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1503
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1503
  br i1 %2, label %panic, label %checkok, !dbg !1503

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1504, metadata !DIExpression()), !dbg !1505
  %3 = load ptr, ptr %self, align 8, !dbg !1506
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1507
  %trunc = trunc i32 %4 to i16, !dbg !1507
  ret i16 %trunc, !dbg !1507

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118), !dbg !1505
  unreachable, !dbg !1505
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !1508 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1511
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1511
  br i1 %2, label %panic, label %checkok, !dbg !1511

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1512, metadata !DIExpression()), !dbg !1513
  %3 = load ptr, ptr %self, align 8, !dbg !1514
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1515
  %trunc = trunc i32 %4 to i8, !dbg !1515
  ret i8 %trunc, !dbg !1515

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119), !dbg !1513
  unreachable, !dbg !1513
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1516 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i16], align 2
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1526
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1526
  br i1 %3, label %panic, label %checkok, !dbg !1526

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1527, metadata !DIExpression()), !dbg !1528
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1529, metadata !DIExpression()), !dbg !1530
  %4 = load ptr, ptr %self, align 8, !dbg !1531
  %checknull = icmp eq ptr %4, null, !dbg !1531
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1531
  br i1 %5, label %panic3, label %checkok7, !dbg !1531

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1532, metadata !DIExpression()), !dbg !1535
  store i16 0, ptr %return_value, align 2, !dbg !1535
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1535
  store i16 0, ptr %ptradd, align 2, !dbg !1535
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1535
  store i16 0, ptr %ptradd8, align 2, !dbg !1535
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1535
  store i16 0, ptr %ptradd9, align 2, !dbg !1535
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1537
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1540
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1541
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1541
  br i1 %10, label %panic13, label %checkok17, !dbg !1541

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %expr, i32 8, i1 false), !dbg !1544
  ret void, !dbg !1544

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 129), !dbg !1528
  unreachable, !dbg !1528

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 131), !dbg !1531
  unreachable, !dbg !1531

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1544
  unreachable, !dbg !1544
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !1545 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %self46 = alloca i16, align 2
  %shift = alloca i16, align 2
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %s1 = alloca i16, align 2
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %self110 = alloca i16, align 2
  %shift111 = alloca i16, align 2
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1548
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1548
  br i1 %2, label %panic, label %checkok, !dbg !1548

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1549, metadata !DIExpression()), !dbg !1550
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1551, metadata !DIExpression()), !dbg !1552
  %3 = load ptr, ptr %self, align 8, !dbg !1553
  %checknull = icmp eq ptr %3, null, !dbg !1553
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1553
  br i1 %4, label %panic3, label %checkok7, !dbg !1553

checkok7:                                         ; preds = %checkok
  %5 = load i16, ptr %3, align 2, !dbg !1553
  store i16 %5, ptr %s0, align 2, !dbg !1553
  %6 = load ptr, ptr %self, align 8, !dbg !1554
  %checknull8 = icmp eq ptr %6, null, !dbg !1554
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1554
  br i1 %7, label %panic9, label %checkok13, !dbg !1554

checkok13:                                        ; preds = %checkok7
  %8 = load ptr, ptr %self, align 8, !dbg !1555
  %checknull14 = icmp eq ptr %8, null, !dbg !1555
  %9 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1555
  br i1 %9, label %panic15, label %checkok19, !dbg !1555

checkok19:                                        ; preds = %checkok13
  %10 = load i16, ptr %8, align 2, !dbg !1555
  %zext = zext i16 %10 to i32, !dbg !1555
  %11 = load ptr, ptr %self, align 8, !dbg !1556
  %checknull20 = icmp eq ptr %11, null, !dbg !1556
  %12 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !1556
  br i1 %12, label %panic21, label %checkok25, !dbg !1556

checkok25:                                        ; preds = %checkok19
  %13 = load i16, ptr %11, align 2, !dbg !1556
  %zext26 = zext i16 %13 to i32, !dbg !1556
  %mul = mul i32 %zext, %zext26, !dbg !1555
  %14 = load ptr, ptr %self, align 8, !dbg !1557
  %checknull27 = icmp eq ptr %14, null, !dbg !1557
  %15 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !1557
  br i1 %15, label %panic28, label %checkok32, !dbg !1557

checkok32:                                        ; preds = %checkok25
  %ptradd = getelementptr inbounds i8, ptr %14, i64 4, !dbg !1557
  %16 = load i16, ptr %ptradd, align 2, !dbg !1557
  %zext33 = zext i16 %16 to i32, !dbg !1557
  %add = add i32 %mul, %zext33, !dbg !1555
  %trunc = trunc i32 %add to i16, !dbg !1555
  store i16 %trunc, ptr %6, align 2, !dbg !1555
  %17 = load ptr, ptr %self, align 8, !dbg !1558
  %checknull34 = icmp eq ptr %17, null, !dbg !1558
  %18 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !1558
  br i1 %18, label %panic35, label %checkok39, !dbg !1558

checkok39:                                        ; preds = %checkok32
  %19 = load ptr, ptr %self, align 8, !dbg !1559
  %checknull40 = icmp eq ptr %19, null, !dbg !1559
  %20 = call i1 @llvm.expect.i1(i1 %checknull40, i1 false), !dbg !1559
  br i1 %20, label %panic41, label %checkok45, !dbg !1559

checkok45:                                        ; preds = %checkok39
  %21 = load i16, ptr %19, align 2
  store i16 %21, ptr %self46, align 2
  store i16 8, ptr %shift, align 2
  %22 = load i16, ptr %self46, align 2, !dbg !1560
  %23 = load i16, ptr %self46, align 2, !dbg !1562
  %24 = load i16, ptr %shift, align 2, !dbg !1563
  %25 = call i16 @llvm.fshr.i16(i16 %22, i16 %23, i16 %24), !dbg !1563
  store i16 %25, ptr %17, align 2, !dbg !1563
  %26 = load ptr, ptr %self, align 8, !dbg !1564
  %checknull47 = icmp eq ptr %26, null, !dbg !1564
  %27 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !1564
  br i1 %27, label %panic48, label %checkok52, !dbg !1564

checkok52:                                        ; preds = %checkok45
  %ptradd53 = getelementptr inbounds i8, ptr %26, i64 4, !dbg !1564
  %28 = load i16, ptr %ptradd53, align 2, !dbg !1564
  %add54 = add i16 %28, -25033, !dbg !1564
  store i16 %add54, ptr %ptradd53, align 2, !dbg !1564
  %29 = load ptr, ptr %self, align 8, !dbg !1565
  %checknull55 = icmp eq ptr %29, null, !dbg !1565
  %30 = call i1 @llvm.expect.i1(i1 %checknull55, i1 false), !dbg !1565
  br i1 %30, label %panic56, label %checkok60, !dbg !1565

checkok60:                                        ; preds = %checkok52
  %ptradd61 = getelementptr inbounds i8, ptr %29, i64 2, !dbg !1565
  %31 = load ptr, ptr %self, align 8, !dbg !1566
  %checknull62 = icmp eq ptr %31, null, !dbg !1566
  %32 = call i1 @llvm.expect.i1(i1 %checknull62, i1 false), !dbg !1566
  br i1 %32, label %panic63, label %checkok67, !dbg !1566

checkok67:                                        ; preds = %checkok60
  %ptradd68 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !1566
  %33 = load i16, ptr %ptradd68, align 2, !dbg !1566
  %zext69 = zext i16 %33 to i32, !dbg !1566
  %34 = load ptr, ptr %self, align 8, !dbg !1567
  %checknull70 = icmp eq ptr %34, null, !dbg !1567
  %35 = call i1 @llvm.expect.i1(i1 %checknull70, i1 false), !dbg !1567
  br i1 %35, label %panic71, label %checkok75, !dbg !1567

checkok75:                                        ; preds = %checkok67
  %ptradd76 = getelementptr inbounds i8, ptr %34, i64 2, !dbg !1567
  %36 = load i16, ptr %ptradd76, align 2, !dbg !1567
  %zext77 = zext i16 %36 to i32, !dbg !1567
  %mul78 = mul i32 %zext69, %zext77, !dbg !1566
  %37 = load ptr, ptr %self, align 8, !dbg !1568
  %checknull79 = icmp eq ptr %37, null, !dbg !1568
  %38 = call i1 @llvm.expect.i1(i1 %checknull79, i1 false), !dbg !1568
  br i1 %38, label %panic80, label %checkok84, !dbg !1568

checkok84:                                        ; preds = %checkok75
  %ptradd85 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !1568
  %39 = load i16, ptr %ptradd85, align 2, !dbg !1568
  %zext86 = zext i16 %39 to i32, !dbg !1568
  %add87 = add i32 %mul78, %zext86, !dbg !1566
  %trunc88 = trunc i32 %add87 to i16, !dbg !1566
  store i16 %trunc88, ptr %ptradd61, align 2, !dbg !1566
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1569, metadata !DIExpression()), !dbg !1570
  %40 = load ptr, ptr %self, align 8, !dbg !1571
  %checknull89 = icmp eq ptr %40, null, !dbg !1571
  %41 = call i1 @llvm.expect.i1(i1 %checknull89, i1 false), !dbg !1571
  br i1 %41, label %panic90, label %checkok94, !dbg !1571

checkok94:                                        ; preds = %checkok84
  %ptradd95 = getelementptr inbounds i8, ptr %40, i64 2, !dbg !1571
  %42 = load i16, ptr %ptradd95, align 2, !dbg !1571
  store i16 %42, ptr %s1, align 2, !dbg !1571
  %43 = load ptr, ptr %self, align 8, !dbg !1572
  %checknull96 = icmp eq ptr %43, null, !dbg !1572
  %44 = call i1 @llvm.expect.i1(i1 %checknull96, i1 false), !dbg !1572
  br i1 %44, label %panic97, label %checkok101, !dbg !1572

checkok101:                                       ; preds = %checkok94
  %ptradd102 = getelementptr inbounds i8, ptr %43, i64 2, !dbg !1572
  %45 = load ptr, ptr %self, align 8, !dbg !1573
  %checknull103 = icmp eq ptr %45, null, !dbg !1573
  %46 = call i1 @llvm.expect.i1(i1 %checknull103, i1 false), !dbg !1573
  br i1 %46, label %panic104, label %checkok108, !dbg !1573

checkok108:                                       ; preds = %checkok101
  %ptradd109 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !1573
  %47 = load i16, ptr %ptradd109, align 2
  store i16 %47, ptr %self110, align 2
  store i16 8, ptr %shift111, align 2
  %48 = load i16, ptr %self110, align 2, !dbg !1574
  %49 = load i16, ptr %self110, align 2, !dbg !1576
  %50 = load i16, ptr %shift111, align 2, !dbg !1577
  %51 = call i16 @llvm.fshr.i16(i16 %48, i16 %49, i16 %50), !dbg !1577
  store i16 %51, ptr %ptradd102, align 2, !dbg !1577
  %52 = load ptr, ptr %self, align 8, !dbg !1578
  %checknull112 = icmp eq ptr %52, null, !dbg !1578
  %53 = call i1 @llvm.expect.i1(i1 %checknull112, i1 false), !dbg !1578
  br i1 %53, label %panic113, label %checkok117, !dbg !1578

checkok117:                                       ; preds = %checkok108
  %ptradd118 = getelementptr inbounds i8, ptr %52, i64 6, !dbg !1578
  %54 = load i16, ptr %ptradd118, align 2, !dbg !1578
  %sub = sub i16 %54, -25033, !dbg !1578
  store i16 %sub, ptr %ptradd118, align 2, !dbg !1578
  %55 = load i16, ptr %s0, align 2, !dbg !1579
  %zext119 = zext i16 %55 to i32, !dbg !1579
  %56 = load i16, ptr %s1, align 2, !dbg !1580
  %zext120 = zext i16 %56 to i32, !dbg !1580
  %add121 = add i32 %zext119, %zext120, !dbg !1579
  %trunc122 = trunc i32 %add121 to i16, !dbg !1579
  ret i16 %trunc122, !dbg !1579

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 135), !dbg !1550
  unreachable, !dbg !1550

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 137), !dbg !1553
  unreachable, !dbg !1553

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 138), !dbg !1554
  unreachable, !dbg !1554

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg18, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 138), !dbg !1555
  unreachable, !dbg !1555

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg24, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 138), !dbg !1556
  unreachable, !dbg !1556

panic28:                                          ; preds = %checkok25
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg31, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 138), !dbg !1557
  unreachable, !dbg !1557

panic35:                                          ; preds = %checkok32
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg38, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 139), !dbg !1558
  unreachable, !dbg !1558

panic41:                                          ; preds = %checkok39
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg44, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 139), !dbg !1559
  unreachable, !dbg !1559

panic48:                                          ; preds = %checkok45
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg51, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 140), !dbg !1564
  unreachable, !dbg !1564

panic56:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg59, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 142), !dbg !1565
  unreachable, !dbg !1565

panic63:                                          ; preds = %checkok60
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg66, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 142), !dbg !1566
  unreachable, !dbg !1566

panic71:                                          ; preds = %checkok67
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg74, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 142), !dbg !1567
  unreachable, !dbg !1567

panic80:                                          ; preds = %checkok75
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg83, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 142), !dbg !1568
  unreachable, !dbg !1568

panic90:                                          ; preds = %checkok84
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg93, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 143), !dbg !1571
  unreachable, !dbg !1571

panic97:                                          ; preds = %checkok94
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg100, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 144), !dbg !1572
  unreachable, !dbg !1572

panic104:                                         ; preds = %checkok101
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg107, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 144), !dbg !1573
  unreachable, !dbg !1573

panic113:                                         ; preds = %checkok108
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg116, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 145), !dbg !1578
  unreachable, !dbg !1578
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1581 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1582
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1582
  br i1 %3, label %panic, label %checkok, !dbg !1582

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1583, metadata !DIExpression()), !dbg !1584
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1585, metadata !DIExpression()), !dbg !1586
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1587
  %4 = load i64, ptr %ptradd, align 8, !dbg !1587
  %lt = icmp ult i64 0, %4, !dbg !1587
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1587

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 151), !dbg !1587
  unreachable, !dbg !1587

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1589, metadata !DIExpression()), !dbg !1591
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1592
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1592
  store i64 %6, ptr %len, align 8, !dbg !1592
  br label %loop.cond, !dbg !1593

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1594
  %lt7 = icmp ult i64 0, %7, !dbg !1594
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1594

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1596, metadata !DIExpression()), !dbg !1598
  %8 = load ptr, ptr %self, align 8, !dbg !1599
  %9 = call i16 @std.math.random.Msws16Random.next_short(ptr %8), !dbg !1600
  store i16 %9, ptr %value, align 2, !dbg !1600
  %10 = load i64, ptr %len, align 8, !dbg !1601
  %le = icmp ule i64 %10, 2, !dbg !1601
  br i1 %le, label %if.then, label %if.exit, !dbg !1601

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1602
  %add = add i64 0, %12, !dbg !1602
  %size = sub i64 %add, 0, !dbg !1602
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1602
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1602
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1604
  %16 = extractvalue %"char[]" %15, 0, !dbg !1604
  %17 = extractvalue %"char[]" %15, 1, !dbg !1605
  %gt = icmp ugt i64 0, %17, !dbg !1605
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1605
  br i1 %18, label %panic8, label %checkok16, !dbg !1605

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1604
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1604
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1604
  %21 = extractvalue %"char[]" %20, 0, !dbg !1604
  %22 = extractvalue %"char[]" %14, 0, !dbg !1604
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1604
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1604
  br label %expr_block.exit, !dbg !1606

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1607
  %31 = extractvalue %"char[]" %30, 0, !dbg !1607
  %32 = extractvalue %"char[]" %30, 1, !dbg !1607
  %gt34 = icmp sgt i64 0, %32, !dbg !1607
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1607
  br i1 %33, label %panic35, label %checkok45, !dbg !1607

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !1607
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1607
  br i1 %34, label %panic47, label %checkok57, !dbg !1607

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1607
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !1607
  %37 = extractvalue %"char[]" %36, 0, !dbg !1607
  %38 = extractvalue %"char[]" %29, 0, !dbg !1607
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1607
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1607
  %43 = load i64, ptr %len, align 8, !dbg !1608
  %sub = sub i64 %43, 2, !dbg !1608
  store i64 %sub, ptr %len, align 8, !dbg !1608
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1609
  %45 = extractvalue %"char[]" %44, 0, !dbg !1609
  %46 = extractvalue %"char[]" %44, 1, !dbg !1610
  %gt74 = icmp ugt i64 2, %46, !dbg !1610
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1610
  br i1 %47, label %panic75, label %checkok85, !dbg !1610

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !1609
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !1609
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1609
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1609
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1609
  br label %loop.cond, !dbg !1609

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.76, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.77, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.78, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 153, ptr align 8 %indirectarg91), !dbg !1611
  unreachable, !dbg !1614

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1614

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153), !dbg !1584
  unreachable, !dbg !1584

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1604
  unreachable, !dbg !1604

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1604
  unreachable, !dbg !1604

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1607
  unreachable, !dbg !1607

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1607
  unreachable, !dbg !1607

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1607
  unreachable, !dbg !1607

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1609
  unreachable, !dbg !1609
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !1615 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1618
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1618
  br i1 %2, label %panic, label %checkok, !dbg !1618

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1619, metadata !DIExpression()), !dbg !1620
  %3 = load ptr, ptr %self, align 8, !dbg !1621
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !1623
  %zext = zext i64 %4 to i128, !dbg !1623
  %shl = shl i128 %zext, 64, !dbg !1623
  %5 = freeze i128 %shl, !dbg !1623
  %6 = load ptr, ptr %self, align 8, !dbg !1621
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !1624
  %zext3 = zext i64 %7 to i128, !dbg !1624
  %add = add i128 %5, %zext3, !dbg !1623
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154), !dbg !1620
  unreachable, !dbg !1620
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !1625 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1628
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1628
  br i1 %2, label %panic, label %checkok, !dbg !1628

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1629, metadata !DIExpression()), !dbg !1630
  %3 = load ptr, ptr %self, align 8, !dbg !1631
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !1633
  %zext = zext i32 %4 to i64, !dbg !1633
  %shl = shl i64 %zext, 32, !dbg !1633
  %5 = freeze i64 %shl, !dbg !1633
  %6 = load ptr, ptr %self, align 8, !dbg !1631
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !1634
  %zext3 = zext i32 %7 to i64, !dbg !1634
  %add = add i64 %5, %zext3, !dbg !1633
  ret i64 %add, !dbg !1633

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 155), !dbg !1630
  unreachable, !dbg !1630
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !1635 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1638
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1638
  br i1 %2, label %panic, label %checkok, !dbg !1638

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1639, metadata !DIExpression()), !dbg !1640
  %3 = load ptr, ptr %self, align 8, !dbg !1641
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1643
  %zext = zext i16 %4 to i32, !dbg !1643
  %shl = shl i32 %zext, 16, !dbg !1643
  %5 = freeze i32 %shl, !dbg !1643
  %6 = load ptr, ptr %self, align 8, !dbg !1641
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !1644
  %zext3 = zext i16 %7 to i32, !dbg !1644
  %add = add i32 %5, %zext3, !dbg !1643
  ret i32 %add, !dbg !1643

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 156), !dbg !1640
  unreachable, !dbg !1640
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !1645 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1648
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1648
  br i1 %2, label %panic, label %checkok, !dbg !1648

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1649, metadata !DIExpression()), !dbg !1650
  %3 = load ptr, ptr %self, align 8, !dbg !1651
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1652
  %trunc = trunc i16 %4 to i8, !dbg !1652
  ret i8 %trunc, !dbg !1652

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 157), !dbg !1650
  unreachable, !dbg !1650
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1653 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i8], align 1
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1663
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1663
  br i1 %3, label %panic, label %checkok, !dbg !1663

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1664, metadata !DIExpression()), !dbg !1665
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1666, metadata !DIExpression()), !dbg !1667
  %4 = load ptr, ptr %self, align 8, !dbg !1668
  %checknull = icmp eq ptr %4, null, !dbg !1668
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1668
  br i1 %5, label %panic3, label %checkok7, !dbg !1668

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1669, metadata !DIExpression()), !dbg !1672
  store i8 0, ptr %return_value, align 1, !dbg !1672
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1672
  store i8 0, ptr %ptradd, align 1, !dbg !1672
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1672
  store i8 0, ptr %ptradd8, align 1, !dbg !1672
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1672
  store i8 0, ptr %ptradd9, align 1, !dbg !1672
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1674
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1677
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1678
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1678
  br i1 %10, label %panic13, label %checkok17, !dbg !1678

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %expr, i32 4, i1 false), !dbg !1681
  ret void, !dbg !1681

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 166), !dbg !1665
  unreachable, !dbg !1665

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 168), !dbg !1668
  unreachable, !dbg !1668

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1681
  unreachable, !dbg !1681
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !1682 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %self46 = alloca i8, align 1
  %shift = alloca i8, align 1
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %s1 = alloca i8, align 1
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %self110 = alloca i8, align 1
  %shift111 = alloca i8, align 1
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1685
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1685
  br i1 %2, label %panic, label %checkok, !dbg !1685

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1686, metadata !DIExpression()), !dbg !1687
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1688, metadata !DIExpression()), !dbg !1689
  %3 = load ptr, ptr %self, align 8, !dbg !1690
  %checknull = icmp eq ptr %3, null, !dbg !1690
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1690
  br i1 %4, label %panic3, label %checkok7, !dbg !1690

checkok7:                                         ; preds = %checkok
  %5 = load i8, ptr %3, align 1, !dbg !1690
  store i8 %5, ptr %s0, align 1, !dbg !1690
  %6 = load ptr, ptr %self, align 8, !dbg !1691
  %checknull8 = icmp eq ptr %6, null, !dbg !1691
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1691
  br i1 %7, label %panic9, label %checkok13, !dbg !1691

checkok13:                                        ; preds = %checkok7
  %8 = load ptr, ptr %self, align 8, !dbg !1692
  %checknull14 = icmp eq ptr %8, null, !dbg !1692
  %9 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1692
  br i1 %9, label %panic15, label %checkok19, !dbg !1692

checkok19:                                        ; preds = %checkok13
  %10 = load i8, ptr %8, align 1, !dbg !1692
  %zext = zext i8 %10 to i32, !dbg !1692
  %11 = load ptr, ptr %self, align 8, !dbg !1693
  %checknull20 = icmp eq ptr %11, null, !dbg !1693
  %12 = call i1 @llvm.expect.i1(i1 %checknull20, i1 false), !dbg !1693
  br i1 %12, label %panic21, label %checkok25, !dbg !1693

checkok25:                                        ; preds = %checkok19
  %13 = load i8, ptr %11, align 1, !dbg !1693
  %zext26 = zext i8 %13 to i32, !dbg !1693
  %mul = mul i32 %zext, %zext26, !dbg !1692
  %14 = load ptr, ptr %self, align 8, !dbg !1694
  %checknull27 = icmp eq ptr %14, null, !dbg !1694
  %15 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !1694
  br i1 %15, label %panic28, label %checkok32, !dbg !1694

checkok32:                                        ; preds = %checkok25
  %ptradd = getelementptr inbounds i8, ptr %14, i64 2, !dbg !1694
  %16 = load i8, ptr %ptradd, align 1, !dbg !1694
  %zext33 = zext i8 %16 to i32, !dbg !1694
  %add = add i32 %mul, %zext33, !dbg !1692
  %trunc = trunc i32 %add to i8, !dbg !1692
  store i8 %trunc, ptr %6, align 1, !dbg !1692
  %17 = load ptr, ptr %self, align 8, !dbg !1695
  %checknull34 = icmp eq ptr %17, null, !dbg !1695
  %18 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !1695
  br i1 %18, label %panic35, label %checkok39, !dbg !1695

checkok39:                                        ; preds = %checkok32
  %19 = load ptr, ptr %self, align 8, !dbg !1696
  %checknull40 = icmp eq ptr %19, null, !dbg !1696
  %20 = call i1 @llvm.expect.i1(i1 %checknull40, i1 false), !dbg !1696
  br i1 %20, label %panic41, label %checkok45, !dbg !1696

checkok45:                                        ; preds = %checkok39
  %21 = load i8, ptr %19, align 1
  store i8 %21, ptr %self46, align 1
  store i8 4, ptr %shift, align 1
  %22 = load i8, ptr %self46, align 1, !dbg !1697
  %23 = load i8, ptr %self46, align 1, !dbg !1699
  %24 = load i8, ptr %shift, align 1, !dbg !1700
  %25 = call i8 @llvm.fshr.i8(i8 %22, i8 %23, i8 %24), !dbg !1700
  store i8 %25, ptr %17, align 1, !dbg !1700
  %26 = load ptr, ptr %self, align 8, !dbg !1701
  %checknull47 = icmp eq ptr %26, null, !dbg !1701
  %27 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !1701
  br i1 %27, label %panic48, label %checkok52, !dbg !1701

checkok52:                                        ; preds = %checkok45
  %ptradd53 = getelementptr inbounds i8, ptr %26, i64 2, !dbg !1701
  %28 = load i8, ptr %ptradd53, align 1, !dbg !1701
  %add54 = add i8 %28, -97, !dbg !1701
  store i8 %add54, ptr %ptradd53, align 1, !dbg !1701
  %29 = load ptr, ptr %self, align 8, !dbg !1702
  %checknull55 = icmp eq ptr %29, null, !dbg !1702
  %30 = call i1 @llvm.expect.i1(i1 %checknull55, i1 false), !dbg !1702
  br i1 %30, label %panic56, label %checkok60, !dbg !1702

checkok60:                                        ; preds = %checkok52
  %ptradd61 = getelementptr inbounds i8, ptr %29, i64 1, !dbg !1702
  %31 = load ptr, ptr %self, align 8, !dbg !1703
  %checknull62 = icmp eq ptr %31, null, !dbg !1703
  %32 = call i1 @llvm.expect.i1(i1 %checknull62, i1 false), !dbg !1703
  br i1 %32, label %panic63, label %checkok67, !dbg !1703

checkok67:                                        ; preds = %checkok60
  %ptradd68 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !1703
  %33 = load i8, ptr %ptradd68, align 1, !dbg !1703
  %zext69 = zext i8 %33 to i32, !dbg !1703
  %34 = load ptr, ptr %self, align 8, !dbg !1704
  %checknull70 = icmp eq ptr %34, null, !dbg !1704
  %35 = call i1 @llvm.expect.i1(i1 %checknull70, i1 false), !dbg !1704
  br i1 %35, label %panic71, label %checkok75, !dbg !1704

checkok75:                                        ; preds = %checkok67
  %ptradd76 = getelementptr inbounds i8, ptr %34, i64 1, !dbg !1704
  %36 = load i8, ptr %ptradd76, align 1, !dbg !1704
  %zext77 = zext i8 %36 to i32, !dbg !1704
  %mul78 = mul i32 %zext69, %zext77, !dbg !1703
  %37 = load ptr, ptr %self, align 8, !dbg !1705
  %checknull79 = icmp eq ptr %37, null, !dbg !1705
  %38 = call i1 @llvm.expect.i1(i1 %checknull79, i1 false), !dbg !1705
  br i1 %38, label %panic80, label %checkok84, !dbg !1705

checkok84:                                        ; preds = %checkok75
  %ptradd85 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !1705
  %39 = load i8, ptr %ptradd85, align 1, !dbg !1705
  %zext86 = zext i8 %39 to i32, !dbg !1705
  %add87 = add i32 %mul78, %zext86, !dbg !1703
  %trunc88 = trunc i32 %add87 to i8, !dbg !1703
  store i8 %trunc88, ptr %ptradd61, align 1, !dbg !1703
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1706, metadata !DIExpression()), !dbg !1707
  %40 = load ptr, ptr %self, align 8, !dbg !1708
  %checknull89 = icmp eq ptr %40, null, !dbg !1708
  %41 = call i1 @llvm.expect.i1(i1 %checknull89, i1 false), !dbg !1708
  br i1 %41, label %panic90, label %checkok94, !dbg !1708

checkok94:                                        ; preds = %checkok84
  %ptradd95 = getelementptr inbounds i8, ptr %40, i64 1, !dbg !1708
  %42 = load i8, ptr %ptradd95, align 1, !dbg !1708
  store i8 %42, ptr %s1, align 1, !dbg !1708
  %43 = load ptr, ptr %self, align 8, !dbg !1709
  %checknull96 = icmp eq ptr %43, null, !dbg !1709
  %44 = call i1 @llvm.expect.i1(i1 %checknull96, i1 false), !dbg !1709
  br i1 %44, label %panic97, label %checkok101, !dbg !1709

checkok101:                                       ; preds = %checkok94
  %ptradd102 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1709
  %45 = load ptr, ptr %self, align 8, !dbg !1710
  %checknull103 = icmp eq ptr %45, null, !dbg !1710
  %46 = call i1 @llvm.expect.i1(i1 %checknull103, i1 false), !dbg !1710
  br i1 %46, label %panic104, label %checkok108, !dbg !1710

checkok108:                                       ; preds = %checkok101
  %ptradd109 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !1710
  %47 = load i8, ptr %ptradd109, align 1
  store i8 %47, ptr %self110, align 1
  store i8 4, ptr %shift111, align 1
  %48 = load i8, ptr %self110, align 1, !dbg !1711
  %49 = load i8, ptr %self110, align 1, !dbg !1713
  %50 = load i8, ptr %shift111, align 1, !dbg !1714
  %51 = call i8 @llvm.fshr.i8(i8 %48, i8 %49, i8 %50), !dbg !1714
  store i8 %51, ptr %ptradd102, align 1, !dbg !1714
  %52 = load ptr, ptr %self, align 8, !dbg !1715
  %checknull112 = icmp eq ptr %52, null, !dbg !1715
  %53 = call i1 @llvm.expect.i1(i1 %checknull112, i1 false), !dbg !1715
  br i1 %53, label %panic113, label %checkok117, !dbg !1715

checkok117:                                       ; preds = %checkok108
  %ptradd118 = getelementptr inbounds i8, ptr %52, i64 3, !dbg !1715
  %54 = load i8, ptr %ptradd118, align 1, !dbg !1715
  %sub = sub i8 %54, -97, !dbg !1715
  store i8 %sub, ptr %ptradd118, align 1, !dbg !1715
  %55 = load i8, ptr %s0, align 1, !dbg !1716
  %zext119 = zext i8 %55 to i32, !dbg !1716
  %56 = load i8, ptr %s1, align 1, !dbg !1717
  %zext120 = zext i8 %56 to i32, !dbg !1717
  %add121 = add i32 %zext119, %zext120, !dbg !1716
  %trunc122 = trunc i32 %add121 to i8, !dbg !1716
  ret i8 %trunc122, !dbg !1716

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 171), !dbg !1687
  unreachable, !dbg !1687

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 173), !dbg !1690
  unreachable, !dbg !1690

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 174), !dbg !1691
  unreachable, !dbg !1691

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg18, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 174), !dbg !1692
  unreachable, !dbg !1692

panic21:                                          ; preds = %checkok19
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg24, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 174), !dbg !1693
  unreachable, !dbg !1693

panic28:                                          ; preds = %checkok25
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg31, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 174), !dbg !1694
  unreachable, !dbg !1694

panic35:                                          ; preds = %checkok32
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg38, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 175), !dbg !1695
  unreachable, !dbg !1695

panic41:                                          ; preds = %checkok39
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg44, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 175), !dbg !1696
  unreachable, !dbg !1696

panic48:                                          ; preds = %checkok45
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg51, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 176), !dbg !1701
  unreachable, !dbg !1701

panic56:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg59, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 178), !dbg !1702
  unreachable, !dbg !1702

panic63:                                          ; preds = %checkok60
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg66, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 178), !dbg !1703
  unreachable, !dbg !1703

panic71:                                          ; preds = %checkok67
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg74, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 178), !dbg !1704
  unreachable, !dbg !1704

panic80:                                          ; preds = %checkok75
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg83, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69(ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, i32 178), !dbg !1705
  unreachable, !dbg !1705

panic90:                                          ; preds = %checkok84
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg93, align 8
  %70 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %70(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 179), !dbg !1708
  unreachable, !dbg !1708

panic97:                                          ; preds = %checkok94
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg100, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, i32 180), !dbg !1709
  unreachable, !dbg !1709

panic104:                                         ; preds = %checkok101
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg107, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 180), !dbg !1710
  unreachable, !dbg !1710

panic113:                                         ; preds = %checkok108
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg116, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, i32 181), !dbg !1715
  unreachable, !dbg !1715
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1718 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1719
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1719
  br i1 %3, label %panic, label %checkok, !dbg !1719

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1720, metadata !DIExpression()), !dbg !1721
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1722, metadata !DIExpression()), !dbg !1723
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1724, metadata !DIExpression()), !dbg !1726
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1727
  %4 = load i64, ptr %ptradd, align 8, !dbg !1727
  store i64 %4, ptr %len, align 8, !dbg !1727
  br label %loop.cond, !dbg !1728

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1729
  %lt = icmp ult i64 0, %5, !dbg !1729
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1729

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1731, metadata !DIExpression()), !dbg !1733
  %6 = load ptr, ptr %self, align 8, !dbg !1734
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1735
  store i8 %7, ptr %value, align 1, !dbg !1735
  %8 = load i64, ptr %len, align 8, !dbg !1736
  %le = icmp ule i64 %8, 1, !dbg !1736
  br i1 %le, label %if.then, label %if.exit, !dbg !1736

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1737
  %add = add i64 0, %10, !dbg !1737
  %size = sub i64 %add, 0, !dbg !1737
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1737
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1737
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !1739
  %14 = extractvalue %"char[]" %13, 0, !dbg !1739
  %15 = extractvalue %"char[]" %13, 1, !dbg !1740
  %gt = icmp ugt i64 0, %15, !dbg !1740
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1740
  br i1 %16, label %panic3, label %checkok11, !dbg !1740

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !1739
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1739
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !1739
  %19 = extractvalue %"char[]" %18, 0, !dbg !1739
  %20 = extractvalue %"char[]" %12, 0, !dbg !1739
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !1739
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !1739
  br label %expr_block.exit, !dbg !1741

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !1742
  %29 = extractvalue %"char[]" %28, 0, !dbg !1742
  %30 = extractvalue %"char[]" %28, 1, !dbg !1742
  %gt29 = icmp sgt i64 0, %30, !dbg !1742
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !1742
  br i1 %31, label %panic30, label %checkok40, !dbg !1742

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !1742
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !1742
  br i1 %32, label %panic42, label %checkok52, !dbg !1742

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !1742
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !1742
  %35 = extractvalue %"char[]" %34, 0, !dbg !1742
  %36 = extractvalue %"char[]" %27, 0, !dbg !1742
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !1742
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !1742
  %41 = load i64, ptr %len, align 8, !dbg !1743
  %sub = sub i64 %41, 1, !dbg !1743
  store i64 %sub, ptr %len, align 8, !dbg !1743
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !1744
  %43 = extractvalue %"char[]" %42, 0, !dbg !1744
  %44 = extractvalue %"char[]" %42, 1, !dbg !1745
  %gt69 = icmp ugt i64 1, %44, !dbg !1745
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !1745
  br i1 %45, label %panic70, label %checkok80, !dbg !1745

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !1744
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1744
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !1744
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !1744
  store %"char[]" %47, ptr %bytes, align 8, !dbg !1744
  br label %loop.cond, !dbg !1744

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.79, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.80, i64 12 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.81, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 186, ptr align 8 %indirectarg86), !dbg !1746
  unreachable, !dbg !1749

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !1749

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 186), !dbg !1721
  unreachable, !dbg !1721

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !1739
  unreachable, !dbg !1739

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !1739
  unreachable, !dbg !1739

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !1742
  unreachable, !dbg !1742

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !1742
  unreachable, !dbg !1742

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !1742
  unreachable, !dbg !1742

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !1744
  unreachable, !dbg !1744
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !1750 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1753
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1753
  br i1 %2, label %panic, label %checkok, !dbg !1753

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1754, metadata !DIExpression()), !dbg !1755
  %3 = load ptr, ptr %self, align 8, !dbg !1756
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !1758
  %zext = zext i64 %4 to i128, !dbg !1758
  %shl = shl i128 %zext, 64, !dbg !1758
  %5 = freeze i128 %shl, !dbg !1758
  %6 = load ptr, ptr %self, align 8, !dbg !1756
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !1759
  %zext3 = zext i64 %7 to i128, !dbg !1759
  %add = add i128 %5, %zext3, !dbg !1758
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 187), !dbg !1755
  unreachable, !dbg !1755
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !1760 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1763
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1763
  br i1 %2, label %panic, label %checkok, !dbg !1763

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1764, metadata !DIExpression()), !dbg !1765
  %3 = load ptr, ptr %self, align 8, !dbg !1766
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !1768
  %zext = zext i32 %4 to i64, !dbg !1768
  %shl = shl i64 %zext, 32, !dbg !1768
  %5 = freeze i64 %shl, !dbg !1768
  %6 = load ptr, ptr %self, align 8, !dbg !1766
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !1769
  %zext3 = zext i32 %7 to i64, !dbg !1769
  %add = add i64 %5, %zext3, !dbg !1768
  ret i64 %add, !dbg !1768

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 188), !dbg !1765
  unreachable, !dbg !1765
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !1770 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1773
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1773
  br i1 %2, label %panic, label %checkok, !dbg !1773

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1774, metadata !DIExpression()), !dbg !1775
  %3 = load ptr, ptr %self, align 8, !dbg !1776
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !1778
  %zext = zext i16 %4 to i32, !dbg !1778
  %shl = shl i32 %zext, 16, !dbg !1778
  %5 = freeze i32 %shl, !dbg !1778
  %6 = load ptr, ptr %self, align 8, !dbg !1776
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !1779
  %zext3 = zext i16 %7 to i32, !dbg !1779
  %add = add i32 %5, %zext3, !dbg !1778
  ret i32 %add, !dbg !1778

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 189), !dbg !1775
  unreachable, !dbg !1775
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !1780 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1783
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1783
  br i1 %2, label %panic, label %checkok, !dbg !1783

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1784, metadata !DIExpression()), !dbg !1785
  %3 = load ptr, ptr %self, align 8, !dbg !1786
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !1788
  %zext = zext i8 %4 to i16, !dbg !1788
  %zext3 = zext i16 %zext to i32, !dbg !1788
  %shl = shl i32 %zext3, 8, !dbg !1788
  %5 = freeze i32 %shl, !dbg !1788
  %6 = load ptr, ptr %self, align 8, !dbg !1786
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1789
  %zext4 = zext i8 %7 to i32, !dbg !1789
  %add = add i32 %5, %zext4, !dbg !1788
  %trunc = trunc i32 %add to i16, !dbg !1788
  ret i16 %trunc, !dbg !1788

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 190), !dbg !1785
  unreachable, !dbg !1785
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1790 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1795
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1795
  br i1 %3, label %panic, label %checkok, !dbg !1795

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1796, metadata !DIExpression()), !dbg !1797
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1798, metadata !DIExpression()), !dbg !1799
  %4 = load ptr, ptr %self, align 8, !dbg !1800
  %checknull = icmp eq ptr %4, null, !dbg !1800
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1800
  br i1 %5, label %panic3, label %checkok7, !dbg !1800

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1801, metadata !DIExpression()), !dbg !1803
  store i128 0, ptr %return_value, align 16, !dbg !1803
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1805
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1808
  %10 = load i128, ptr %return_value, align 16, !dbg !1809
  store i128 %10, ptr %4, align 16, !dbg !1809
  ret void, !dbg !1809

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !1797
  unreachable, !dbg !1797

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 22), !dbg !1800
  unreachable, !dbg !1800
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !1810 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1813
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1813
  br i1 %2, label %panic, label %checkok, !dbg !1813

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1814, metadata !DIExpression()), !dbg !1815
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1816, metadata !DIExpression()), !dbg !1817
  %3 = load ptr, ptr %self, align 8, !dbg !1818
  store ptr %3, ptr %s, align 8, !dbg !1818
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !1819, metadata !DIExpression()), !dbg !1820
  %4 = load ptr, ptr %s, align 8, !dbg !1821
  %checknull = icmp eq ptr %4, null, !dbg !1821
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1821
  br i1 %5, label %panic3, label %checkok7, !dbg !1821

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !1821
  %7 = load ptr, ptr %s, align 8, !dbg !1822
  %checknull8 = icmp eq ptr %7, null, !dbg !1822
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1822
  br i1 %8, label %panic9, label %checkok13, !dbg !1822

checkok13:                                        ; preds = %checkok7
  %9 = load i128, ptr %7, align 16, !dbg !1822
  %lshr = lshr i128 %9, 35, !dbg !1823
  %10 = freeze i128 %lshr, !dbg !1823
  %xor14 = xor i128 %6, %10, !dbg !1824
  store i128 %xor14, ptr %xor, align 16, !dbg !1824
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !1825, metadata !DIExpression()), !dbg !1826
  %11 = load ptr, ptr %s, align 8, !dbg !1827
  %checknull15 = icmp eq ptr %11, null, !dbg !1827
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1827
  br i1 %12, label %panic16, label %checkok20, !dbg !1827

checkok20:                                        ; preds = %checkok13
  %13 = load i128, ptr %11, align 16, !dbg !1827
  %lshr21 = lshr i128 %13, 122, !dbg !1828
  %14 = freeze i128 %lshr21, !dbg !1828
  %trunc = trunc i128 %14 to i8, !dbg !1828
  store i8 %trunc, ptr %rot, align 1, !dbg !1828
  %15 = load ptr, ptr %s, align 8, !dbg !1829
  %checknull22 = icmp eq ptr %15, null, !dbg !1829
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1829
  br i1 %16, label %panic23, label %checkok27, !dbg !1829

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !1830
  %checknull28 = icmp eq ptr %17, null, !dbg !1830
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1830
  br i1 %18, label %panic29, label %checkok33, !dbg !1830

checkok33:                                        ; preds = %checkok27
  %19 = load i128, ptr %17, align 16, !dbg !1830
  %mul = mul i128 %19, -48899967401452674293065485854872568811, !dbg !1831
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !1831
  store i128 %add, ptr %15, align 16, !dbg !1831
  %20 = load i128, ptr %xor, align 16, !dbg !1832
  %lshr34 = lshr i128 %20, 58, !dbg !1833
  %21 = freeze i128 %lshr34, !dbg !1833
  %trunc35 = trunc i128 %21 to i64, !dbg !1833
  store i64 %trunc35, ptr %self36, align 8
  %22 = load i8, ptr %rot, align 1, !dbg !1834
  %zext = zext i8 %22 to i64, !dbg !1834
  store i64 %zext, ptr %shift, align 8
  %23 = load i64, ptr %self36, align 8, !dbg !1835
  %24 = load i64, ptr %self36, align 8, !dbg !1837
  %25 = load i64, ptr %shift, align 8, !dbg !1838
  %26 = call i64 @llvm.fshr.i64(i64 %23, i64 %24, i64 %25), !dbg !1838
  ret i64 %26, !dbg !1838

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26), !dbg !1815
  unreachable, !dbg !1815

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30), !dbg !1821
  unreachable, !dbg !1821

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 30), !dbg !1822
  unreachable, !dbg !1822

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 31), !dbg !1827
  unreachable, !dbg !1827

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 32), !dbg !1829
  unreachable, !dbg !1829

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 32), !dbg !1830
  unreachable, !dbg !1830
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1839 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1840
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1840
  br i1 %3, label %panic, label %checkok, !dbg !1840

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1841, metadata !DIExpression()), !dbg !1842
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1843, metadata !DIExpression()), !dbg !1844
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1845
  %4 = load i64, ptr %ptradd, align 8, !dbg !1845
  %lt = icmp ult i64 0, %4, !dbg !1845
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1845

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 37), !dbg !1845
  unreachable, !dbg !1845

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1847, metadata !DIExpression()), !dbg !1849
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1850
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1850
  store i64 %6, ptr %len, align 8, !dbg !1850
  br label %loop.cond, !dbg !1851

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1852
  %lt7 = icmp ult i64 0, %7, !dbg !1852
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1852

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1854, metadata !DIExpression()), !dbg !1856
  %8 = load ptr, ptr %self, align 8, !dbg !1857
  %9 = call i64 @std.math.random.Pcg128Random.next_long(ptr %8), !dbg !1858
  store i64 %9, ptr %value, align 8, !dbg !1858
  %10 = load i64, ptr %len, align 8, !dbg !1859
  %le = icmp ule i64 %10, 8, !dbg !1859
  br i1 %le, label %if.then, label %if.exit, !dbg !1859

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1860
  %add = add i64 0, %12, !dbg !1860
  %size = sub i64 %add, 0, !dbg !1860
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1860
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1860
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1862
  %16 = extractvalue %"char[]" %15, 0, !dbg !1862
  %17 = extractvalue %"char[]" %15, 1, !dbg !1863
  %gt = icmp ugt i64 0, %17, !dbg !1863
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1863
  br i1 %18, label %panic8, label %checkok16, !dbg !1863

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1862
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1862
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1862
  %21 = extractvalue %"char[]" %20, 0, !dbg !1862
  %22 = extractvalue %"char[]" %14, 0, !dbg !1862
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1862
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1862
  br label %expr_block.exit, !dbg !1864

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1865
  %31 = extractvalue %"char[]" %30, 0, !dbg !1865
  %32 = extractvalue %"char[]" %30, 1, !dbg !1865
  %gt34 = icmp sgt i64 0, %32, !dbg !1865
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1865
  br i1 %33, label %panic35, label %checkok45, !dbg !1865

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !1865
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1865
  br i1 %34, label %panic47, label %checkok57, !dbg !1865

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1865
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !1865
  %37 = extractvalue %"char[]" %36, 0, !dbg !1865
  %38 = extractvalue %"char[]" %29, 0, !dbg !1865
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1865
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1865
  %43 = load i64, ptr %len, align 8, !dbg !1866
  %sub = sub i64 %43, 8, !dbg !1866
  store i64 %sub, ptr %len, align 8, !dbg !1866
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1867
  %45 = extractvalue %"char[]" %44, 0, !dbg !1867
  %46 = extractvalue %"char[]" %44, 1, !dbg !1868
  %gt74 = icmp ugt i64 8, %46, !dbg !1868
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1868
  br i1 %47, label %panic75, label %checkok85, !dbg !1868

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !1867
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1867
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1867
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1867
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1867
  br label %loop.cond, !dbg !1867

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.98, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.99, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.100, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 39, ptr align 8 %indirectarg91), !dbg !1869
  unreachable, !dbg !1872

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1872

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !1842
  unreachable, !dbg !1842

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1862
  unreachable, !dbg !1862

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1862
  unreachable, !dbg !1862

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1865
  unreachable, !dbg !1865

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1865
  unreachable, !dbg !1865

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1865
  unreachable, !dbg !1865

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1867
  unreachable, !dbg !1867
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !1873 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1876
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1876
  br i1 %2, label %panic, label %checkok, !dbg !1876

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1877, metadata !DIExpression()), !dbg !1878
  %3 = load ptr, ptr %self, align 8, !dbg !1879
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1881
  %zext = zext i64 %4 to i128, !dbg !1881
  %shl = shl i128 %zext, 64, !dbg !1881
  %5 = freeze i128 %shl, !dbg !1881
  %6 = load ptr, ptr %self, align 8, !dbg !1879
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !1882
  %zext3 = zext i64 %7 to i128, !dbg !1882
  %add = add i128 %5, %zext3, !dbg !1881
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 40), !dbg !1878
  unreachable, !dbg !1878
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !1883 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1886
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1886
  br i1 %2, label %panic, label %checkok, !dbg !1886

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1887, metadata !DIExpression()), !dbg !1888
  %3 = load ptr, ptr %self, align 8, !dbg !1889
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1890
  %trunc = trunc i64 %4 to i32, !dbg !1890
  ret i32 %trunc, !dbg !1890

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41), !dbg !1888
  unreachable, !dbg !1888
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !1891 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1894
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1894
  br i1 %2, label %panic, label %checkok, !dbg !1894

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1895, metadata !DIExpression()), !dbg !1896
  %3 = load ptr, ptr %self, align 8, !dbg !1897
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1898
  %trunc = trunc i64 %4 to i16, !dbg !1898
  ret i16 %trunc, !dbg !1898

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !1896
  unreachable, !dbg !1896
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !1899 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1902
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1902
  br i1 %2, label %panic, label %checkok, !dbg !1902

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1903, metadata !DIExpression()), !dbg !1904
  %3 = load ptr, ptr %self, align 8, !dbg !1905
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1906
  %trunc = trunc i64 %4 to i8, !dbg !1906
  ret i8 %trunc, !dbg !1906

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43), !dbg !1904
  unreachable, !dbg !1904
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1907 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1912
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1912
  br i1 %3, label %panic, label %checkok, !dbg !1912

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1913, metadata !DIExpression()), !dbg !1914
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1915, metadata !DIExpression()), !dbg !1916
  %4 = load ptr, ptr %self, align 8, !dbg !1917
  %checknull = icmp eq ptr %4, null, !dbg !1917
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1917
  br i1 %5, label %panic3, label %checkok7, !dbg !1917

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1918, metadata !DIExpression()), !dbg !1920
  store i64 0, ptr %return_value, align 8, !dbg !1920
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1922
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1925
  %10 = load i64, ptr %return_value, align 8, !dbg !1926
  store i64 %10, ptr %4, align 8, !dbg !1926
  ret void, !dbg !1926

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 49), !dbg !1914
  unreachable, !dbg !1914

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 51), !dbg !1917
  unreachable, !dbg !1917
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !1927 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1930
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1930
  br i1 %2, label %panic, label %checkok, !dbg !1930

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1931, metadata !DIExpression()), !dbg !1932
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1933, metadata !DIExpression()), !dbg !1934
  %3 = load ptr, ptr %self, align 8, !dbg !1935
  store ptr %3, ptr %s, align 8, !dbg !1935
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !1936, metadata !DIExpression()), !dbg !1937
  %4 = load ptr, ptr %s, align 8, !dbg !1938
  %checknull = icmp eq ptr %4, null, !dbg !1938
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1938
  br i1 %5, label %panic3, label %checkok7, !dbg !1938

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !1938
  %7 = load ptr, ptr %s, align 8, !dbg !1939
  %checknull8 = icmp eq ptr %7, null, !dbg !1939
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1939
  br i1 %8, label %panic9, label %checkok13, !dbg !1939

checkok13:                                        ; preds = %checkok7
  %9 = load i64, ptr %7, align 8, !dbg !1939
  %lshr = lshr i64 %9, 18, !dbg !1940
  %10 = freeze i64 %lshr, !dbg !1940
  %xor14 = xor i64 %6, %10, !dbg !1941
  store i64 %xor14, ptr %xor, align 8, !dbg !1941
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !1942, metadata !DIExpression()), !dbg !1943
  %11 = load ptr, ptr %s, align 8, !dbg !1944
  %checknull15 = icmp eq ptr %11, null, !dbg !1944
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1944
  br i1 %12, label %panic16, label %checkok20, !dbg !1944

checkok20:                                        ; preds = %checkok13
  %13 = load i64, ptr %11, align 8, !dbg !1944
  %lshr21 = lshr i64 %13, 59, !dbg !1945
  %14 = freeze i64 %lshr21, !dbg !1945
  %trunc = trunc i64 %14 to i8, !dbg !1945
  store i8 %trunc, ptr %rot, align 1, !dbg !1945
  %15 = load ptr, ptr %s, align 8, !dbg !1946
  %checknull22 = icmp eq ptr %15, null, !dbg !1946
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1946
  br i1 %16, label %panic23, label %checkok27, !dbg !1946

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !1947
  %checknull28 = icmp eq ptr %17, null, !dbg !1947
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1947
  br i1 %18, label %panic29, label %checkok33, !dbg !1947

checkok33:                                        ; preds = %checkok27
  %19 = load i64, ptr %17, align 8, !dbg !1947
  %mul = mul i64 %19, -3372029247567499371, !dbg !1948
  %add = add i64 %mul, -7046029254386353131, !dbg !1948
  store i64 %add, ptr %15, align 8, !dbg !1948
  %20 = load i64, ptr %xor, align 8, !dbg !1949
  %lshr34 = lshr i64 %20, 27, !dbg !1950
  %21 = freeze i64 %lshr34, !dbg !1950
  %trunc35 = trunc i64 %21 to i32, !dbg !1950
  store i32 %trunc35, ptr %self36, align 4
  %22 = load i8, ptr %rot, align 1, !dbg !1951
  %zext = zext i8 %22 to i32, !dbg !1951
  store i32 %zext, ptr %shift, align 4
  %23 = load i32, ptr %self36, align 4, !dbg !1952
  %24 = load i32, ptr %self36, align 4, !dbg !1954
  %25 = load i32, ptr %shift, align 4, !dbg !1955
  %26 = call i32 @llvm.fshr.i32(i32 %23, i32 %24, i32 %25), !dbg !1955
  ret i32 %26, !dbg !1955

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54), !dbg !1932
  unreachable, !dbg !1932

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 58), !dbg !1938
  unreachable, !dbg !1938

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 58), !dbg !1939
  unreachable, !dbg !1939

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 59), !dbg !1944
  unreachable, !dbg !1944

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 60), !dbg !1946
  unreachable, !dbg !1946

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 60), !dbg !1947
  unreachable, !dbg !1947
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1956 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1957
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1957
  br i1 %3, label %panic, label %checkok, !dbg !1957

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1958, metadata !DIExpression()), !dbg !1959
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1960, metadata !DIExpression()), !dbg !1961
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1962
  %4 = load i64, ptr %ptradd, align 8, !dbg !1962
  %lt = icmp ult i64 0, %4, !dbg !1962
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1962

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 65), !dbg !1962
  unreachable, !dbg !1962

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1964, metadata !DIExpression()), !dbg !1966
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1967
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1967
  store i64 %6, ptr %len, align 8, !dbg !1967
  br label %loop.cond, !dbg !1968

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1969
  %lt7 = icmp ult i64 0, %7, !dbg !1969
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1969

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1971, metadata !DIExpression()), !dbg !1973
  %8 = load ptr, ptr %self, align 8, !dbg !1974
  %9 = call i32 @std.math.random.Pcg64Random.next_int(ptr %8), !dbg !1975
  store i32 %9, ptr %value, align 4, !dbg !1975
  %10 = load i64, ptr %len, align 8, !dbg !1976
  %le = icmp ule i64 %10, 4, !dbg !1976
  br i1 %le, label %if.then, label %if.exit, !dbg !1976

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1977
  %add = add i64 0, %12, !dbg !1977
  %size = sub i64 %add, 0, !dbg !1977
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1977
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1977
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1979
  %16 = extractvalue %"char[]" %15, 0, !dbg !1979
  %17 = extractvalue %"char[]" %15, 1, !dbg !1980
  %gt = icmp ugt i64 0, %17, !dbg !1980
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1980
  br i1 %18, label %panic8, label %checkok16, !dbg !1980

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1979
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1979
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1979
  %21 = extractvalue %"char[]" %20, 0, !dbg !1979
  %22 = extractvalue %"char[]" %14, 0, !dbg !1979
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1979
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1979
  br label %expr_block.exit, !dbg !1981

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1982
  %31 = extractvalue %"char[]" %30, 0, !dbg !1982
  %32 = extractvalue %"char[]" %30, 1, !dbg !1982
  %gt34 = icmp sgt i64 0, %32, !dbg !1982
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1982
  br i1 %33, label %panic35, label %checkok45, !dbg !1982

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !1982
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1982
  br i1 %34, label %panic47, label %checkok57, !dbg !1982

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1982
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !1982
  %37 = extractvalue %"char[]" %36, 0, !dbg !1982
  %38 = extractvalue %"char[]" %29, 0, !dbg !1982
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1982
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1982
  %43 = load i64, ptr %len, align 8, !dbg !1983
  %sub = sub i64 %43, 4, !dbg !1983
  store i64 %sub, ptr %len, align 8, !dbg !1983
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1984
  %45 = extractvalue %"char[]" %44, 0, !dbg !1984
  %46 = extractvalue %"char[]" %44, 1, !dbg !1985
  %gt74 = icmp ugt i64 4, %46, !dbg !1985
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1985
  br i1 %47, label %panic75, label %checkok85, !dbg !1985

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !1984
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !1984
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1984
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1984
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1984
  br label %loop.cond, !dbg !1984

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.101, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.102, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.103, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 67, ptr align 8 %indirectarg91), !dbg !1986
  unreachable, !dbg !1989

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1989

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !1959
  unreachable, !dbg !1959

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1979
  unreachable, !dbg !1979

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1979
  unreachable, !dbg !1979

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1982
  unreachable, !dbg !1982

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1982
  unreachable, !dbg !1982

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1982
  unreachable, !dbg !1982

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1984
  unreachable, !dbg !1984
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !1990 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1993
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1993
  br i1 %2, label %panic, label %checkok, !dbg !1993

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1994, metadata !DIExpression()), !dbg !1995
  %3 = load ptr, ptr %self, align 8, !dbg !1996
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !1998
  %zext = zext i64 %4 to i128, !dbg !1998
  %shl = shl i128 %zext, 64, !dbg !1998
  %5 = freeze i128 %shl, !dbg !1998
  %6 = load ptr, ptr %self, align 8, !dbg !1996
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !1999
  %zext3 = zext i64 %7 to i128, !dbg !1999
  %add = add i128 %5, %zext3, !dbg !1998
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !1995
  unreachable, !dbg !1995
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !2000 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2003
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2003
  br i1 %2, label %panic, label %checkok, !dbg !2003

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2004, metadata !DIExpression()), !dbg !2005
  %3 = load ptr, ptr %self, align 8, !dbg !2006
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !2008
  %zext = zext i32 %4 to i64, !dbg !2008
  %shl = shl i64 %zext, 32, !dbg !2008
  %5 = freeze i64 %shl, !dbg !2008
  %6 = load ptr, ptr %self, align 8, !dbg !2006
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !2009
  %zext3 = zext i32 %7 to i64, !dbg !2009
  %add = add i64 %5, %zext3, !dbg !2008
  ret i64 %add, !dbg !2008

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69), !dbg !2005
  unreachable, !dbg !2005
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !2010 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2013
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2013
  br i1 %2, label %panic, label %checkok, !dbg !2013

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2014, metadata !DIExpression()), !dbg !2015
  %3 = load ptr, ptr %self, align 8, !dbg !2016
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !2017
  %trunc = trunc i32 %4 to i16, !dbg !2017
  ret i16 %trunc, !dbg !2017

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 70), !dbg !2015
  unreachable, !dbg !2015
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !2018 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2021
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2021
  br i1 %2, label %panic, label %checkok, !dbg !2021

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2022, metadata !DIExpression()), !dbg !2023
  %3 = load ptr, ptr %self, align 8, !dbg !2024
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !2025
  %trunc = trunc i32 %4 to i8, !dbg !2025
  ret i8 %trunc, !dbg !2025

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 71), !dbg !2023
  unreachable, !dbg !2023
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2026 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2031
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2031
  br i1 %3, label %panic, label %checkok, !dbg !2031

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2032, metadata !DIExpression()), !dbg !2033
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2034, metadata !DIExpression()), !dbg !2035
  %4 = load ptr, ptr %self, align 8, !dbg !2036
  %checknull = icmp eq ptr %4, null, !dbg !2036
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2036
  br i1 %5, label %panic3, label %checkok7, !dbg !2036

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2037, metadata !DIExpression()), !dbg !2039
  store i32 0, ptr %return_value, align 4, !dbg !2039
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2041
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !2044
  %10 = load i32, ptr %return_value, align 4, !dbg !2045
  store i32 %10, ptr %4, align 4, !dbg !2045
  ret void, !dbg !2045

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78), !dbg !2033
  unreachable, !dbg !2033

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 80), !dbg !2036
  unreachable, !dbg !2036
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !2046 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2049
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2049
  br i1 %2, label %panic, label %checkok, !dbg !2049

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2050, metadata !DIExpression()), !dbg !2051
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2052, metadata !DIExpression()), !dbg !2053
  %3 = load ptr, ptr %self, align 8, !dbg !2054
  store ptr %3, ptr %s, align 8, !dbg !2054
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !2055, metadata !DIExpression()), !dbg !2056
  %4 = load ptr, ptr %s, align 8, !dbg !2057
  %checknull = icmp eq ptr %4, null, !dbg !2057
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2057
  br i1 %5, label %panic3, label %checkok7, !dbg !2057

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !2057
  %7 = load ptr, ptr %s, align 8, !dbg !2058
  %checknull8 = icmp eq ptr %7, null, !dbg !2058
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2058
  br i1 %8, label %panic9, label %checkok13, !dbg !2058

checkok13:                                        ; preds = %checkok7
  %9 = load i32, ptr %7, align 4, !dbg !2058
  %lshr = lshr i32 %9, 10, !dbg !2059
  %10 = freeze i32 %lshr, !dbg !2059
  %xor14 = xor i32 %6, %10, !dbg !2060
  store i32 %xor14, ptr %xor, align 4, !dbg !2060
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !2061, metadata !DIExpression()), !dbg !2062
  %11 = load ptr, ptr %s, align 8, !dbg !2063
  %checknull15 = icmp eq ptr %11, null, !dbg !2063
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !2063
  br i1 %12, label %panic16, label %checkok20, !dbg !2063

checkok20:                                        ; preds = %checkok13
  %13 = load i32, ptr %11, align 4, !dbg !2063
  %lshr21 = lshr i32 %13, 28, !dbg !2064
  %14 = freeze i32 %lshr21, !dbg !2064
  %trunc = trunc i32 %14 to i8, !dbg !2064
  store i8 %trunc, ptr %rot, align 1, !dbg !2064
  %15 = load ptr, ptr %s, align 8, !dbg !2065
  %checknull22 = icmp eq ptr %15, null, !dbg !2065
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !2065
  br i1 %16, label %panic23, label %checkok27, !dbg !2065

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !2066
  %checknull28 = icmp eq ptr %17, null, !dbg !2066
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !2066
  br i1 %18, label %panic29, label %checkok33, !dbg !2066

checkok33:                                        ; preds = %checkok27
  %19 = load i32, ptr %17, align 4, !dbg !2066
  %mul = mul i32 %19, -1856014347, !dbg !2067
  %add = add i32 %mul, -1640531527, !dbg !2067
  store i32 %add, ptr %15, align 4, !dbg !2067
  %20 = load i32, ptr %xor, align 4, !dbg !2068
  %lshr34 = lshr i32 %20, 12, !dbg !2069
  %21 = freeze i32 %lshr34, !dbg !2069
  %trunc35 = trunc i32 %21 to i16, !dbg !2069
  store i16 %trunc35, ptr %self36, align 2
  %22 = load i8, ptr %rot, align 1, !dbg !2070
  %zext = zext i8 %22 to i16, !dbg !2070
  store i16 %zext, ptr %shift, align 2
  %23 = load i16, ptr %self36, align 2, !dbg !2071
  %24 = load i16, ptr %self36, align 2, !dbg !2073
  %25 = load i16, ptr %shift, align 2, !dbg !2074
  %26 = call i16 @llvm.fshr.i16(i16 %23, i16 %24, i16 %25), !dbg !2074
  ret i16 %26, !dbg !2074

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83), !dbg !2051
  unreachable, !dbg !2051

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 87), !dbg !2057
  unreachable, !dbg !2057

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 87), !dbg !2058
  unreachable, !dbg !2058

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 88), !dbg !2063
  unreachable, !dbg !2063

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 89), !dbg !2065
  unreachable, !dbg !2065

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 89), !dbg !2066
  unreachable, !dbg !2066
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2075 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2076
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2076
  br i1 %3, label %panic, label %checkok, !dbg !2076

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2077, metadata !DIExpression()), !dbg !2078
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2079, metadata !DIExpression()), !dbg !2080
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2081
  %4 = load i64, ptr %ptradd, align 8, !dbg !2081
  %lt = icmp ult i64 0, %4, !dbg !2081
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2081

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 94), !dbg !2081
  unreachable, !dbg !2081

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2083, metadata !DIExpression()), !dbg !2085
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2086
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2086
  store i64 %6, ptr %len, align 8, !dbg !2086
  br label %loop.cond, !dbg !2087

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2088
  %lt7 = icmp ult i64 0, %7, !dbg !2088
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2088

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2090, metadata !DIExpression()), !dbg !2092
  %8 = load ptr, ptr %self, align 8, !dbg !2093
  %9 = call i16 @std.math.random.Pcg32Random.next_short(ptr %8), !dbg !2094
  store i16 %9, ptr %value, align 2, !dbg !2094
  %10 = load i64, ptr %len, align 8, !dbg !2095
  %le = icmp ule i64 %10, 2, !dbg !2095
  br i1 %le, label %if.then, label %if.exit, !dbg !2095

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2096
  %add = add i64 0, %12, !dbg !2096
  %size = sub i64 %add, 0, !dbg !2096
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2096
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2096
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2098
  %16 = extractvalue %"char[]" %15, 0, !dbg !2098
  %17 = extractvalue %"char[]" %15, 1, !dbg !2099
  %gt = icmp ugt i64 0, %17, !dbg !2099
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2099
  br i1 %18, label %panic8, label %checkok16, !dbg !2099

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2098
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2098
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2098
  %21 = extractvalue %"char[]" %20, 0, !dbg !2098
  %22 = extractvalue %"char[]" %14, 0, !dbg !2098
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2098
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2098
  br label %expr_block.exit, !dbg !2100

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2101
  %31 = extractvalue %"char[]" %30, 0, !dbg !2101
  %32 = extractvalue %"char[]" %30, 1, !dbg !2101
  %gt34 = icmp sgt i64 0, %32, !dbg !2101
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2101
  br i1 %33, label %panic35, label %checkok45, !dbg !2101

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !2101
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2101
  br i1 %34, label %panic47, label %checkok57, !dbg !2101

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2101
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !2101
  %37 = extractvalue %"char[]" %36, 0, !dbg !2101
  %38 = extractvalue %"char[]" %29, 0, !dbg !2101
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2101
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2101
  %43 = load i64, ptr %len, align 8, !dbg !2102
  %sub = sub i64 %43, 2, !dbg !2102
  store i64 %sub, ptr %len, align 8, !dbg !2102
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2103
  %45 = extractvalue %"char[]" %44, 0, !dbg !2103
  %46 = extractvalue %"char[]" %44, 1, !dbg !2104
  %gt74 = icmp ugt i64 2, %46, !dbg !2104
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2104
  br i1 %47, label %panic75, label %checkok85, !dbg !2104

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !2103
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !2103
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2103
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2103
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2103
  br label %loop.cond, !dbg !2103

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.104, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.105, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.106, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 96, ptr align 8 %indirectarg91), !dbg !2105
  unreachable, !dbg !2108

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2108

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !2078
  unreachable, !dbg !2078

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2098
  unreachable, !dbg !2098

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2098
  unreachable, !dbg !2098

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2101
  unreachable, !dbg !2101

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2101
  unreachable, !dbg !2101

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2101
  unreachable, !dbg !2101

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2103
  unreachable, !dbg !2103
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !2109 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2112
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2112
  br i1 %2, label %panic, label %checkok, !dbg !2112

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2113, metadata !DIExpression()), !dbg !2114
  %3 = load ptr, ptr %self, align 8, !dbg !2115
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !2117
  %zext = zext i64 %4 to i128, !dbg !2117
  %shl = shl i128 %zext, 64, !dbg !2117
  %5 = freeze i128 %shl, !dbg !2117
  %6 = load ptr, ptr %self, align 8, !dbg !2115
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !2118
  %zext3 = zext i64 %7 to i128, !dbg !2118
  %add = add i128 %5, %zext3, !dbg !2117
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !2114
  unreachable, !dbg !2114
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !2119 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2122
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2122
  br i1 %2, label %panic, label %checkok, !dbg !2122

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2123, metadata !DIExpression()), !dbg !2124
  %3 = load ptr, ptr %self, align 8, !dbg !2125
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !2127
  %zext = zext i32 %4 to i64, !dbg !2127
  %shl = shl i64 %zext, 32, !dbg !2127
  %5 = freeze i64 %shl, !dbg !2127
  %6 = load ptr, ptr %self, align 8, !dbg !2125
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !2128
  %zext3 = zext i32 %7 to i64, !dbg !2128
  %add = add i64 %5, %zext3, !dbg !2127
  ret i64 %add, !dbg !2127

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 98), !dbg !2124
  unreachable, !dbg !2124
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !2129 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2132
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2132
  br i1 %2, label %panic, label %checkok, !dbg !2132

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2133, metadata !DIExpression()), !dbg !2134
  %3 = load ptr, ptr %self, align 8, !dbg !2135
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !2137
  %zext = zext i16 %4 to i32, !dbg !2137
  %shl = shl i32 %zext, 16, !dbg !2137
  %5 = freeze i32 %shl, !dbg !2137
  %6 = load ptr, ptr %self, align 8, !dbg !2135
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !2138
  %zext3 = zext i16 %7 to i32, !dbg !2138
  %add = add i32 %5, %zext3, !dbg !2137
  ret i32 %add, !dbg !2137

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99), !dbg !2134
  unreachable, !dbg !2134
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !2139 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2142
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2142
  br i1 %2, label %panic, label %checkok, !dbg !2142

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2143, metadata !DIExpression()), !dbg !2144
  %3 = load ptr, ptr %self, align 8, !dbg !2145
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !2146
  %trunc = trunc i16 %4 to i8, !dbg !2146
  ret i8 %trunc, !dbg !2146

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100), !dbg !2144
  unreachable, !dbg !2144
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2147 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2152
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2152
  br i1 %3, label %panic, label %checkok, !dbg !2152

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2153, metadata !DIExpression()), !dbg !2154
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2155, metadata !DIExpression()), !dbg !2156
  %4 = load ptr, ptr %self, align 8, !dbg !2157
  %checknull = icmp eq ptr %4, null, !dbg !2157
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2157
  br i1 %5, label %panic3, label %checkok7, !dbg !2157

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2158, metadata !DIExpression()), !dbg !2160
  store i16 0, ptr %return_value, align 2, !dbg !2160
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2162
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !2165
  %10 = load i16, ptr %return_value, align 2, !dbg !2166
  store i16 %10, ptr %4, align 2, !dbg !2166
  ret void, !dbg !2166

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 106), !dbg !2154
  unreachable, !dbg !2154

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 108), !dbg !2157
  unreachable, !dbg !2157
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !2167 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %self42 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2170
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2170
  br i1 %2, label %panic, label %checkok, !dbg !2170

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2171, metadata !DIExpression()), !dbg !2172
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2173, metadata !DIExpression()), !dbg !2174
  %3 = load ptr, ptr %self, align 8, !dbg !2175
  store ptr %3, ptr %s, align 8, !dbg !2175
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !2176, metadata !DIExpression()), !dbg !2177
  %4 = load ptr, ptr %s, align 8, !dbg !2178
  %checknull = icmp eq ptr %4, null, !dbg !2178
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2178
  br i1 %5, label %panic3, label %checkok7, !dbg !2178

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !2178
  %zext = zext i16 %6 to i32, !dbg !2178
  %7 = load ptr, ptr %s, align 8, !dbg !2179
  %checknull8 = icmp eq ptr %7, null, !dbg !2179
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2179
  br i1 %8, label %panic9, label %checkok13, !dbg !2179

checkok13:                                        ; preds = %checkok7
  %9 = load i16, ptr %7, align 2, !dbg !2179
  %zext14 = zext i16 %9 to i32, !dbg !2179
  %lshr = lshr i32 %zext14, 5, !dbg !2180
  %10 = freeze i32 %lshr, !dbg !2180
  %xor15 = xor i32 %zext, %10, !dbg !2181
  %trunc = trunc i32 %xor15 to i16, !dbg !2181
  store i16 %trunc, ptr %xor, align 2, !dbg !2181
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !2182, metadata !DIExpression()), !dbg !2183
  %11 = load ptr, ptr %s, align 8, !dbg !2184
  %checknull16 = icmp eq ptr %11, null, !dbg !2184
  %12 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !2184
  br i1 %12, label %panic17, label %checkok21, !dbg !2184

checkok21:                                        ; preds = %checkok13
  %13 = load i16, ptr %11, align 2, !dbg !2184
  %zext22 = zext i16 %13 to i32, !dbg !2184
  %lshr23 = lshr i32 %zext22, 13, !dbg !2185
  %14 = freeze i32 %lshr23, !dbg !2185
  %trunc24 = trunc i32 %14 to i8, !dbg !2185
  store i8 %trunc24, ptr %rot, align 1, !dbg !2185
  %15 = load ptr, ptr %s, align 8, !dbg !2186
  %checknull25 = icmp eq ptr %15, null, !dbg !2186
  %16 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !2186
  br i1 %16, label %panic26, label %checkok30, !dbg !2186

checkok30:                                        ; preds = %checkok21
  %17 = load ptr, ptr %s, align 8, !dbg !2187
  %checknull31 = icmp eq ptr %17, null, !dbg !2187
  %18 = call i1 @llvm.expect.i1(i1 %checknull31, i1 false), !dbg !2187
  br i1 %18, label %panic32, label %checkok36, !dbg !2187

checkok36:                                        ; preds = %checkok30
  %19 = load i16, ptr %17, align 2, !dbg !2187
  %zext37 = zext i16 %19 to i32, !dbg !2187
  %mul = mul i32 %zext37, 37213, !dbg !2188
  %add = add i32 %mul, 40503, !dbg !2188
  %trunc38 = trunc i32 %add to i16, !dbg !2188
  store i16 %trunc38, ptr %15, align 2, !dbg !2188
  %20 = load i16, ptr %xor, align 2, !dbg !2189
  %zext39 = zext i16 %20 to i32, !dbg !2189
  %lshr40 = lshr i32 %zext39, 5, !dbg !2190
  %21 = freeze i32 %lshr40, !dbg !2190
  %trunc41 = trunc i32 %21 to i8, !dbg !2190
  store i8 %trunc41, ptr %self42, align 1
  %22 = load i8, ptr %rot, align 1
  store i8 %22, ptr %shift, align 1
  %23 = load i8, ptr %self42, align 1, !dbg !2191
  %24 = load i8, ptr %self42, align 1, !dbg !2193
  %25 = load i8, ptr %shift, align 1, !dbg !2194
  %26 = call i8 @llvm.fshr.i8(i8 %23, i8 %24, i8 %25), !dbg !2194
  ret i8 %26, !dbg !2194

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111), !dbg !2172
  unreachable, !dbg !2172

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 115), !dbg !2178
  unreachable, !dbg !2178

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 115), !dbg !2179
  unreachable, !dbg !2179

panic17:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg20, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 116), !dbg !2184
  unreachable, !dbg !2184

panic26:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg29, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 117), !dbg !2186
  unreachable, !dbg !2186

panic32:                                          ; preds = %checkok30
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg35, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 117), !dbg !2187
  unreachable, !dbg !2187
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2195 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2196
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2196
  br i1 %3, label %panic, label %checkok, !dbg !2196

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2197, metadata !DIExpression()), !dbg !2198
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2199, metadata !DIExpression()), !dbg !2200
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2201, metadata !DIExpression()), !dbg !2203
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2204
  %4 = load i64, ptr %ptradd, align 8, !dbg !2204
  store i64 %4, ptr %len, align 8, !dbg !2204
  br label %loop.cond, !dbg !2205

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2206
  %lt = icmp ult i64 0, %5, !dbg !2206
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2206

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2208, metadata !DIExpression()), !dbg !2210
  %6 = load ptr, ptr %self, align 8, !dbg !2211
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !2212
  store i8 %7, ptr %value, align 1, !dbg !2212
  %8 = load i64, ptr %len, align 8, !dbg !2213
  %le = icmp ule i64 %8, 1, !dbg !2213
  br i1 %le, label %if.then, label %if.exit, !dbg !2213

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2214
  %add = add i64 0, %10, !dbg !2214
  %size = sub i64 %add, 0, !dbg !2214
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2214
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2214
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !2216
  %14 = extractvalue %"char[]" %13, 0, !dbg !2216
  %15 = extractvalue %"char[]" %13, 1, !dbg !2217
  %gt = icmp ugt i64 0, %15, !dbg !2217
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2217
  br i1 %16, label %panic3, label %checkok11, !dbg !2217

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !2216
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2216
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !2216
  %19 = extractvalue %"char[]" %18, 0, !dbg !2216
  %20 = extractvalue %"char[]" %12, 0, !dbg !2216
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !2216
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !2216
  br label %expr_block.exit, !dbg !2218

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !2219
  %29 = extractvalue %"char[]" %28, 0, !dbg !2219
  %30 = extractvalue %"char[]" %28, 1, !dbg !2219
  %gt29 = icmp sgt i64 0, %30, !dbg !2219
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !2219
  br i1 %31, label %panic30, label %checkok40, !dbg !2219

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !2219
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !2219
  br i1 %32, label %panic42, label %checkok52, !dbg !2219

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !2219
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !2219
  %35 = extractvalue %"char[]" %34, 0, !dbg !2219
  %36 = extractvalue %"char[]" %27, 0, !dbg !2219
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !2219
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !2219
  %41 = load i64, ptr %len, align 8, !dbg !2220
  %sub = sub i64 %41, 1, !dbg !2220
  store i64 %sub, ptr %len, align 8, !dbg !2220
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !2221
  %43 = extractvalue %"char[]" %42, 0, !dbg !2221
  %44 = extractvalue %"char[]" %42, 1, !dbg !2222
  %gt69 = icmp ugt i64 1, %44, !dbg !2222
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !2222
  br i1 %45, label %panic70, label %checkok80, !dbg !2222

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !2221
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !2221
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !2221
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !2221
  store %"char[]" %47, ptr %bytes, align 8, !dbg !2221
  br label %loop.cond, !dbg !2221

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.107, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.108, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.109, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 121, ptr align 8 %indirectarg86), !dbg !2223
  unreachable, !dbg !2226

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !2226

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 121), !dbg !2198
  unreachable, !dbg !2198

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !2216
  unreachable, !dbg !2216

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !2216
  unreachable, !dbg !2216

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !2219
  unreachable, !dbg !2219

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !2219
  unreachable, !dbg !2219

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !2219
  unreachable, !dbg !2219

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !2221
  unreachable, !dbg !2221
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !2227 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2230
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2230
  br i1 %2, label %panic, label %checkok, !dbg !2230

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2231, metadata !DIExpression()), !dbg !2232
  %3 = load ptr, ptr %self, align 8, !dbg !2233
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !2235
  %zext = zext i64 %4 to i128, !dbg !2235
  %shl = shl i128 %zext, 64, !dbg !2235
  %5 = freeze i128 %shl, !dbg !2235
  %6 = load ptr, ptr %self, align 8, !dbg !2233
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !2236
  %zext3 = zext i64 %7 to i128, !dbg !2236
  %add = add i128 %5, %zext3, !dbg !2235
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 122), !dbg !2232
  unreachable, !dbg !2232
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !2237 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2240
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2240
  br i1 %2, label %panic, label %checkok, !dbg !2240

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2241, metadata !DIExpression()), !dbg !2242
  %3 = load ptr, ptr %self, align 8, !dbg !2243
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !2245
  %zext = zext i32 %4 to i64, !dbg !2245
  %shl = shl i64 %zext, 32, !dbg !2245
  %5 = freeze i64 %shl, !dbg !2245
  %6 = load ptr, ptr %self, align 8, !dbg !2243
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !2246
  %zext3 = zext i32 %7 to i64, !dbg !2246
  %add = add i64 %5, %zext3, !dbg !2245
  ret i64 %add, !dbg !2245

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123), !dbg !2242
  unreachable, !dbg !2242
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !2247 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2250
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2250
  br i1 %2, label %panic, label %checkok, !dbg !2250

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2251, metadata !DIExpression()), !dbg !2252
  %3 = load ptr, ptr %self, align 8, !dbg !2253
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !2255
  %zext = zext i16 %4 to i32, !dbg !2255
  %shl = shl i32 %zext, 16, !dbg !2255
  %5 = freeze i32 %shl, !dbg !2255
  %6 = load ptr, ptr %self, align 8, !dbg !2253
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !2256
  %zext3 = zext i16 %7 to i32, !dbg !2256
  %add = add i32 %5, %zext3, !dbg !2255
  ret i32 %add, !dbg !2255

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124), !dbg !2252
  unreachable, !dbg !2252
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !2257 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2260
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2260
  br i1 %2, label %panic, label %checkok, !dbg !2260

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2261, metadata !DIExpression()), !dbg !2262
  %3 = load ptr, ptr %self, align 8, !dbg !2263
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !2265
  %zext = zext i8 %4 to i16, !dbg !2265
  %zext3 = zext i16 %zext to i32, !dbg !2265
  %shl = shl i32 %zext3, 8, !dbg !2265
  %5 = freeze i32 %shl, !dbg !2265
  %6 = load ptr, ptr %self, align 8, !dbg !2263
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !2266
  %zext4 = zext i8 %7 to i32, !dbg !2266
  %add = add i32 %5, %zext4, !dbg !2265
  %trunc = trunc i32 %add to i16, !dbg !2265
  ret i16 %trunc, !dbg !2265

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125), !dbg !2262
  unreachable, !dbg !2262
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.seeder(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !2267 {
entry:
  %out_chars = alloca i64, align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [1 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 16
  %indirectarg61 = alloca %"any[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %indirectarg78 = alloca %"char[]", align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %taddr88 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %varargslots93 = alloca [2 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg125 = alloca %"char[]", align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %taddr131 = alloca i64, align 8
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %varargslots135 = alloca [1 x %any], align 16
  %indirectarg137 = alloca %"any[]", align 8
  %taddr141 = alloca i64, align 8
  %taddr142 = alloca i64, align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %varargslots146 = alloca [2 x %any], align 16
  %indirectarg149 = alloca %"any[]", align 8
  %taddr157 = alloca i64, align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg159 = alloca %"char[]", align 8
  %indirectarg160 = alloca %"char[]", align 8
  %varargslots161 = alloca [1 x %any], align 16
  %indirectarg163 = alloca %"any[]", align 8
  %taddr167 = alloca i64, align 8
  %taddr168 = alloca i64, align 8
  %indirectarg169 = alloca %"char[]", align 8
  %indirectarg170 = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %varargslots172 = alloca [2 x %any], align 16
  %indirectarg175 = alloca %"any[]", align 8
  %taddr181 = alloca i64, align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %varargslots185 = alloca [1 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %taddr191 = alloca i64, align 8
  %taddr192 = alloca i64, align 8
  %indirectarg193 = alloca %"char[]", align 8
  %indirectarg194 = alloca %"char[]", align 8
  %indirectarg195 = alloca %"char[]", align 8
  %varargslots196 = alloca [2 x %any], align 16
  %indirectarg199 = alloca %"any[]", align 8
  %i205 = alloca i64, align 8
  %j210 = alloca i64, align 8
  %indirectarg214 = alloca %"char[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %indirectarg216 = alloca %"char[]", align 8
  %taddr221 = alloca i64, align 8
  %indirectarg222 = alloca %"char[]", align 8
  %indirectarg223 = alloca %"char[]", align 8
  %indirectarg224 = alloca %"char[]", align 8
  %varargslots225 = alloca [1 x %any], align 16
  %indirectarg227 = alloca %"any[]", align 8
  %taddr231 = alloca i64, align 8
  %taddr232 = alloca i64, align 8
  %indirectarg233 = alloca %"char[]", align 8
  %indirectarg234 = alloca %"char[]", align 8
  %indirectarg235 = alloca %"char[]", align 8
  %varargslots236 = alloca [2 x %any], align 16
  %indirectarg239 = alloca %"any[]", align 8
  %indirectarg247 = alloca %"char[]", align 8
  %indirectarg248 = alloca %"char[]", align 8
  %indirectarg249 = alloca %"char[]", align 8
  %taddr254 = alloca i64, align 8
  %indirectarg255 = alloca %"char[]", align 8
  %indirectarg256 = alloca %"char[]", align 8
  %indirectarg257 = alloca %"char[]", align 8
  %varargslots258 = alloca [1 x %any], align 16
  %indirectarg260 = alloca %"any[]", align 8
  %taddr264 = alloca i64, align 8
  %taddr265 = alloca i64, align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg268 = alloca %"char[]", align 8
  %varargslots269 = alloca [2 x %any], align 16
  %indirectarg272 = alloca %"any[]", align 8
  %taddr280 = alloca i64, align 8
  %indirectarg281 = alloca %"char[]", align 8
  %indirectarg282 = alloca %"char[]", align 8
  %indirectarg283 = alloca %"char[]", align 8
  %varargslots284 = alloca [1 x %any], align 16
  %indirectarg286 = alloca %"any[]", align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca i64, align 8
  %indirectarg292 = alloca %"char[]", align 8
  %indirectarg293 = alloca %"char[]", align 8
  %indirectarg294 = alloca %"char[]", align 8
  %varargslots295 = alloca [2 x %any], align 16
  %indirectarg298 = alloca %"any[]", align 8
  %taddr304 = alloca i64, align 8
  %indirectarg305 = alloca %"char[]", align 8
  %indirectarg306 = alloca %"char[]", align 8
  %indirectarg307 = alloca %"char[]", align 8
  %varargslots308 = alloca [1 x %any], align 16
  %indirectarg310 = alloca %"any[]", align 8
  %taddr314 = alloca i64, align 8
  %taddr315 = alloca i64, align 8
  %indirectarg316 = alloca %"char[]", align 8
  %indirectarg317 = alloca %"char[]", align 8
  %indirectarg318 = alloca %"char[]", align 8
  %varargslots319 = alloca [2 x %any], align 16
  %indirectarg322 = alloca %"any[]", align 8
  %i329 = alloca i64, align 8
  %j333 = alloca i64, align 8
  %indirectarg337 = alloca %"char[]", align 8
  %indirectarg338 = alloca %"char[]", align 8
  %indirectarg339 = alloca %"char[]", align 8
  %taddr345 = alloca i64, align 8
  %taddr346 = alloca i64, align 8
  %indirectarg347 = alloca %"char[]", align 8
  %indirectarg348 = alloca %"char[]", align 8
  %indirectarg349 = alloca %"char[]", align 8
  %varargslots350 = alloca [2 x %any], align 16
  %indirectarg353 = alloca %"any[]", align 8
  %taddr360 = alloca i64, align 8
  %taddr361 = alloca i64, align 8
  %indirectarg362 = alloca %"char[]", align 8
  %indirectarg363 = alloca %"char[]", align 8
  %indirectarg364 = alloca %"char[]", align 8
  %varargslots365 = alloca [2 x %any], align 16
  %indirectarg368 = alloca %"any[]", align 8
  %taddr374 = alloca i64, align 8
  %taddr375 = alloca i64, align 8
  %indirectarg376 = alloca %"char[]", align 8
  %indirectarg377 = alloca %"char[]", align 8
  %indirectarg378 = alloca %"char[]", align 8
  %varargslots379 = alloca [2 x %any], align 16
  %indirectarg382 = alloca %"any[]", align 8
  %taddr389 = alloca ptr, align 8
  %taddr394 = alloca i64, align 8
  %taddr395 = alloca i64, align 8
  %indirectarg396 = alloca %"char[]", align 8
  %indirectarg397 = alloca %"char[]", align 8
  %indirectarg398 = alloca %"char[]", align 8
  %varargslots399 = alloca [2 x %any], align 16
  %indirectarg402 = alloca %"any[]", align 8
  %taddr405 = alloca %"char[]", align 8
  %taddr407 = alloca %"char[]", align 8
  %taddr410 = alloca i64, align 8
  %taddr411 = alloca i64, align 8
  %indirectarg412 = alloca %"char[]", align 8
  %indirectarg413 = alloca %"char[]", align 8
  %indirectarg414 = alloca %"char[]", align 8
  %varargslots415 = alloca [2 x %any], align 16
  %indirectarg418 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !2270, metadata !DIExpression()), !dbg !2271
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2272, metadata !DIExpression()), !dbg !2273
  call void @llvm.dbg.declare(metadata ptr %out_chars, metadata !2274, metadata !DIExpression()), !dbg !2275
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2276
  %2 = load i64, ptr %ptradd, align 8, !dbg !2276
  store i64 %2, ptr %out_chars, align 8, !dbg !2276
  call void @llvm.dbg.declare(metadata ptr %current, metadata !2277, metadata !DIExpression()), !dbg !2306
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2308
  %not = icmp eq ptr %3, null, !dbg !2308
  br i1 %not, label %if.then, label %if.exit, !dbg !2308

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2312
  br label %if.exit, !dbg !2312

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2314
  store ptr %4, ptr %current, align 8, !dbg !2314
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !2315, metadata !DIExpression()), !dbg !2316
  %5 = load ptr, ptr %current, align 8, !dbg !2317
  %checknull = icmp eq ptr %5, null, !dbg !2317
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2317
  br i1 %6, label %panic, label %checkok, !dbg !2317

checkok:                                          ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2317
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2317
  store i64 %7, ptr %mark, align 8, !dbg !2317
  call void @llvm.dbg.declare(metadata ptr %words, metadata !2318, metadata !DIExpression()), !dbg !2324
  %8 = load i64, ptr %out_chars, align 8, !dbg !2325
  %add = add i64 %8, 7, !dbg !2325
  %sdiv = sdiv i64 %add, 8, !dbg !2325
  store i64 %sdiv, ptr %elements, align 8
  %9 = load i64, ptr %elements, align 8, !dbg !2326
  %mul = mul i64 8, %9, !dbg !2329
  %10 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #5, !dbg !2330
  store ptr %10, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %elements, align 8, !dbg !2331
  %add4 = add i64 0, %12, !dbg !2331
  %size = sub i64 %add4, 0, !dbg !2331
  %13 = insertvalue %"ulong[]" undef, ptr %11, 0, !dbg !2331
  %14 = insertvalue %"ulong[]" %13, i64 %size, 1, !dbg !2331
  store %"ulong[]" %14, ptr %words, align 8, !dbg !2331
  %15 = load %"ulong[]", ptr %words, align 8, !dbg !2332
  %16 = extractvalue %"ulong[]" %15, 0, !dbg !2332
  %17 = extractvalue %"ulong[]" %15, 1, !dbg !2333
  %gt = icmp ugt i64 0, %17, !dbg !2333
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2333
  br i1 %18, label %panic5, label %checkok13, !dbg !2333

checkok13:                                        ; preds = %checkok
  br label %cond, !dbg !2332

cond:                                             ; preds = %assign, %checkok13
  %19 = phi i64 [ 0, %checkok13 ], [ %add14, %assign ], !dbg !2332
  %lt = icmp ult i64 %19, %17, !dbg !2332
  br i1 %lt, label %assign, label %exit, !dbg !2332

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %16, i64 %19, !dbg !2332
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !2332
  %add14 = add i64 %19, 1, !dbg !2332
  br label %cond, !dbg !2332

exit:                                             ; preds = %cond
  call void @llvm.dbg.declare(metadata ptr %words_len_2, metadata !2334, metadata !DIExpression()), !dbg !2335
  %ptradd15 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2336
  %20 = load i64, ptr %ptradd15, align 8, !dbg !2336
  %mul16 = mul i64 %20, 2, !dbg !2336
  store i64 %mul16, ptr %words_len_2, align 8, !dbg !2336
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2337, metadata !DIExpression()), !dbg !2339
  store i64 0, ptr %i, align 8, !dbg !2340
  br label %loop.cond, !dbg !2340

loop.cond:                                        ; preds = %checkok97, %exit
  %21 = load i64, ptr %i, align 8, !dbg !2341
  %ptradd17 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2342
  %22 = load i64, ptr %ptradd17, align 8, !dbg !2342
  %sdiv18 = sdiv i64 %22, 8, !dbg !2342
  %gt19 = icmp sgt i64 %sdiv18, %21, !dbg !2341
  %check = icmp sge i64 %21, 0, !dbg !2341
  %siui-gt = and i1 %check, %gt19, !dbg !2341
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !2341

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2343, metadata !DIExpression()), !dbg !2345
  %23 = load i64, ptr %i, align 8, !dbg !2346
  %ptradd20 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2347
  %24 = load i64, ptr %ptradd20, align 8, !dbg !2347
  %zero = icmp eq i64 %24, 0, !dbg !2346
  %25 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2346
  br i1 %25, label %panic21, label %checkok25, !dbg !2346

checkok25:                                        ; preds = %loop.body
  %umod = urem i64 %23, %24, !dbg !2346
  store i64 %umod, ptr %j, align 8, !dbg !2346
  %ptradd26 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2348
  %26 = load i64, ptr %ptradd26, align 8, !dbg !2348
  %27 = load ptr, ptr %words, align 8, !dbg !2348
  %28 = load i64, ptr %j, align 8, !dbg !2349
  %ge = icmp uge i64 %28, %26, !dbg !2349
  %29 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2349
  br i1 %29, label %panic27, label %checkok37, !dbg !2349

checkok37:                                        ; preds = %checkok25
  %ptroffset38 = getelementptr inbounds [8 x i8], ptr %27, i64 %28, !dbg !2349
  %30 = load i64, ptr %ptroffset38, align 8, !dbg !2349
  %ptradd39 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2350
  %31 = load i64, ptr %ptradd39, align 8, !dbg !2350
  %32 = load ptr, ptr %0, align 8, !dbg !2350
  %33 = load i64, ptr %i, align 8, !dbg !2351
  %mul40 = mul i64 %33, 8, !dbg !2351
  %lt41 = icmp slt i64 %mul40, 0, !dbg !2351
  %34 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !2351
  br i1 %34, label %panic42, label %checkok50, !dbg !2351

checkok50:                                        ; preds = %checkok37
  %ge51 = icmp sge i64 %mul40, %31, !dbg !2351
  %35 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !2351
  br i1 %35, label %panic52, label %checkok62, !dbg !2351

checkok62:                                        ; preds = %checkok50
  %ptradd63 = getelementptr inbounds i8, ptr %32, i64 %mul40, !dbg !2351
  %checknull64 = icmp eq ptr %ptradd63, null, !dbg !2351
  %36 = call i1 @llvm.expect.i1(i1 %checknull64, i1 false), !dbg !2351
  br i1 %36, label %panic65, label %checkok69, !dbg !2351

checkok69:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd63, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2352, metadata !DIExpression()), !dbg !2354
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2356
  %37 = load i64, ptr %x, align 8, !dbg !2357
  %mul70 = mul i64 %37, -3372029247567499371, !dbg !2355
  %sub = sub i64 %30, %mul70, !dbg !2348
  store i64 %sub, ptr %ptroffset38, align 8, !dbg !2348
  %ptradd71 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2358
  %38 = load i64, ptr %ptradd71, align 8, !dbg !2358
  %39 = load ptr, ptr %words, align 8, !dbg !2358
  %40 = load i64, ptr %j, align 8, !dbg !2359
  %ge72 = icmp uge i64 %40, %38, !dbg !2359
  %41 = call i1 @llvm.expect.i1(i1 %ge72, i1 false), !dbg !2359
  br i1 %41, label %panic73, label %checkok83, !dbg !2359

checkok83:                                        ; preds = %checkok69
  %ptroffset84 = getelementptr inbounds [8 x i8], ptr %39, i64 %40, !dbg !2359
  %42 = load i64, ptr %ptroffset84, align 8, !dbg !2359
  %ptradd85 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2360
  %43 = load i64, ptr %ptradd85, align 8, !dbg !2360
  %44 = load ptr, ptr %words, align 8, !dbg !2360
  %45 = load i64, ptr %j, align 8, !dbg !2361
  %ge86 = icmp uge i64 %45, %43, !dbg !2361
  %46 = call i1 @llvm.expect.i1(i1 %ge86, i1 false), !dbg !2361
  br i1 %46, label %panic87, label %checkok97, !dbg !2361

checkok97:                                        ; preds = %checkok83
  %ptroffset98 = getelementptr inbounds [8 x i8], ptr %44, i64 %45, !dbg !2361
  %47 = load i64, ptr %ptroffset98, align 8, !dbg !2361
  %lshr = lshr i64 %47, 25, !dbg !2360
  %48 = freeze i64 %lshr, !dbg !2360
  %xor = xor i64 %42, %48, !dbg !2358
  store i64 %xor, ptr %ptroffset84, align 8, !dbg !2358
  %49 = load i64, ptr %i, align 8, !dbg !2362
  %add99 = add i64 %49, 1, !dbg !2362
  store i64 %add99, ptr %i, align 8, !dbg !2362
  br label %loop.cond, !dbg !2362

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !2363, metadata !DIExpression()), !dbg !2364
  %ptradd100 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2365
  %50 = load i64, ptr %ptradd100, align 8, !dbg !2365
  %ptradd101 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2366
  %51 = load i64, ptr %ptradd101, align 8, !dbg !2366
  %sdiv102 = sdiv i64 %51, 8, !dbg !2366
  %mul103 = mul i64 %sdiv102, 8, !dbg !2366
  %sub104 = sub i64 %50, %mul103, !dbg !2365
  store i64 %sub104, ptr %remaining, align 8, !dbg !2365
  %52 = load i64, ptr %remaining, align 8, !dbg !2367
  %intbool = icmp ne i64 %52, 0, !dbg !2367
  br i1 %intbool, label %if.then105, label %if.exit204, !dbg !2367

if.then105:                                       ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %rest, metadata !2368, metadata !DIExpression()), !dbg !2370
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !2371
  store ptr %rest, ptr %dst, align 8
  %ptradd106 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2372
  %53 = load i64, ptr %ptradd106, align 8, !dbg !2372
  %54 = load ptr, ptr %0, align 8, !dbg !2372
  %55 = load i64, ptr %remaining, align 8, !dbg !2373
  %56 = sub nuw i64 %53, %55, !dbg !2373
  %ge107 = icmp uge i64 %56, %53, !dbg !2373
  %57 = call i1 @llvm.expect.i1(i1 %ge107, i1 false), !dbg !2373
  br i1 %57, label %panic108, label %checkok118, !dbg !2373

checkok118:                                       ; preds = %if.then105
  %ptradd119 = getelementptr inbounds i8, ptr %54, i64 %56, !dbg !2373
  store ptr %ptradd119, ptr %src, align 8
  %58 = load i64, ptr %remaining, align 8
  store i64 %58, ptr %len, align 8
  %59 = load i64, ptr %len, align 8, !dbg !2374
  %eq = icmp eq i64 0, %59, !dbg !2374
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !2374

or.rhs:                                           ; preds = %checkok118
  %60 = load ptr, ptr %dst, align 8, !dbg !2378
  %61 = load i64, ptr %len, align 8, !dbg !2379
  %ptradd_any = getelementptr i8, ptr %60, i64 %61, !dbg !2379
  %62 = load ptr, ptr %src, align 8, !dbg !2380
  %le = icmp ule ptr %ptradd_any, %62, !dbg !2378
  br label %or.phi, !dbg !2378

or.phi:                                           ; preds = %or.rhs, %checkok118
  %val = phi i1 [ true, %checkok118 ], [ %le, %or.rhs ], !dbg !2378
  br i1 %val, label %or.phi123, label %or.rhs120, !dbg !2378

or.rhs120:                                        ; preds = %or.phi
  %63 = load ptr, ptr %src, align 8, !dbg !2381
  %64 = load i64, ptr %len, align 8, !dbg !2382
  %ptradd_any121 = getelementptr i8, ptr %63, i64 %64, !dbg !2382
  %65 = load ptr, ptr %dst, align 8, !dbg !2383
  %le122 = icmp ule ptr %ptradd_any121, %65, !dbg !2381
  br label %or.phi123, !dbg !2381

or.phi123:                                        ; preds = %or.rhs120, %or.phi
  %val124 = phi i1 [ true, %or.phi ], [ %le122, %or.rhs120 ], !dbg !2381
  br i1 %val124, label %assert_ok, label %assert_fail, !dbg !2381

assert_fail:                                      ; preds = %or.phi123
  store %"char[]" { ptr @.panic_msg.123, i64 95 }, ptr %indirectarg125, align 8
  store %"char[]" { ptr @.file.116, i64 6 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg127, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg125, ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, i32 309), !dbg !2374
  unreachable, !dbg !2374

assert_ok:                                        ; preds = %or.phi123
  %67 = load ptr, ptr %dst, align 8, !dbg !2384
  %68 = load ptr, ptr %src, align 8, !dbg !2385
  %69 = load i64, ptr %len, align 8, !dbg !2386
  call void @llvm.memcpy.p0.p0.i64(ptr %67, ptr %68, i64 %69, i1 false), !dbg !2387
  %ptradd128 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2388
  %70 = load i64, ptr %ptradd128, align 8, !dbg !2388
  %71 = load ptr, ptr %words, align 8, !dbg !2388
  %72 = sub nuw i64 %70, 1, !dbg !2389
  %lt129 = icmp slt i64 %72, 0, !dbg !2389
  %73 = call i1 @llvm.expect.i1(i1 %lt129, i1 false), !dbg !2389
  br i1 %73, label %panic130, label %checkok138, !dbg !2389

checkok138:                                       ; preds = %assert_ok
  %ge139 = icmp sge i64 %72, %70, !dbg !2389
  %74 = call i1 @llvm.expect.i1(i1 %ge139, i1 false), !dbg !2389
  br i1 %74, label %panic140, label %checkok150, !dbg !2389

checkok150:                                       ; preds = %checkok138
  %ptroffset151 = getelementptr inbounds [8 x i8], ptr %71, i64 %72, !dbg !2389
  %75 = load i64, ptr %ptroffset151, align 8, !dbg !2389
  %76 = load i64, ptr %rest, align 8, !dbg !2390
  %mul152 = mul i64 %76, -3372029247567499371, !dbg !2390
  %sub153 = sub i64 %75, %mul152, !dbg !2388
  store i64 %sub153, ptr %ptroffset151, align 8, !dbg !2388
  %ptradd154 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2391
  %77 = load i64, ptr %ptradd154, align 8, !dbg !2391
  %78 = load ptr, ptr %words, align 8, !dbg !2391
  %79 = sub nuw i64 %77, 1, !dbg !2392
  %lt155 = icmp slt i64 %79, 0, !dbg !2392
  %80 = call i1 @llvm.expect.i1(i1 %lt155, i1 false), !dbg !2392
  br i1 %80, label %panic156, label %checkok164, !dbg !2392

checkok164:                                       ; preds = %checkok150
  %ge165 = icmp sge i64 %79, %77, !dbg !2392
  %81 = call i1 @llvm.expect.i1(i1 %ge165, i1 false), !dbg !2392
  br i1 %81, label %panic166, label %checkok176, !dbg !2392

checkok176:                                       ; preds = %checkok164
  %ptroffset177 = getelementptr inbounds [8 x i8], ptr %78, i64 %79, !dbg !2392
  %82 = load i64, ptr %ptroffset177, align 8, !dbg !2392
  %ptradd178 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2393
  %83 = load i64, ptr %ptradd178, align 8, !dbg !2393
  %84 = load ptr, ptr %words, align 8, !dbg !2393
  %85 = sub nuw i64 %83, 1, !dbg !2394
  %lt179 = icmp slt i64 %85, 0, !dbg !2394
  %86 = call i1 @llvm.expect.i1(i1 %lt179, i1 false), !dbg !2394
  br i1 %86, label %panic180, label %checkok188, !dbg !2394

checkok188:                                       ; preds = %checkok176
  %ge189 = icmp sge i64 %85, %83, !dbg !2394
  %87 = call i1 @llvm.expect.i1(i1 %ge189, i1 false), !dbg !2394
  br i1 %87, label %panic190, label %checkok200, !dbg !2394

checkok200:                                       ; preds = %checkok188
  %ptroffset201 = getelementptr inbounds [8 x i8], ptr %84, i64 %85, !dbg !2394
  %88 = load i64, ptr %ptroffset201, align 8, !dbg !2394
  %lshr202 = lshr i64 %88, 25, !dbg !2393
  %89 = freeze i64 %lshr202, !dbg !2393
  %xor203 = xor i64 %82, %89, !dbg !2391
  store i64 %xor203, ptr %ptroffset177, align 8, !dbg !2391
  br label %if.exit204, !dbg !2391

if.exit204:                                       ; preds = %checkok200, %loop.exit
  call void @llvm.dbg.declare(metadata ptr %i205, metadata !2395, metadata !DIExpression()), !dbg !2398
  %90 = load i64, ptr %words_len_2, align 8, !dbg !2399
  %sub206 = sub i64 %90, 1, !dbg !2399
  store i64 %sub206, ptr %i205, align 8, !dbg !2399
  br label %loop.cond207, !dbg !2399

loop.cond207:                                     ; preds = %checkok323, %if.exit204
  %91 = load i64, ptr %i205, align 8, !dbg !2400
  %ge208 = icmp sge i64 %91, 0, !dbg !2400
  br i1 %ge208, label %loop.body209, label %loop.exit328, !dbg !2400

loop.body209:                                     ; preds = %loop.cond207
  call void @llvm.dbg.declare(metadata ptr %j210, metadata !2401, metadata !DIExpression()), !dbg !2403
  %92 = load i64, ptr %i205, align 8, !dbg !2404
  %ptradd211 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2405
  %93 = load i64, ptr %ptradd211, align 8, !dbg !2405
  %zero212 = icmp eq i64 %93, 0, !dbg !2404
  %94 = call i1 @llvm.expect.i1(i1 %zero212, i1 false), !dbg !2404
  br i1 %94, label %panic213, label %checkok217, !dbg !2404

checkok217:                                       ; preds = %loop.body209
  %smod = srem i64 %92, %93, !dbg !2404
  store i64 %smod, ptr %j210, align 8, !dbg !2404
  %ptradd218 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2406
  %95 = load i64, ptr %ptradd218, align 8, !dbg !2406
  %96 = load ptr, ptr %words, align 8, !dbg !2406
  %97 = load i64, ptr %j210, align 8, !dbg !2407
  %lt219 = icmp slt i64 %97, 0, !dbg !2407
  %98 = call i1 @llvm.expect.i1(i1 %lt219, i1 false), !dbg !2407
  br i1 %98, label %panic220, label %checkok228, !dbg !2407

checkok228:                                       ; preds = %checkok217
  %ge229 = icmp sge i64 %97, %95, !dbg !2407
  %99 = call i1 @llvm.expect.i1(i1 %ge229, i1 false), !dbg !2407
  br i1 %99, label %panic230, label %checkok240, !dbg !2407

checkok240:                                       ; preds = %checkok228
  %ptroffset241 = getelementptr inbounds [8 x i8], ptr %96, i64 %97, !dbg !2407
  %100 = load i64, ptr %ptroffset241, align 8, !dbg !2407
  %ptradd242 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2408
  %101 = load i64, ptr %ptradd242, align 8, !dbg !2408
  %102 = load ptr, ptr %words, align 8, !dbg !2408
  %103 = load i64, ptr %i205, align 8, !dbg !2409
  %add243 = add i64 %103, 1, !dbg !2409
  %ptradd244 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2410
  %104 = load i64, ptr %ptradd244, align 8, !dbg !2410
  %zero245 = icmp eq i64 %104, 0, !dbg !2409
  %105 = call i1 @llvm.expect.i1(i1 %zero245, i1 false), !dbg !2409
  br i1 %105, label %panic246, label %checkok250, !dbg !2409

checkok250:                                       ; preds = %checkok240
  %smod251 = srem i64 %add243, %104, !dbg !2409
  %lt252 = icmp slt i64 %smod251, 0, !dbg !2409
  %106 = call i1 @llvm.expect.i1(i1 %lt252, i1 false), !dbg !2409
  br i1 %106, label %panic253, label %checkok261, !dbg !2409

checkok261:                                       ; preds = %checkok250
  %ge262 = icmp sge i64 %smod251, %101, !dbg !2409
  %107 = call i1 @llvm.expect.i1(i1 %ge262, i1 false), !dbg !2409
  br i1 %107, label %panic263, label %checkok273, !dbg !2409

checkok273:                                       ; preds = %checkok261
  %ptroffset274 = getelementptr inbounds [8 x i8], ptr %102, i64 %smod251, !dbg !2409
  %108 = load i64, ptr %ptroffset274, align 8, !dbg !2409
  %mul275 = mul i64 %108, -3372029247567499371, !dbg !2408
  %sub276 = sub i64 %100, %mul275, !dbg !2406
  store i64 %sub276, ptr %ptroffset241, align 8, !dbg !2406
  %ptradd277 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2411
  %109 = load i64, ptr %ptradd277, align 8, !dbg !2411
  %110 = load ptr, ptr %words, align 8, !dbg !2411
  %111 = load i64, ptr %j210, align 8, !dbg !2412
  %lt278 = icmp slt i64 %111, 0, !dbg !2412
  %112 = call i1 @llvm.expect.i1(i1 %lt278, i1 false), !dbg !2412
  br i1 %112, label %panic279, label %checkok287, !dbg !2412

checkok287:                                       ; preds = %checkok273
  %ge288 = icmp sge i64 %111, %109, !dbg !2412
  %113 = call i1 @llvm.expect.i1(i1 %ge288, i1 false), !dbg !2412
  br i1 %113, label %panic289, label %checkok299, !dbg !2412

checkok299:                                       ; preds = %checkok287
  %ptroffset300 = getelementptr inbounds [8 x i8], ptr %110, i64 %111, !dbg !2412
  %114 = load i64, ptr %ptroffset300, align 8, !dbg !2412
  %ptradd301 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2413
  %115 = load i64, ptr %ptradd301, align 8, !dbg !2413
  %116 = load ptr, ptr %words, align 8, !dbg !2413
  %117 = load i64, ptr %j210, align 8, !dbg !2414
  %lt302 = icmp slt i64 %117, 0, !dbg !2414
  %118 = call i1 @llvm.expect.i1(i1 %lt302, i1 false), !dbg !2414
  br i1 %118, label %panic303, label %checkok311, !dbg !2414

checkok311:                                       ; preds = %checkok299
  %ge312 = icmp sge i64 %117, %115, !dbg !2414
  %119 = call i1 @llvm.expect.i1(i1 %ge312, i1 false), !dbg !2414
  br i1 %119, label %panic313, label %checkok323, !dbg !2414

checkok323:                                       ; preds = %checkok311
  %ptroffset324 = getelementptr inbounds [8 x i8], ptr %116, i64 %117, !dbg !2414
  %120 = load i64, ptr %ptroffset324, align 8, !dbg !2414
  %lshr325 = lshr i64 %120, 25, !dbg !2413
  %121 = freeze i64 %lshr325, !dbg !2413
  %xor326 = xor i64 %114, %121, !dbg !2411
  store i64 %xor326, ptr %ptroffset300, align 8, !dbg !2411
  %122 = load i64, ptr %i205, align 8, !dbg !2415
  %sub327 = sub i64 %122, 1, !dbg !2415
  store i64 %sub327, ptr %i205, align 8, !dbg !2415
  br label %loop.cond207, !dbg !2415

loop.exit328:                                     ; preds = %loop.cond207
  call void @llvm.dbg.declare(metadata ptr %i329, metadata !2416, metadata !DIExpression()), !dbg !2418
  store i64 0, ptr %i329, align 8, !dbg !2419
  br label %loop.cond330, !dbg !2419

loop.cond330:                                     ; preds = %checkok383, %loop.exit328
  %123 = load i64, ptr %i329, align 8, !dbg !2420
  %124 = load i64, ptr %words_len_2, align 8, !dbg !2421
  %lt331 = icmp ult i64 %123, %124, !dbg !2420
  br i1 %lt331, label %loop.body332, label %loop.exit388, !dbg !2420

loop.body332:                                     ; preds = %loop.cond330
  call void @llvm.dbg.declare(metadata ptr %j333, metadata !2422, metadata !DIExpression()), !dbg !2424
  %125 = load i64, ptr %i329, align 8, !dbg !2425
  %ptradd334 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2426
  %126 = load i64, ptr %ptradd334, align 8, !dbg !2426
  %zero335 = icmp eq i64 %126, 0, !dbg !2425
  %127 = call i1 @llvm.expect.i1(i1 %zero335, i1 false), !dbg !2425
  br i1 %127, label %panic336, label %checkok340, !dbg !2425

checkok340:                                       ; preds = %loop.body332
  %umod341 = urem i64 %125, %126, !dbg !2425
  store i64 %umod341, ptr %j333, align 8, !dbg !2425
  %ptradd342 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2427
  %128 = load i64, ptr %ptradd342, align 8, !dbg !2427
  %129 = load ptr, ptr %words, align 8, !dbg !2427
  %130 = load i64, ptr %j333, align 8, !dbg !2428
  %ge343 = icmp uge i64 %130, %128, !dbg !2428
  %131 = call i1 @llvm.expect.i1(i1 %ge343, i1 false), !dbg !2428
  br i1 %131, label %panic344, label %checkok354, !dbg !2428

checkok354:                                       ; preds = %checkok340
  %ptroffset355 = getelementptr inbounds [8 x i8], ptr %129, i64 %130, !dbg !2428
  %132 = load i64, ptr %ptroffset355, align 8, !dbg !2428
  %mul356 = mul i64 %132, -1065810590584100411, !dbg !2427
  store i64 %mul356, ptr %ptroffset355, align 8, !dbg !2427
  %ptradd357 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2429
  %133 = load i64, ptr %ptradd357, align 8, !dbg !2429
  %134 = load ptr, ptr %words, align 8, !dbg !2429
  %135 = load i64, ptr %j333, align 8, !dbg !2430
  %ge358 = icmp uge i64 %135, %133, !dbg !2430
  %136 = call i1 @llvm.expect.i1(i1 %ge358, i1 false), !dbg !2430
  br i1 %136, label %panic359, label %checkok369, !dbg !2430

checkok369:                                       ; preds = %checkok354
  %ptroffset370 = getelementptr inbounds [8 x i8], ptr %134, i64 %135, !dbg !2430
  %137 = load i64, ptr %ptroffset370, align 8, !dbg !2430
  %ptradd371 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2431
  %138 = load i64, ptr %ptradd371, align 8, !dbg !2431
  %139 = load ptr, ptr %words, align 8, !dbg !2431
  %140 = load i64, ptr %j333, align 8, !dbg !2432
  %ge372 = icmp uge i64 %140, %138, !dbg !2432
  %141 = call i1 @llvm.expect.i1(i1 %ge372, i1 false), !dbg !2432
  br i1 %141, label %panic373, label %checkok383, !dbg !2432

checkok383:                                       ; preds = %checkok369
  %ptroffset384 = getelementptr inbounds [8 x i8], ptr %139, i64 %140, !dbg !2432
  %142 = load i64, ptr %ptroffset384, align 8, !dbg !2432
  %lshr385 = lshr i64 %142, 25, !dbg !2431
  %143 = freeze i64 %lshr385, !dbg !2431
  %xor386 = xor i64 %137, %143, !dbg !2429
  store i64 %xor386, ptr %ptroffset370, align 8, !dbg !2429
  %144 = load i64, ptr %i329, align 8, !dbg !2433
  %add387 = add i64 %144, 1, !dbg !2433
  store i64 %add387, ptr %i329, align 8, !dbg !2433
  br label %loop.cond330, !dbg !2433

loop.exit388:                                     ; preds = %loop.cond330
  %145 = load ptr, ptr %words, align 8, !dbg !2434
  store ptr %145, ptr %taddr389, align 8
  %146 = load ptr, ptr %taddr389, align 8
  %147 = load i64, ptr %out_chars, align 8, !dbg !2435
  %add390 = add i64 0, %147, !dbg !2435
  %size391 = sub i64 %add390, 0, !dbg !2435
  %148 = insertvalue %"char[]" undef, ptr %146, 0, !dbg !2435
  %149 = insertvalue %"char[]" %148, i64 %size391, 1, !dbg !2435
  %150 = load %"char[]", ptr %1, align 8, !dbg !2436
  %151 = extractvalue %"char[]" %150, 0, !dbg !2436
  %152 = extractvalue %"char[]" %150, 1, !dbg !2437
  %gt392 = icmp ugt i64 0, %152, !dbg !2437
  %153 = call i1 @llvm.expect.i1(i1 %gt392, i1 false), !dbg !2437
  br i1 %153, label %panic393, label %checkok403, !dbg !2437

checkok403:                                       ; preds = %loop.exit388
  %size404 = sub i64 %152, 0, !dbg !2436
  %154 = insertvalue %"char[]" undef, ptr %151, 0, !dbg !2436
  %155 = insertvalue %"char[]" %154, i64 %size404, 1, !dbg !2436
  %156 = extractvalue %"char[]" %155, 0, !dbg !2436
  %157 = extractvalue %"char[]" %149, 0, !dbg !2436
  store %"char[]" %149, ptr %taddr405, align 8
  %ptradd406 = getelementptr inbounds i8, ptr %taddr405, i64 8
  %158 = load i64, ptr %ptradd406, align 8
  store %"char[]" %155, ptr %taddr407, align 8
  %ptradd408 = getelementptr inbounds i8, ptr %taddr407, i64 8
  %159 = load i64, ptr %ptradd408, align 8
  %neq = icmp ne i64 %159, %158
  %160 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %160, label %panic409, label %checkok419

checkok419:                                       ; preds = %checkok403
  %161 = mul i64 %158, 1, !dbg !2436
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %156, ptr align 1 %157, i64 %161, i1 false), !dbg !2436
  %162 = load ptr, ptr %current, align 8, !dbg !2438
  %163 = load i64, ptr %mark, align 8, !dbg !2438
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %162, i64 %163), !dbg !2440
  ret void, !dbg !2441

panic:                                            ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.115, i64 48 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.116, i64 6 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg2, align 8
  %164 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %164(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 542), !dbg !2317
  unreachable, !dbg !2317

panic5:                                           ; preds = %checkok
  store i64 %17, ptr %taddr6, align 8
  %165 = insertvalue %any undef, ptr %taddr6, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %167 = insertvalue %any undef, ptr %taddr7, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg10, align 8
  store %any %166, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %168, ptr %ptradd11, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 30, ptr align 8 %indirectarg12), !dbg !2332
  unreachable, !dbg !2332

panic21:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.119, i64 10 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg24, align 8
  %170 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %170(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 36), !dbg !2346
  unreachable, !dbg !2346

panic27:                                          ; preds = %checkok25
  store i64 %26, ptr %taddr28, align 8
  %171 = insertvalue %any undef, ptr %taddr28, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr29, align 8
  %173 = insertvalue %any undef, ptr %taddr29, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg32, align 8
  store %any %172, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %174, ptr %ptradd34, align 16
  %175 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %175, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 37, ptr align 8 %indirectarg36), !dbg !2349
  unreachable, !dbg !2349

panic42:                                          ; preds = %checkok37
  store i64 %mul40, ptr %taddr43, align 8
  %176 = insertvalue %any undef, ptr %taddr43, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg46, align 8
  store %any %177, ptr %varargslots47, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp48" = insertvalue %"any[]" %178, i64 1, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 37, ptr align 8 %indirectarg49), !dbg !2351
  unreachable, !dbg !2351

panic52:                                          ; preds = %checkok50
  store i64 %31, ptr %taddr53, align 8
  %179 = insertvalue %any undef, ptr %taddr53, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul40, ptr %taddr54, align 8
  %181 = insertvalue %any undef, ptr %taddr54, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg57, align 8
  store %any %180, ptr %varargslots58, align 16
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %182, ptr %ptradd59, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp60", ptr %indirectarg61, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 37, ptr align 8 %indirectarg61), !dbg !2351
  unreachable, !dbg !2351

panic65:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.122, i64 63 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg68, align 8
  %184 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %184(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 37), !dbg !2442
  unreachable, !dbg !2442

panic73:                                          ; preds = %checkok69
  store i64 %38, ptr %taddr74, align 8
  %185 = insertvalue %any undef, ptr %taddr74, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr75, align 8
  %187 = insertvalue %any undef, ptr %taddr75, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg77, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg78, align 8
  store %any %186, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %188, ptr %ptradd80, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, ptr align 8 %indirectarg78, i32 38, ptr align 8 %indirectarg82), !dbg !2359
  unreachable, !dbg !2359

panic87:                                          ; preds = %checkok83
  store i64 %43, ptr %taddr88, align 8
  %190 = insertvalue %any undef, ptr %taddr88, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr89, align 8
  %192 = insertvalue %any undef, ptr %taddr89, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg92, align 8
  store %any %191, ptr %varargslots93, align 16
  %ptradd94 = getelementptr inbounds i8, ptr %varargslots93, i64 16
  store %any %193, ptr %ptradd94, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp95" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, i32 38, ptr align 8 %indirectarg96), !dbg !2361
  unreachable, !dbg !2361

panic108:                                         ; preds = %if.then105
  store i64 %53, ptr %taddr109, align 8
  %195 = insertvalue %any undef, ptr %taddr109, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr110, align 8
  %197 = insertvalue %any undef, ptr %taddr110, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg113, align 8
  store %any %196, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %198, ptr %ptradd115, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 46, ptr align 8 %indirectarg117), !dbg !2373
  unreachable, !dbg !2373

panic130:                                         ; preds = %assert_ok
  store i64 %72, ptr %taddr131, align 8
  %200 = insertvalue %any undef, ptr %taddr131, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg134, align 8
  store %any %201, ptr %varargslots135, align 16
  %202 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp136" = insertvalue %"any[]" %202, i64 1, 1
  store %"any[]" %"$$temp136", ptr %indirectarg137, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, i32 47, ptr align 8 %indirectarg137), !dbg !2389
  unreachable, !dbg !2389

panic140:                                         ; preds = %checkok138
  store i64 %70, ptr %taddr141, align 8
  %203 = insertvalue %any undef, ptr %taddr141, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %72, ptr %taddr142, align 8
  %205 = insertvalue %any undef, ptr %taddr142, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg145, align 8
  store %any %204, ptr %varargslots146, align 16
  %ptradd147 = getelementptr inbounds i8, ptr %varargslots146, i64 16
  store %any %206, ptr %ptradd147, align 16
  %207 = insertvalue %"any[]" undef, ptr %varargslots146, 0
  %"$$temp148" = insertvalue %"any[]" %207, i64 2, 1
  store %"any[]" %"$$temp148", ptr %indirectarg149, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, i32 47, ptr align 8 %indirectarg149), !dbg !2389
  unreachable, !dbg !2389

panic156:                                         ; preds = %checkok150
  store i64 %79, ptr %taddr157, align 8
  %208 = insertvalue %any undef, ptr %taddr157, 0
  %209 = insertvalue %any %208, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg158, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg159, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg160, align 8
  store %any %209, ptr %varargslots161, align 16
  %210 = insertvalue %"any[]" undef, ptr %varargslots161, 0
  %"$$temp162" = insertvalue %"any[]" %210, i64 1, 1
  store %"any[]" %"$$temp162", ptr %indirectarg163, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg158, ptr align 8 %indirectarg159, ptr align 8 %indirectarg160, i32 48, ptr align 8 %indirectarg163), !dbg !2392
  unreachable, !dbg !2392

panic166:                                         ; preds = %checkok164
  store i64 %77, ptr %taddr167, align 8
  %211 = insertvalue %any undef, ptr %taddr167, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %79, ptr %taddr168, align 8
  %213 = insertvalue %any undef, ptr %taddr168, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg169, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg170, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg171, align 8
  store %any %212, ptr %varargslots172, align 16
  %ptradd173 = getelementptr inbounds i8, ptr %varargslots172, i64 16
  store %any %214, ptr %ptradd173, align 16
  %215 = insertvalue %"any[]" undef, ptr %varargslots172, 0
  %"$$temp174" = insertvalue %"any[]" %215, i64 2, 1
  store %"any[]" %"$$temp174", ptr %indirectarg175, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg169, ptr align 8 %indirectarg170, ptr align 8 %indirectarg171, i32 48, ptr align 8 %indirectarg175), !dbg !2392
  unreachable, !dbg !2392

panic180:                                         ; preds = %checkok176
  store i64 %85, ptr %taddr181, align 8
  %216 = insertvalue %any undef, ptr %taddr181, 0
  %217 = insertvalue %any %216, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg184, align 8
  store %any %217, ptr %varargslots185, align 16
  %218 = insertvalue %"any[]" undef, ptr %varargslots185, 0
  %"$$temp186" = insertvalue %"any[]" %218, i64 1, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, i32 48, ptr align 8 %indirectarg187), !dbg !2394
  unreachable, !dbg !2394

panic190:                                         ; preds = %checkok188
  store i64 %83, ptr %taddr191, align 8
  %219 = insertvalue %any undef, ptr %taddr191, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %85, ptr %taddr192, align 8
  %221 = insertvalue %any undef, ptr %taddr192, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg193, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg194, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg195, align 8
  store %any %220, ptr %varargslots196, align 16
  %ptradd197 = getelementptr inbounds i8, ptr %varargslots196, i64 16
  store %any %222, ptr %ptradd197, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots196, 0
  %"$$temp198" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp198", ptr %indirectarg199, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg193, ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, i32 48, ptr align 8 %indirectarg199), !dbg !2394
  unreachable, !dbg !2394

panic213:                                         ; preds = %loop.body209
  store %"char[]" { ptr @.panic_msg.119, i64 10 }, ptr %indirectarg214, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg215, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg216, align 8
  %224 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %224(ptr align 8 %indirectarg214, ptr align 8 %indirectarg215, ptr align 8 %indirectarg216, i32 54), !dbg !2404
  unreachable, !dbg !2404

panic220:                                         ; preds = %checkok217
  store i64 %97, ptr %taddr221, align 8
  %225 = insertvalue %any undef, ptr %taddr221, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg222, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg223, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg224, align 8
  store %any %226, ptr %varargslots225, align 16
  %227 = insertvalue %"any[]" undef, ptr %varargslots225, 0
  %"$$temp226" = insertvalue %"any[]" %227, i64 1, 1
  store %"any[]" %"$$temp226", ptr %indirectarg227, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg222, ptr align 8 %indirectarg223, ptr align 8 %indirectarg224, i32 55, ptr align 8 %indirectarg227), !dbg !2407
  unreachable, !dbg !2407

panic230:                                         ; preds = %checkok228
  store i64 %95, ptr %taddr231, align 8
  %228 = insertvalue %any undef, ptr %taddr231, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %97, ptr %taddr232, align 8
  %230 = insertvalue %any undef, ptr %taddr232, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg233, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg234, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg235, align 8
  store %any %229, ptr %varargslots236, align 16
  %ptradd237 = getelementptr inbounds i8, ptr %varargslots236, i64 16
  store %any %231, ptr %ptradd237, align 16
  %232 = insertvalue %"any[]" undef, ptr %varargslots236, 0
  %"$$temp238" = insertvalue %"any[]" %232, i64 2, 1
  store %"any[]" %"$$temp238", ptr %indirectarg239, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg233, ptr align 8 %indirectarg234, ptr align 8 %indirectarg235, i32 55, ptr align 8 %indirectarg239), !dbg !2407
  unreachable, !dbg !2407

panic246:                                         ; preds = %checkok240
  store %"char[]" { ptr @.panic_msg.119, i64 10 }, ptr %indirectarg247, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg248, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg249, align 8
  %233 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %233(ptr align 8 %indirectarg247, ptr align 8 %indirectarg248, ptr align 8 %indirectarg249, i32 55), !dbg !2409
  unreachable, !dbg !2409

panic253:                                         ; preds = %checkok250
  store i64 %smod251, ptr %taddr254, align 8
  %234 = insertvalue %any undef, ptr %taddr254, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg255, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg256, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg257, align 8
  store %any %235, ptr %varargslots258, align 16
  %236 = insertvalue %"any[]" undef, ptr %varargslots258, 0
  %"$$temp259" = insertvalue %"any[]" %236, i64 1, 1
  store %"any[]" %"$$temp259", ptr %indirectarg260, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg255, ptr align 8 %indirectarg256, ptr align 8 %indirectarg257, i32 55, ptr align 8 %indirectarg260), !dbg !2409
  unreachable, !dbg !2409

panic263:                                         ; preds = %checkok261
  store i64 %101, ptr %taddr264, align 8
  %237 = insertvalue %any undef, ptr %taddr264, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod251, ptr %taddr265, align 8
  %239 = insertvalue %any undef, ptr %taddr265, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg267, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg268, align 8
  store %any %238, ptr %varargslots269, align 16
  %ptradd270 = getelementptr inbounds i8, ptr %varargslots269, i64 16
  store %any %240, ptr %ptradd270, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots269, 0
  %"$$temp271" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp271", ptr %indirectarg272, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, ptr align 8 %indirectarg268, i32 55, ptr align 8 %indirectarg272), !dbg !2409
  unreachable, !dbg !2409

panic279:                                         ; preds = %checkok273
  store i64 %111, ptr %taddr280, align 8
  %242 = insertvalue %any undef, ptr %taddr280, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg281, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg282, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg283, align 8
  store %any %243, ptr %varargslots284, align 16
  %244 = insertvalue %"any[]" undef, ptr %varargslots284, 0
  %"$$temp285" = insertvalue %"any[]" %244, i64 1, 1
  store %"any[]" %"$$temp285", ptr %indirectarg286, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg281, ptr align 8 %indirectarg282, ptr align 8 %indirectarg283, i32 56, ptr align 8 %indirectarg286), !dbg !2412
  unreachable, !dbg !2412

panic289:                                         ; preds = %checkok287
  store i64 %109, ptr %taddr290, align 8
  %245 = insertvalue %any undef, ptr %taddr290, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %111, ptr %taddr291, align 8
  %247 = insertvalue %any undef, ptr %taddr291, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg292, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg293, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg294, align 8
  store %any %246, ptr %varargslots295, align 16
  %ptradd296 = getelementptr inbounds i8, ptr %varargslots295, i64 16
  store %any %248, ptr %ptradd296, align 16
  %249 = insertvalue %"any[]" undef, ptr %varargslots295, 0
  %"$$temp297" = insertvalue %"any[]" %249, i64 2, 1
  store %"any[]" %"$$temp297", ptr %indirectarg298, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg292, ptr align 8 %indirectarg293, ptr align 8 %indirectarg294, i32 56, ptr align 8 %indirectarg298), !dbg !2412
  unreachable, !dbg !2412

panic303:                                         ; preds = %checkok299
  store i64 %117, ptr %taddr304, align 8
  %250 = insertvalue %any undef, ptr %taddr304, 0
  %251 = insertvalue %any %250, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg305, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg306, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg307, align 8
  store %any %251, ptr %varargslots308, align 16
  %252 = insertvalue %"any[]" undef, ptr %varargslots308, 0
  %"$$temp309" = insertvalue %"any[]" %252, i64 1, 1
  store %"any[]" %"$$temp309", ptr %indirectarg310, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg305, ptr align 8 %indirectarg306, ptr align 8 %indirectarg307, i32 56, ptr align 8 %indirectarg310), !dbg !2414
  unreachable, !dbg !2414

panic313:                                         ; preds = %checkok311
  store i64 %115, ptr %taddr314, align 8
  %253 = insertvalue %any undef, ptr %taddr314, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %117, ptr %taddr315, align 8
  %255 = insertvalue %any undef, ptr %taddr315, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg316, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg317, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg318, align 8
  store %any %254, ptr %varargslots319, align 16
  %ptradd320 = getelementptr inbounds i8, ptr %varargslots319, i64 16
  store %any %256, ptr %ptradd320, align 16
  %257 = insertvalue %"any[]" undef, ptr %varargslots319, 0
  %"$$temp321" = insertvalue %"any[]" %257, i64 2, 1
  store %"any[]" %"$$temp321", ptr %indirectarg322, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg316, ptr align 8 %indirectarg317, ptr align 8 %indirectarg318, i32 56, ptr align 8 %indirectarg322), !dbg !2414
  unreachable, !dbg !2414

panic336:                                         ; preds = %loop.body332
  store %"char[]" { ptr @.panic_msg.119, i64 10 }, ptr %indirectarg337, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg338, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg339, align 8
  %258 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %258(ptr align 8 %indirectarg337, ptr align 8 %indirectarg338, ptr align 8 %indirectarg339, i32 62), !dbg !2425
  unreachable, !dbg !2425

panic344:                                         ; preds = %checkok340
  store i64 %128, ptr %taddr345, align 8
  %259 = insertvalue %any undef, ptr %taddr345, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %130, ptr %taddr346, align 8
  %261 = insertvalue %any undef, ptr %taddr346, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg347, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg348, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg349, align 8
  store %any %260, ptr %varargslots350, align 16
  %ptradd351 = getelementptr inbounds i8, ptr %varargslots350, i64 16
  store %any %262, ptr %ptradd351, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots350, 0
  %"$$temp352" = insertvalue %"any[]" %263, i64 2, 1
  store %"any[]" %"$$temp352", ptr %indirectarg353, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg347, ptr align 8 %indirectarg348, ptr align 8 %indirectarg349, i32 63, ptr align 8 %indirectarg353), !dbg !2428
  unreachable, !dbg !2428

panic359:                                         ; preds = %checkok354
  store i64 %133, ptr %taddr360, align 8
  %264 = insertvalue %any undef, ptr %taddr360, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %135, ptr %taddr361, align 8
  %266 = insertvalue %any undef, ptr %taddr361, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg362, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg363, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg364, align 8
  store %any %265, ptr %varargslots365, align 16
  %ptradd366 = getelementptr inbounds i8, ptr %varargslots365, i64 16
  store %any %267, ptr %ptradd366, align 16
  %268 = insertvalue %"any[]" undef, ptr %varargslots365, 0
  %"$$temp367" = insertvalue %"any[]" %268, i64 2, 1
  store %"any[]" %"$$temp367", ptr %indirectarg368, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg362, ptr align 8 %indirectarg363, ptr align 8 %indirectarg364, i32 64, ptr align 8 %indirectarg368), !dbg !2430
  unreachable, !dbg !2430

panic373:                                         ; preds = %checkok369
  store i64 %138, ptr %taddr374, align 8
  %269 = insertvalue %any undef, ptr %taddr374, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %140, ptr %taddr375, align 8
  %271 = insertvalue %any undef, ptr %taddr375, 0
  %272 = insertvalue %any %271, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg376, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg377, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg378, align 8
  store %any %270, ptr %varargslots379, align 16
  %ptradd380 = getelementptr inbounds i8, ptr %varargslots379, i64 16
  store %any %272, ptr %ptradd380, align 16
  %273 = insertvalue %"any[]" undef, ptr %varargslots379, 0
  %"$$temp381" = insertvalue %"any[]" %273, i64 2, 1
  store %"any[]" %"$$temp381", ptr %indirectarg382, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg376, ptr align 8 %indirectarg377, ptr align 8 %indirectarg378, i32 64, ptr align 8 %indirectarg382), !dbg !2432
  unreachable, !dbg !2432

panic393:                                         ; preds = %loop.exit388
  store i64 %152, ptr %taddr394, align 8
  %274 = insertvalue %any undef, ptr %taddr394, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr395, align 8
  %276 = insertvalue %any undef, ptr %taddr395, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg396, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg397, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg398, align 8
  store %any %275, ptr %varargslots399, align 16
  %ptradd400 = getelementptr inbounds i8, ptr %varargslots399, i64 16
  store %any %277, ptr %ptradd400, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots399, 0
  %"$$temp401" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp401", ptr %indirectarg402, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg396, ptr align 8 %indirectarg397, ptr align 8 %indirectarg398, i32 66, ptr align 8 %indirectarg402), !dbg !2436
  unreachable, !dbg !2436

panic409:                                         ; preds = %checkok403
  store i64 %159, ptr %taddr410, align 8
  %279 = insertvalue %any undef, ptr %taddr410, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %158, ptr %taddr411, align 8
  %281 = insertvalue %any undef, ptr %taddr411, 0
  %282 = insertvalue %any %281, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg412, align 8
  store %"char[]" { ptr @.file.118, i64 14 }, ptr %indirectarg413, align 8
  store %"char[]" { ptr @.func.117, i64 6 }, ptr %indirectarg414, align 8
  store %any %280, ptr %varargslots415, align 16
  %ptradd416 = getelementptr inbounds i8, ptr %varargslots415, i64 16
  store %any %282, ptr %ptradd416, align 16
  %283 = insertvalue %"any[]" undef, ptr %varargslots415, 0
  %"$$temp417" = insertvalue %"any[]" %283, i64 2, 1
  store %"any[]" %"$$temp417", ptr %indirectarg418, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg412, ptr align 8 %indirectarg413, ptr align 8 %indirectarg414, i32 66, ptr align 8 %indirectarg418), !dbg !2436
  unreachable, !dbg !2436
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !2443 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %value4 = alloca ptr, align 8
  %expr5 = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %value14 = alloca ptr, align 8
  %expr15 = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %value24 = alloca ptr, align 8
  %expr25 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %value35 = alloca i64, align 8
  %expr36 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %value45 = alloca ptr, align 8
  %expr46 = alloca ptr, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %value55 = alloca %any, align 8
  %expr56 = alloca %any, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %expr64 = alloca [8 x i32], align 16
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %addr, metadata !2449, metadata !DIExpression()), !dbg !2450
  %1 = call ptr @std.core.mem.malloc(i64 1) #5, !dbg !2451
  store ptr %1, ptr %addr, align 8, !dbg !2451
  %2 = load ptr, ptr %addr, align 8, !dbg !2452
  call void @std.core.mem.free(ptr %2) #5, !dbg !2453
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !2454
  %add = add i32 %3, -302935722, !dbg !2454
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !2454
  call void @llvm.dbg.declare(metadata ptr %entropy_data, metadata !2455, metadata !DIExpression()), !dbg !2459
  store %"char[]" { ptr @.str.124, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !2460
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2460
  br i1 %4, label %panic, label %checkok, !dbg !2460

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !2465
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !2465
  store %"char[]" %6, ptr %indirectarg3, align 8
  %7 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg3), !dbg !2466
  store i32 %7, ptr %entropy_data, align 4, !dbg !2466
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !2466
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value4, align 8
  %9 = load ptr, ptr %value4, align 8
  store ptr %9, ptr %expr5, align 8
  %checknull6 = icmp eq ptr %expr5, null, !dbg !2467
  %10 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2467
  br i1 %10, label %panic7, label %checkok11, !dbg !2467

checkok11:                                        ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr5, 0, !dbg !2472
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !2472
  store %"char[]" %12, ptr %indirectarg12, align 8
  %13 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg12), !dbg !2473
  store i32 %13, ptr %ptradd, align 4, !dbg !2473
  %ptradd13 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !2473
  store ptr %addr, ptr %value14, align 8
  %14 = load ptr, ptr %value14, align 8
  store ptr %14, ptr %expr15, align 8
  %checknull16 = icmp eq ptr %expr15, null, !dbg !2474
  %15 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !2474
  br i1 %15, label %panic17, label %checkok21, !dbg !2474

checkok21:                                        ; preds = %checkok11
  %16 = insertvalue %"char[]" undef, ptr %expr15, 0, !dbg !2479
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !2479
  store %"char[]" %17, ptr %indirectarg22, align 8
  %18 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg22), !dbg !2480
  store i32 %18, ptr %ptradd13, align 4, !dbg !2480
  %ptradd23 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !2480
  store ptr @std.math.random.entropy, ptr %value24, align 8
  %19 = load ptr, ptr %value24, align 8
  store ptr %19, ptr %expr25, align 8
  %checknull26 = icmp eq ptr %expr25, null, !dbg !2481
  %20 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !2481
  br i1 %20, label %panic27, label %checkok31, !dbg !2481

checkok31:                                        ; preds = %checkok21
  %21 = insertvalue %"char[]" undef, ptr %expr25, 0, !dbg !2486
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !2486
  store %"char[]" %22, ptr %indirectarg32, align 8
  %23 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg32), !dbg !2487
  store i32 %23, ptr %ptradd23, align 4, !dbg !2487
  %ptradd33 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !2487
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !2488
  store i32 %24, ptr %ptradd33, align 4, !dbg !2488
  %ptradd34 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !2488
  %25 = call i64 @std.time.clock.now(), !dbg !2489
  store i64 %25, ptr %value35, align 8
  %26 = load i64, ptr %value35, align 8
  store i64 %26, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !2490
  %27 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !2490
  br i1 %27, label %panic38, label %checkok42, !dbg !2490

checkok42:                                        ; preds = %checkok31
  %28 = insertvalue %"char[]" undef, ptr %expr36, 0, !dbg !2495
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !2495
  store %"char[]" %29, ptr %indirectarg43, align 8
  %30 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg43), !dbg !2496
  store i32 %30, ptr %ptradd34, align 4, !dbg !2496
  %ptradd44 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !2496
  store ptr @std.core.dstring.DString.new_init, ptr %value45, align 8
  %31 = load ptr, ptr %value45, align 8
  store ptr %31, ptr %expr46, align 8
  %checknull47 = icmp eq ptr %expr46, null, !dbg !2497
  %32 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !2497
  br i1 %32, label %panic48, label %checkok52, !dbg !2497

checkok52:                                        ; preds = %checkok42
  %33 = insertvalue %"char[]" undef, ptr %expr46, 0, !dbg !2502
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !2502
  store %"char[]" %34, ptr %indirectarg53, align 8
  %35 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg53), !dbg !2503
  store i32 %35, ptr %ptradd44, align 4, !dbg !2503
  %ptradd54 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !2503
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value55, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr56, ptr align 8 %value55, i32 16, i1 false)
  %checknull57 = icmp eq ptr %expr56, null, !dbg !2504
  %36 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !2504
  br i1 %36, label %panic58, label %checkok62, !dbg !2504

checkok62:                                        ; preds = %checkok52
  %37 = insertvalue %"char[]" undef, ptr %expr56, 0, !dbg !2509
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !2509
  store %"char[]" %38, ptr %indirectarg63, align 8
  %39 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg63), !dbg !2510
  store i32 %39, ptr %ptradd54, align 4, !dbg !2510
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr64, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull65 = icmp eq ptr %expr64, null, !dbg !2511
  %40 = call i1 @llvm.expect.i1(i1 %checknull65, i1 false), !dbg !2511
  br i1 %40, label %panic66, label %checkok70, !dbg !2511

checkok70:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr64, i32 32, i1 false), !dbg !2514
  ret void, !dbg !2514

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 212), !dbg !2465
  unreachable, !dbg !2465

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg10, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 212), !dbg !2472
  unreachable, !dbg !2472

panic17:                                          ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg20, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 212), !dbg !2479
  unreachable, !dbg !2479

panic27:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg30, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 212), !dbg !2486
  unreachable, !dbg !2486

panic38:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg41, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 212), !dbg !2495
  unreachable, !dbg !2495

panic48:                                          ; preds = %checkok42
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg51, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 212), !dbg !2502
  unreachable, !dbg !2502

panic58:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg61, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 212), !dbg !2509
  unreachable, !dbg !2509

panic66:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.125, i64 7 }, ptr %indirectarg69, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 212), !dbg !2514
  unreachable, !dbg !2514
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2515 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2520
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2520
  br i1 %3, label %panic, label %checkok, !dbg !2520

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2521, metadata !DIExpression()), !dbg !2522
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2523, metadata !DIExpression()), !dbg !2524
  %4 = load ptr, ptr %self, align 8, !dbg !2525
  %checknull = icmp eq ptr %4, null, !dbg !2525
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2525
  br i1 %5, label %panic3, label %checkok7, !dbg !2525

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2526, metadata !DIExpression()), !dbg !2528
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !2528
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2530
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !2533
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %return_value, i32 64, i1 false), !dbg !2534
  ret void, !dbg !2534

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 15), !dbg !2522
  unreachable, !dbg !2522

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 17), !dbg !2525
  unreachable, !dbg !2525
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !2535 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %self13 = alloca i128, align 16
  %shift = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2538
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2538
  br i1 %2, label %panic, label %checkok, !dbg !2538

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2539, metadata !DIExpression()), !dbg !2540
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2541, metadata !DIExpression()), !dbg !2542
  %3 = load ptr, ptr %self, align 8, !dbg !2543
  store ptr %3, ptr %s, align 8, !dbg !2543
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2544, metadata !DIExpression()), !dbg !2545
  %4 = load ptr, ptr %s, align 8, !dbg !2546
  %5 = load i128, ptr %4, align 16, !dbg !2547
  %6 = load ptr, ptr %s, align 8, !dbg !2548
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2549
  %7 = load i128, ptr %ptradd, align 16, !dbg !2549
  %add = add i128 %5, %7, !dbg !2546
  %8 = load ptr, ptr %s, align 8, !dbg !2550
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !2551
  %9 = load i128, ptr %ptradd3, align 16, !dbg !2551
  %add4 = add i128 %add, %9, !dbg !2546
  store i128 %add4, ptr %result, align 16, !dbg !2546
  %10 = load ptr, ptr %s, align 8, !dbg !2552
  %11 = load ptr, ptr %s, align 8, !dbg !2553
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2554
  %12 = load i128, ptr %ptradd5, align 16, !dbg !2554
  %13 = load ptr, ptr %s, align 8, !dbg !2555
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2556
  %14 = load i128, ptr %ptradd6, align 16, !dbg !2556
  %lshr = lshr i128 %14, 11, !dbg !2555
  %15 = freeze i128 %lshr, !dbg !2555
  %xor = xor i128 %12, %15, !dbg !2553
  store i128 %xor, ptr %10, align 16, !dbg !2553
  %16 = load ptr, ptr %s, align 8, !dbg !2557
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2558
  %17 = load ptr, ptr %s, align 8, !dbg !2559
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !2560
  %18 = load i128, ptr %ptradd8, align 16, !dbg !2560
  %19 = load ptr, ptr %s, align 8, !dbg !2561
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !2562
  %20 = load i128, ptr %ptradd9, align 16, !dbg !2562
  %shl = shl i128 %20, 3, !dbg !2561
  %21 = freeze i128 %shl, !dbg !2561
  %add10 = add i128 %18, %21, !dbg !2559
  store i128 %add10, ptr %ptradd7, align 16, !dbg !2559
  %22 = load ptr, ptr %s, align 8, !dbg !2563
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !2564
  %23 = load ptr, ptr %s, align 8, !dbg !2565
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !2566
  %24 = load i128, ptr %ptradd12, align 16
  store i128 %24, ptr %self13, align 16
  store i128 40, ptr %shift, align 16
  %25 = load i128, ptr %self13, align 16, !dbg !2567
  %26 = load i128, ptr %self13, align 16, !dbg !2569
  %27 = load i128, ptr %shift, align 16, !dbg !2570
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !2570
  %29 = load i128, ptr %result, align 16, !dbg !2571
  %add14 = add i128 %28, %29, !dbg !2565
  store i128 %add14, ptr %ptradd11, align 16, !dbg !2565
  %30 = load ptr, ptr %s, align 8, !dbg !2572
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !2573
  %31 = load i128, ptr %ptradd15, align 16, !dbg !2573
  %add16 = add i128 %31, -129976298391535590297638237547755878347, !dbg !2572
  store i128 %add16, ptr %ptradd15, align 16, !dbg !2572
  %32 = load <2 x i64>, ptr %result, align 16, !dbg !2574
  ret <2 x i64> %32, !dbg !2574

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !2540
  unreachable, !dbg !2540
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2575 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2576
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2576
  br i1 %3, label %panic, label %checkok, !dbg !2576

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2577, metadata !DIExpression()), !dbg !2578
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2579, metadata !DIExpression()), !dbg !2580
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2581
  %4 = load i64, ptr %ptradd, align 8, !dbg !2581
  %lt = icmp ult i64 0, %4, !dbg !2581
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2581

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 32), !dbg !2581
  unreachable, !dbg !2581

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2583, metadata !DIExpression()), !dbg !2585
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2586
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2586
  store i64 %6, ptr %len, align 8, !dbg !2586
  br label %loop.cond, !dbg !2587

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2588
  %lt7 = icmp ult i64 0, %7, !dbg !2588
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2588

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2590, metadata !DIExpression()), !dbg !2592
  %8 = load ptr, ptr %self, align 8, !dbg !2593
  %9 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %8), !dbg !2594
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !2595
  %le = icmp ule i64 %11, 16, !dbg !2595
  br i1 %le, label %if.then, label %if.exit, !dbg !2595

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2596
  %add = add i64 0, %13, !dbg !2596
  %size = sub i64 %add, 0, !dbg !2596
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2596
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2596
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !2598
  %17 = extractvalue %"char[]" %16, 0, !dbg !2598
  %18 = extractvalue %"char[]" %16, 1, !dbg !2599
  %gt = icmp ugt i64 0, %18, !dbg !2599
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2599
  br i1 %19, label %panic8, label %checkok16, !dbg !2599

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %18, 0, !dbg !2598
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2598
  %21 = insertvalue %"char[]" %20, i64 %size17, 1, !dbg !2598
  %22 = extractvalue %"char[]" %21, 0, !dbg !2598
  %23 = extractvalue %"char[]" %15, 0, !dbg !2598
  store %"char[]" %15, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %24 = load i64, ptr %ptradd19, align 8
  store %"char[]" %21, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %25 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %27 = mul i64 %24, 1, !dbg !2598
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2598
  br label %expr_block.exit, !dbg !2600

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %28 = load ptr, ptr %taddr33, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 16, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !2601
  %32 = extractvalue %"char[]" %31, 0, !dbg !2601
  %33 = extractvalue %"char[]" %31, 1, !dbg !2601
  %gt34 = icmp sgt i64 0, %33, !dbg !2601
  %34 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2601
  br i1 %34, label %panic35, label %checkok45, !dbg !2601

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %33, 16, !dbg !2601
  %35 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2601
  br i1 %35, label %panic47, label %checkok57, !dbg !2601

checkok57:                                        ; preds = %checkok45
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2601
  %37 = insertvalue %"char[]" %36, i64 16, 1, !dbg !2601
  %38 = extractvalue %"char[]" %37, 0, !dbg !2601
  %39 = extractvalue %"char[]" %30, 0, !dbg !2601
  store %"char[]" %30, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %40 = load i64, ptr %ptradd59, align 8
  store %"char[]" %37, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %41 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %42, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %43 = mul i64 %40, 1, !dbg !2601
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2601
  %44 = load i64, ptr %len, align 8, !dbg !2602
  %sub = sub i64 %44, 16, !dbg !2602
  store i64 %sub, ptr %len, align 8, !dbg !2602
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !2603
  %46 = extractvalue %"char[]" %45, 0, !dbg !2603
  %47 = extractvalue %"char[]" %45, 1, !dbg !2604
  %gt74 = icmp ugt i64 16, %47, !dbg !2604
  %48 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2604
  br i1 %48, label %panic75, label %checkok85, !dbg !2604

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %47, 16, !dbg !2603
  %ptradd87 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !2603
  %49 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2603
  %50 = insertvalue %"char[]" %49, i64 %size86, 1, !dbg !2603
  store %"char[]" %50, ptr %bytes, align 8, !dbg !2603
  br label %loop.cond, !dbg !2603

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.136, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.137, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.138, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 34, ptr align 8 %indirectarg91), !dbg !2605
  unreachable, !dbg !2608

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2608

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !2578
  unreachable, !dbg !2578

panic8:                                           ; preds = %if.then
  store i64 %18, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %54 = insertvalue %any undef, ptr %taddr10, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %53, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd14, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2598
  unreachable, !dbg !2598

panic22:                                          ; preds = %checkok16
  store i64 %25, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %59 = insertvalue %any undef, ptr %taddr24, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %58, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %60, ptr %ptradd29, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2598
  unreachable, !dbg !2598

panic35:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr36, align 8
  %62 = insertvalue %any undef, ptr %taddr36, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %64 = insertvalue %any undef, ptr %taddr37, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %63, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %65, ptr %ptradd42, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2601
  unreachable, !dbg !2601

panic47:                                          ; preds = %checkok45
  store i64 15, ptr %taddr48, align 8
  %67 = insertvalue %any undef, ptr %taddr48, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr49, align 8
  %69 = insertvalue %any undef, ptr %taddr49, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %68, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %70, ptr %ptradd54, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2601
  unreachable, !dbg !2601

panic63:                                          ; preds = %checkok57
  store i64 %41, ptr %taddr64, align 8
  %72 = insertvalue %any undef, ptr %taddr64, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr65, align 8
  %74 = insertvalue %any undef, ptr %taddr65, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %73, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %75, ptr %ptradd70, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2601
  unreachable, !dbg !2601

panic75:                                          ; preds = %checkok73
  store i64 %47, ptr %taddr76, align 8
  %77 = insertvalue %any undef, ptr %taddr76, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr77, align 8
  %79 = insertvalue %any undef, ptr %taddr77, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %78, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %80, ptr %ptradd82, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2603
  unreachable, !dbg !2603
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !2609 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2612
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2612
  br i1 %2, label %panic, label %checkok, !dbg !2612

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2613, metadata !DIExpression()), !dbg !2614
  %3 = load ptr, ptr %self, align 8, !dbg !2615
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2616
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !2614
  unreachable, !dbg !2614
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !2617 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2620
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2620
  br i1 %2, label %panic, label %checkok, !dbg !2620

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2621, metadata !DIExpression()), !dbg !2622
  %3 = load ptr, ptr %self, align 8, !dbg !2623
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2624
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !2622
  unreachable, !dbg !2622
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !2625 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2628
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2628
  br i1 %2, label %panic, label %checkok, !dbg !2628

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2629, metadata !DIExpression()), !dbg !2630
  %3 = load ptr, ptr %self, align 8, !dbg !2631
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2632
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37), !dbg !2630
  unreachable, !dbg !2630
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !2633 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2636
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2636
  br i1 %2, label %panic, label %checkok, !dbg !2636

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2637, metadata !DIExpression()), !dbg !2638
  %3 = load ptr, ptr %self, align 8, !dbg !2639
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !2640
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38), !dbg !2638
  unreachable, !dbg !2638
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2641 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2645
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2645
  br i1 %3, label %panic, label %checkok, !dbg !2645

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2646, metadata !DIExpression()), !dbg !2647
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2648, metadata !DIExpression()), !dbg !2649
  %4 = load ptr, ptr %self, align 8, !dbg !2650
  %checknull = icmp eq ptr %4, null, !dbg !2650
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2650
  br i1 %5, label %panic3, label %checkok7, !dbg !2650

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2651, metadata !DIExpression()), !dbg !2653
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !2653
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2655
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !2658
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 16 %return_value, i32 32, i1 false), !dbg !2659
  ret void, !dbg !2659

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !2647
  unreachable, !dbg !2647

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !2650
  unreachable, !dbg !2650
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !2660 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2663
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2663
  br i1 %2, label %panic, label %checkok, !dbg !2663

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2664, metadata !DIExpression()), !dbg !2665
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2666, metadata !DIExpression()), !dbg !2667
  %3 = load ptr, ptr %self, align 8, !dbg !2668
  store ptr %3, ptr %s, align 8, !dbg !2668
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2669, metadata !DIExpression()), !dbg !2670
  %4 = load ptr, ptr %s, align 8, !dbg !2671
  %5 = load i64, ptr %4, align 8, !dbg !2672
  %6 = load ptr, ptr %s, align 8, !dbg !2673
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2674
  %7 = load i64, ptr %ptradd, align 8, !dbg !2674
  %add = add i64 %5, %7, !dbg !2671
  %8 = load ptr, ptr %s, align 8, !dbg !2675
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2676
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2676
  %add4 = add i64 %add, %9, !dbg !2671
  store i64 %add4, ptr %result, align 8, !dbg !2671
  %10 = load ptr, ptr %s, align 8, !dbg !2677
  %11 = load ptr, ptr %s, align 8, !dbg !2678
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2679
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2679
  %13 = load ptr, ptr %s, align 8, !dbg !2680
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !2681
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2681
  %lshr = lshr i64 %14, 11, !dbg !2680
  %15 = freeze i64 %lshr, !dbg !2680
  %xor = xor i64 %12, %15, !dbg !2678
  store i64 %xor, ptr %10, align 8, !dbg !2678
  %16 = load ptr, ptr %s, align 8, !dbg !2682
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !2683
  %17 = load ptr, ptr %s, align 8, !dbg !2684
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2685
  %18 = load i64, ptr %ptradd8, align 8, !dbg !2685
  %19 = load ptr, ptr %s, align 8, !dbg !2686
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2687
  %20 = load i64, ptr %ptradd9, align 8, !dbg !2687
  %shl = shl i64 %20, 3, !dbg !2686
  %21 = freeze i64 %shl, !dbg !2686
  %add10 = add i64 %18, %21, !dbg !2684
  store i64 %add10, ptr %ptradd7, align 8, !dbg !2684
  %22 = load ptr, ptr %s, align 8, !dbg !2688
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2689
  %23 = load ptr, ptr %s, align 8, !dbg !2690
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !2691
  %24 = load i64, ptr %ptradd12, align 8
  store i64 %24, ptr %self13, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self13, align 8, !dbg !2692
  %26 = load i64, ptr %self13, align 8, !dbg !2694
  %27 = load i64, ptr %shift, align 8, !dbg !2695
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !2695
  %29 = load i64, ptr %result, align 8, !dbg !2696
  %add14 = add i64 %28, %29, !dbg !2690
  store i64 %add14, ptr %ptradd11, align 8, !dbg !2690
  %30 = load ptr, ptr %s, align 8, !dbg !2697
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !2698
  %31 = load i64, ptr %ptradd15, align 8, !dbg !2698
  %add16 = add i64 %31, -7046029254386353131, !dbg !2697
  store i64 %add16, ptr %ptradd15, align 8, !dbg !2697
  %32 = load i64, ptr %result, align 8, !dbg !2699
  ret i64 %32, !dbg !2699

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 50), !dbg !2665
  unreachable, !dbg !2665
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2700 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2701
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2701
  br i1 %3, label %panic, label %checkok, !dbg !2701

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2702, metadata !DIExpression()), !dbg !2703
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2704, metadata !DIExpression()), !dbg !2705
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2706
  %4 = load i64, ptr %ptradd, align 8, !dbg !2706
  %lt = icmp ult i64 0, %4, !dbg !2706
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2706

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 62), !dbg !2706
  unreachable, !dbg !2706

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2708, metadata !DIExpression()), !dbg !2710
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2711
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2711
  store i64 %6, ptr %len, align 8, !dbg !2711
  br label %loop.cond, !dbg !2712

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2713
  %lt7 = icmp ult i64 0, %7, !dbg !2713
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2713

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2715, metadata !DIExpression()), !dbg !2717
  %8 = load ptr, ptr %self, align 8, !dbg !2718
  %9 = call i64 @std.math.random.Sfc64Random.next_long(ptr %8), !dbg !2719
  store i64 %9, ptr %value, align 8, !dbg !2719
  %10 = load i64, ptr %len, align 8, !dbg !2720
  %le = icmp ule i64 %10, 8, !dbg !2720
  br i1 %le, label %if.then, label %if.exit, !dbg !2720

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2721
  %add = add i64 0, %12, !dbg !2721
  %size = sub i64 %add, 0, !dbg !2721
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2721
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2721
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2723
  %16 = extractvalue %"char[]" %15, 0, !dbg !2723
  %17 = extractvalue %"char[]" %15, 1, !dbg !2724
  %gt = icmp ugt i64 0, %17, !dbg !2724
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2724
  br i1 %18, label %panic8, label %checkok16, !dbg !2724

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2723
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2723
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2723
  %21 = extractvalue %"char[]" %20, 0, !dbg !2723
  %22 = extractvalue %"char[]" %14, 0, !dbg !2723
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2723
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2723
  br label %expr_block.exit, !dbg !2725

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2726
  %31 = extractvalue %"char[]" %30, 0, !dbg !2726
  %32 = extractvalue %"char[]" %30, 1, !dbg !2726
  %gt34 = icmp sgt i64 0, %32, !dbg !2726
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2726
  br i1 %33, label %panic35, label %checkok45, !dbg !2726

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !2726
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2726
  br i1 %34, label %panic47, label %checkok57, !dbg !2726

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2726
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !2726
  %37 = extractvalue %"char[]" %36, 0, !dbg !2726
  %38 = extractvalue %"char[]" %29, 0, !dbg !2726
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2726
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2726
  %43 = load i64, ptr %len, align 8, !dbg !2727
  %sub = sub i64 %43, 8, !dbg !2727
  store i64 %sub, ptr %len, align 8, !dbg !2727
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2728
  %45 = extractvalue %"char[]" %44, 0, !dbg !2728
  %46 = extractvalue %"char[]" %44, 1, !dbg !2729
  %gt74 = icmp ugt i64 8, %46, !dbg !2729
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2729
  br i1 %47, label %panic75, label %checkok85, !dbg !2729

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !2728
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !2728
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2728
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2728
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2728
  br label %loop.cond, !dbg !2728

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.139, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.140, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.141, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 64, ptr align 8 %indirectarg91), !dbg !2730
  unreachable, !dbg !2733

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2733

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64), !dbg !2703
  unreachable, !dbg !2703

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2723
  unreachable, !dbg !2723

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2723
  unreachable, !dbg !2723

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2726
  unreachable, !dbg !2726

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2726
  unreachable, !dbg !2726

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2726
  unreachable, !dbg !2726

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2728
  unreachable, !dbg !2728
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !2734 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2737
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2737
  br i1 %2, label %panic, label %checkok, !dbg !2737

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2738, metadata !DIExpression()), !dbg !2739
  %3 = load ptr, ptr %self, align 8, !dbg !2740
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2742
  %zext = zext i64 %4 to i128, !dbg !2742
  %shl = shl i128 %zext, 64, !dbg !2742
  %5 = freeze i128 %shl, !dbg !2742
  %6 = load ptr, ptr %self, align 8, !dbg !2740
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !2743
  %zext3 = zext i64 %7 to i128, !dbg !2743
  %add = add i128 %5, %zext3, !dbg !2742
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !2739
  unreachable, !dbg !2739
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !2744 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2747
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2747
  br i1 %2, label %panic, label %checkok, !dbg !2747

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2748, metadata !DIExpression()), !dbg !2749
  %3 = load ptr, ptr %self, align 8, !dbg !2750
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2751
  %trunc = trunc i64 %4 to i32, !dbg !2751
  ret i32 %trunc, !dbg !2751

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !2749
  unreachable, !dbg !2749
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !2752 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2755
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2755
  br i1 %2, label %panic, label %checkok, !dbg !2755

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2756, metadata !DIExpression()), !dbg !2757
  %3 = load ptr, ptr %self, align 8, !dbg !2758
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2759
  %trunc = trunc i64 %4 to i16, !dbg !2759
  ret i16 %trunc, !dbg !2759

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !2757
  unreachable, !dbg !2757
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !2760 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2763
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2763
  br i1 %2, label %panic, label %checkok, !dbg !2763

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2764, metadata !DIExpression()), !dbg !2765
  %3 = load ptr, ptr %self, align 8, !dbg !2766
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2767
  %trunc = trunc i64 %4 to i8, !dbg !2767
  ret i8 %trunc, !dbg !2767

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !2765
  unreachable, !dbg !2765
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2768 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2773
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2773
  br i1 %3, label %panic, label %checkok, !dbg !2773

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2774, metadata !DIExpression()), !dbg !2775
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2776, metadata !DIExpression()), !dbg !2777
  %4 = load ptr, ptr %self, align 8, !dbg !2778
  %checknull = icmp eq ptr %4, null, !dbg !2778
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2778
  br i1 %5, label %panic3, label %checkok7, !dbg !2778

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2779, metadata !DIExpression()), !dbg !2781
  store i32 0, ptr %return_value, align 4, !dbg !2781
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2781
  store i32 0, ptr %ptradd, align 4, !dbg !2781
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2781
  store i32 0, ptr %ptradd8, align 4, !dbg !2781
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2781
  store i32 0, ptr %ptradd9, align 4, !dbg !2781
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2783
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !2786
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 16 %return_value, i32 16, i1 false), !dbg !2787
  ret void, !dbg !2787

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 74), !dbg !2775
  unreachable, !dbg !2775

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 76), !dbg !2778
  unreachable, !dbg !2778
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !2788 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2791
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2791
  br i1 %2, label %panic, label %checkok, !dbg !2791

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
  call void @llvm.dbg.declare(metadata ptr %sfc, metadata !2792, metadata !DIExpression()), !dbg !2793
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2794, metadata !DIExpression()), !dbg !2795
  %3 = load ptr, ptr %sfc, align 8, !dbg !2796
  store ptr %3, ptr %s, align 8, !dbg !2796
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2797, metadata !DIExpression()), !dbg !2798
  %4 = load ptr, ptr %s, align 8, !dbg !2799
  %5 = load i32, ptr %4, align 4, !dbg !2800
  %6 = load ptr, ptr %s, align 8, !dbg !2801
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !2802
  %7 = load i32, ptr %ptradd, align 4, !dbg !2802
  %add = add i32 %5, %7, !dbg !2799
  %8 = load ptr, ptr %s, align 8, !dbg !2803
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !2804
  %9 = load i32, ptr %ptradd3, align 4, !dbg !2804
  %add4 = add i32 %add, %9, !dbg !2799
  store i32 %add4, ptr %result, align 4, !dbg !2799
  %10 = load ptr, ptr %s, align 8, !dbg !2805
  %11 = load ptr, ptr %s, align 8, !dbg !2806
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !2807
  %12 = load i32, ptr %ptradd5, align 4, !dbg !2807
  %13 = load ptr, ptr %s, align 8, !dbg !2808
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !2809
  %14 = load i32, ptr %ptradd6, align 4, !dbg !2809
  %lshr = lshr i32 %14, 9, !dbg !2808
  %15 = freeze i32 %lshr, !dbg !2808
  %xor = xor i32 %12, %15, !dbg !2806
  store i32 %xor, ptr %10, align 4, !dbg !2806
  %16 = load ptr, ptr %s, align 8, !dbg !2810
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !2811
  %17 = load ptr, ptr %s, align 8, !dbg !2812
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !2813
  %18 = load i32, ptr %ptradd8, align 4, !dbg !2813
  %19 = load ptr, ptr %s, align 8, !dbg !2814
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2815
  %20 = load i32, ptr %ptradd9, align 4, !dbg !2815
  %shl = shl i32 %20, 3, !dbg !2814
  %21 = freeze i32 %shl, !dbg !2814
  %add10 = add i32 %18, %21, !dbg !2812
  store i32 %add10, ptr %ptradd7, align 4, !dbg !2812
  %22 = load ptr, ptr %s, align 8, !dbg !2816
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2817
  %23 = load ptr, ptr %s, align 8, !dbg !2818
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !2819
  %24 = load i32, ptr %ptradd12, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !2820
  %26 = load i32, ptr %self, align 4, !dbg !2822
  %27 = load i32, ptr %shift, align 4, !dbg !2823
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !2823
  %29 = load i32, ptr %result, align 4, !dbg !2824
  %add13 = add i32 %28, %29, !dbg !2818
  store i32 %add13, ptr %ptradd11, align 4, !dbg !2818
  %30 = load ptr, ptr %s, align 8, !dbg !2825
  %ptradd14 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !2826
  %31 = load i32, ptr %ptradd14, align 4, !dbg !2826
  %add15 = add i32 %31, -1640531527, !dbg !2825
  store i32 %add15, ptr %ptradd14, align 4, !dbg !2825
  %32 = load i32, ptr %result, align 4, !dbg !2827
  ret i32 %32, !dbg !2827

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.142, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79), !dbg !2793
  unreachable, !dbg !2793
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2828 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2829
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2829
  br i1 %3, label %panic, label %checkok, !dbg !2829

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2830, metadata !DIExpression()), !dbg !2831
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2832, metadata !DIExpression()), !dbg !2833
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2834
  %4 = load i64, ptr %ptradd, align 8, !dbg !2834
  %lt = icmp ult i64 0, %4, !dbg !2834
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2834

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 91), !dbg !2834
  unreachable, !dbg !2834

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2836, metadata !DIExpression()), !dbg !2838
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2839
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2839
  store i64 %6, ptr %len, align 8, !dbg !2839
  br label %loop.cond, !dbg !2840

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2841
  %lt7 = icmp ult i64 0, %7, !dbg !2841
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2841

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2843, metadata !DIExpression()), !dbg !2845
  %8 = load ptr, ptr %self, align 8, !dbg !2846
  %9 = call i32 @std.math.random.Sfc32Random.next_int(ptr %8), !dbg !2847
  store i32 %9, ptr %value, align 4, !dbg !2847
  %10 = load i64, ptr %len, align 8, !dbg !2848
  %le = icmp ule i64 %10, 4, !dbg !2848
  br i1 %le, label %if.then, label %if.exit, !dbg !2848

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2849
  %add = add i64 0, %12, !dbg !2849
  %size = sub i64 %add, 0, !dbg !2849
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2849
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2849
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2851
  %16 = extractvalue %"char[]" %15, 0, !dbg !2851
  %17 = extractvalue %"char[]" %15, 1, !dbg !2852
  %gt = icmp ugt i64 0, %17, !dbg !2852
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2852
  br i1 %18, label %panic8, label %checkok16, !dbg !2852

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2851
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2851
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2851
  %21 = extractvalue %"char[]" %20, 0, !dbg !2851
  %22 = extractvalue %"char[]" %14, 0, !dbg !2851
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2851
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2851
  br label %expr_block.exit, !dbg !2853

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2854
  %31 = extractvalue %"char[]" %30, 0, !dbg !2854
  %32 = extractvalue %"char[]" %30, 1, !dbg !2854
  %gt34 = icmp sgt i64 0, %32, !dbg !2854
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2854
  br i1 %33, label %panic35, label %checkok45, !dbg !2854

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !2854
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2854
  br i1 %34, label %panic47, label %checkok57, !dbg !2854

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2854
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !2854
  %37 = extractvalue %"char[]" %36, 0, !dbg !2854
  %38 = extractvalue %"char[]" %29, 0, !dbg !2854
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2854
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2854
  %43 = load i64, ptr %len, align 8, !dbg !2855
  %sub = sub i64 %43, 4, !dbg !2855
  store i64 %sub, ptr %len, align 8, !dbg !2855
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2856
  %45 = extractvalue %"char[]" %44, 0, !dbg !2856
  %46 = extractvalue %"char[]" %44, 1, !dbg !2857
  %gt74 = icmp ugt i64 4, %46, !dbg !2857
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2857
  br i1 %47, label %panic75, label %checkok85, !dbg !2857

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !2856
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !2856
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2856
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2856
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2856
  br label %loop.cond, !dbg !2856

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.143, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.144, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.145, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 93, ptr align 8 %indirectarg91), !dbg !2858
  unreachable, !dbg !2861

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2861

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93), !dbg !2831
  unreachable, !dbg !2831

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2851
  unreachable, !dbg !2851

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2851
  unreachable, !dbg !2851

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2854
  unreachable, !dbg !2854

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2854
  unreachable, !dbg !2854

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2854
  unreachable, !dbg !2854

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2856
  unreachable, !dbg !2856
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !2862 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2865
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2865
  br i1 %2, label %panic, label %checkok, !dbg !2865

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2866, metadata !DIExpression()), !dbg !2867
  %3 = load ptr, ptr %self, align 8, !dbg !2868
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !2870
  %zext = zext i64 %4 to i128, !dbg !2870
  %shl = shl i128 %zext, 64, !dbg !2870
  %5 = freeze i128 %shl, !dbg !2870
  %6 = load ptr, ptr %self, align 8, !dbg !2868
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !2871
  %zext3 = zext i64 %7 to i128, !dbg !2871
  %add = add i128 %5, %zext3, !dbg !2870
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94), !dbg !2867
  unreachable, !dbg !2867
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !2872 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2875
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2875
  br i1 %2, label %panic, label %checkok, !dbg !2875

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2876, metadata !DIExpression()), !dbg !2877
  %3 = load ptr, ptr %self, align 8, !dbg !2878
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2880
  %zext = zext i32 %4 to i64, !dbg !2880
  %shl = shl i64 %zext, 32, !dbg !2880
  %5 = freeze i64 %shl, !dbg !2880
  %6 = load ptr, ptr %self, align 8, !dbg !2878
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !2881
  %zext3 = zext i32 %7 to i64, !dbg !2881
  %add = add i64 %5, %zext3, !dbg !2880
  ret i64 %add, !dbg !2880

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !2877
  unreachable, !dbg !2877
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !2882 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2885
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2885
  br i1 %2, label %panic, label %checkok, !dbg !2885

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2886, metadata !DIExpression()), !dbg !2887
  %3 = load ptr, ptr %self, align 8, !dbg !2888
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2889
  %trunc = trunc i32 %4 to i16, !dbg !2889
  ret i16 %trunc, !dbg !2889

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !2887
  unreachable, !dbg !2887
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !2890 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2893
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2893
  br i1 %2, label %panic, label %checkok, !dbg !2893

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2894, metadata !DIExpression()), !dbg !2895
  %3 = load ptr, ptr %self, align 8, !dbg !2896
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2897
  %trunc = trunc i32 %4 to i8, !dbg !2897
  ret i8 %trunc, !dbg !2897

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !2895
  unreachable, !dbg !2895
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2898 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2903
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2903
  br i1 %3, label %panic, label %checkok, !dbg !2903

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2904, metadata !DIExpression()), !dbg !2905
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2906, metadata !DIExpression()), !dbg !2907
  %4 = load ptr, ptr %self, align 8, !dbg !2908
  %checknull = icmp eq ptr %4, null, !dbg !2908
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2908
  br i1 %5, label %panic3, label %checkok7, !dbg !2908

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2909, metadata !DIExpression()), !dbg !2911
  store i16 0, ptr %return_value, align 2, !dbg !2911
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2911
  store i16 0, ptr %ptradd, align 2, !dbg !2911
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2911
  store i16 0, ptr %ptradd8, align 2, !dbg !2911
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2911
  store i16 0, ptr %ptradd9, align 2, !dbg !2911
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2913
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !2916
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %return_value, i32 8, i1 false), !dbg !2917
  ret void, !dbg !2917

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 103), !dbg !2905
  unreachable, !dbg !2905

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 105), !dbg !2908
  unreachable, !dbg !2908
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !2918 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2921
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2921
  br i1 %2, label %panic, label %checkok, !dbg !2921

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2922, metadata !DIExpression()), !dbg !2923
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2924, metadata !DIExpression()), !dbg !2925
  %3 = load ptr, ptr %seed, align 8, !dbg !2926
  store ptr %3, ptr %s, align 8, !dbg !2926
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2927, metadata !DIExpression()), !dbg !2928
  %4 = load ptr, ptr %s, align 8, !dbg !2929
  %5 = load i16, ptr %4, align 2, !dbg !2930
  %zext = zext i16 %5 to i32, !dbg !2930
  %6 = load ptr, ptr %s, align 8, !dbg !2931
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !2932
  %7 = load i16, ptr %ptradd, align 2, !dbg !2932
  %zext3 = zext i16 %7 to i32, !dbg !2932
  %add = add i32 %zext, %zext3, !dbg !2929
  %8 = load ptr, ptr %s, align 8, !dbg !2933
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !2934
  %9 = load i16, ptr %ptradd4, align 2, !dbg !2934
  %zext5 = zext i16 %9 to i32, !dbg !2934
  %add6 = add i32 %add, %zext5, !dbg !2929
  %trunc = trunc i32 %add6 to i16, !dbg !2929
  store i16 %trunc, ptr %result, align 2, !dbg !2929
  %10 = load ptr, ptr %s, align 8, !dbg !2935
  %11 = load ptr, ptr %s, align 8, !dbg !2936
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !2937
  %12 = load i16, ptr %ptradd7, align 2, !dbg !2937
  %zext8 = zext i16 %12 to i32, !dbg !2937
  %13 = load ptr, ptr %s, align 8, !dbg !2938
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !2939
  %14 = load i16, ptr %ptradd9, align 2, !dbg !2939
  %zext10 = zext i16 %14 to i32, !dbg !2939
  %lshr = lshr i32 %zext10, 2, !dbg !2938
  %15 = freeze i32 %lshr, !dbg !2938
  %xor = xor i32 %zext8, %15, !dbg !2936
  %trunc11 = trunc i32 %xor to i16, !dbg !2936
  store i16 %trunc11, ptr %10, align 2, !dbg !2936
  %16 = load ptr, ptr %s, align 8, !dbg !2940
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !2941
  %17 = load ptr, ptr %s, align 8, !dbg !2942
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !2943
  %18 = load i16, ptr %ptradd13, align 2, !dbg !2943
  %zext14 = zext i16 %18 to i32, !dbg !2943
  %19 = load ptr, ptr %s, align 8, !dbg !2944
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !2945
  %20 = load i16, ptr %ptradd15, align 2, !dbg !2945
  %zext16 = zext i16 %20 to i32, !dbg !2945
  %shl = shl i32 %zext16, 3, !dbg !2944
  %21 = freeze i32 %shl, !dbg !2944
  %add17 = add i32 %zext14, %21, !dbg !2942
  %trunc18 = trunc i32 %add17 to i16, !dbg !2942
  store i16 %trunc18, ptr %ptradd12, align 2, !dbg !2942
  %22 = load ptr, ptr %s, align 8, !dbg !2946
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !2947
  %23 = load ptr, ptr %s, align 8, !dbg !2948
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !2949
  %24 = load i16, ptr %ptradd20, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !2950
  %26 = load i16, ptr %self, align 2, !dbg !2952
  %27 = load i16, ptr %shift, align 2, !dbg !2953
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !2953
  %zext21 = zext i16 %28 to i32, !dbg !2953
  %29 = load i16, ptr %result, align 2, !dbg !2954
  %zext22 = zext i16 %29 to i32, !dbg !2954
  %add23 = add i32 %zext21, %zext22, !dbg !2948
  %trunc24 = trunc i32 %add23 to i16, !dbg !2948
  store i16 %trunc24, ptr %ptradd19, align 2, !dbg !2948
  %30 = load ptr, ptr %s, align 8, !dbg !2955
  %ptradd25 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !2956
  %31 = load i16, ptr %ptradd25, align 2, !dbg !2956
  %add26 = add i16 %31, -25033, !dbg !2955
  store i16 %add26, ptr %ptradd25, align 2, !dbg !2955
  %32 = load i16, ptr %result, align 2, !dbg !2957
  ret i16 %32, !dbg !2957

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.146, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109), !dbg !2923
  unreachable, !dbg !2923
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2958 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2959
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2959
  br i1 %3, label %panic, label %checkok, !dbg !2959

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2960, metadata !DIExpression()), !dbg !2961
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2962, metadata !DIExpression()), !dbg !2963
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2964
  %4 = load i64, ptr %ptradd, align 8, !dbg !2964
  %lt = icmp ult i64 0, %4, !dbg !2964
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2964

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 121), !dbg !2964
  unreachable, !dbg !2964

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2966, metadata !DIExpression()), !dbg !2968
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2969
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2969
  store i64 %6, ptr %len, align 8, !dbg !2969
  br label %loop.cond, !dbg !2970

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2971
  %lt7 = icmp ult i64 0, %7, !dbg !2971
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2971

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2973, metadata !DIExpression()), !dbg !2975
  %8 = load ptr, ptr %self, align 8, !dbg !2976
  %9 = call i16 @std.math.random.Sfc16Random.next_short(ptr %8), !dbg !2977
  store i16 %9, ptr %value, align 2, !dbg !2977
  %10 = load i64, ptr %len, align 8, !dbg !2978
  %le = icmp ule i64 %10, 2, !dbg !2978
  br i1 %le, label %if.then, label %if.exit, !dbg !2978

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2979
  %add = add i64 0, %12, !dbg !2979
  %size = sub i64 %add, 0, !dbg !2979
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2979
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2979
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2981
  %16 = extractvalue %"char[]" %15, 0, !dbg !2981
  %17 = extractvalue %"char[]" %15, 1, !dbg !2982
  %gt = icmp ugt i64 0, %17, !dbg !2982
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2982
  br i1 %18, label %panic8, label %checkok16, !dbg !2982

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2981
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2981
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2981
  %21 = extractvalue %"char[]" %20, 0, !dbg !2981
  %22 = extractvalue %"char[]" %14, 0, !dbg !2981
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2981
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2981
  br label %expr_block.exit, !dbg !2983

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2984
  %31 = extractvalue %"char[]" %30, 0, !dbg !2984
  %32 = extractvalue %"char[]" %30, 1, !dbg !2984
  %gt34 = icmp sgt i64 0, %32, !dbg !2984
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2984
  br i1 %33, label %panic35, label %checkok45, !dbg !2984

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !2984
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2984
  br i1 %34, label %panic47, label %checkok57, !dbg !2984

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2984
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !2984
  %37 = extractvalue %"char[]" %36, 0, !dbg !2984
  %38 = extractvalue %"char[]" %29, 0, !dbg !2984
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2984
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2984
  %43 = load i64, ptr %len, align 8, !dbg !2985
  %sub = sub i64 %43, 2, !dbg !2985
  store i64 %sub, ptr %len, align 8, !dbg !2985
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2986
  %45 = extractvalue %"char[]" %44, 0, !dbg !2986
  %46 = extractvalue %"char[]" %44, 1, !dbg !2987
  %gt74 = icmp ugt i64 2, %46, !dbg !2987
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2987
  br i1 %47, label %panic75, label %checkok85, !dbg !2987

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !2986
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !2986
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2986
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2986
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2986
  br label %loop.cond, !dbg !2986

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.147, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.148, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.149, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 123, ptr align 8 %indirectarg91), !dbg !2988
  unreachable, !dbg !2991

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2991

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123), !dbg !2961
  unreachable, !dbg !2961

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2981
  unreachable, !dbg !2981

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2981
  unreachable, !dbg !2981

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2984
  unreachable, !dbg !2984

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2984
  unreachable, !dbg !2984

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2984
  unreachable, !dbg !2984

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2986
  unreachable, !dbg !2986
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !2992 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2995
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2995
  br i1 %2, label %panic, label %checkok, !dbg !2995

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2996, metadata !DIExpression()), !dbg !2997
  %3 = load ptr, ptr %self, align 8, !dbg !2998
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !3000
  %zext = zext i64 %4 to i128, !dbg !3000
  %shl = shl i128 %zext, 64, !dbg !3000
  %5 = freeze i128 %shl, !dbg !3000
  %6 = load ptr, ptr %self, align 8, !dbg !2998
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !3001
  %zext3 = zext i64 %7 to i128, !dbg !3001
  %add = add i128 %5, %zext3, !dbg !3000
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124), !dbg !2997
  unreachable, !dbg !2997
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !3002 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3005
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3005
  br i1 %2, label %panic, label %checkok, !dbg !3005

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3006, metadata !DIExpression()), !dbg !3007
  %3 = load ptr, ptr %self, align 8, !dbg !3008
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !3010
  %zext = zext i32 %4 to i64, !dbg !3010
  %shl = shl i64 %zext, 32, !dbg !3010
  %5 = freeze i64 %shl, !dbg !3010
  %6 = load ptr, ptr %self, align 8, !dbg !3008
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !3011
  %zext3 = zext i32 %7 to i64, !dbg !3011
  %add = add i64 %5, %zext3, !dbg !3010
  ret i64 %add, !dbg !3010

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125), !dbg !3007
  unreachable, !dbg !3007
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !3012 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3015
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3015
  br i1 %2, label %panic, label %checkok, !dbg !3015

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3016, metadata !DIExpression()), !dbg !3017
  %3 = load ptr, ptr %self, align 8, !dbg !3018
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !3020
  %zext = zext i16 %4 to i32, !dbg !3020
  %shl = shl i32 %zext, 16, !dbg !3020
  %5 = freeze i32 %shl, !dbg !3020
  %6 = load ptr, ptr %self, align 8, !dbg !3018
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !3021
  %zext3 = zext i16 %7 to i32, !dbg !3021
  %add = add i32 %5, %zext3, !dbg !3020
  ret i32 %add, !dbg !3020

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 126), !dbg !3017
  unreachable, !dbg !3017
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !3022 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3025
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3025
  br i1 %2, label %panic, label %checkok, !dbg !3025

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3026, metadata !DIExpression()), !dbg !3027
  %3 = load ptr, ptr %self, align 8, !dbg !3028
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !3029
  %trunc = trunc i16 %4 to i8, !dbg !3029
  ret i8 %trunc, !dbg !3029

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 127), !dbg !3027
  unreachable, !dbg !3027
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !3030 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3035
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3035
  br i1 %3, label %panic, label %checkok, !dbg !3035

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3036, metadata !DIExpression()), !dbg !3037
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3038, metadata !DIExpression()), !dbg !3039
  %4 = load ptr, ptr %self, align 8, !dbg !3040
  %checknull = icmp eq ptr %4, null, !dbg !3040
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3040
  br i1 %5, label %panic3, label %checkok7, !dbg !3040

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !3041, metadata !DIExpression()), !dbg !3043
  store i8 0, ptr %return_value, align 1, !dbg !3043
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !3043
  store i8 0, ptr %ptradd, align 1, !dbg !3043
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !3043
  store i8 0, ptr %ptradd8, align 1, !dbg !3043
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !3043
  store i8 0, ptr %ptradd9, align 1, !dbg !3043
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !3045
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !3048
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %return_value, i32 4, i1 false), !dbg !3049
  ret void, !dbg !3049

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 134), !dbg !3037
  unreachable, !dbg !3037

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 136), !dbg !3040
  unreachable, !dbg !3040
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !3050 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self21 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !3053
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3053
  br i1 %2, label %panic, label %checkok, !dbg !3053

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3054, metadata !DIExpression()), !dbg !3055
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3056, metadata !DIExpression()), !dbg !3057
  %3 = load ptr, ptr %self, align 8, !dbg !3058
  store ptr %3, ptr %s, align 8, !dbg !3058
  call void @llvm.dbg.declare(metadata ptr %result, metadata !3059, metadata !DIExpression()), !dbg !3060
  %4 = load ptr, ptr %s, align 8, !dbg !3061
  %5 = load i8, ptr %4, align 1, !dbg !3062
  %zext = zext i8 %5 to i32, !dbg !3062
  %6 = load ptr, ptr %s, align 8, !dbg !3063
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !3064
  %7 = load i8, ptr %ptradd, align 1, !dbg !3064
  %zext3 = zext i8 %7 to i32, !dbg !3064
  %add = add i32 %zext, %zext3, !dbg !3061
  %8 = load ptr, ptr %s, align 8, !dbg !3065
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !3066
  %9 = load i8, ptr %ptradd4, align 1, !dbg !3066
  %zext5 = zext i8 %9 to i32, !dbg !3066
  %add6 = add i32 %add, %zext5, !dbg !3061
  %trunc = trunc i32 %add6 to i8, !dbg !3061
  store i8 %trunc, ptr %result, align 1, !dbg !3061
  %10 = load ptr, ptr %s, align 8, !dbg !3067
  %11 = load ptr, ptr %s, align 8, !dbg !3068
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !3069
  %12 = load i8, ptr %ptradd7, align 1, !dbg !3069
  %zext8 = zext i8 %12 to i32, !dbg !3069
  %13 = load ptr, ptr %s, align 8, !dbg !3070
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !3071
  %14 = load i8, ptr %ptradd9, align 1, !dbg !3071
  %zext10 = zext i8 %14 to i32, !dbg !3071
  %lshr = lshr i32 %zext10, 1, !dbg !3070
  %15 = freeze i32 %lshr, !dbg !3070
  %xor = xor i32 %zext8, %15, !dbg !3068
  %trunc11 = trunc i32 %xor to i8, !dbg !3068
  store i8 %trunc11, ptr %10, align 1, !dbg !3068
  %16 = load ptr, ptr %s, align 8, !dbg !3072
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !3073
  %17 = load ptr, ptr %s, align 8, !dbg !3074
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !3075
  %18 = load i8, ptr %ptradd13, align 1, !dbg !3075
  %zext14 = zext i8 %18 to i32, !dbg !3075
  %19 = load ptr, ptr %s, align 8, !dbg !3076
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !3077
  %20 = load i8, ptr %ptradd15, align 1, !dbg !3077
  %zext16 = zext i8 %20 to i32, !dbg !3077
  %shl = shl i32 %zext16, 2, !dbg !3076
  %21 = freeze i32 %shl, !dbg !3076
  %add17 = add i32 %zext14, %21, !dbg !3074
  %trunc18 = trunc i32 %add17 to i8, !dbg !3074
  store i8 %trunc18, ptr %ptradd12, align 1, !dbg !3074
  %22 = load ptr, ptr %s, align 8, !dbg !3078
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !3079
  %23 = load ptr, ptr %s, align 8, !dbg !3080
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !3081
  %24 = load i8, ptr %ptradd20, align 1
  store i8 %24, ptr %self21, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self21, align 1, !dbg !3082
  %26 = load i8, ptr %self21, align 1, !dbg !3084
  %27 = load i8, ptr %shift, align 1, !dbg !3085
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !3085
  %zext22 = zext i8 %28 to i32, !dbg !3085
  %29 = load i8, ptr %result, align 1, !dbg !3086
  %zext23 = zext i8 %29 to i32, !dbg !3086
  %add24 = add i32 %zext22, %zext23, !dbg !3080
  %trunc25 = trunc i32 %add24 to i8, !dbg !3080
  store i8 %trunc25, ptr %ptradd19, align 1, !dbg !3080
  %30 = load ptr, ptr %s, align 8, !dbg !3087
  %ptradd26 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !3088
  %31 = load i8, ptr %ptradd26, align 1, !dbg !3088
  %add27 = add i8 %31, -97, !dbg !3087
  store i8 %add27, ptr %ptradd26, align 1, !dbg !3087
  %32 = load i8, ptr %result, align 1, !dbg !3089
  ret i8 %32, !dbg !3089

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 139), !dbg !3055
  unreachable, !dbg !3055
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !3090 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3091
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3091
  br i1 %3, label %panic, label %checkok, !dbg !3091

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3092, metadata !DIExpression()), !dbg !3093
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3094, metadata !DIExpression()), !dbg !3095
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3096, metadata !DIExpression()), !dbg !3098
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3099
  %4 = load i64, ptr %ptradd, align 8, !dbg !3099
  store i64 %4, ptr %len, align 8, !dbg !3099
  br label %loop.cond, !dbg !3100

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !3101
  %lt = icmp ult i64 0, %5, !dbg !3101
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3101

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3103, metadata !DIExpression()), !dbg !3105
  %6 = load ptr, ptr %self, align 8, !dbg !3106
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !3107
  store i8 %7, ptr %value, align 1, !dbg !3107
  %8 = load i64, ptr %len, align 8, !dbg !3108
  %le = icmp ule i64 %8, 1, !dbg !3108
  br i1 %le, label %if.then, label %if.exit, !dbg !3108

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !3109
  %add = add i64 0, %10, !dbg !3109
  %size = sub i64 %add, 0, !dbg !3109
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !3109
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !3109
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !3111
  %14 = extractvalue %"char[]" %13, 0, !dbg !3111
  %15 = extractvalue %"char[]" %13, 1, !dbg !3112
  %gt = icmp ugt i64 0, %15, !dbg !3112
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3112
  br i1 %16, label %panic3, label %checkok11, !dbg !3112

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !3111
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !3111
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !3111
  %19 = extractvalue %"char[]" %18, 0, !dbg !3111
  %20 = extractvalue %"char[]" %12, 0, !dbg !3111
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !3111
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !3111
  br label %expr_block.exit, !dbg !3113

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !3114
  %29 = extractvalue %"char[]" %28, 0, !dbg !3114
  %30 = extractvalue %"char[]" %28, 1, !dbg !3114
  %gt29 = icmp sgt i64 0, %30, !dbg !3114
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !3114
  br i1 %31, label %panic30, label %checkok40, !dbg !3114

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !3114
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !3114
  br i1 %32, label %panic42, label %checkok52, !dbg !3114

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !3114
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !3114
  %35 = extractvalue %"char[]" %34, 0, !dbg !3114
  %36 = extractvalue %"char[]" %27, 0, !dbg !3114
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !3114
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !3114
  %41 = load i64, ptr %len, align 8, !dbg !3115
  %sub = sub i64 %41, 1, !dbg !3115
  store i64 %sub, ptr %len, align 8, !dbg !3115
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !3116
  %43 = extractvalue %"char[]" %42, 0, !dbg !3116
  %44 = extractvalue %"char[]" %42, 1, !dbg !3117
  %gt69 = icmp ugt i64 1, %44, !dbg !3117
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !3117
  br i1 %45, label %panic70, label %checkok80, !dbg !3117

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !3116
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !3116
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !3116
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !3116
  store %"char[]" %47, ptr %bytes, align 8, !dbg !3116
  br label %loop.cond, !dbg !3116

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.150, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.151, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.152, i64 21 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 150, ptr align 8 %indirectarg86), !dbg !3118
  unreachable, !dbg !3121

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !3121

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 150), !dbg !3093
  unreachable, !dbg !3093

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !3111
  unreachable, !dbg !3111

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !3111
  unreachable, !dbg !3111

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !3114
  unreachable, !dbg !3114

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !3114
  unreachable, !dbg !3114

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !3114
  unreachable, !dbg !3114

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !3116
  unreachable, !dbg !3116
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !3122 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3125
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3125
  br i1 %2, label %panic, label %checkok, !dbg !3125

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3126, metadata !DIExpression()), !dbg !3127
  %3 = load ptr, ptr %self, align 8, !dbg !3128
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !3130
  %zext = zext i64 %4 to i128, !dbg !3130
  %shl = shl i128 %zext, 64, !dbg !3130
  %5 = freeze i128 %shl, !dbg !3130
  %6 = load ptr, ptr %self, align 8, !dbg !3128
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !3131
  %zext3 = zext i64 %7 to i128, !dbg !3131
  %add = add i128 %5, %zext3, !dbg !3130
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 151), !dbg !3127
  unreachable, !dbg !3127
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !3132 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3135
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3135
  br i1 %2, label %panic, label %checkok, !dbg !3135

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3136, metadata !DIExpression()), !dbg !3137
  %3 = load ptr, ptr %self, align 8, !dbg !3138
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !3140
  %zext = zext i32 %4 to i64, !dbg !3140
  %shl = shl i64 %zext, 32, !dbg !3140
  %5 = freeze i64 %shl, !dbg !3140
  %6 = load ptr, ptr %self, align 8, !dbg !3138
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !3141
  %zext3 = zext i32 %7 to i64, !dbg !3141
  %add = add i64 %5, %zext3, !dbg !3140
  ret i64 %add, !dbg !3140

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 152), !dbg !3137
  unreachable, !dbg !3137
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !3142 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3145
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3145
  br i1 %2, label %panic, label %checkok, !dbg !3145

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3146, metadata !DIExpression()), !dbg !3147
  %3 = load ptr, ptr %self, align 8, !dbg !3148
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !3150
  %zext = zext i16 %4 to i32, !dbg !3150
  %shl = shl i32 %zext, 16, !dbg !3150
  %5 = freeze i32 %shl, !dbg !3150
  %6 = load ptr, ptr %self, align 8, !dbg !3148
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !3151
  %zext3 = zext i16 %7 to i32, !dbg !3151
  %add = add i32 %5, %zext3, !dbg !3150
  ret i32 %add, !dbg !3150

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153), !dbg !3147
  unreachable, !dbg !3147
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !3152 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3155
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3155
  br i1 %2, label %panic, label %checkok, !dbg !3155

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3156, metadata !DIExpression()), !dbg !3157
  %3 = load ptr, ptr %self, align 8, !dbg !3158
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !3160
  %zext = zext i8 %4 to i16, !dbg !3160
  %zext3 = zext i16 %zext to i32, !dbg !3160
  %shl = shl i32 %zext3, 8, !dbg !3160
  %5 = freeze i32 %shl, !dbg !3160
  %6 = load ptr, ptr %self, align 8, !dbg !3158
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !3161
  %zext4 = zext i8 %7 to i32, !dbg !3161
  %add = add i32 %5, %zext4, !dbg !3160
  %trunc = trunc i32 %add to i16, !dbg !3160
  ret i16 %trunc, !dbg !3160

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.135, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154), !dbg !3157
  unreachable, !dbg !3157
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !3162 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %.anon10 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !3167
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3167
  br i1 %3, label %panic, label %checkok, !dbg !3167

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3168, metadata !DIExpression()), !dbg !3169
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3170, metadata !DIExpression()), !dbg !3171
  call void @llvm.dbg.declare(metadata ptr %full, metadata !3172, metadata !DIExpression()), !dbg !3174
  store i8 0, ptr %full, align 1, !dbg !3174
  %ptradd = getelementptr inbounds i8, ptr %full, i64 1, !dbg !3174
  store i8 0, ptr %ptradd, align 1, !dbg !3174
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !3174
  store i8 0, ptr %ptradd3, align 1, !dbg !3174
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !3174
  store i8 0, ptr %ptradd4, align 1, !dbg !3174
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !3174
  store i8 0, ptr %ptradd5, align 1, !dbg !3174
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !3174
  store i8 0, ptr %ptradd6, align 1, !dbg !3174
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !3174
  store i8 0, ptr %ptradd7, align 1, !dbg !3174
  %ptradd8 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !3174
  store i8 0, ptr %ptradd8, align 1, !dbg !3174
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !3175, metadata !DIExpression()), !dbg !3177
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3177
  %4 = load i64, ptr %ptradd9, align 8, !dbg !3177
  store i64 %4, ptr %.anon, align 8, !dbg !3177
  call void @llvm.dbg.declare(metadata ptr %.anon10, metadata !3175, metadata !DIExpression()), !dbg !3178
  store i64 0, ptr %.anon10, align 8, !dbg !3178
  br label %loop.cond, !dbg !3178

loop.cond:                                        ; preds = %checkok42, %checkok
  %5 = load i64, ptr %.anon10, align 8, !dbg !3178
  %6 = load i64, ptr %.anon, align 8, !dbg !3177
  %lt = icmp ult i64 %5, %6, !dbg !3178
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3178

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3179, metadata !DIExpression()), !dbg !3181
  %7 = load i64, ptr %.anon10, align 8, !dbg !3181
  store i64 %7, ptr %i, align 8, !dbg !3181
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3182, metadata !DIExpression()), !dbg !3183
  %ptradd11 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3184
  %8 = load i64, ptr %ptradd11, align 8, !dbg !3184
  %9 = load ptr, ptr %1, align 8, !dbg !3184
  %10 = load i64, ptr %.anon10, align 8, !dbg !3181
  %ge = icmp uge i64 %10, %8, !dbg !3181
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3181
  br i1 %11, label %panic12, label %checkok19, !dbg !3181

checkok19:                                        ; preds = %loop.body
  %ptradd20 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !3181
  %12 = load i8, ptr %ptradd20, align 1, !dbg !3181
  store i8 %12, ptr %c, align 1, !dbg !3181
  %13 = load i64, ptr %i, align 8, !dbg !3185
  %smod = srem i64 %13, 8, !dbg !3185
  %lt21 = icmp slt i64 %smod, 0, !dbg !3185
  %14 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !3185
  br i1 %14, label %panic22, label %checkok30, !dbg !3185

checkok30:                                        ; preds = %checkok19
  %ge31 = icmp sge i64 %smod, 8, !dbg !3185
  %15 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !3185
  br i1 %15, label %panic32, label %checkok42, !dbg !3185

checkok42:                                        ; preds = %checkok30
  %ptradd43 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !3185
  %16 = load i8, ptr %ptradd43, align 1, !dbg !3185
  %17 = load i8, ptr %c, align 1, !dbg !3187
  %xor = xor i8 %16, %17, !dbg !3188
  store i8 %xor, ptr %ptradd43, align 1, !dbg !3188
  %18 = load i64, ptr %.anon10, align 8, !dbg !3178
  %addnuw = add nuw i64 %18, 1, !dbg !3178
  store i64 %addnuw, ptr %.anon10, align 8, !dbg !3178
  br label %loop.cond, !dbg !3178

loop.exit:                                        ; preds = %loop.cond
  %19 = load ptr, ptr %self, align 8, !dbg !3189
  %checknull = icmp eq ptr %19, null, !dbg !3189
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3189
  br i1 %20, label %panic44, label %checkok48, !dbg !3189

checkok48:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3190, metadata !DIExpression()), !dbg !3192
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !3194
  %21 = load i64, ptr %x, align 8, !dbg !3195
  %xor49 = xor i64 %21, 25214903917, !dbg !3196
  %and = and i64 %xor49, 281474976710655, !dbg !3196
  store i64 %and, ptr %19, align 8, !dbg !3196
  ret void, !dbg !3196

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 6), !dbg !3169
  unreachable, !dbg !3169

panic12:                                          ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr13, align 8
  %25 = insertvalue %any undef, ptr %taddr13, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd17, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 9, ptr align 8 %indirectarg18), !dbg !3181
  unreachable, !dbg !3181

panic22:                                          ; preds = %checkok19
  store i64 %smod, ptr %taddr23, align 8
  %28 = insertvalue %any undef, ptr %taddr23, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.121, i64 38 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 11, ptr align 8 %indirectarg29), !dbg !3185
  unreachable, !dbg !3185

panic32:                                          ; preds = %checkok30
  store i64 8, ptr %taddr33, align 8
  %31 = insertvalue %any undef, ptr %taddr33, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr34, align 8
  %33 = insertvalue %any undef, ptr %taddr34, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.120, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg37, align 8
  store %any %32, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %34, ptr %ptradd39, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %35, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 11, ptr align 8 %indirectarg41), !dbg !3185
  unreachable, !dbg !3185

panic44:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg47, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 13), !dbg !3189
  unreachable, !dbg !3189
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !3197 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3200
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3200
  br i1 %2, label %panic, label %checkok, !dbg !3200

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3201, metadata !DIExpression()), !dbg !3202
  call void @llvm.dbg.declare(metadata ptr %nextseed, metadata !3203, metadata !DIExpression()), !dbg !3204
  %3 = load ptr, ptr %self, align 8, !dbg !3205
  %checknull = icmp eq ptr %3, null, !dbg !3205
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3205
  br i1 %4, label %panic3, label %checkok7, !dbg !3205

checkok7:                                         ; preds = %checkok
  %5 = load i64, ptr %3, align 8, !dbg !3205
  %mul = mul i64 %5, 25214903917, !dbg !3206
  %add = add i64 %mul, 11, !dbg !3206
  %and = and i64 %add, 281474976710655, !dbg !3206
  store i64 %and, ptr %nextseed, align 8, !dbg !3206
  %6 = load ptr, ptr %self, align 8, !dbg !3207
  %checknull8 = icmp eq ptr %6, null, !dbg !3207
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3207
  br i1 %7, label %panic9, label %checkok13, !dbg !3207

checkok13:                                        ; preds = %checkok7
  %8 = load i64, ptr %nextseed, align 8, !dbg !3208
  store i64 %8, ptr %6, align 8, !dbg !3208
  %9 = load i64, ptr %nextseed, align 8, !dbg !3209
  %lshr = lshr i64 %9, 16, !dbg !3210
  %10 = freeze i64 %lshr, !dbg !3210
  %trunc = trunc i64 %10 to i32, !dbg !3210
  ret i32 %trunc, !dbg !3210

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 16), !dbg !3202
  unreachable, !dbg !3202

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 18), !dbg !3205
  unreachable, !dbg !3205

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 19), !dbg !3207
  unreachable, !dbg !3207
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !3211 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3212
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3212
  br i1 %3, label %panic, label %checkok, !dbg !3212

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3213, metadata !DIExpression()), !dbg !3214
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3215, metadata !DIExpression()), !dbg !3216
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3217
  %4 = load i64, ptr %ptradd, align 8, !dbg !3217
  %lt = icmp ult i64 0, %4, !dbg !3217
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3217

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 24), !dbg !3217
  unreachable, !dbg !3217

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3219, metadata !DIExpression()), !dbg !3221
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3222
  %6 = load i64, ptr %ptradd6, align 8, !dbg !3222
  store i64 %6, ptr %len, align 8, !dbg !3222
  br label %loop.cond, !dbg !3223

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !3224
  %lt7 = icmp ult i64 0, %7, !dbg !3224
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !3224

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3226, metadata !DIExpression()), !dbg !3228
  %8 = load ptr, ptr %self, align 8, !dbg !3229
  %9 = call i32 @std.math.random.SimpleRandom.next_int(ptr %8), !dbg !3230
  store i32 %9, ptr %value, align 4, !dbg !3230
  %10 = load i64, ptr %len, align 8, !dbg !3231
  %le = icmp ule i64 %10, 4, !dbg !3231
  br i1 %le, label %if.then, label %if.exit, !dbg !3231

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !3232
  %add = add i64 0, %12, !dbg !3232
  %size = sub i64 %add, 0, !dbg !3232
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !3232
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !3232
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !3234
  %16 = extractvalue %"char[]" %15, 0, !dbg !3234
  %17 = extractvalue %"char[]" %15, 1, !dbg !3235
  %gt = icmp ugt i64 0, %17, !dbg !3235
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3235
  br i1 %18, label %panic8, label %checkok16, !dbg !3235

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !3234
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !3234
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !3234
  %21 = extractvalue %"char[]" %20, 0, !dbg !3234
  %22 = extractvalue %"char[]" %14, 0, !dbg !3234
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !3234
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !3234
  br label %expr_block.exit, !dbg !3236

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !3237
  %31 = extractvalue %"char[]" %30, 0, !dbg !3237
  %32 = extractvalue %"char[]" %30, 1, !dbg !3237
  %gt34 = icmp sgt i64 0, %32, !dbg !3237
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !3237
  br i1 %33, label %panic35, label %checkok45, !dbg !3237

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !3237
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !3237
  br i1 %34, label %panic47, label %checkok57, !dbg !3237

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !3237
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !3237
  %37 = extractvalue %"char[]" %36, 0, !dbg !3237
  %38 = extractvalue %"char[]" %29, 0, !dbg !3237
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !3237
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !3237
  %43 = load i64, ptr %len, align 8, !dbg !3238
  %sub = sub i64 %43, 4, !dbg !3238
  store i64 %sub, ptr %len, align 8, !dbg !3238
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !3239
  %45 = extractvalue %"char[]" %44, 0, !dbg !3239
  %46 = extractvalue %"char[]" %44, 1, !dbg !3240
  %gt74 = icmp ugt i64 4, %46, !dbg !3240
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !3240
  br i1 %47, label %panic75, label %checkok85, !dbg !3240

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !3239
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !3239
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !3239
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !3239
  store %"char[]" %49, ptr %bytes, align 8, !dbg !3239
  br label %loop.cond, !dbg !3239

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.156, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.157, i64 21 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.158, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 26, ptr align 8 %indirectarg91), !dbg !3241
  unreachable, !dbg !3244

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !3244

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26), !dbg !3214
  unreachable, !dbg !3214

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !3234
  unreachable, !dbg !3234

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !3234
  unreachable, !dbg !3234

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !3237
  unreachable, !dbg !3237

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !3237
  unreachable, !dbg !3237

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !3237
  unreachable, !dbg !3237

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !3239
  unreachable, !dbg !3239
}

; Function Attrs: nounwind ssp uwtable
define weak <2 x i64> @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !3245 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3248
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3248
  br i1 %2, label %panic, label %checkok, !dbg !3248

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3249, metadata !DIExpression()), !dbg !3250
  %3 = load ptr, ptr %self, align 8, !dbg !3251
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !3253
  %zext = zext i64 %4 to i128, !dbg !3253
  %shl = shl i128 %zext, 64, !dbg !3253
  %5 = freeze i128 %shl, !dbg !3253
  %6 = load ptr, ptr %self, align 8, !dbg !3251
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !3254
  %zext3 = zext i64 %7 to i128, !dbg !3254
  %add = add i128 %5, %zext3, !dbg !3253
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27), !dbg !3250
  unreachable, !dbg !3250
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !3255 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3258
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3258
  br i1 %2, label %panic, label %checkok, !dbg !3258

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3259, metadata !DIExpression()), !dbg !3260
  %3 = load ptr, ptr %self, align 8, !dbg !3261
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !3263
  %zext = zext i32 %4 to i64, !dbg !3263
  %shl = shl i64 %zext, 32, !dbg !3263
  %5 = freeze i64 %shl, !dbg !3263
  %6 = load ptr, ptr %self, align 8, !dbg !3261
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !3264
  %zext3 = zext i32 %7 to i64, !dbg !3264
  %add = add i64 %5, %zext3, !dbg !3263
  ret i64 %add, !dbg !3263

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28), !dbg !3260
  unreachable, !dbg !3260
}

; Function Attrs: nounwind ssp uwtable
define weak i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !3265 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3268
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3268
  br i1 %2, label %panic, label %checkok, !dbg !3268

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3269, metadata !DIExpression()), !dbg !3270
  %3 = load ptr, ptr %self, align 8, !dbg !3271
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !3272
  %trunc = trunc i32 %4 to i16, !dbg !3272
  ret i16 %trunc, !dbg !3272

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 29), !dbg !3270
  unreachable, !dbg !3270
}

; Function Attrs: nounwind ssp uwtable
define weak i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !3273 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3276
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3276
  br i1 %2, label %panic, label %checkok, !dbg !3276

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3277, metadata !DIExpression()), !dbg !3278
  %3 = load ptr, ptr %self, align 8, !dbg !3279
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !3280
  %trunc = trunc i32 %4 to i8, !dbg !3280
  ret i8 %trunc, !dbg !3280

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.155, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30), !dbg !3278
  unreachable, !dbg !3278
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @std.hash.fnv32a.encode(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.new_init(ptr, i64, ptr align 8) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108}
!llvm.dbg.cu = !{!109}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 16)
!2 = !DIFile(filename: "math_random.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !14, file: !14, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!14 = !DIFile(filename: "math.lcg.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!15 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !14, file: !14, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!20 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !14, file: !14, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!23 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !14, file: !14, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !14, file: !14, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !14, file: !14, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !34, file: !34, line: 3, type: !15, isLocal: true, isDefinition: true, align: 16)
!34 = !DIFile(filename: "math.mcg.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !34, file: !34, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !34, file: !34, line: 5, type: !20, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !34, file: !34, line: 6, type: !23, isLocal: true, isDefinition: true, align: 2)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !43, file: !43, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!43 = !DIFile(filename: "math.msws.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !43, file: !43, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !43, file: !43, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !43, file: !43, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !43, file: !43, line: 8, type: !52, isLocal: true, isDefinition: true, align: 1)
!52 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!53 = !DIGlobalVariableExpression(var: !54, expr: !DIExpression())
!54 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !55, file: !55, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!55 = !DIFile(filename: "math.pcg.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !55, file: !55, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!58 = !DIGlobalVariableExpression(var: !59, expr: !DIExpression())
!59 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !55, file: !55, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !55, file: !55, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !55, file: !55, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!64 = !DIGlobalVariableExpression(var: !65, expr: !DIExpression())
!65 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !55, file: !55, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!66 = !DIGlobalVariableExpression(var: !67, expr: !DIExpression())
!67 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !55, file: !55, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !55, file: !55, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !55, file: !55, line: 28, type: !72, isLocal: true, isDefinition: true, align: 4)
!72 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!73 = !DIGlobalVariableExpression(var: !74, expr: !DIExpression())
!74 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !55, file: !55, line: 56, type: !72, isLocal: true, isDefinition: true, align: 4)
!75 = !DIGlobalVariableExpression(var: !76, expr: !DIExpression())
!76 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !55, file: !55, line: 85, type: !72, isLocal: true, isDefinition: true, align: 4)
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !55, file: !55, line: 113, type: !72, isLocal: true, isDefinition: true, align: 4)
!79 = !DIGlobalVariableExpression(var: !80, expr: !DIExpression())
!80 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !81, file: !81, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!81 = !DIFile(filename: "math.seeder.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!82 = !DIGlobalVariableExpression(var: !83, expr: !DIExpression())
!83 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !81, file: !81, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!84 = !DIGlobalVariableExpression(var: !85, expr: !DIExpression())
!85 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !81, file: !81, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !81, file: !81, line: 80, type: !20, isLocal: true, isDefinition: true, align: 4)
!88 = !DIGlobalVariableExpression(var: !89, expr: !DIExpression())
!89 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!90 = !DIGlobalVariableExpression(var: !91, expr: !DIExpression())
!91 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!92 = !DIGlobalVariableExpression(var: !93, expr: !DIExpression())
!93 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!94 = !DIGlobalVariableExpression(var: !95, expr: !DIExpression())
!95 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !52, isLocal: true, isDefinition: true, align: 1)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !100, file: !100, line: 32, type: !101, isLocal: true, isDefinition: true, align: 8)
!100 = !DIFile(filename: "math.simple_random.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math/random")
!101 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !100, file: !100, line: 33, type: !101, isLocal: true, isDefinition: true, align: 8)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !100, file: !100, line: 34, type: !101, isLocal: true, isDefinition: true, align: 8)
!106 = !{i32 4, !"PIC Level", i32 2}
!107 = !{i32 1, !"CodeView", i32 1}
!108 = !{i32 1, !"uwtable", i32 2}
!109 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !110, splitDebugInlining: false)
!110 = !{!0, !9, !12, !16, !18, !21, !24, !26, !28, !30, !32, !35, !37, !39, !41, !44, !46, !48, !50, !53, !56, !58, !60, !62, !64, !66, !68, !70, !73, !75, !77, !79, !82, !84, !86, !88, !90, !92, !94, !96, !98, !102, !104}
!111 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !112, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!112 = !DISubroutineType(types: !113)
!113 = !{null, !6}
!114 = !{}
!115 = !DILocalVariable(name: "seed", arg: 1, scope: !111, file: !2, line: 71, type: !6)
!116 = !DILocation(line: 71, column: 21, scope: !111)
!117 = !DILocation(line: 342, column: 11, scope: !118, inlinedAt: !120)
!118 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!119 = !DIFile(filename: "builtin.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!120 = !DILocation(line: 73, column: 26, scope: !111)
!121 = !DILocation(line: 73, column: 2, scope: !111)
!122 = !DILocation(line: 74, column: 31, scope: !111)
!123 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !124, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!124 = !DISubroutineType(types: !125)
!125 = !{!72, !72}
!126 = !DILocalVariable(name: "range", arg: 1, scope: !123, file: !2, line: 80, type: !72)
!127 = !DILocation(line: 80, column: 17, scope: !123)
!128 = !DILocation(line: 179, column: 7, scope: !129, inlinedAt: !130)
!129 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!130 = !DILocation(line: 82, column: 2, scope: !123)
!131 = !DILocation(line: 136, column: 33, scope: !132, inlinedAt: !133)
!132 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!133 = !DILocation(line: 24, column: 11, scope: !134, inlinedAt: !136)
!134 = distinct !DILexicalBlock(scope: !135, file: !2, line: 27, column: 1)
!135 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!136 = !DILocation(line: 181, column: 3, scope: !137, inlinedAt: !130)
!137 = distinct !DILexicalBlock(scope: !129, file: !2, line: 180, column: 2)
!138 = !DILocation(line: 28, column: 20, scope: !135, inlinedAt: !136)
!139 = !DILocation(line: 28, column: 2, scope: !135, inlinedAt: !136)
!140 = !DILocation(line: 182, column: 32, scope: !137, inlinedAt: !130)
!141 = !DILocation(line: 136, column: 33, scope: !142, inlinedAt: !143)
!142 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!143 = !DILocation(line: 34, column: 11, scope: !144, inlinedAt: !146)
!144 = distinct !DILexicalBlock(scope: !145, file: !2, line: 38, column: 1)
!145 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!146 = !DILocation(line: 83, column: 9, scope: !123)
!147 = !DILocation(line: 35, column: 11, scope: !144, inlinedAt: !146)
!148 = !DILocation(line: 39, column: 6, scope: !145, inlinedAt: !146)
!149 = !DILocation(line: 39, column: 25, scope: !145, inlinedAt: !146)
!150 = !DILocalVariable(name: "mask", scope: !145, file: !2, line: 40, type: !20, align: 4)
!151 = !DILocation(line: 40, column: 7, scope: !145, inlinedAt: !146)
!152 = !DILocation(line: 40, column: 14, scope: !145, inlinedAt: !146)
!153 = !DILocation(line: 41, column: 2, scope: !145, inlinedAt: !146)
!154 = !DILocation(line: 42, column: 2, scope: !145, inlinedAt: !146)
!155 = !DILocation(line: 95, column: 31, scope: !156, inlinedAt: !158)
!156 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!157 = !DIFile(filename: "bits.c3", directory: "C:/Dev/C3/c3-windows/lib/std")
!158 = !DILocation(line: 42, column: 11, scope: !145, inlinedAt: !146)
!159 = !DILocalVariable(name: "x", scope: !145, file: !2, line: 43, type: !20, align: 4)
!160 = !DILocation(line: 43, column: 7, scope: !145, inlinedAt: !146)
!161 = !DILocation(line: 44, column: 2, scope: !145, inlinedAt: !146)
!162 = !DILocation(line: 48, column: 9, scope: !163, inlinedAt: !146)
!163 = distinct !DILexicalBlock(scope: !145, file: !2, line: 44, column: 2)
!164 = !DILocation(line: 48, column: 13, scope: !163, inlinedAt: !146)
!165 = !DILocation(line: 46, column: 7, scope: !166, inlinedAt: !146)
!166 = distinct !DILexicalBlock(scope: !163, file: !2, line: 45, column: 2)
!167 = !DILocation(line: 46, column: 27, scope: !166, inlinedAt: !146)
!168 = !DILocation(line: 49, column: 9, scope: !145, inlinedAt: !146)
!169 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !170, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!170 = !DISubroutineType(types: !171)
!171 = !{!72, !72, !72}
!172 = !DILocalVariable(name: "min", arg: 1, scope: !169, file: !2, line: 90, type: !72)
!173 = !DILocation(line: 90, column: 26, scope: !169)
!174 = !DILocalVariable(name: "max", arg: 2, scope: !169, file: !2, line: 90, type: !72)
!175 = !DILocation(line: 90, column: 35, scope: !169)
!176 = !DILocation(line: 88, column: 11, scope: !177)
!177 = distinct !DILexicalBlock(scope: !169, file: !2, line: 91, column: 1)
!178 = !DILocation(line: 88, column: 18, scope: !177)
!179 = !DILocation(line: 179, column: 7, scope: !180, inlinedAt: !181)
!180 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!181 = !DILocation(line: 92, column: 2, scope: !169)
!182 = !DILocation(line: 136, column: 33, scope: !183, inlinedAt: !184)
!183 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!184 = !DILocation(line: 24, column: 11, scope: !185, inlinedAt: !187)
!185 = distinct !DILexicalBlock(scope: !186, file: !2, line: 27, column: 1)
!186 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!187 = !DILocation(line: 181, column: 3, scope: !188, inlinedAt: !181)
!188 = distinct !DILexicalBlock(scope: !180, file: !2, line: 180, column: 2)
!189 = !DILocation(line: 28, column: 20, scope: !186, inlinedAt: !187)
!190 = !DILocation(line: 28, column: 2, scope: !186, inlinedAt: !187)
!191 = !DILocation(line: 182, column: 32, scope: !188, inlinedAt: !181)
!192 = !DILocation(line: 136, column: 33, scope: !193, inlinedAt: !194)
!193 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!194 = !DILocation(line: 55, column: 11, scope: !195, inlinedAt: !197)
!195 = distinct !DILexicalBlock(scope: !196, file: !2, line: 59, column: 1)
!196 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!197 = !DILocation(line: 93, column: 9, scope: !169)
!198 = !DILocation(line: 56, column: 11, scope: !195, inlinedAt: !197)
!199 = !DILocation(line: 56, column: 18, scope: !195, inlinedAt: !197)
!200 = !DILocation(line: 60, column: 22, scope: !196, inlinedAt: !197)
!201 = !DILocation(line: 60, column: 28, scope: !196, inlinedAt: !197)
!202 = !DILocation(line: 136, column: 33, scope: !203, inlinedAt: !204)
!203 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!204 = !DILocation(line: 34, column: 11, scope: !205, inlinedAt: !207)
!205 = distinct !DILexicalBlock(scope: !206, file: !2, line: 38, column: 1)
!206 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!207 = !DILocation(line: 60, column: 9, scope: !196, inlinedAt: !197)
!208 = !DILocation(line: 35, column: 11, scope: !205, inlinedAt: !207)
!209 = !DILocation(line: 39, column: 6, scope: !206, inlinedAt: !207)
!210 = !DILocation(line: 39, column: 25, scope: !206, inlinedAt: !207)
!211 = !DILocalVariable(name: "mask", scope: !206, file: !2, line: 40, type: !20, align: 4)
!212 = !DILocation(line: 40, column: 7, scope: !206, inlinedAt: !207)
!213 = !DILocation(line: 40, column: 14, scope: !206, inlinedAt: !207)
!214 = !DILocation(line: 41, column: 2, scope: !206, inlinedAt: !207)
!215 = !DILocation(line: 42, column: 2, scope: !206, inlinedAt: !207)
!216 = !DILocation(line: 95, column: 31, scope: !217, inlinedAt: !218)
!217 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!218 = !DILocation(line: 42, column: 11, scope: !206, inlinedAt: !207)
!219 = !DILocalVariable(name: "x", scope: !206, file: !2, line: 43, type: !20, align: 4)
!220 = !DILocation(line: 43, column: 7, scope: !206, inlinedAt: !207)
!221 = !DILocation(line: 44, column: 2, scope: !206, inlinedAt: !207)
!222 = !DILocation(line: 48, column: 9, scope: !223, inlinedAt: !207)
!223 = distinct !DILexicalBlock(scope: !206, file: !2, line: 44, column: 2)
!224 = !DILocation(line: 48, column: 13, scope: !223, inlinedAt: !207)
!225 = !DILocation(line: 46, column: 7, scope: !226, inlinedAt: !207)
!226 = distinct !DILexicalBlock(scope: !223, file: !2, line: 45, column: 2)
!227 = !DILocation(line: 46, column: 27, scope: !226, inlinedAt: !207)
!228 = !DILocation(line: 49, column: 9, scope: !206, inlinedAt: !207)
!229 = !DILocation(line: 60, column: 39, scope: !196, inlinedAt: !197)
!230 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !231, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!231 = !DISubroutineType(types: !232)
!232 = !{!233}
!233 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!234 = !DILocation(line: 179, column: 7, scope: !235, inlinedAt: !236)
!235 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!236 = !DILocation(line: 98, column: 2, scope: !230)
!237 = !DILocation(line: 136, column: 33, scope: !238, inlinedAt: !239)
!238 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!239 = !DILocation(line: 24, column: 11, scope: !240, inlinedAt: !242)
!240 = distinct !DILexicalBlock(scope: !241, file: !2, line: 27, column: 1)
!241 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!242 = !DILocation(line: 181, column: 3, scope: !243, inlinedAt: !236)
!243 = distinct !DILexicalBlock(scope: !235, file: !2, line: 180, column: 2)
!244 = !DILocation(line: 28, column: 20, scope: !241, inlinedAt: !242)
!245 = !DILocation(line: 28, column: 2, scope: !241, inlinedAt: !242)
!246 = !DILocation(line: 182, column: 32, scope: !243, inlinedAt: !236)
!247 = !DILocalVariable(name: "val", scope: !230, file: !2, line: 99, type: !6, align: 8)
!248 = !DILocation(line: 99, column: 8, scope: !230)
!249 = !DILocation(line: 99, column: 14, scope: !230)
!250 = !DILocation(line: 100, column: 9, scope: !230)
!251 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !14, file: !14, line: 18, type: !252, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!252 = !DISubroutineType(types: !253)
!253 = !{null, !254, !256}
!254 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !255, size: 64, align: 64, dwarfAddressSpace: 0)
!255 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !14, file: !14, line: 16, baseType: !15, align: 16)
!256 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !257, identifier: "char[]")
!257 = !{!258, !260}
!258 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !256, baseType: !259, size: 64, align: 64)
!259 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !52, size: 64, align: 64, dwarfAddressSpace: 0)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !256, baseType: !261, size: 64, align: 64, offset: 64)
!261 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!262 = !DILocation(line: 19, column: 1, scope: !251)
!263 = !DILocalVariable(name: "self", arg: 1, scope: !251, file: !14, line: 18, type: !254)
!264 = !DILocation(line: 18, column: 31, scope: !251)
!265 = !DILocalVariable(name: "input", arg: 2, scope: !251, file: !14, line: 18, type: !256)
!266 = !DILocation(line: 18, column: 45, scope: !251)
!267 = !DILocation(line: 20, column: 3, scope: !251)
!268 = !DILocalVariable(name: "return_value", scope: !269, file: !14, line: 10, type: !15, align: 16)
!269 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!270 = !DILocation(line: 10, column: 8, scope: !269, inlinedAt: !271)
!271 = !DILocation(line: 20, column: 11, scope: !251)
!272 = !DILocation(line: 342, column: 11, scope: !273, inlinedAt: !274)
!273 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!274 = !DILocation(line: 11, column: 16, scope: !269, inlinedAt: !271)
!275 = !DILocation(line: 11, column: 2, scope: !269, inlinedAt: !271)
!276 = !DILocation(line: 12, column: 9, scope: !269, inlinedAt: !271)
!277 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !14, file: !14, line: 24, type: !278, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!278 = !DISubroutineType(types: !279)
!279 = !{!6, !254}
!280 = !DILocation(line: 25, column: 1, scope: !277)
!281 = !DILocalVariable(name: "self", arg: 1, scope: !277, file: !14, line: 24, type: !254)
!282 = !DILocation(line: 24, column: 33, scope: !277)
!283 = !DILocalVariable(name: "s", scope: !277, file: !14, line: 26, type: !284, align: 8)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!285 = !DILocation(line: 26, column: 11, scope: !277)
!286 = !DILocation(line: 26, column: 16, scope: !277)
!287 = !DILocalVariable(name: "result", scope: !277, file: !14, line: 27, type: !6, align: 8)
!288 = !DILocation(line: 27, column: 8, scope: !277)
!289 = !DILocation(line: 27, column: 26, scope: !277)
!290 = !DILocation(line: 27, column: 18, scope: !277)
!291 = !DILocation(line: 28, column: 3, scope: !277)
!292 = !DILocation(line: 28, column: 8, scope: !277)
!293 = !DILocation(line: 28, column: 7, scope: !277)
!294 = !DILocation(line: 29, column: 9, scope: !277)
!295 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !14, file: !14, line: 35, type: !252, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!296 = !DILocation(line: 35, column: 66, scope: !295)
!297 = !DILocalVariable(name: "self", arg: 1, scope: !295, file: !14, line: 35, type: !254)
!298 = !DILocation(line: 35, column: 33, scope: !295)
!299 = !DILocalVariable(name: "bytes", arg: 2, scope: !295, file: !14, line: 35, type: !256)
!300 = !DILocation(line: 35, column: 47, scope: !295)
!301 = !DILocation(line: 33, column: 11, scope: !302)
!302 = distinct !DILexicalBlock(scope: !295, file: !14, line: 35, column: 66)
!303 = !DILocalVariable(name: "len", scope: !304, file: !14, line: 146, type: !261, align: 8)
!304 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!305 = !DILocation(line: 146, column: 6, scope: !304, inlinedAt: !296)
!306 = !DILocation(line: 146, column: 12, scope: !304, inlinedAt: !296)
!307 = !DILocation(line: 148, column: 2, scope: !304, inlinedAt: !296)
!308 = !DILocation(line: 148, column: 9, scope: !309, inlinedAt: !296)
!309 = distinct !DILexicalBlock(scope: !304, file: !2, line: 148, column: 2)
!310 = !DILocalVariable(name: "value", scope: !311, file: !14, line: 150, type: !6, align: 8)
!311 = distinct !DILexicalBlock(scope: !309, file: !2, line: 149, column: 2)
!312 = !DILocation(line: 150, column: 7, scope: !311, inlinedAt: !296)
!313 = !DILocation(line: 35, column: 89, scope: !311, inlinedAt: !296)
!314 = !DILocation(line: 150, column: 15, scope: !311, inlinedAt: !296)
!315 = !DILocation(line: 151, column: 7, scope: !311, inlinedAt: !296)
!316 = !DILocation(line: 153, column: 33, scope: !317, inlinedAt: !296)
!317 = distinct !DILexicalBlock(scope: !311, file: !2, line: 152, column: 3)
!318 = !DILocation(line: 153, column: 4, scope: !317, inlinedAt: !296)
!319 = !DILocation(line: 153, column: 10, scope: !317, inlinedAt: !296)
!320 = !DILocation(line: 154, column: 10, scope: !317, inlinedAt: !296)
!321 = !DILocation(line: 156, column: 3, scope: !311, inlinedAt: !296)
!322 = !DILocation(line: 157, column: 3, scope: !311, inlinedAt: !296)
!323 = !DILocation(line: 158, column: 11, scope: !311, inlinedAt: !296)
!324 = !DILocation(line: 158, column: 17, scope: !311, inlinedAt: !296)
!325 = !DILocation(line: 164, column: 2, scope: !326, inlinedAt: !327)
!326 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!327 = !DILocation(line: 160, column: 2, scope: !304, inlinedAt: !296)
!328 = !DILocation(line: 166, column: 2, scope: !326, inlinedAt: !327)
!329 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !14, file: !14, line: 36, type: !330, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!330 = !DISubroutineType(types: !331)
!331 = !{!15, !254}
!332 = !DILocation(line: 36, column: 56, scope: !329)
!333 = !DILocalVariable(name: "self", arg: 1, scope: !329, file: !14, line: 36, type: !254)
!334 = !DILocation(line: 36, column: 37, scope: !329)
!335 = !DILocation(line: 36, column: 72, scope: !336, inlinedAt: !332)
!336 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!337 = !DILocation(line: 138, column: 46, scope: !336, inlinedAt: !332)
!338 = !DILocation(line: 138, column: 72, scope: !336, inlinedAt: !332)
!339 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !14, file: !14, line: 37, type: !340, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!340 = !DISubroutineType(types: !341)
!341 = !{!20, !254}
!342 = !DILocation(line: 37, column: 50, scope: !339)
!343 = !DILocalVariable(name: "self", arg: 1, scope: !339, file: !14, line: 37, type: !254)
!344 = !DILocation(line: 37, column: 31, scope: !339)
!345 = !DILocation(line: 37, column: 56, scope: !339)
!346 = !DILocation(line: 37, column: 51, scope: !339)
!347 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !14, file: !14, line: 38, type: !348, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!348 = !DISubroutineType(types: !349)
!349 = !{!23, !254}
!350 = !DILocation(line: 38, column: 54, scope: !347)
!351 = !DILocalVariable(name: "self", arg: 1, scope: !347, file: !14, line: 38, type: !254)
!352 = !DILocation(line: 38, column: 35, scope: !347)
!353 = !DILocation(line: 38, column: 62, scope: !347)
!354 = !DILocation(line: 38, column: 55, scope: !347)
!355 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !14, file: !14, line: 39, type: !356, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!356 = !DISubroutineType(types: !357)
!357 = !{!52, !254}
!358 = !DILocation(line: 39, column: 51, scope: !355)
!359 = !DILocalVariable(name: "self", arg: 1, scope: !355, file: !14, line: 39, type: !254)
!360 = !DILocation(line: 39, column: 32, scope: !355)
!361 = !DILocation(line: 39, column: 57, scope: !355)
!362 = !DILocation(line: 39, column: 52, scope: !355)
!363 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !14, file: !14, line: 45, type: !364, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!364 = !DISubroutineType(types: !365)
!365 = !{null, !366, !256}
!366 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !367, size: 64, align: 64, dwarfAddressSpace: 0)
!367 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !14, file: !14, line: 43, baseType: !6, align: 8)
!368 = !DILocation(line: 46, column: 1, scope: !363)
!369 = !DILocalVariable(name: "self", arg: 1, scope: !363, file: !14, line: 45, type: !366)
!370 = !DILocation(line: 45, column: 30, scope: !363)
!371 = !DILocalVariable(name: "seed", arg: 2, scope: !363, file: !14, line: 45, type: !256)
!372 = !DILocation(line: 45, column: 44, scope: !363)
!373 = !DILocation(line: 47, column: 3, scope: !363)
!374 = !DILocalVariable(name: "return_value", scope: !375, file: !14, line: 10, type: !6, align: 8)
!375 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!376 = !DILocation(line: 10, column: 8, scope: !375, inlinedAt: !377)
!377 = !DILocation(line: 47, column: 11, scope: !363)
!378 = !DILocation(line: 342, column: 11, scope: !379, inlinedAt: !380)
!379 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!380 = !DILocation(line: 11, column: 16, scope: !375, inlinedAt: !377)
!381 = !DILocation(line: 11, column: 2, scope: !375, inlinedAt: !377)
!382 = !DILocation(line: 12, column: 9, scope: !375, inlinedAt: !377)
!383 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !14, file: !14, line: 51, type: !384, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!384 = !DISubroutineType(types: !385)
!385 = !{!20, !366}
!386 = !DILocation(line: 52, column: 1, scope: !383)
!387 = !DILocalVariable(name: "self", arg: 1, scope: !383, file: !14, line: 51, type: !366)
!388 = !DILocation(line: 51, column: 30, scope: !383)
!389 = !DILocalVariable(name: "s", scope: !383, file: !14, line: 53, type: !390, align: 8)
!390 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!391 = !DILocation(line: 53, column: 9, scope: !383)
!392 = !DILocation(line: 53, column: 14, scope: !383)
!393 = !DILocalVariable(name: "result", scope: !383, file: !14, line: 54, type: !20, align: 4)
!394 = !DILocation(line: 54, column: 7, scope: !383)
!395 = !DILocation(line: 54, column: 24, scope: !383)
!396 = !DILocation(line: 54, column: 17, scope: !383)
!397 = !DILocation(line: 55, column: 3, scope: !383)
!398 = !DILocation(line: 55, column: 8, scope: !383)
!399 = !DILocation(line: 55, column: 7, scope: !383)
!400 = !DILocation(line: 56, column: 9, scope: !383)
!401 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !14, file: !14, line: 62, type: !364, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!402 = !DILocation(line: 62, column: 65, scope: !401)
!403 = !DILocalVariable(name: "self", arg: 1, scope: !401, file: !14, line: 62, type: !366)
!404 = !DILocation(line: 62, column: 32, scope: !401)
!405 = !DILocalVariable(name: "bytes", arg: 2, scope: !401, file: !14, line: 62, type: !256)
!406 = !DILocation(line: 62, column: 46, scope: !401)
!407 = !DILocation(line: 60, column: 11, scope: !408)
!408 = distinct !DILexicalBlock(scope: !401, file: !14, line: 62, column: 65)
!409 = !DILocalVariable(name: "len", scope: !410, file: !14, line: 146, type: !261, align: 8)
!410 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!411 = !DILocation(line: 146, column: 6, scope: !410, inlinedAt: !402)
!412 = !DILocation(line: 146, column: 12, scope: !410, inlinedAt: !402)
!413 = !DILocation(line: 148, column: 2, scope: !410, inlinedAt: !402)
!414 = !DILocation(line: 148, column: 9, scope: !415, inlinedAt: !402)
!415 = distinct !DILexicalBlock(scope: !410, file: !2, line: 148, column: 2)
!416 = !DILocalVariable(name: "value", scope: !417, file: !14, line: 150, type: !20, align: 4)
!417 = distinct !DILexicalBlock(scope: !415, file: !2, line: 149, column: 2)
!418 = !DILocation(line: 150, column: 7, scope: !417, inlinedAt: !402)
!419 = !DILocation(line: 62, column: 88, scope: !417, inlinedAt: !402)
!420 = !DILocation(line: 150, column: 15, scope: !417, inlinedAt: !402)
!421 = !DILocation(line: 151, column: 7, scope: !417, inlinedAt: !402)
!422 = !DILocation(line: 153, column: 33, scope: !423, inlinedAt: !402)
!423 = distinct !DILexicalBlock(scope: !417, file: !2, line: 152, column: 3)
!424 = !DILocation(line: 153, column: 4, scope: !423, inlinedAt: !402)
!425 = !DILocation(line: 153, column: 10, scope: !423, inlinedAt: !402)
!426 = !DILocation(line: 154, column: 10, scope: !423, inlinedAt: !402)
!427 = !DILocation(line: 156, column: 3, scope: !417, inlinedAt: !402)
!428 = !DILocation(line: 157, column: 3, scope: !417, inlinedAt: !402)
!429 = !DILocation(line: 158, column: 11, scope: !417, inlinedAt: !402)
!430 = !DILocation(line: 158, column: 17, scope: !417, inlinedAt: !402)
!431 = !DILocation(line: 164, column: 2, scope: !432, inlinedAt: !433)
!432 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!433 = !DILocation(line: 160, column: 2, scope: !410, inlinedAt: !402)
!434 = !DILocation(line: 166, column: 2, scope: !432, inlinedAt: !433)
!435 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !14, file: !14, line: 63, type: !436, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!436 = !DISubroutineType(types: !437)
!437 = !{!15, !366}
!438 = !DILocation(line: 63, column: 55, scope: !435)
!439 = !DILocalVariable(name: "self", arg: 1, scope: !435, file: !14, line: 63, type: !366)
!440 = !DILocation(line: 63, column: 36, scope: !435)
!441 = !DILocation(line: 63, column: 71, scope: !442, inlinedAt: !438)
!442 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!443 = !DILocation(line: 138, column: 46, scope: !442, inlinedAt: !438)
!444 = !DILocation(line: 138, column: 72, scope: !442, inlinedAt: !438)
!445 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !14, file: !14, line: 64, type: !446, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!446 = !DISubroutineType(types: !447)
!447 = !{!6, !366}
!448 = !DILocation(line: 64, column: 51, scope: !445)
!449 = !DILocalVariable(name: "self", arg: 1, scope: !445, file: !14, line: 64, type: !366)
!450 = !DILocation(line: 64, column: 32, scope: !445)
!451 = !DILocation(line: 64, column: 64, scope: !452, inlinedAt: !448)
!452 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!453 = !DILocation(line: 139, column: 41, scope: !452, inlinedAt: !448)
!454 = !DILocation(line: 139, column: 65, scope: !452, inlinedAt: !448)
!455 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !14, file: !14, line: 65, type: !456, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!456 = !DISubroutineType(types: !457)
!457 = !{!23, !366}
!458 = !DILocation(line: 65, column: 53, scope: !455)
!459 = !DILocalVariable(name: "self", arg: 1, scope: !455, file: !14, line: 65, type: !366)
!460 = !DILocation(line: 65, column: 34, scope: !455)
!461 = !DILocation(line: 65, column: 61, scope: !455)
!462 = !DILocation(line: 65, column: 54, scope: !455)
!463 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !14, file: !14, line: 66, type: !464, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!464 = !DISubroutineType(types: !465)
!465 = !{!52, !366}
!466 = !DILocation(line: 66, column: 50, scope: !463)
!467 = !DILocalVariable(name: "self", arg: 1, scope: !463, file: !14, line: 66, type: !366)
!468 = !DILocation(line: 66, column: 31, scope: !463)
!469 = !DILocation(line: 66, column: 56, scope: !463)
!470 = !DILocation(line: 66, column: 51, scope: !463)
!471 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !14, file: !14, line: 72, type: !472, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!472 = !DISubroutineType(types: !473)
!473 = !{null, !474, !256}
!474 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !475, size: 64, align: 64, dwarfAddressSpace: 0)
!475 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !14, file: !14, line: 70, baseType: !20, align: 4)
!476 = !DILocation(line: 73, column: 1, scope: !471)
!477 = !DILocalVariable(name: "self", arg: 1, scope: !471, file: !14, line: 72, type: !474)
!478 = !DILocation(line: 72, column: 30, scope: !471)
!479 = !DILocalVariable(name: "seed", arg: 2, scope: !471, file: !14, line: 72, type: !256)
!480 = !DILocation(line: 72, column: 44, scope: !471)
!481 = !DILocation(line: 74, column: 3, scope: !471)
!482 = !DILocalVariable(name: "return_value", scope: !483, file: !14, line: 10, type: !20, align: 4)
!483 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!484 = !DILocation(line: 10, column: 8, scope: !483, inlinedAt: !485)
!485 = !DILocation(line: 74, column: 11, scope: !471)
!486 = !DILocation(line: 342, column: 11, scope: !487, inlinedAt: !488)
!487 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!488 = !DILocation(line: 11, column: 16, scope: !483, inlinedAt: !485)
!489 = !DILocation(line: 11, column: 2, scope: !483, inlinedAt: !485)
!490 = !DILocation(line: 12, column: 9, scope: !483, inlinedAt: !485)
!491 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !14, file: !14, line: 77, type: !492, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!492 = !DISubroutineType(types: !493)
!493 = !{!23, !474}
!494 = !DILocation(line: 78, column: 1, scope: !491)
!495 = !DILocalVariable(name: "self", arg: 1, scope: !491, file: !14, line: 77, type: !474)
!496 = !DILocation(line: 77, column: 34, scope: !491)
!497 = !DILocalVariable(name: "s", scope: !491, file: !14, line: 79, type: !498, align: 8)
!498 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!499 = !DILocation(line: 79, column: 8, scope: !491)
!500 = !DILocation(line: 79, column: 13, scope: !491)
!501 = !DILocalVariable(name: "result", scope: !491, file: !14, line: 80, type: !23, align: 2)
!502 = !DILocation(line: 80, column: 9, scope: !491)
!503 = !DILocation(line: 80, column: 28, scope: !491)
!504 = !DILocation(line: 80, column: 19, scope: !491)
!505 = !DILocation(line: 81, column: 3, scope: !491)
!506 = !DILocation(line: 81, column: 8, scope: !491)
!507 = !DILocation(line: 81, column: 7, scope: !491)
!508 = !DILocation(line: 82, column: 9, scope: !491)
!509 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !14, file: !14, line: 85, type: !472, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!510 = !DILocation(line: 85, column: 65, scope: !509)
!511 = !DILocalVariable(name: "self", arg: 1, scope: !509, file: !14, line: 85, type: !474)
!512 = !DILocation(line: 85, column: 32, scope: !509)
!513 = !DILocalVariable(name: "bytes", arg: 2, scope: !509, file: !14, line: 85, type: !256)
!514 = !DILocation(line: 85, column: 46, scope: !509)
!515 = !DILocalVariable(name: "len", scope: !516, file: !14, line: 146, type: !261, align: 8)
!516 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!517 = !DILocation(line: 146, column: 6, scope: !516, inlinedAt: !510)
!518 = !DILocation(line: 146, column: 12, scope: !516, inlinedAt: !510)
!519 = !DILocation(line: 148, column: 2, scope: !516, inlinedAt: !510)
!520 = !DILocation(line: 148, column: 9, scope: !521, inlinedAt: !510)
!521 = distinct !DILexicalBlock(scope: !516, file: !2, line: 148, column: 2)
!522 = !DILocalVariable(name: "value", scope: !523, file: !14, line: 150, type: !23, align: 2)
!523 = distinct !DILexicalBlock(scope: !521, file: !2, line: 149, column: 2)
!524 = !DILocation(line: 150, column: 7, scope: !523, inlinedAt: !510)
!525 = !DILocation(line: 85, column: 88, scope: !523, inlinedAt: !510)
!526 = !DILocation(line: 150, column: 15, scope: !523, inlinedAt: !510)
!527 = !DILocation(line: 151, column: 7, scope: !523, inlinedAt: !510)
!528 = !DILocation(line: 153, column: 33, scope: !529, inlinedAt: !510)
!529 = distinct !DILexicalBlock(scope: !523, file: !2, line: 152, column: 3)
!530 = !DILocation(line: 153, column: 4, scope: !529, inlinedAt: !510)
!531 = !DILocation(line: 153, column: 10, scope: !529, inlinedAt: !510)
!532 = !DILocation(line: 154, column: 10, scope: !529, inlinedAt: !510)
!533 = !DILocation(line: 156, column: 3, scope: !523, inlinedAt: !510)
!534 = !DILocation(line: 157, column: 3, scope: !523, inlinedAt: !510)
!535 = !DILocation(line: 158, column: 11, scope: !523, inlinedAt: !510)
!536 = !DILocation(line: 158, column: 17, scope: !523, inlinedAt: !510)
!537 = !DILocation(line: 164, column: 2, scope: !538, inlinedAt: !539)
!538 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!539 = !DILocation(line: 160, column: 2, scope: !516, inlinedAt: !510)
!540 = !DILocation(line: 166, column: 2, scope: !538, inlinedAt: !539)
!541 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !14, file: !14, line: 86, type: !542, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!542 = !DISubroutineType(types: !543)
!543 = !{!15, !474}
!544 = !DILocation(line: 86, column: 55, scope: !541)
!545 = !DILocalVariable(name: "self", arg: 1, scope: !541, file: !14, line: 86, type: !474)
!546 = !DILocation(line: 86, column: 36, scope: !541)
!547 = !DILocation(line: 86, column: 71, scope: !548, inlinedAt: !544)
!548 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!549 = !DILocation(line: 138, column: 46, scope: !548, inlinedAt: !544)
!550 = !DILocation(line: 138, column: 72, scope: !548, inlinedAt: !544)
!551 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !14, file: !14, line: 87, type: !552, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!552 = !DISubroutineType(types: !553)
!553 = !{!6, !474}
!554 = !DILocation(line: 87, column: 51, scope: !551)
!555 = !DILocalVariable(name: "self", arg: 1, scope: !551, file: !14, line: 87, type: !474)
!556 = !DILocation(line: 87, column: 32, scope: !551)
!557 = !DILocation(line: 87, column: 64, scope: !558, inlinedAt: !554)
!558 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!559 = !DILocation(line: 139, column: 41, scope: !558, inlinedAt: !554)
!560 = !DILocation(line: 139, column: 65, scope: !558, inlinedAt: !554)
!561 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !14, file: !14, line: 88, type: !562, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!562 = !DISubroutineType(types: !563)
!563 = !{!20, !474}
!564 = !DILocation(line: 88, column: 49, scope: !561)
!565 = !DILocalVariable(name: "self", arg: 1, scope: !561, file: !14, line: 88, type: !474)
!566 = !DILocation(line: 88, column: 30, scope: !561)
!567 = !DILocation(line: 88, column: 63, scope: !568, inlinedAt: !564)
!568 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!569 = !DILocation(line: 140, column: 41, scope: !568, inlinedAt: !564)
!570 = !DILocation(line: 140, column: 64, scope: !568, inlinedAt: !564)
!571 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !14, file: !14, line: 89, type: !572, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!572 = !DISubroutineType(types: !573)
!573 = !{!52, !474}
!574 = !DILocation(line: 89, column: 50, scope: !571)
!575 = !DILocalVariable(name: "self", arg: 1, scope: !571, file: !14, line: 89, type: !474)
!576 = !DILocation(line: 89, column: 31, scope: !571)
!577 = !DILocation(line: 89, column: 56, scope: !571)
!578 = !DILocation(line: 89, column: 51, scope: !571)
!579 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !14, file: !14, line: 95, type: !580, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!580 = !DISubroutineType(types: !581)
!581 = !{null, !582, !256}
!582 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !583, size: 64, align: 64, dwarfAddressSpace: 0)
!583 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !14, file: !14, line: 93, baseType: !23, align: 2)
!584 = !DILocation(line: 96, column: 1, scope: !579)
!585 = !DILocalVariable(name: "self", arg: 1, scope: !579, file: !14, line: 95, type: !582)
!586 = !DILocation(line: 95, column: 30, scope: !579)
!587 = !DILocalVariable(name: "seed", arg: 2, scope: !579, file: !14, line: 95, type: !256)
!588 = !DILocation(line: 95, column: 44, scope: !579)
!589 = !DILocation(line: 97, column: 3, scope: !579)
!590 = !DILocalVariable(name: "return_value", scope: !591, file: !14, line: 10, type: !23, align: 2)
!591 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!592 = !DILocation(line: 10, column: 8, scope: !591, inlinedAt: !593)
!593 = !DILocation(line: 97, column: 11, scope: !579)
!594 = !DILocation(line: 342, column: 11, scope: !595, inlinedAt: !596)
!595 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!596 = !DILocation(line: 11, column: 16, scope: !591, inlinedAt: !593)
!597 = !DILocation(line: 11, column: 2, scope: !591, inlinedAt: !593)
!598 = !DILocation(line: 12, column: 9, scope: !591, inlinedAt: !593)
!599 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !14, file: !14, line: 100, type: !600, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!600 = !DISubroutineType(types: !601)
!601 = !{!52, !582}
!602 = !DILocation(line: 101, column: 1, scope: !599)
!603 = !DILocalVariable(name: "self", arg: 1, scope: !599, file: !14, line: 100, type: !582)
!604 = !DILocation(line: 100, column: 31, scope: !599)
!605 = !DILocalVariable(name: "s", scope: !599, file: !14, line: 102, type: !606, align: 8)
!606 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!607 = !DILocation(line: 102, column: 10, scope: !599)
!608 = !DILocation(line: 102, column: 15, scope: !599)
!609 = !DILocalVariable(name: "result", scope: !599, file: !14, line: 103, type: !52, align: 1)
!610 = !DILocation(line: 103, column: 7, scope: !599)
!611 = !DILocation(line: 103, column: 24, scope: !599)
!612 = !DILocation(line: 103, column: 17, scope: !599)
!613 = !DILocation(line: 104, column: 3, scope: !599)
!614 = !DILocation(line: 104, column: 8, scope: !599)
!615 = !DILocation(line: 104, column: 7, scope: !599)
!616 = !DILocation(line: 105, column: 9, scope: !599)
!617 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !14, file: !14, line: 108, type: !580, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!618 = !DILocation(line: 108, column: 65, scope: !617)
!619 = !DILocalVariable(name: "self", arg: 1, scope: !617, file: !14, line: 108, type: !582)
!620 = !DILocation(line: 108, column: 32, scope: !617)
!621 = !DILocalVariable(name: "bytes", arg: 2, scope: !617, file: !14, line: 108, type: !256)
!622 = !DILocation(line: 108, column: 46, scope: !617)
!623 = !DILocalVariable(name: "len", scope: !624, file: !14, line: 146, type: !261, align: 8)
!624 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!625 = !DILocation(line: 146, column: 6, scope: !624, inlinedAt: !618)
!626 = !DILocation(line: 146, column: 12, scope: !624, inlinedAt: !618)
!627 = !DILocation(line: 148, column: 2, scope: !624, inlinedAt: !618)
!628 = !DILocation(line: 148, column: 9, scope: !629, inlinedAt: !618)
!629 = distinct !DILexicalBlock(scope: !624, file: !2, line: 148, column: 2)
!630 = !DILocalVariable(name: "value", scope: !631, file: !14, line: 150, type: !52, align: 1)
!631 = distinct !DILexicalBlock(scope: !629, file: !2, line: 149, column: 2)
!632 = !DILocation(line: 150, column: 7, scope: !631, inlinedAt: !618)
!633 = !DILocation(line: 108, column: 88, scope: !631, inlinedAt: !618)
!634 = !DILocation(line: 150, column: 15, scope: !631, inlinedAt: !618)
!635 = !DILocation(line: 151, column: 7, scope: !631, inlinedAt: !618)
!636 = !DILocation(line: 153, column: 33, scope: !637, inlinedAt: !618)
!637 = distinct !DILexicalBlock(scope: !631, file: !2, line: 152, column: 3)
!638 = !DILocation(line: 153, column: 4, scope: !637, inlinedAt: !618)
!639 = !DILocation(line: 153, column: 10, scope: !637, inlinedAt: !618)
!640 = !DILocation(line: 154, column: 10, scope: !637, inlinedAt: !618)
!641 = !DILocation(line: 156, column: 3, scope: !631, inlinedAt: !618)
!642 = !DILocation(line: 157, column: 3, scope: !631, inlinedAt: !618)
!643 = !DILocation(line: 158, column: 11, scope: !631, inlinedAt: !618)
!644 = !DILocation(line: 158, column: 17, scope: !631, inlinedAt: !618)
!645 = !DILocation(line: 164, column: 2, scope: !646, inlinedAt: !647)
!646 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!647 = !DILocation(line: 160, column: 2, scope: !624, inlinedAt: !618)
!648 = !DILocation(line: 166, column: 2, scope: !646, inlinedAt: !647)
!649 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !14, file: !14, line: 109, type: !650, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!650 = !DISubroutineType(types: !651)
!651 = !{!15, !582}
!652 = !DILocation(line: 109, column: 55, scope: !649)
!653 = !DILocalVariable(name: "self", arg: 1, scope: !649, file: !14, line: 109, type: !582)
!654 = !DILocation(line: 109, column: 36, scope: !649)
!655 = !DILocation(line: 109, column: 71, scope: !656, inlinedAt: !652)
!656 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!657 = !DILocation(line: 138, column: 46, scope: !656, inlinedAt: !652)
!658 = !DILocation(line: 138, column: 72, scope: !656, inlinedAt: !652)
!659 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !14, file: !14, line: 110, type: !660, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!660 = !DISubroutineType(types: !661)
!661 = !{!6, !582}
!662 = !DILocation(line: 110, column: 51, scope: !659)
!663 = !DILocalVariable(name: "self", arg: 1, scope: !659, file: !14, line: 110, type: !582)
!664 = !DILocation(line: 110, column: 32, scope: !659)
!665 = !DILocation(line: 110, column: 64, scope: !666, inlinedAt: !662)
!666 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!667 = !DILocation(line: 139, column: 41, scope: !666, inlinedAt: !662)
!668 = !DILocation(line: 139, column: 65, scope: !666, inlinedAt: !662)
!669 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !14, file: !14, line: 111, type: !670, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!670 = !DISubroutineType(types: !671)
!671 = !{!20, !582}
!672 = !DILocation(line: 111, column: 49, scope: !669)
!673 = !DILocalVariable(name: "self", arg: 1, scope: !669, file: !14, line: 111, type: !582)
!674 = !DILocation(line: 111, column: 30, scope: !669)
!675 = !DILocation(line: 111, column: 63, scope: !676, inlinedAt: !672)
!676 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!677 = !DILocation(line: 140, column: 41, scope: !676, inlinedAt: !672)
!678 = !DILocation(line: 140, column: 64, scope: !676, inlinedAt: !672)
!679 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !14, file: !14, line: 112, type: !680, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!680 = !DISubroutineType(types: !681)
!681 = !{!23, !582}
!682 = !DILocation(line: 112, column: 53, scope: !679)
!683 = !DILocalVariable(name: "self", arg: 1, scope: !679, file: !14, line: 112, type: !582)
!684 = !DILocation(line: 112, column: 34, scope: !679)
!685 = !DILocation(line: 112, column: 68, scope: !686, inlinedAt: !682)
!686 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!687 = !DILocation(line: 141, column: 44, scope: !686, inlinedAt: !682)
!688 = !DILocation(line: 141, column: 68, scope: !686, inlinedAt: !682)
!689 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !34, file: !34, line: 12, type: !690, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!690 = !DISubroutineType(types: !691)
!691 = !{null, !692, !256}
!692 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !693, size: 64, align: 64, dwarfAddressSpace: 0)
!693 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !34, file: !34, line: 10, baseType: !15, align: 16)
!694 = !DILocation(line: 13, column: 1, scope: !689)
!695 = !DILocalVariable(name: "self", arg: 1, scope: !689, file: !34, line: 12, type: !692)
!696 = !DILocation(line: 12, column: 31, scope: !689)
!697 = !DILocalVariable(name: "seed", arg: 2, scope: !689, file: !34, line: 12, type: !256)
!698 = !DILocation(line: 12, column: 45, scope: !689)
!699 = !DILocation(line: 14, column: 3, scope: !689)
!700 = !DILocalVariable(name: "return_value", scope: !701, file: !34, line: 10, type: !15, align: 16)
!701 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!702 = !DILocation(line: 10, column: 8, scope: !701, inlinedAt: !703)
!703 = !DILocation(line: 14, column: 33, scope: !689)
!704 = !DILocation(line: 342, column: 11, scope: !705, inlinedAt: !706)
!705 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!706 = !DILocation(line: 11, column: 16, scope: !701, inlinedAt: !703)
!707 = !DILocation(line: 11, column: 2, scope: !701, inlinedAt: !703)
!708 = !DILocation(line: 12, column: 9, scope: !701, inlinedAt: !703)
!709 = !DILocation(line: 14, column: 11, scope: !689)
!710 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !34, file: !34, line: 20, type: !690, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!711 = !DILocation(line: 21, column: 1, scope: !710)
!712 = !DILocalVariable(name: "self", arg: 1, scope: !710, file: !34, line: 20, type: !692)
!713 = !DILocation(line: 20, column: 33, scope: !710)
!714 = !DILocalVariable(name: "bytes", arg: 2, scope: !710, file: !34, line: 20, type: !256)
!715 = !DILocation(line: 20, column: 47, scope: !710)
!716 = !DILocation(line: 18, column: 11, scope: !717)
!717 = distinct !DILexicalBlock(scope: !710, file: !34, line: 21, column: 1)
!718 = !DILocalVariable(name: "len", scope: !719, file: !34, line: 146, type: !261, align: 8)
!719 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!720 = !DILocation(line: 146, column: 6, scope: !719, inlinedAt: !721)
!721 = !DILocation(line: 22, column: 2, scope: !710)
!722 = !DILocation(line: 146, column: 12, scope: !719, inlinedAt: !721)
!723 = !DILocation(line: 148, column: 2, scope: !719, inlinedAt: !721)
!724 = !DILocation(line: 148, column: 9, scope: !725, inlinedAt: !721)
!725 = distinct !DILexicalBlock(scope: !719, file: !2, line: 148, column: 2)
!726 = !DILocalVariable(name: "value", scope: !727, file: !34, line: 150, type: !6, align: 8)
!727 = distinct !DILexicalBlock(scope: !725, file: !2, line: 149, column: 2)
!728 = !DILocation(line: 150, column: 7, scope: !727, inlinedAt: !721)
!729 = !DILocation(line: 22, column: 25, scope: !727, inlinedAt: !721)
!730 = !DILocation(line: 150, column: 15, scope: !727, inlinedAt: !721)
!731 = !DILocation(line: 151, column: 7, scope: !727, inlinedAt: !721)
!732 = !DILocation(line: 153, column: 33, scope: !733, inlinedAt: !721)
!733 = distinct !DILexicalBlock(scope: !727, file: !2, line: 152, column: 3)
!734 = !DILocation(line: 153, column: 4, scope: !733, inlinedAt: !721)
!735 = !DILocation(line: 153, column: 10, scope: !733, inlinedAt: !721)
!736 = !DILocation(line: 154, column: 10, scope: !733, inlinedAt: !721)
!737 = !DILocation(line: 156, column: 3, scope: !727, inlinedAt: !721)
!738 = !DILocation(line: 157, column: 3, scope: !727, inlinedAt: !721)
!739 = !DILocation(line: 158, column: 11, scope: !727, inlinedAt: !721)
!740 = !DILocation(line: 158, column: 17, scope: !727, inlinedAt: !721)
!741 = !DILocation(line: 164, column: 2, scope: !742, inlinedAt: !743)
!742 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!743 = !DILocation(line: 160, column: 2, scope: !719, inlinedAt: !721)
!744 = !DILocation(line: 166, column: 2, scope: !742, inlinedAt: !743)
!745 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !34, file: !34, line: 25, type: !746, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!746 = !DISubroutineType(types: !747)
!747 = !{!6, !692}
!748 = !DILocation(line: 26, column: 1, scope: !745)
!749 = !DILocalVariable(name: "self", arg: 1, scope: !745, file: !34, line: 25, type: !692)
!750 = !DILocation(line: 25, column: 33, scope: !745)
!751 = !DILocalVariable(name: "s", scope: !745, file: !34, line: 27, type: !284, align: 8)
!752 = !DILocation(line: 27, column: 11, scope: !745)
!753 = !DILocation(line: 27, column: 16, scope: !745)
!754 = !DILocalVariable(name: "result", scope: !745, file: !34, line: 28, type: !6, align: 8)
!755 = !DILocation(line: 28, column: 8, scope: !745)
!756 = !DILocation(line: 28, column: 26, scope: !745)
!757 = !DILocation(line: 28, column: 18, scope: !745)
!758 = !DILocation(line: 29, column: 3, scope: !745)
!759 = !DILocation(line: 29, column: 2, scope: !745)
!760 = !DILocation(line: 30, column: 9, scope: !745)
!761 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !34, file: !34, line: 33, type: !762, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!762 = !DISubroutineType(types: !763)
!763 = !{!15, !692}
!764 = !DILocation(line: 33, column: 56, scope: !761)
!765 = !DILocalVariable(name: "self", arg: 1, scope: !761, file: !34, line: 33, type: !692)
!766 = !DILocation(line: 33, column: 37, scope: !761)
!767 = !DILocation(line: 33, column: 72, scope: !768, inlinedAt: !764)
!768 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!769 = !DILocation(line: 138, column: 46, scope: !768, inlinedAt: !764)
!770 = !DILocation(line: 138, column: 72, scope: !768, inlinedAt: !764)
!771 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !34, file: !34, line: 34, type: !772, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!772 = !DISubroutineType(types: !773)
!773 = !{!20, !692}
!774 = !DILocation(line: 34, column: 50, scope: !771)
!775 = !DILocalVariable(name: "self", arg: 1, scope: !771, file: !34, line: 34, type: !692)
!776 = !DILocation(line: 34, column: 31, scope: !771)
!777 = !DILocation(line: 34, column: 56, scope: !771)
!778 = !DILocation(line: 34, column: 51, scope: !771)
!779 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !34, file: !34, line: 35, type: !780, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!780 = !DISubroutineType(types: !781)
!781 = !{!23, !692}
!782 = !DILocation(line: 35, column: 54, scope: !779)
!783 = !DILocalVariable(name: "self", arg: 1, scope: !779, file: !34, line: 35, type: !692)
!784 = !DILocation(line: 35, column: 35, scope: !779)
!785 = !DILocation(line: 35, column: 62, scope: !779)
!786 = !DILocation(line: 35, column: 55, scope: !779)
!787 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !34, file: !34, line: 36, type: !788, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!788 = !DISubroutineType(types: !789)
!789 = !{!52, !692}
!790 = !DILocation(line: 36, column: 51, scope: !787)
!791 = !DILocalVariable(name: "self", arg: 1, scope: !787, file: !34, line: 36, type: !692)
!792 = !DILocation(line: 36, column: 32, scope: !787)
!793 = !DILocation(line: 36, column: 57, scope: !787)
!794 = !DILocation(line: 36, column: 52, scope: !787)
!795 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !34, file: !34, line: 45, type: !796, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !798, !256}
!798 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !799, size: 64, align: 64, dwarfAddressSpace: 0)
!799 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !34, file: !34, line: 43, baseType: !6, align: 8)
!800 = !DILocation(line: 46, column: 1, scope: !795)
!801 = !DILocalVariable(name: "self", arg: 1, scope: !795, file: !34, line: 45, type: !798)
!802 = !DILocation(line: 45, column: 30, scope: !795)
!803 = !DILocalVariable(name: "seed", arg: 2, scope: !795, file: !34, line: 45, type: !256)
!804 = !DILocation(line: 45, column: 44, scope: !795)
!805 = !DILocation(line: 47, column: 3, scope: !795)
!806 = !DILocalVariable(name: "return_value", scope: !807, file: !34, line: 10, type: !6, align: 8)
!807 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!808 = !DILocation(line: 10, column: 8, scope: !807, inlinedAt: !809)
!809 = !DILocation(line: 47, column: 11, scope: !795)
!810 = !DILocation(line: 342, column: 11, scope: !811, inlinedAt: !812)
!811 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!812 = !DILocation(line: 11, column: 16, scope: !807, inlinedAt: !809)
!813 = !DILocation(line: 11, column: 2, scope: !807, inlinedAt: !809)
!814 = !DILocation(line: 12, column: 9, scope: !807, inlinedAt: !809)
!815 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !34, file: !34, line: 53, type: !796, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!816 = !DILocation(line: 54, column: 1, scope: !815)
!817 = !DILocalVariable(name: "self", arg: 1, scope: !815, file: !34, line: 53, type: !798)
!818 = !DILocation(line: 53, column: 32, scope: !815)
!819 = !DILocalVariable(name: "bytes", arg: 2, scope: !815, file: !34, line: 53, type: !256)
!820 = !DILocation(line: 53, column: 46, scope: !815)
!821 = !DILocation(line: 51, column: 11, scope: !822)
!822 = distinct !DILexicalBlock(scope: !815, file: !34, line: 54, column: 1)
!823 = !DILocalVariable(name: "len", scope: !824, file: !34, line: 146, type: !261, align: 8)
!824 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!825 = !DILocation(line: 146, column: 6, scope: !824, inlinedAt: !826)
!826 = !DILocation(line: 55, column: 2, scope: !815)
!827 = !DILocation(line: 146, column: 12, scope: !824, inlinedAt: !826)
!828 = !DILocation(line: 148, column: 2, scope: !824, inlinedAt: !826)
!829 = !DILocation(line: 148, column: 9, scope: !830, inlinedAt: !826)
!830 = distinct !DILexicalBlock(scope: !824, file: !2, line: 148, column: 2)
!831 = !DILocalVariable(name: "value", scope: !832, file: !34, line: 150, type: !20, align: 4)
!832 = distinct !DILexicalBlock(scope: !830, file: !2, line: 149, column: 2)
!833 = !DILocation(line: 150, column: 7, scope: !832, inlinedAt: !826)
!834 = !DILocation(line: 55, column: 25, scope: !832, inlinedAt: !826)
!835 = !DILocation(line: 150, column: 15, scope: !832, inlinedAt: !826)
!836 = !DILocation(line: 151, column: 7, scope: !832, inlinedAt: !826)
!837 = !DILocation(line: 153, column: 33, scope: !838, inlinedAt: !826)
!838 = distinct !DILexicalBlock(scope: !832, file: !2, line: 152, column: 3)
!839 = !DILocation(line: 153, column: 4, scope: !838, inlinedAt: !826)
!840 = !DILocation(line: 153, column: 10, scope: !838, inlinedAt: !826)
!841 = !DILocation(line: 154, column: 10, scope: !838, inlinedAt: !826)
!842 = !DILocation(line: 156, column: 3, scope: !832, inlinedAt: !826)
!843 = !DILocation(line: 157, column: 3, scope: !832, inlinedAt: !826)
!844 = !DILocation(line: 158, column: 11, scope: !832, inlinedAt: !826)
!845 = !DILocation(line: 158, column: 17, scope: !832, inlinedAt: !826)
!846 = !DILocation(line: 164, column: 2, scope: !847, inlinedAt: !848)
!847 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!848 = !DILocation(line: 160, column: 2, scope: !824, inlinedAt: !826)
!849 = !DILocation(line: 166, column: 2, scope: !847, inlinedAt: !848)
!850 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !34, file: !34, line: 58, type: !851, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!851 = !DISubroutineType(types: !852)
!852 = !{!20, !798}
!853 = !DILocation(line: 59, column: 1, scope: !850)
!854 = !DILocalVariable(name: "self", arg: 1, scope: !850, file: !34, line: 58, type: !798)
!855 = !DILocation(line: 58, column: 30, scope: !850)
!856 = !DILocalVariable(name: "s", scope: !850, file: !34, line: 60, type: !390, align: 8)
!857 = !DILocation(line: 60, column: 9, scope: !850)
!858 = !DILocation(line: 60, column: 14, scope: !850)
!859 = !DILocalVariable(name: "result", scope: !850, file: !34, line: 61, type: !20, align: 4)
!860 = !DILocation(line: 61, column: 7, scope: !850)
!861 = !DILocation(line: 61, column: 24, scope: !850)
!862 = !DILocation(line: 61, column: 17, scope: !850)
!863 = !DILocation(line: 62, column: 3, scope: !850)
!864 = !DILocation(line: 62, column: 2, scope: !850)
!865 = !DILocation(line: 63, column: 9, scope: !850)
!866 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !34, file: !34, line: 66, type: !867, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!867 = !DISubroutineType(types: !868)
!868 = !{!15, !798}
!869 = !DILocation(line: 66, column: 55, scope: !866)
!870 = !DILocalVariable(name: "self", arg: 1, scope: !866, file: !34, line: 66, type: !798)
!871 = !DILocation(line: 66, column: 36, scope: !866)
!872 = !DILocation(line: 66, column: 71, scope: !873, inlinedAt: !869)
!873 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!874 = !DILocation(line: 138, column: 46, scope: !873, inlinedAt: !869)
!875 = !DILocation(line: 138, column: 72, scope: !873, inlinedAt: !869)
!876 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !34, file: !34, line: 67, type: !877, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!877 = !DISubroutineType(types: !878)
!878 = !{!6, !798}
!879 = !DILocation(line: 67, column: 51, scope: !876)
!880 = !DILocalVariable(name: "self", arg: 1, scope: !876, file: !34, line: 67, type: !798)
!881 = !DILocation(line: 67, column: 32, scope: !876)
!882 = !DILocation(line: 67, column: 64, scope: !883, inlinedAt: !879)
!883 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!884 = !DILocation(line: 139, column: 41, scope: !883, inlinedAt: !879)
!885 = !DILocation(line: 139, column: 65, scope: !883, inlinedAt: !879)
!886 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !34, file: !34, line: 68, type: !887, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!887 = !DISubroutineType(types: !888)
!888 = !{!23, !798}
!889 = !DILocation(line: 68, column: 53, scope: !886)
!890 = !DILocalVariable(name: "self", arg: 1, scope: !886, file: !34, line: 68, type: !798)
!891 = !DILocation(line: 68, column: 34, scope: !886)
!892 = !DILocation(line: 68, column: 61, scope: !886)
!893 = !DILocation(line: 68, column: 54, scope: !886)
!894 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !34, file: !34, line: 69, type: !895, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!895 = !DISubroutineType(types: !896)
!896 = !{!52, !798}
!897 = !DILocation(line: 69, column: 50, scope: !894)
!898 = !DILocalVariable(name: "self", arg: 1, scope: !894, file: !34, line: 69, type: !798)
!899 = !DILocation(line: 69, column: 31, scope: !894)
!900 = !DILocation(line: 69, column: 56, scope: !894)
!901 = !DILocation(line: 69, column: 51, scope: !894)
!902 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !34, file: !34, line: 76, type: !903, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!903 = !DISubroutineType(types: !904)
!904 = !{null, !905, !256}
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !906, size: 64, align: 64, dwarfAddressSpace: 0)
!906 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !34, file: !34, line: 74, baseType: !20, align: 4)
!907 = !DILocation(line: 77, column: 1, scope: !902)
!908 = !DILocalVariable(name: "self", arg: 1, scope: !902, file: !34, line: 76, type: !905)
!909 = !DILocation(line: 76, column: 30, scope: !902)
!910 = !DILocalVariable(name: "seed", arg: 2, scope: !902, file: !34, line: 76, type: !256)
!911 = !DILocation(line: 76, column: 44, scope: !902)
!912 = !DILocation(line: 78, column: 3, scope: !902)
!913 = !DILocalVariable(name: "return_value", scope: !914, file: !34, line: 10, type: !20, align: 4)
!914 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!915 = !DILocation(line: 10, column: 8, scope: !914, inlinedAt: !916)
!916 = !DILocation(line: 78, column: 11, scope: !902)
!917 = !DILocation(line: 342, column: 11, scope: !918, inlinedAt: !919)
!918 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!919 = !DILocation(line: 11, column: 16, scope: !914, inlinedAt: !916)
!920 = !DILocation(line: 11, column: 2, scope: !914, inlinedAt: !916)
!921 = !DILocation(line: 12, column: 9, scope: !914, inlinedAt: !916)
!922 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !34, file: !34, line: 81, type: !923, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!923 = !DISubroutineType(types: !924)
!924 = !{!23, !905}
!925 = !DILocation(line: 82, column: 1, scope: !922)
!926 = !DILocalVariable(name: "self", arg: 1, scope: !922, file: !34, line: 81, type: !905)
!927 = !DILocation(line: 81, column: 34, scope: !922)
!928 = !DILocalVariable(name: "s", scope: !922, file: !34, line: 83, type: !498, align: 8)
!929 = !DILocation(line: 83, column: 8, scope: !922)
!930 = !DILocation(line: 83, column: 13, scope: !922)
!931 = !DILocalVariable(name: "result", scope: !922, file: !34, line: 84, type: !23, align: 2)
!932 = !DILocation(line: 84, column: 9, scope: !922)
!933 = !DILocation(line: 84, column: 28, scope: !922)
!934 = !DILocation(line: 84, column: 19, scope: !922)
!935 = !DILocation(line: 85, column: 3, scope: !922)
!936 = !DILocation(line: 85, column: 2, scope: !922)
!937 = !DILocation(line: 86, column: 9, scope: !922)
!938 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !34, file: !34, line: 92, type: !903, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!939 = !DILocation(line: 92, column: 65, scope: !938)
!940 = !DILocalVariable(name: "self", arg: 1, scope: !938, file: !34, line: 92, type: !905)
!941 = !DILocation(line: 92, column: 32, scope: !938)
!942 = !DILocalVariable(name: "bytes", arg: 2, scope: !938, file: !34, line: 92, type: !256)
!943 = !DILocation(line: 92, column: 46, scope: !938)
!944 = !DILocation(line: 90, column: 11, scope: !945)
!945 = distinct !DILexicalBlock(scope: !938, file: !34, line: 92, column: 65)
!946 = !DILocalVariable(name: "len", scope: !947, file: !34, line: 146, type: !261, align: 8)
!947 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!948 = !DILocation(line: 146, column: 6, scope: !947, inlinedAt: !939)
!949 = !DILocation(line: 146, column: 12, scope: !947, inlinedAt: !939)
!950 = !DILocation(line: 148, column: 2, scope: !947, inlinedAt: !939)
!951 = !DILocation(line: 148, column: 9, scope: !952, inlinedAt: !939)
!952 = distinct !DILexicalBlock(scope: !947, file: !2, line: 148, column: 2)
!953 = !DILocalVariable(name: "value", scope: !954, file: !34, line: 150, type: !23, align: 2)
!954 = distinct !DILexicalBlock(scope: !952, file: !2, line: 149, column: 2)
!955 = !DILocation(line: 150, column: 7, scope: !954, inlinedAt: !939)
!956 = !DILocation(line: 92, column: 88, scope: !954, inlinedAt: !939)
!957 = !DILocation(line: 150, column: 15, scope: !954, inlinedAt: !939)
!958 = !DILocation(line: 151, column: 7, scope: !954, inlinedAt: !939)
!959 = !DILocation(line: 153, column: 33, scope: !960, inlinedAt: !939)
!960 = distinct !DILexicalBlock(scope: !954, file: !2, line: 152, column: 3)
!961 = !DILocation(line: 153, column: 4, scope: !960, inlinedAt: !939)
!962 = !DILocation(line: 153, column: 10, scope: !960, inlinedAt: !939)
!963 = !DILocation(line: 154, column: 10, scope: !960, inlinedAt: !939)
!964 = !DILocation(line: 156, column: 3, scope: !954, inlinedAt: !939)
!965 = !DILocation(line: 157, column: 3, scope: !954, inlinedAt: !939)
!966 = !DILocation(line: 158, column: 11, scope: !954, inlinedAt: !939)
!967 = !DILocation(line: 158, column: 17, scope: !954, inlinedAt: !939)
!968 = !DILocation(line: 164, column: 2, scope: !969, inlinedAt: !970)
!969 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!970 = !DILocation(line: 160, column: 2, scope: !947, inlinedAt: !939)
!971 = !DILocation(line: 166, column: 2, scope: !969, inlinedAt: !970)
!972 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !34, file: !34, line: 93, type: !973, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!973 = !DISubroutineType(types: !974)
!974 = !{!15, !905}
!975 = !DILocation(line: 93, column: 55, scope: !972)
!976 = !DILocalVariable(name: "self", arg: 1, scope: !972, file: !34, line: 93, type: !905)
!977 = !DILocation(line: 93, column: 36, scope: !972)
!978 = !DILocation(line: 93, column: 71, scope: !979, inlinedAt: !975)
!979 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!980 = !DILocation(line: 138, column: 46, scope: !979, inlinedAt: !975)
!981 = !DILocation(line: 138, column: 72, scope: !979, inlinedAt: !975)
!982 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !34, file: !34, line: 94, type: !983, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!983 = !DISubroutineType(types: !984)
!984 = !{!6, !905}
!985 = !DILocation(line: 94, column: 51, scope: !982)
!986 = !DILocalVariable(name: "self", arg: 1, scope: !982, file: !34, line: 94, type: !905)
!987 = !DILocation(line: 94, column: 32, scope: !982)
!988 = !DILocation(line: 94, column: 64, scope: !989, inlinedAt: !985)
!989 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!990 = !DILocation(line: 139, column: 41, scope: !989, inlinedAt: !985)
!991 = !DILocation(line: 139, column: 65, scope: !989, inlinedAt: !985)
!992 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !34, file: !34, line: 95, type: !993, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!993 = !DISubroutineType(types: !994)
!994 = !{!20, !905}
!995 = !DILocation(line: 95, column: 49, scope: !992)
!996 = !DILocalVariable(name: "self", arg: 1, scope: !992, file: !34, line: 95, type: !905)
!997 = !DILocation(line: 95, column: 30, scope: !992)
!998 = !DILocation(line: 95, column: 63, scope: !999, inlinedAt: !995)
!999 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1000 = !DILocation(line: 140, column: 41, scope: !999, inlinedAt: !995)
!1001 = !DILocation(line: 140, column: 64, scope: !999, inlinedAt: !995)
!1002 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !34, file: !34, line: 96, type: !1003, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!52, !905}
!1005 = !DILocation(line: 96, column: 50, scope: !1002)
!1006 = !DILocalVariable(name: "self", arg: 1, scope: !1002, file: !34, line: 96, type: !905)
!1007 = !DILocation(line: 96, column: 31, scope: !1002)
!1008 = !DILocation(line: 96, column: 56, scope: !1002)
!1009 = !DILocation(line: 96, column: 51, scope: !1002)
!1010 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !34, file: !34, line: 102, type: !1011, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{null, !1013, !256}
!1013 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !1014, size: 64, align: 64, dwarfAddressSpace: 0)
!1014 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !34, file: !34, line: 100, baseType: !23, align: 2)
!1015 = !DILocation(line: 103, column: 1, scope: !1010)
!1016 = !DILocalVariable(name: "self", arg: 1, scope: !1010, file: !34, line: 102, type: !1013)
!1017 = !DILocation(line: 102, column: 30, scope: !1010)
!1018 = !DILocalVariable(name: "seed", arg: 2, scope: !1010, file: !34, line: 102, type: !256)
!1019 = !DILocation(line: 102, column: 44, scope: !1010)
!1020 = !DILocation(line: 104, column: 3, scope: !1010)
!1021 = !DILocalVariable(name: "return_value", scope: !1022, file: !34, line: 10, type: !23, align: 2)
!1022 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1023 = !DILocation(line: 10, column: 8, scope: !1022, inlinedAt: !1024)
!1024 = !DILocation(line: 104, column: 11, scope: !1010)
!1025 = !DILocation(line: 342, column: 11, scope: !1026, inlinedAt: !1027)
!1026 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1027 = !DILocation(line: 11, column: 16, scope: !1022, inlinedAt: !1024)
!1028 = !DILocation(line: 11, column: 2, scope: !1022, inlinedAt: !1024)
!1029 = !DILocation(line: 12, column: 9, scope: !1022, inlinedAt: !1024)
!1030 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !34, file: !34, line: 107, type: !1031, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1031 = !DISubroutineType(types: !1032)
!1032 = !{!52, !1013}
!1033 = !DILocation(line: 108, column: 1, scope: !1030)
!1034 = !DILocalVariable(name: "self", arg: 1, scope: !1030, file: !34, line: 107, type: !1013)
!1035 = !DILocation(line: 107, column: 31, scope: !1030)
!1036 = !DILocalVariable(name: "s", scope: !1030, file: !34, line: 109, type: !606, align: 8)
!1037 = !DILocation(line: 109, column: 10, scope: !1030)
!1038 = !DILocation(line: 109, column: 15, scope: !1030)
!1039 = !DILocalVariable(name: "result", scope: !1030, file: !34, line: 110, type: !52, align: 1)
!1040 = !DILocation(line: 110, column: 7, scope: !1030)
!1041 = !DILocation(line: 110, column: 24, scope: !1030)
!1042 = !DILocation(line: 110, column: 17, scope: !1030)
!1043 = !DILocation(line: 111, column: 3, scope: !1030)
!1044 = !DILocation(line: 111, column: 2, scope: !1030)
!1045 = !DILocation(line: 112, column: 9, scope: !1030)
!1046 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !34, file: !34, line: 115, type: !1011, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1047 = !DILocation(line: 115, column: 65, scope: !1046)
!1048 = !DILocalVariable(name: "self", arg: 1, scope: !1046, file: !34, line: 115, type: !1013)
!1049 = !DILocation(line: 115, column: 32, scope: !1046)
!1050 = !DILocalVariable(name: "bytes", arg: 2, scope: !1046, file: !34, line: 115, type: !256)
!1051 = !DILocation(line: 115, column: 46, scope: !1046)
!1052 = !DILocalVariable(name: "len", scope: !1053, file: !34, line: 146, type: !261, align: 8)
!1053 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1054 = !DILocation(line: 146, column: 6, scope: !1053, inlinedAt: !1047)
!1055 = !DILocation(line: 146, column: 12, scope: !1053, inlinedAt: !1047)
!1056 = !DILocation(line: 148, column: 2, scope: !1053, inlinedAt: !1047)
!1057 = !DILocation(line: 148, column: 9, scope: !1058, inlinedAt: !1047)
!1058 = distinct !DILexicalBlock(scope: !1053, file: !2, line: 148, column: 2)
!1059 = !DILocalVariable(name: "value", scope: !1060, file: !34, line: 150, type: !52, align: 1)
!1060 = distinct !DILexicalBlock(scope: !1058, file: !2, line: 149, column: 2)
!1061 = !DILocation(line: 150, column: 7, scope: !1060, inlinedAt: !1047)
!1062 = !DILocation(line: 115, column: 88, scope: !1060, inlinedAt: !1047)
!1063 = !DILocation(line: 150, column: 15, scope: !1060, inlinedAt: !1047)
!1064 = !DILocation(line: 151, column: 7, scope: !1060, inlinedAt: !1047)
!1065 = !DILocation(line: 153, column: 33, scope: !1066, inlinedAt: !1047)
!1066 = distinct !DILexicalBlock(scope: !1060, file: !2, line: 152, column: 3)
!1067 = !DILocation(line: 153, column: 4, scope: !1066, inlinedAt: !1047)
!1068 = !DILocation(line: 153, column: 10, scope: !1066, inlinedAt: !1047)
!1069 = !DILocation(line: 154, column: 10, scope: !1066, inlinedAt: !1047)
!1070 = !DILocation(line: 156, column: 3, scope: !1060, inlinedAt: !1047)
!1071 = !DILocation(line: 157, column: 3, scope: !1060, inlinedAt: !1047)
!1072 = !DILocation(line: 158, column: 11, scope: !1060, inlinedAt: !1047)
!1073 = !DILocation(line: 158, column: 17, scope: !1060, inlinedAt: !1047)
!1074 = !DILocation(line: 164, column: 2, scope: !1075, inlinedAt: !1076)
!1075 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1076 = !DILocation(line: 160, column: 2, scope: !1053, inlinedAt: !1047)
!1077 = !DILocation(line: 166, column: 2, scope: !1075, inlinedAt: !1076)
!1078 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !34, file: !34, line: 116, type: !1079, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1079 = !DISubroutineType(types: !1080)
!1080 = !{!15, !1013}
!1081 = !DILocation(line: 116, column: 55, scope: !1078)
!1082 = !DILocalVariable(name: "self", arg: 1, scope: !1078, file: !34, line: 116, type: !1013)
!1083 = !DILocation(line: 116, column: 36, scope: !1078)
!1084 = !DILocation(line: 116, column: 71, scope: !1085, inlinedAt: !1081)
!1085 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1086 = !DILocation(line: 138, column: 46, scope: !1085, inlinedAt: !1081)
!1087 = !DILocation(line: 138, column: 72, scope: !1085, inlinedAt: !1081)
!1088 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !34, file: !34, line: 117, type: !1089, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1089 = !DISubroutineType(types: !1090)
!1090 = !{!6, !1013}
!1091 = !DILocation(line: 117, column: 51, scope: !1088)
!1092 = !DILocalVariable(name: "self", arg: 1, scope: !1088, file: !34, line: 117, type: !1013)
!1093 = !DILocation(line: 117, column: 32, scope: !1088)
!1094 = !DILocation(line: 117, column: 64, scope: !1095, inlinedAt: !1091)
!1095 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1096 = !DILocation(line: 139, column: 41, scope: !1095, inlinedAt: !1091)
!1097 = !DILocation(line: 139, column: 65, scope: !1095, inlinedAt: !1091)
!1098 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !34, file: !34, line: 118, type: !1099, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!20, !1013}
!1101 = !DILocation(line: 118, column: 49, scope: !1098)
!1102 = !DILocalVariable(name: "self", arg: 1, scope: !1098, file: !34, line: 118, type: !1013)
!1103 = !DILocation(line: 118, column: 30, scope: !1098)
!1104 = !DILocation(line: 118, column: 63, scope: !1105, inlinedAt: !1101)
!1105 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1106 = !DILocation(line: 140, column: 41, scope: !1105, inlinedAt: !1101)
!1107 = !DILocation(line: 140, column: 64, scope: !1105, inlinedAt: !1101)
!1108 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !34, file: !34, line: 119, type: !1109, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1109 = !DISubroutineType(types: !1110)
!1110 = !{!23, !1013}
!1111 = !DILocation(line: 119, column: 53, scope: !1108)
!1112 = !DILocalVariable(name: "self", arg: 1, scope: !1108, file: !34, line: 119, type: !1013)
!1113 = !DILocation(line: 119, column: 34, scope: !1108)
!1114 = !DILocation(line: 119, column: 68, scope: !1115, inlinedAt: !1111)
!1115 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1116 = !DILocation(line: 141, column: 44, scope: !1115, inlinedAt: !1111)
!1117 = !DILocation(line: 141, column: 68, scope: !1115, inlinedAt: !1111)
!1118 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !43, file: !43, line: 17, type: !1119, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1119 = !DISubroutineType(types: !1120)
!1120 = !{null, !1121, !256}
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !1122, size: 64, align: 64, dwarfAddressSpace: 0)
!1122 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !43, file: !43, line: 11, size: 512, align: 128, elements: !1123, identifier: "std.math.random.Msws128Random")
!1123 = !{!1124, !1125, !1126, !1127}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1122, file: !43, line: 13, baseType: !15, size: 128, align: 128)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1122, file: !43, line: 13, baseType: !15, size: 128, align: 128, offset: 128)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1122, file: !43, line: 14, baseType: !15, size: 128, align: 128, offset: 256)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1122, file: !43, line: 14, baseType: !15, size: 128, align: 128, offset: 384)
!1128 = !DILocation(line: 18, column: 1, scope: !1118)
!1129 = !DILocalVariable(name: "self", arg: 1, scope: !1118, file: !43, line: 17, type: !1121)
!1130 = !DILocation(line: 17, column: 32, scope: !1118)
!1131 = !DILocalVariable(name: "input", arg: 2, scope: !1118, file: !43, line: 17, type: !256)
!1132 = !DILocation(line: 17, column: 46, scope: !1118)
!1133 = !DILocation(line: 19, column: 3, scope: !1118)
!1134 = !DILocalVariable(name: "return_value", scope: !1135, file: !43, line: 10, type: !1136, align: 16)
!1135 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 128, elements: !7)
!1137 = !DILocation(line: 10, column: 8, scope: !1135, inlinedAt: !1138)
!1138 = !DILocation(line: 19, column: 26, scope: !1118)
!1139 = !DILocation(line: 342, column: 11, scope: !1140, inlinedAt: !1141)
!1140 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1141 = !DILocation(line: 11, column: 16, scope: !1135, inlinedAt: !1138)
!1142 = !DILocation(line: 11, column: 2, scope: !1135, inlinedAt: !1138)
!1143 = !DILocation(line: 212, column: 20, scope: !1144, inlinedAt: !1145)
!1144 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1145 = !DILocation(line: 19, column: 10, scope: !1118)
!1146 = !DILocation(line: 212, column: 12, scope: !1144, inlinedAt: !1145)
!1147 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !43, file: !43, line: 23, type: !1148, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1148 = !DISubroutineType(types: !1149)
!1149 = !{!15, !1121}
!1150 = !DILocation(line: 24, column: 1, scope: !1147)
!1151 = !DILocalVariable(name: "self", arg: 1, scope: !1147, file: !43, line: 23, type: !1121)
!1152 = !DILocation(line: 23, column: 38, scope: !1147)
!1153 = !DILocalVariable(name: "s0", scope: !1147, file: !43, line: 25, type: !15, align: 16)
!1154 = !DILocation(line: 25, column: 10, scope: !1147)
!1155 = !DILocation(line: 25, column: 15, scope: !1147)
!1156 = !DILocation(line: 26, column: 2, scope: !1147)
!1157 = !DILocation(line: 26, column: 16, scope: !1147)
!1158 = !DILocation(line: 26, column: 30, scope: !1147)
!1159 = !DILocation(line: 26, column: 44, scope: !1147)
!1160 = !DILocation(line: 27, column: 2, scope: !1147)
!1161 = !DILocation(line: 27, column: 16, scope: !1147)
!1162 = !DILocation(line: 163, column: 59, scope: !1163, inlinedAt: !1161)
!1163 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1164 = !DILocation(line: 163, column: 65, scope: !1163, inlinedAt: !1161)
!1165 = !DILocation(line: 163, column: 71, scope: !1163, inlinedAt: !1161)
!1166 = !DILocation(line: 28, column: 2, scope: !1147)
!1167 = !DILocation(line: 30, column: 2, scope: !1147)
!1168 = !DILocation(line: 30, column: 16, scope: !1147)
!1169 = !DILocation(line: 30, column: 30, scope: !1147)
!1170 = !DILocation(line: 30, column: 44, scope: !1147)
!1171 = !DILocalVariable(name: "s1", scope: !1147, file: !43, line: 31, type: !15, align: 16)
!1172 = !DILocation(line: 31, column: 10, scope: !1147)
!1173 = !DILocation(line: 31, column: 15, scope: !1147)
!1174 = !DILocation(line: 32, column: 2, scope: !1147)
!1175 = !DILocation(line: 32, column: 16, scope: !1147)
!1176 = !DILocation(line: 163, column: 59, scope: !1177, inlinedAt: !1175)
!1177 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1178 = !DILocation(line: 163, column: 65, scope: !1177, inlinedAt: !1175)
!1179 = !DILocation(line: 163, column: 71, scope: !1177, inlinedAt: !1175)
!1180 = !DILocation(line: 33, column: 2, scope: !1147)
!1181 = !DILocation(line: 35, column: 9, scope: !1147)
!1182 = !DILocation(line: 35, column: 14, scope: !1147)
!1183 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !43, file: !43, line: 41, type: !1119, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1184 = !DILocation(line: 41, column: 67, scope: !1183)
!1185 = !DILocalVariable(name: "self", arg: 1, scope: !1183, file: !43, line: 41, type: !1121)
!1186 = !DILocation(line: 41, column: 34, scope: !1183)
!1187 = !DILocalVariable(name: "bytes", arg: 2, scope: !1183, file: !43, line: 41, type: !256)
!1188 = !DILocation(line: 41, column: 48, scope: !1183)
!1189 = !DILocation(line: 39, column: 11, scope: !1190)
!1190 = distinct !DILexicalBlock(scope: !1183, file: !43, line: 41, column: 67)
!1191 = !DILocalVariable(name: "len", scope: !1192, file: !43, line: 146, type: !261, align: 8)
!1192 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1193 = !DILocation(line: 146, column: 6, scope: !1192, inlinedAt: !1184)
!1194 = !DILocation(line: 146, column: 12, scope: !1192, inlinedAt: !1184)
!1195 = !DILocation(line: 148, column: 2, scope: !1192, inlinedAt: !1184)
!1196 = !DILocation(line: 148, column: 9, scope: !1197, inlinedAt: !1184)
!1197 = distinct !DILexicalBlock(scope: !1192, file: !2, line: 148, column: 2)
!1198 = !DILocalVariable(name: "value", scope: !1199, file: !43, line: 150, type: !15, align: 16)
!1199 = distinct !DILexicalBlock(scope: !1197, file: !2, line: 149, column: 2)
!1200 = !DILocation(line: 150, column: 7, scope: !1199, inlinedAt: !1184)
!1201 = !DILocation(line: 41, column: 90, scope: !1199, inlinedAt: !1184)
!1202 = !DILocation(line: 150, column: 15, scope: !1199, inlinedAt: !1184)
!1203 = !DILocation(line: 151, column: 7, scope: !1199, inlinedAt: !1184)
!1204 = !DILocation(line: 153, column: 33, scope: !1205, inlinedAt: !1184)
!1205 = distinct !DILexicalBlock(scope: !1199, file: !2, line: 152, column: 3)
!1206 = !DILocation(line: 153, column: 4, scope: !1205, inlinedAt: !1184)
!1207 = !DILocation(line: 153, column: 10, scope: !1205, inlinedAt: !1184)
!1208 = !DILocation(line: 154, column: 10, scope: !1205, inlinedAt: !1184)
!1209 = !DILocation(line: 156, column: 3, scope: !1199, inlinedAt: !1184)
!1210 = !DILocation(line: 157, column: 3, scope: !1199, inlinedAt: !1184)
!1211 = !DILocation(line: 158, column: 11, scope: !1199, inlinedAt: !1184)
!1212 = !DILocation(line: 158, column: 17, scope: !1199, inlinedAt: !1184)
!1213 = !DILocation(line: 164, column: 2, scope: !1214, inlinedAt: !1215)
!1214 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1215 = !DILocation(line: 160, column: 2, scope: !1192, inlinedAt: !1184)
!1216 = !DILocation(line: 166, column: 2, scope: !1214, inlinedAt: !1215)
!1217 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !43, file: !43, line: 42, type: !1218, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1218 = !DISubroutineType(types: !1219)
!1219 = !{!6, !1121}
!1220 = !DILocation(line: 42, column: 53, scope: !1217)
!1221 = !DILocalVariable(name: "self", arg: 1, scope: !1217, file: !43, line: 42, type: !1121)
!1222 = !DILocation(line: 42, column: 34, scope: !1217)
!1223 = !DILocation(line: 42, column: 60, scope: !1217)
!1224 = !DILocation(line: 42, column: 54, scope: !1217)
!1225 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !43, file: !43, line: 43, type: !1226, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1226 = !DISubroutineType(types: !1227)
!1227 = !{!20, !1121}
!1228 = !DILocation(line: 43, column: 51, scope: !1225)
!1229 = !DILocalVariable(name: "self", arg: 1, scope: !1225, file: !43, line: 43, type: !1121)
!1230 = !DILocation(line: 43, column: 32, scope: !1225)
!1231 = !DILocation(line: 43, column: 57, scope: !1225)
!1232 = !DILocation(line: 43, column: 52, scope: !1225)
!1233 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !43, file: !43, line: 44, type: !1234, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1234 = !DISubroutineType(types: !1235)
!1235 = !{!23, !1121}
!1236 = !DILocation(line: 44, column: 55, scope: !1233)
!1237 = !DILocalVariable(name: "self", arg: 1, scope: !1233, file: !43, line: 44, type: !1121)
!1238 = !DILocation(line: 44, column: 36, scope: !1233)
!1239 = !DILocation(line: 44, column: 63, scope: !1233)
!1240 = !DILocation(line: 44, column: 56, scope: !1233)
!1241 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !43, file: !43, line: 45, type: !1242, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1242 = !DISubroutineType(types: !1243)
!1243 = !{!52, !1121}
!1244 = !DILocation(line: 45, column: 52, scope: !1241)
!1245 = !DILocalVariable(name: "self", arg: 1, scope: !1241, file: !43, line: 45, type: !1121)
!1246 = !DILocation(line: 45, column: 33, scope: !1241)
!1247 = !DILocation(line: 45, column: 58, scope: !1241)
!1248 = !DILocation(line: 45, column: 53, scope: !1241)
!1249 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !43, file: !43, line: 55, type: !1250, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1250 = !DISubroutineType(types: !1251)
!1251 = !{null, !1252, !256}
!1252 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !1253, size: 64, align: 64, dwarfAddressSpace: 0)
!1253 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !43, file: !43, line: 49, size: 256, align: 64, elements: !1254, identifier: "std.math.random.Msws64Random")
!1254 = !{!1255, !1256, !1257, !1258}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1253, file: !43, line: 51, baseType: !6, size: 64, align: 64)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1253, file: !43, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1253, file: !43, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1253, file: !43, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!1259 = !DILocation(line: 56, column: 1, scope: !1249)
!1260 = !DILocalVariable(name: "self", arg: 1, scope: !1249, file: !43, line: 55, type: !1252)
!1261 = !DILocation(line: 55, column: 32, scope: !1249)
!1262 = !DILocalVariable(name: "input", arg: 2, scope: !1249, file: !43, line: 55, type: !256)
!1263 = !DILocation(line: 55, column: 46, scope: !1249)
!1264 = !DILocation(line: 57, column: 3, scope: !1249)
!1265 = !DILocalVariable(name: "return_value", scope: !1266, file: !43, line: 10, type: !5, align: 16)
!1266 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1267 = !DILocation(line: 10, column: 8, scope: !1266, inlinedAt: !1268)
!1268 = !DILocation(line: 57, column: 26, scope: !1249)
!1269 = !DILocation(line: 342, column: 11, scope: !1270, inlinedAt: !1271)
!1270 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1271 = !DILocation(line: 11, column: 16, scope: !1266, inlinedAt: !1268)
!1272 = !DILocation(line: 11, column: 2, scope: !1266, inlinedAt: !1268)
!1273 = !DILocation(line: 212, column: 20, scope: !1274, inlinedAt: !1275)
!1274 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1275 = !DILocation(line: 57, column: 10, scope: !1249)
!1276 = !DILocation(line: 212, column: 12, scope: !1274, inlinedAt: !1275)
!1277 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !43, file: !43, line: 60, type: !1278, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1278 = !DISubroutineType(types: !1279)
!1279 = !{!6, !1252}
!1280 = !DILocation(line: 61, column: 1, scope: !1277)
!1281 = !DILocalVariable(name: "self", arg: 1, scope: !1277, file: !43, line: 60, type: !1252)
!1282 = !DILocation(line: 60, column: 33, scope: !1277)
!1283 = !DILocalVariable(name: "s0", scope: !1277, file: !43, line: 62, type: !6, align: 8)
!1284 = !DILocation(line: 62, column: 8, scope: !1277)
!1285 = !DILocation(line: 62, column: 13, scope: !1277)
!1286 = !DILocation(line: 63, column: 2, scope: !1277)
!1287 = !DILocation(line: 63, column: 16, scope: !1277)
!1288 = !DILocation(line: 63, column: 30, scope: !1277)
!1289 = !DILocation(line: 63, column: 44, scope: !1277)
!1290 = !DILocation(line: 64, column: 2, scope: !1277)
!1291 = !DILocation(line: 64, column: 16, scope: !1277)
!1292 = !DILocation(line: 147, column: 53, scope: !1293, inlinedAt: !1291)
!1293 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1294 = !DILocation(line: 147, column: 59, scope: !1293, inlinedAt: !1291)
!1295 = !DILocation(line: 147, column: 65, scope: !1293, inlinedAt: !1291)
!1296 = !DILocation(line: 65, column: 2, scope: !1277)
!1297 = !DILocation(line: 67, column: 2, scope: !1277)
!1298 = !DILocation(line: 67, column: 16, scope: !1277)
!1299 = !DILocation(line: 67, column: 30, scope: !1277)
!1300 = !DILocation(line: 67, column: 44, scope: !1277)
!1301 = !DILocalVariable(name: "s1", scope: !1277, file: !43, line: 68, type: !6, align: 8)
!1302 = !DILocation(line: 68, column: 8, scope: !1277)
!1303 = !DILocation(line: 68, column: 13, scope: !1277)
!1304 = !DILocation(line: 69, column: 2, scope: !1277)
!1305 = !DILocation(line: 69, column: 16, scope: !1277)
!1306 = !DILocation(line: 147, column: 53, scope: !1307, inlinedAt: !1305)
!1307 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1308 = !DILocation(line: 147, column: 59, scope: !1307, inlinedAt: !1305)
!1309 = !DILocation(line: 147, column: 65, scope: !1307, inlinedAt: !1305)
!1310 = !DILocation(line: 70, column: 2, scope: !1277)
!1311 = !DILocation(line: 72, column: 9, scope: !1277)
!1312 = !DILocation(line: 72, column: 14, scope: !1277)
!1313 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !43, file: !43, line: 78, type: !1250, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1314 = !DILocation(line: 78, column: 66, scope: !1313)
!1315 = !DILocalVariable(name: "self", arg: 1, scope: !1313, file: !43, line: 78, type: !1252)
!1316 = !DILocation(line: 78, column: 33, scope: !1313)
!1317 = !DILocalVariable(name: "bytes", arg: 2, scope: !1313, file: !43, line: 78, type: !256)
!1318 = !DILocation(line: 78, column: 47, scope: !1313)
!1319 = !DILocation(line: 76, column: 11, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1313, file: !43, line: 78, column: 66)
!1321 = !DILocalVariable(name: "len", scope: !1322, file: !43, line: 146, type: !261, align: 8)
!1322 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1323 = !DILocation(line: 146, column: 6, scope: !1322, inlinedAt: !1314)
!1324 = !DILocation(line: 146, column: 12, scope: !1322, inlinedAt: !1314)
!1325 = !DILocation(line: 148, column: 2, scope: !1322, inlinedAt: !1314)
!1326 = !DILocation(line: 148, column: 9, scope: !1327, inlinedAt: !1314)
!1327 = distinct !DILexicalBlock(scope: !1322, file: !2, line: 148, column: 2)
!1328 = !DILocalVariable(name: "value", scope: !1329, file: !43, line: 150, type: !6, align: 8)
!1329 = distinct !DILexicalBlock(scope: !1327, file: !2, line: 149, column: 2)
!1330 = !DILocation(line: 150, column: 7, scope: !1329, inlinedAt: !1314)
!1331 = !DILocation(line: 78, column: 89, scope: !1329, inlinedAt: !1314)
!1332 = !DILocation(line: 150, column: 15, scope: !1329, inlinedAt: !1314)
!1333 = !DILocation(line: 151, column: 7, scope: !1329, inlinedAt: !1314)
!1334 = !DILocation(line: 153, column: 33, scope: !1335, inlinedAt: !1314)
!1335 = distinct !DILexicalBlock(scope: !1329, file: !2, line: 152, column: 3)
!1336 = !DILocation(line: 153, column: 4, scope: !1335, inlinedAt: !1314)
!1337 = !DILocation(line: 153, column: 10, scope: !1335, inlinedAt: !1314)
!1338 = !DILocation(line: 154, column: 10, scope: !1335, inlinedAt: !1314)
!1339 = !DILocation(line: 156, column: 3, scope: !1329, inlinedAt: !1314)
!1340 = !DILocation(line: 157, column: 3, scope: !1329, inlinedAt: !1314)
!1341 = !DILocation(line: 158, column: 11, scope: !1329, inlinedAt: !1314)
!1342 = !DILocation(line: 158, column: 17, scope: !1329, inlinedAt: !1314)
!1343 = !DILocation(line: 164, column: 2, scope: !1344, inlinedAt: !1345)
!1344 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1345 = !DILocation(line: 160, column: 2, scope: !1322, inlinedAt: !1314)
!1346 = !DILocation(line: 166, column: 2, scope: !1344, inlinedAt: !1345)
!1347 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !43, file: !43, line: 79, type: !1348, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1348 = !DISubroutineType(types: !1349)
!1349 = !{!15, !1252}
!1350 = !DILocation(line: 79, column: 56, scope: !1347)
!1351 = !DILocalVariable(name: "self", arg: 1, scope: !1347, file: !43, line: 79, type: !1252)
!1352 = !DILocation(line: 79, column: 37, scope: !1347)
!1353 = !DILocation(line: 79, column: 72, scope: !1354, inlinedAt: !1350)
!1354 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1355 = !DILocation(line: 138, column: 46, scope: !1354, inlinedAt: !1350)
!1356 = !DILocation(line: 138, column: 72, scope: !1354, inlinedAt: !1350)
!1357 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !43, file: !43, line: 80, type: !1358, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1358 = !DISubroutineType(types: !1359)
!1359 = !{!20, !1252}
!1360 = !DILocation(line: 80, column: 50, scope: !1357)
!1361 = !DILocalVariable(name: "self", arg: 1, scope: !1357, file: !43, line: 80, type: !1252)
!1362 = !DILocation(line: 80, column: 31, scope: !1357)
!1363 = !DILocation(line: 80, column: 56, scope: !1357)
!1364 = !DILocation(line: 80, column: 51, scope: !1357)
!1365 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !43, file: !43, line: 81, type: !1366, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1366 = !DISubroutineType(types: !1367)
!1367 = !{!23, !1252}
!1368 = !DILocation(line: 81, column: 54, scope: !1365)
!1369 = !DILocalVariable(name: "self", arg: 1, scope: !1365, file: !43, line: 81, type: !1252)
!1370 = !DILocation(line: 81, column: 35, scope: !1365)
!1371 = !DILocation(line: 81, column: 62, scope: !1365)
!1372 = !DILocation(line: 81, column: 55, scope: !1365)
!1373 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !43, file: !43, line: 82, type: !1374, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1374 = !DISubroutineType(types: !1375)
!1375 = !{!52, !1252}
!1376 = !DILocation(line: 82, column: 51, scope: !1373)
!1377 = !DILocalVariable(name: "self", arg: 1, scope: !1373, file: !43, line: 82, type: !1252)
!1378 = !DILocation(line: 82, column: 32, scope: !1373)
!1379 = !DILocation(line: 82, column: 57, scope: !1373)
!1380 = !DILocation(line: 82, column: 52, scope: !1373)
!1381 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !43, file: !43, line: 91, type: !1382, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1382 = !DISubroutineType(types: !1383)
!1383 = !{null, !1384, !256}
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !1385, size: 64, align: 64, dwarfAddressSpace: 0)
!1385 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !43, file: !43, line: 85, size: 128, align: 32, elements: !1386, identifier: "std.math.random.Msws32Random")
!1386 = !{!1387, !1388, !1389, !1390}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1385, file: !43, line: 87, baseType: !20, size: 32, align: 32)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1385, file: !43, line: 87, baseType: !20, size: 32, align: 32, offset: 32)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1385, file: !43, line: 88, baseType: !20, size: 32, align: 32, offset: 64)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1385, file: !43, line: 88, baseType: !20, size: 32, align: 32, offset: 96)
!1391 = !DILocation(line: 92, column: 1, scope: !1381)
!1392 = !DILocalVariable(name: "self", arg: 1, scope: !1381, file: !43, line: 91, type: !1384)
!1393 = !DILocation(line: 91, column: 32, scope: !1381)
!1394 = !DILocalVariable(name: "input", arg: 2, scope: !1381, file: !43, line: 91, type: !256)
!1395 = !DILocation(line: 91, column: 46, scope: !1381)
!1396 = !DILocation(line: 93, column: 3, scope: !1381)
!1397 = !DILocalVariable(name: "return_value", scope: !1398, file: !43, line: 10, type: !1399, align: 16)
!1398 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 32, elements: !7)
!1400 = !DILocation(line: 10, column: 8, scope: !1398, inlinedAt: !1401)
!1401 = !DILocation(line: 93, column: 26, scope: !1381)
!1402 = !DILocation(line: 342, column: 11, scope: !1403, inlinedAt: !1404)
!1403 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1404 = !DILocation(line: 11, column: 16, scope: !1398, inlinedAt: !1401)
!1405 = !DILocation(line: 11, column: 2, scope: !1398, inlinedAt: !1401)
!1406 = !DILocation(line: 212, column: 20, scope: !1407, inlinedAt: !1408)
!1407 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1408 = !DILocation(line: 93, column: 10, scope: !1381)
!1409 = !DILocation(line: 212, column: 12, scope: !1407, inlinedAt: !1408)
!1410 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !43, file: !43, line: 97, type: !1411, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1411 = !DISubroutineType(types: !1412)
!1412 = !{!20, !1384}
!1413 = !DILocation(line: 98, column: 1, scope: !1410)
!1414 = !DILocalVariable(name: "self", arg: 1, scope: !1410, file: !43, line: 97, type: !1384)
!1415 = !DILocation(line: 97, column: 31, scope: !1410)
!1416 = !DILocalVariable(name: "s0", scope: !1410, file: !43, line: 99, type: !20, align: 4)
!1417 = !DILocation(line: 99, column: 7, scope: !1410)
!1418 = !DILocation(line: 99, column: 12, scope: !1410)
!1419 = !DILocation(line: 100, column: 2, scope: !1410)
!1420 = !DILocation(line: 100, column: 16, scope: !1410)
!1421 = !DILocation(line: 100, column: 30, scope: !1410)
!1422 = !DILocation(line: 100, column: 44, scope: !1410)
!1423 = !DILocation(line: 101, column: 2, scope: !1410)
!1424 = !DILocation(line: 101, column: 16, scope: !1410)
!1425 = !DILocation(line: 99, column: 50, scope: !1426, inlinedAt: !1424)
!1426 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1427 = !DILocation(line: 99, column: 56, scope: !1426, inlinedAt: !1424)
!1428 = !DILocation(line: 99, column: 62, scope: !1426, inlinedAt: !1424)
!1429 = !DILocation(line: 102, column: 2, scope: !1410)
!1430 = !DILocation(line: 104, column: 2, scope: !1410)
!1431 = !DILocation(line: 104, column: 16, scope: !1410)
!1432 = !DILocation(line: 104, column: 30, scope: !1410)
!1433 = !DILocation(line: 104, column: 44, scope: !1410)
!1434 = !DILocalVariable(name: "s1", scope: !1410, file: !43, line: 105, type: !20, align: 4)
!1435 = !DILocation(line: 105, column: 7, scope: !1410)
!1436 = !DILocation(line: 105, column: 12, scope: !1410)
!1437 = !DILocation(line: 106, column: 2, scope: !1410)
!1438 = !DILocation(line: 106, column: 16, scope: !1410)
!1439 = !DILocation(line: 99, column: 50, scope: !1440, inlinedAt: !1438)
!1440 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1441 = !DILocation(line: 99, column: 56, scope: !1440, inlinedAt: !1438)
!1442 = !DILocation(line: 99, column: 62, scope: !1440, inlinedAt: !1438)
!1443 = !DILocation(line: 107, column: 2, scope: !1410)
!1444 = !DILocation(line: 109, column: 9, scope: !1410)
!1445 = !DILocation(line: 109, column: 14, scope: !1410)
!1446 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !43, file: !43, line: 115, type: !1382, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1447 = !DILocation(line: 115, column: 66, scope: !1446)
!1448 = !DILocalVariable(name: "self", arg: 1, scope: !1446, file: !43, line: 115, type: !1384)
!1449 = !DILocation(line: 115, column: 33, scope: !1446)
!1450 = !DILocalVariable(name: "bytes", arg: 2, scope: !1446, file: !43, line: 115, type: !256)
!1451 = !DILocation(line: 115, column: 47, scope: !1446)
!1452 = !DILocation(line: 113, column: 11, scope: !1453)
!1453 = distinct !DILexicalBlock(scope: !1446, file: !43, line: 115, column: 66)
!1454 = !DILocalVariable(name: "len", scope: !1455, file: !43, line: 146, type: !261, align: 8)
!1455 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1456 = !DILocation(line: 146, column: 6, scope: !1455, inlinedAt: !1447)
!1457 = !DILocation(line: 146, column: 12, scope: !1455, inlinedAt: !1447)
!1458 = !DILocation(line: 148, column: 2, scope: !1455, inlinedAt: !1447)
!1459 = !DILocation(line: 148, column: 9, scope: !1460, inlinedAt: !1447)
!1460 = distinct !DILexicalBlock(scope: !1455, file: !2, line: 148, column: 2)
!1461 = !DILocalVariable(name: "value", scope: !1462, file: !43, line: 150, type: !20, align: 4)
!1462 = distinct !DILexicalBlock(scope: !1460, file: !2, line: 149, column: 2)
!1463 = !DILocation(line: 150, column: 7, scope: !1462, inlinedAt: !1447)
!1464 = !DILocation(line: 115, column: 89, scope: !1462, inlinedAt: !1447)
!1465 = !DILocation(line: 150, column: 15, scope: !1462, inlinedAt: !1447)
!1466 = !DILocation(line: 151, column: 7, scope: !1462, inlinedAt: !1447)
!1467 = !DILocation(line: 153, column: 33, scope: !1468, inlinedAt: !1447)
!1468 = distinct !DILexicalBlock(scope: !1462, file: !2, line: 152, column: 3)
!1469 = !DILocation(line: 153, column: 4, scope: !1468, inlinedAt: !1447)
!1470 = !DILocation(line: 153, column: 10, scope: !1468, inlinedAt: !1447)
!1471 = !DILocation(line: 154, column: 10, scope: !1468, inlinedAt: !1447)
!1472 = !DILocation(line: 156, column: 3, scope: !1462, inlinedAt: !1447)
!1473 = !DILocation(line: 157, column: 3, scope: !1462, inlinedAt: !1447)
!1474 = !DILocation(line: 158, column: 11, scope: !1462, inlinedAt: !1447)
!1475 = !DILocation(line: 158, column: 17, scope: !1462, inlinedAt: !1447)
!1476 = !DILocation(line: 164, column: 2, scope: !1477, inlinedAt: !1478)
!1477 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1478 = !DILocation(line: 160, column: 2, scope: !1455, inlinedAt: !1447)
!1479 = !DILocation(line: 166, column: 2, scope: !1477, inlinedAt: !1478)
!1480 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !43, file: !43, line: 116, type: !1481, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1481 = !DISubroutineType(types: !1482)
!1482 = !{!15, !1384}
!1483 = !DILocation(line: 116, column: 56, scope: !1480)
!1484 = !DILocalVariable(name: "self", arg: 1, scope: !1480, file: !43, line: 116, type: !1384)
!1485 = !DILocation(line: 116, column: 37, scope: !1480)
!1486 = !DILocation(line: 116, column: 72, scope: !1487, inlinedAt: !1483)
!1487 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1488 = !DILocation(line: 138, column: 46, scope: !1487, inlinedAt: !1483)
!1489 = !DILocation(line: 138, column: 72, scope: !1487, inlinedAt: !1483)
!1490 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !43, file: !43, line: 117, type: !1491, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1491 = !DISubroutineType(types: !1492)
!1492 = !{!6, !1384}
!1493 = !DILocation(line: 117, column: 52, scope: !1490)
!1494 = !DILocalVariable(name: "self", arg: 1, scope: !1490, file: !43, line: 117, type: !1384)
!1495 = !DILocation(line: 117, column: 33, scope: !1490)
!1496 = !DILocation(line: 117, column: 65, scope: !1497, inlinedAt: !1493)
!1497 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1498 = !DILocation(line: 139, column: 41, scope: !1497, inlinedAt: !1493)
!1499 = !DILocation(line: 139, column: 65, scope: !1497, inlinedAt: !1493)
!1500 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !43, file: !43, line: 118, type: !1501, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1501 = !DISubroutineType(types: !1502)
!1502 = !{!23, !1384}
!1503 = !DILocation(line: 118, column: 54, scope: !1500)
!1504 = !DILocalVariable(name: "self", arg: 1, scope: !1500, file: !43, line: 118, type: !1384)
!1505 = !DILocation(line: 118, column: 35, scope: !1500)
!1506 = !DILocation(line: 118, column: 62, scope: !1500)
!1507 = !DILocation(line: 118, column: 55, scope: !1500)
!1508 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !43, file: !43, line: 119, type: !1509, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1509 = !DISubroutineType(types: !1510)
!1510 = !{!52, !1384}
!1511 = !DILocation(line: 119, column: 51, scope: !1508)
!1512 = !DILocalVariable(name: "self", arg: 1, scope: !1508, file: !43, line: 119, type: !1384)
!1513 = !DILocation(line: 119, column: 32, scope: !1508)
!1514 = !DILocation(line: 119, column: 57, scope: !1508)
!1515 = !DILocation(line: 119, column: 52, scope: !1508)
!1516 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !43, file: !43, line: 129, type: !1517, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1517 = !DISubroutineType(types: !1518)
!1518 = !{null, !1519, !256}
!1519 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !1520, size: 64, align: 64, dwarfAddressSpace: 0)
!1520 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !43, file: !43, line: 123, size: 64, align: 16, elements: !1521, identifier: "std.math.random.Msws16Random")
!1521 = !{!1522, !1523, !1524, !1525}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1520, file: !43, line: 125, baseType: !23, size: 16, align: 16)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1520, file: !43, line: 125, baseType: !23, size: 16, align: 16, offset: 16)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1520, file: !43, line: 126, baseType: !23, size: 16, align: 16, offset: 32)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1520, file: !43, line: 126, baseType: !23, size: 16, align: 16, offset: 48)
!1526 = !DILocation(line: 130, column: 1, scope: !1516)
!1527 = !DILocalVariable(name: "self", arg: 1, scope: !1516, file: !43, line: 129, type: !1519)
!1528 = !DILocation(line: 129, column: 32, scope: !1516)
!1529 = !DILocalVariable(name: "input", arg: 2, scope: !1516, file: !43, line: 129, type: !256)
!1530 = !DILocation(line: 129, column: 46, scope: !1516)
!1531 = !DILocation(line: 131, column: 3, scope: !1516)
!1532 = !DILocalVariable(name: "return_value", scope: !1533, file: !43, line: 10, type: !1534, align: 2)
!1533 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1534 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 64, align: 16, elements: !7)
!1535 = !DILocation(line: 10, column: 8, scope: !1533, inlinedAt: !1536)
!1536 = !DILocation(line: 131, column: 26, scope: !1516)
!1537 = !DILocation(line: 342, column: 11, scope: !1538, inlinedAt: !1539)
!1538 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1539 = !DILocation(line: 11, column: 16, scope: !1533, inlinedAt: !1536)
!1540 = !DILocation(line: 11, column: 2, scope: !1533, inlinedAt: !1536)
!1541 = !DILocation(line: 212, column: 20, scope: !1542, inlinedAt: !1543)
!1542 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1543 = !DILocation(line: 131, column: 10, scope: !1516)
!1544 = !DILocation(line: 212, column: 12, scope: !1542, inlinedAt: !1543)
!1545 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !43, file: !43, line: 135, type: !1546, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1546 = !DISubroutineType(types: !1547)
!1547 = !{!23, !1519}
!1548 = !DILocation(line: 136, column: 1, scope: !1545)
!1549 = !DILocalVariable(name: "self", arg: 1, scope: !1545, file: !43, line: 135, type: !1519)
!1550 = !DILocation(line: 135, column: 35, scope: !1545)
!1551 = !DILocalVariable(name: "s0", scope: !1545, file: !43, line: 137, type: !23, align: 2)
!1552 = !DILocation(line: 137, column: 9, scope: !1545)
!1553 = !DILocation(line: 137, column: 14, scope: !1545)
!1554 = !DILocation(line: 138, column: 2, scope: !1545)
!1555 = !DILocation(line: 138, column: 16, scope: !1545)
!1556 = !DILocation(line: 138, column: 30, scope: !1545)
!1557 = !DILocation(line: 138, column: 44, scope: !1545)
!1558 = !DILocation(line: 139, column: 2, scope: !1545)
!1559 = !DILocation(line: 139, column: 16, scope: !1545)
!1560 = !DILocation(line: 115, column: 56, scope: !1561, inlinedAt: !1559)
!1561 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1562 = !DILocation(line: 115, column: 62, scope: !1561, inlinedAt: !1559)
!1563 = !DILocation(line: 115, column: 68, scope: !1561, inlinedAt: !1559)
!1564 = !DILocation(line: 140, column: 2, scope: !1545)
!1565 = !DILocation(line: 142, column: 2, scope: !1545)
!1566 = !DILocation(line: 142, column: 16, scope: !1545)
!1567 = !DILocation(line: 142, column: 30, scope: !1545)
!1568 = !DILocation(line: 142, column: 44, scope: !1545)
!1569 = !DILocalVariable(name: "s1", scope: !1545, file: !43, line: 143, type: !23, align: 2)
!1570 = !DILocation(line: 143, column: 9, scope: !1545)
!1571 = !DILocation(line: 143, column: 14, scope: !1545)
!1572 = !DILocation(line: 144, column: 2, scope: !1545)
!1573 = !DILocation(line: 144, column: 16, scope: !1545)
!1574 = !DILocation(line: 115, column: 56, scope: !1575, inlinedAt: !1573)
!1575 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1576 = !DILocation(line: 115, column: 62, scope: !1575, inlinedAt: !1573)
!1577 = !DILocation(line: 115, column: 68, scope: !1575, inlinedAt: !1573)
!1578 = !DILocation(line: 145, column: 2, scope: !1545)
!1579 = !DILocation(line: 147, column: 9, scope: !1545)
!1580 = !DILocation(line: 147, column: 14, scope: !1545)
!1581 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !43, file: !43, line: 153, type: !1517, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1582 = !DILocation(line: 153, column: 66, scope: !1581)
!1583 = !DILocalVariable(name: "self", arg: 1, scope: !1581, file: !43, line: 153, type: !1519)
!1584 = !DILocation(line: 153, column: 33, scope: !1581)
!1585 = !DILocalVariable(name: "bytes", arg: 2, scope: !1581, file: !43, line: 153, type: !256)
!1586 = !DILocation(line: 153, column: 47, scope: !1581)
!1587 = !DILocation(line: 151, column: 11, scope: !1588)
!1588 = distinct !DILexicalBlock(scope: !1581, file: !43, line: 153, column: 66)
!1589 = !DILocalVariable(name: "len", scope: !1590, file: !43, line: 146, type: !261, align: 8)
!1590 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1591 = !DILocation(line: 146, column: 6, scope: !1590, inlinedAt: !1582)
!1592 = !DILocation(line: 146, column: 12, scope: !1590, inlinedAt: !1582)
!1593 = !DILocation(line: 148, column: 2, scope: !1590, inlinedAt: !1582)
!1594 = !DILocation(line: 148, column: 9, scope: !1595, inlinedAt: !1582)
!1595 = distinct !DILexicalBlock(scope: !1590, file: !2, line: 148, column: 2)
!1596 = !DILocalVariable(name: "value", scope: !1597, file: !43, line: 150, type: !23, align: 2)
!1597 = distinct !DILexicalBlock(scope: !1595, file: !2, line: 149, column: 2)
!1598 = !DILocation(line: 150, column: 7, scope: !1597, inlinedAt: !1582)
!1599 = !DILocation(line: 153, column: 89, scope: !1597, inlinedAt: !1582)
!1600 = !DILocation(line: 150, column: 15, scope: !1597, inlinedAt: !1582)
!1601 = !DILocation(line: 151, column: 7, scope: !1597, inlinedAt: !1582)
!1602 = !DILocation(line: 153, column: 33, scope: !1603, inlinedAt: !1582)
!1603 = distinct !DILexicalBlock(scope: !1597, file: !2, line: 152, column: 3)
!1604 = !DILocation(line: 153, column: 4, scope: !1603, inlinedAt: !1582)
!1605 = !DILocation(line: 153, column: 10, scope: !1603, inlinedAt: !1582)
!1606 = !DILocation(line: 154, column: 10, scope: !1603, inlinedAt: !1582)
!1607 = !DILocation(line: 156, column: 3, scope: !1597, inlinedAt: !1582)
!1608 = !DILocation(line: 157, column: 3, scope: !1597, inlinedAt: !1582)
!1609 = !DILocation(line: 158, column: 11, scope: !1597, inlinedAt: !1582)
!1610 = !DILocation(line: 158, column: 17, scope: !1597, inlinedAt: !1582)
!1611 = !DILocation(line: 164, column: 2, scope: !1612, inlinedAt: !1613)
!1612 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1613 = !DILocation(line: 160, column: 2, scope: !1590, inlinedAt: !1582)
!1614 = !DILocation(line: 166, column: 2, scope: !1612, inlinedAt: !1613)
!1615 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !43, file: !43, line: 154, type: !1616, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1616 = !DISubroutineType(types: !1617)
!1617 = !{!15, !1519}
!1618 = !DILocation(line: 154, column: 56, scope: !1615)
!1619 = !DILocalVariable(name: "self", arg: 1, scope: !1615, file: !43, line: 154, type: !1519)
!1620 = !DILocation(line: 154, column: 37, scope: !1615)
!1621 = !DILocation(line: 154, column: 72, scope: !1622, inlinedAt: !1618)
!1622 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1623 = !DILocation(line: 138, column: 46, scope: !1622, inlinedAt: !1618)
!1624 = !DILocation(line: 138, column: 72, scope: !1622, inlinedAt: !1618)
!1625 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !43, file: !43, line: 155, type: !1626, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1626 = !DISubroutineType(types: !1627)
!1627 = !{!6, !1519}
!1628 = !DILocation(line: 155, column: 52, scope: !1625)
!1629 = !DILocalVariable(name: "self", arg: 1, scope: !1625, file: !43, line: 155, type: !1519)
!1630 = !DILocation(line: 155, column: 33, scope: !1625)
!1631 = !DILocation(line: 155, column: 65, scope: !1632, inlinedAt: !1628)
!1632 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1633 = !DILocation(line: 139, column: 41, scope: !1632, inlinedAt: !1628)
!1634 = !DILocation(line: 139, column: 65, scope: !1632, inlinedAt: !1628)
!1635 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !43, file: !43, line: 156, type: !1636, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1636 = !DISubroutineType(types: !1637)
!1637 = !{!20, !1519}
!1638 = !DILocation(line: 156, column: 50, scope: !1635)
!1639 = !DILocalVariable(name: "self", arg: 1, scope: !1635, file: !43, line: 156, type: !1519)
!1640 = !DILocation(line: 156, column: 31, scope: !1635)
!1641 = !DILocation(line: 156, column: 64, scope: !1642, inlinedAt: !1638)
!1642 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1643 = !DILocation(line: 140, column: 41, scope: !1642, inlinedAt: !1638)
!1644 = !DILocation(line: 140, column: 64, scope: !1642, inlinedAt: !1638)
!1645 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !43, file: !43, line: 157, type: !1646, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1646 = !DISubroutineType(types: !1647)
!1647 = !{!52, !1519}
!1648 = !DILocation(line: 157, column: 51, scope: !1645)
!1649 = !DILocalVariable(name: "self", arg: 1, scope: !1645, file: !43, line: 157, type: !1519)
!1650 = !DILocation(line: 157, column: 32, scope: !1645)
!1651 = !DILocation(line: 157, column: 57, scope: !1645)
!1652 = !DILocation(line: 157, column: 52, scope: !1645)
!1653 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !43, file: !43, line: 166, type: !1654, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1654 = !DISubroutineType(types: !1655)
!1655 = !{null, !1656, !256}
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !1657, size: 64, align: 64, dwarfAddressSpace: 0)
!1657 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !43, file: !43, line: 160, size: 32, align: 8, elements: !1658, identifier: "std.math.random.Msws8Random")
!1658 = !{!1659, !1660, !1661, !1662}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1657, file: !43, line: 162, baseType: !52, size: 8, align: 8)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1657, file: !43, line: 162, baseType: !52, size: 8, align: 8, offset: 8)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1657, file: !43, line: 163, baseType: !52, size: 8, align: 8, offset: 16)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1657, file: !43, line: 163, baseType: !52, size: 8, align: 8, offset: 24)
!1663 = !DILocation(line: 167, column: 1, scope: !1653)
!1664 = !DILocalVariable(name: "self", arg: 1, scope: !1653, file: !43, line: 166, type: !1656)
!1665 = !DILocation(line: 166, column: 31, scope: !1653)
!1666 = !DILocalVariable(name: "input", arg: 2, scope: !1653, file: !43, line: 166, type: !256)
!1667 = !DILocation(line: 166, column: 45, scope: !1653)
!1668 = !DILocation(line: 168, column: 3, scope: !1653)
!1669 = !DILocalVariable(name: "return_value", scope: !1670, file: !43, line: 10, type: !1671, align: 1)
!1670 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1671 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 32, align: 8, elements: !7)
!1672 = !DILocation(line: 10, column: 8, scope: !1670, inlinedAt: !1673)
!1673 = !DILocation(line: 168, column: 26, scope: !1653)
!1674 = !DILocation(line: 342, column: 11, scope: !1675, inlinedAt: !1676)
!1675 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1676 = !DILocation(line: 11, column: 16, scope: !1670, inlinedAt: !1673)
!1677 = !DILocation(line: 11, column: 2, scope: !1670, inlinedAt: !1673)
!1678 = !DILocation(line: 212, column: 20, scope: !1679, inlinedAt: !1680)
!1679 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1680 = !DILocation(line: 168, column: 10, scope: !1653)
!1681 = !DILocation(line: 212, column: 12, scope: !1679, inlinedAt: !1680)
!1682 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !43, file: !43, line: 171, type: !1683, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1683 = !DISubroutineType(types: !1684)
!1684 = !{!52, !1656}
!1685 = !DILocation(line: 172, column: 1, scope: !1682)
!1686 = !DILocalVariable(name: "self", arg: 1, scope: !1682, file: !43, line: 171, type: !1656)
!1687 = !DILocation(line: 171, column: 31, scope: !1682)
!1688 = !DILocalVariable(name: "s0", scope: !1682, file: !43, line: 173, type: !52, align: 1)
!1689 = !DILocation(line: 173, column: 7, scope: !1682)
!1690 = !DILocation(line: 173, column: 12, scope: !1682)
!1691 = !DILocation(line: 174, column: 2, scope: !1682)
!1692 = !DILocation(line: 174, column: 16, scope: !1682)
!1693 = !DILocation(line: 174, column: 30, scope: !1682)
!1694 = !DILocation(line: 174, column: 44, scope: !1682)
!1695 = !DILocation(line: 175, column: 2, scope: !1682)
!1696 = !DILocation(line: 175, column: 16, scope: !1682)
!1697 = !DILocation(line: 131, column: 50, scope: !1698, inlinedAt: !1696)
!1698 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1699 = !DILocation(line: 131, column: 56, scope: !1698, inlinedAt: !1696)
!1700 = !DILocation(line: 131, column: 62, scope: !1698, inlinedAt: !1696)
!1701 = !DILocation(line: 176, column: 2, scope: !1682)
!1702 = !DILocation(line: 178, column: 2, scope: !1682)
!1703 = !DILocation(line: 178, column: 16, scope: !1682)
!1704 = !DILocation(line: 178, column: 30, scope: !1682)
!1705 = !DILocation(line: 178, column: 44, scope: !1682)
!1706 = !DILocalVariable(name: "s1", scope: !1682, file: !43, line: 179, type: !52, align: 1)
!1707 = !DILocation(line: 179, column: 7, scope: !1682)
!1708 = !DILocation(line: 179, column: 12, scope: !1682)
!1709 = !DILocation(line: 180, column: 2, scope: !1682)
!1710 = !DILocation(line: 180, column: 16, scope: !1682)
!1711 = !DILocation(line: 131, column: 50, scope: !1712, inlinedAt: !1710)
!1712 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1713 = !DILocation(line: 131, column: 56, scope: !1712, inlinedAt: !1710)
!1714 = !DILocation(line: 131, column: 62, scope: !1712, inlinedAt: !1710)
!1715 = !DILocation(line: 181, column: 2, scope: !1682)
!1716 = !DILocation(line: 183, column: 9, scope: !1682)
!1717 = !DILocation(line: 183, column: 14, scope: !1682)
!1718 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !43, file: !43, line: 186, type: !1654, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1719 = !DILocation(line: 186, column: 65, scope: !1718)
!1720 = !DILocalVariable(name: "self", arg: 1, scope: !1718, file: !43, line: 186, type: !1656)
!1721 = !DILocation(line: 186, column: 32, scope: !1718)
!1722 = !DILocalVariable(name: "bytes", arg: 2, scope: !1718, file: !43, line: 186, type: !256)
!1723 = !DILocation(line: 186, column: 46, scope: !1718)
!1724 = !DILocalVariable(name: "len", scope: !1725, file: !43, line: 146, type: !261, align: 8)
!1725 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1726 = !DILocation(line: 146, column: 6, scope: !1725, inlinedAt: !1719)
!1727 = !DILocation(line: 146, column: 12, scope: !1725, inlinedAt: !1719)
!1728 = !DILocation(line: 148, column: 2, scope: !1725, inlinedAt: !1719)
!1729 = !DILocation(line: 148, column: 9, scope: !1730, inlinedAt: !1719)
!1730 = distinct !DILexicalBlock(scope: !1725, file: !2, line: 148, column: 2)
!1731 = !DILocalVariable(name: "value", scope: !1732, file: !43, line: 150, type: !52, align: 1)
!1732 = distinct !DILexicalBlock(scope: !1730, file: !2, line: 149, column: 2)
!1733 = !DILocation(line: 150, column: 7, scope: !1732, inlinedAt: !1719)
!1734 = !DILocation(line: 186, column: 88, scope: !1732, inlinedAt: !1719)
!1735 = !DILocation(line: 150, column: 15, scope: !1732, inlinedAt: !1719)
!1736 = !DILocation(line: 151, column: 7, scope: !1732, inlinedAt: !1719)
!1737 = !DILocation(line: 153, column: 33, scope: !1738, inlinedAt: !1719)
!1738 = distinct !DILexicalBlock(scope: !1732, file: !2, line: 152, column: 3)
!1739 = !DILocation(line: 153, column: 4, scope: !1738, inlinedAt: !1719)
!1740 = !DILocation(line: 153, column: 10, scope: !1738, inlinedAt: !1719)
!1741 = !DILocation(line: 154, column: 10, scope: !1738, inlinedAt: !1719)
!1742 = !DILocation(line: 156, column: 3, scope: !1732, inlinedAt: !1719)
!1743 = !DILocation(line: 157, column: 3, scope: !1732, inlinedAt: !1719)
!1744 = !DILocation(line: 158, column: 11, scope: !1732, inlinedAt: !1719)
!1745 = !DILocation(line: 158, column: 17, scope: !1732, inlinedAt: !1719)
!1746 = !DILocation(line: 164, column: 2, scope: !1747, inlinedAt: !1748)
!1747 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1748 = !DILocation(line: 160, column: 2, scope: !1725, inlinedAt: !1719)
!1749 = !DILocation(line: 166, column: 2, scope: !1747, inlinedAt: !1748)
!1750 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !43, file: !43, line: 187, type: !1751, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1751 = !DISubroutineType(types: !1752)
!1752 = !{!15, !1656}
!1753 = !DILocation(line: 187, column: 55, scope: !1750)
!1754 = !DILocalVariable(name: "self", arg: 1, scope: !1750, file: !43, line: 187, type: !1656)
!1755 = !DILocation(line: 187, column: 36, scope: !1750)
!1756 = !DILocation(line: 187, column: 71, scope: !1757, inlinedAt: !1753)
!1757 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1758 = !DILocation(line: 138, column: 46, scope: !1757, inlinedAt: !1753)
!1759 = !DILocation(line: 138, column: 72, scope: !1757, inlinedAt: !1753)
!1760 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !43, file: !43, line: 188, type: !1761, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1761 = !DISubroutineType(types: !1762)
!1762 = !{!6, !1656}
!1763 = !DILocation(line: 188, column: 51, scope: !1760)
!1764 = !DILocalVariable(name: "self", arg: 1, scope: !1760, file: !43, line: 188, type: !1656)
!1765 = !DILocation(line: 188, column: 32, scope: !1760)
!1766 = !DILocation(line: 188, column: 64, scope: !1767, inlinedAt: !1763)
!1767 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1768 = !DILocation(line: 139, column: 41, scope: !1767, inlinedAt: !1763)
!1769 = !DILocation(line: 139, column: 65, scope: !1767, inlinedAt: !1763)
!1770 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !43, file: !43, line: 189, type: !1771, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1771 = !DISubroutineType(types: !1772)
!1772 = !{!20, !1656}
!1773 = !DILocation(line: 189, column: 49, scope: !1770)
!1774 = !DILocalVariable(name: "self", arg: 1, scope: !1770, file: !43, line: 189, type: !1656)
!1775 = !DILocation(line: 189, column: 30, scope: !1770)
!1776 = !DILocation(line: 189, column: 63, scope: !1777, inlinedAt: !1773)
!1777 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1778 = !DILocation(line: 140, column: 41, scope: !1777, inlinedAt: !1773)
!1779 = !DILocation(line: 140, column: 64, scope: !1777, inlinedAt: !1773)
!1780 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !43, file: !43, line: 190, type: !1781, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1781 = !DISubroutineType(types: !1782)
!1782 = !{!23, !1656}
!1783 = !DILocation(line: 190, column: 53, scope: !1780)
!1784 = !DILocalVariable(name: "self", arg: 1, scope: !1780, file: !43, line: 190, type: !1656)
!1785 = !DILocation(line: 190, column: 34, scope: !1780)
!1786 = !DILocation(line: 190, column: 68, scope: !1787, inlinedAt: !1783)
!1787 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1788 = !DILocation(line: 141, column: 44, scope: !1787, inlinedAt: !1783)
!1789 = !DILocation(line: 141, column: 68, scope: !1787, inlinedAt: !1783)
!1790 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !55, file: !55, line: 20, type: !1791, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1791 = !DISubroutineType(types: !1792)
!1792 = !{null, !1793, !256}
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !1794, size: 64, align: 64, dwarfAddressSpace: 0)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !55, file: !55, line: 18, baseType: !15, align: 16)
!1795 = !DILocation(line: 21, column: 1, scope: !1790)
!1796 = !DILocalVariable(name: "self", arg: 1, scope: !1790, file: !55, line: 20, type: !1793)
!1797 = !DILocation(line: 20, column: 32, scope: !1790)
!1798 = !DILocalVariable(name: "input", arg: 2, scope: !1790, file: !55, line: 20, type: !256)
!1799 = !DILocation(line: 20, column: 46, scope: !1790)
!1800 = !DILocation(line: 22, column: 3, scope: !1790)
!1801 = !DILocalVariable(name: "return_value", scope: !1802, file: !55, line: 10, type: !15, align: 16)
!1802 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1803 = !DILocation(line: 10, column: 8, scope: !1802, inlinedAt: !1804)
!1804 = !DILocation(line: 22, column: 11, scope: !1790)
!1805 = !DILocation(line: 342, column: 11, scope: !1806, inlinedAt: !1807)
!1806 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1807 = !DILocation(line: 11, column: 16, scope: !1802, inlinedAt: !1804)
!1808 = !DILocation(line: 11, column: 2, scope: !1802, inlinedAt: !1804)
!1809 = !DILocation(line: 12, column: 9, scope: !1802, inlinedAt: !1804)
!1810 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !55, file: !55, line: 26, type: !1811, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1811 = !DISubroutineType(types: !1812)
!1812 = !{!6, !1793}
!1813 = !DILocation(line: 27, column: 1, scope: !1810)
!1814 = !DILocalVariable(name: "self", arg: 1, scope: !1810, file: !55, line: 26, type: !1793)
!1815 = !DILocation(line: 26, column: 33, scope: !1810)
!1816 = !DILocalVariable(name: "s", scope: !1810, file: !55, line: 29, type: !284, align: 8)
!1817 = !DILocation(line: 29, column: 11, scope: !1810)
!1818 = !DILocation(line: 29, column: 16, scope: !1810)
!1819 = !DILocalVariable(name: "xor", scope: !1810, file: !55, line: 30, type: !15, align: 16)
!1820 = !DILocation(line: 30, column: 10, scope: !1810)
!1821 = !DILocation(line: 30, column: 17, scope: !1810)
!1822 = !DILocation(line: 30, column: 22, scope: !1810)
!1823 = !DILocation(line: 30, column: 21, scope: !1810)
!1824 = !DILocation(line: 30, column: 16, scope: !1810)
!1825 = !DILocalVariable(name: "rot", scope: !1810, file: !55, line: 31, type: !52, align: 1)
!1826 = !DILocation(line: 31, column: 7, scope: !1810)
!1827 = !DILocation(line: 31, column: 21, scope: !1810)
!1828 = !DILocation(line: 31, column: 14, scope: !1810)
!1829 = !DILocation(line: 32, column: 3, scope: !1810)
!1830 = !DILocation(line: 32, column: 8, scope: !1810)
!1831 = !DILocation(line: 32, column: 7, scope: !1810)
!1832 = !DILocation(line: 33, column: 18, scope: !1810)
!1833 = !DILocation(line: 33, column: 11, scope: !1810)
!1834 = !DILocation(line: 33, column: 42, scope: !1810)
!1835 = !DILocation(line: 147, column: 53, scope: !1836, inlinedAt: !1833)
!1836 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1837 = !DILocation(line: 147, column: 59, scope: !1836, inlinedAt: !1833)
!1838 = !DILocation(line: 147, column: 65, scope: !1836, inlinedAt: !1833)
!1839 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !55, file: !55, line: 39, type: !1791, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1840 = !DILocation(line: 39, column: 66, scope: !1839)
!1841 = !DILocalVariable(name: "self", arg: 1, scope: !1839, file: !55, line: 39, type: !1793)
!1842 = !DILocation(line: 39, column: 33, scope: !1839)
!1843 = !DILocalVariable(name: "bytes", arg: 2, scope: !1839, file: !55, line: 39, type: !256)
!1844 = !DILocation(line: 39, column: 47, scope: !1839)
!1845 = !DILocation(line: 37, column: 11, scope: !1846)
!1846 = distinct !DILexicalBlock(scope: !1839, file: !55, line: 39, column: 66)
!1847 = !DILocalVariable(name: "len", scope: !1848, file: !55, line: 146, type: !261, align: 8)
!1848 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1849 = !DILocation(line: 146, column: 6, scope: !1848, inlinedAt: !1840)
!1850 = !DILocation(line: 146, column: 12, scope: !1848, inlinedAt: !1840)
!1851 = !DILocation(line: 148, column: 2, scope: !1848, inlinedAt: !1840)
!1852 = !DILocation(line: 148, column: 9, scope: !1853, inlinedAt: !1840)
!1853 = distinct !DILexicalBlock(scope: !1848, file: !2, line: 148, column: 2)
!1854 = !DILocalVariable(name: "value", scope: !1855, file: !55, line: 150, type: !6, align: 8)
!1855 = distinct !DILexicalBlock(scope: !1853, file: !2, line: 149, column: 2)
!1856 = !DILocation(line: 150, column: 7, scope: !1855, inlinedAt: !1840)
!1857 = !DILocation(line: 39, column: 89, scope: !1855, inlinedAt: !1840)
!1858 = !DILocation(line: 150, column: 15, scope: !1855, inlinedAt: !1840)
!1859 = !DILocation(line: 151, column: 7, scope: !1855, inlinedAt: !1840)
!1860 = !DILocation(line: 153, column: 33, scope: !1861, inlinedAt: !1840)
!1861 = distinct !DILexicalBlock(scope: !1855, file: !2, line: 152, column: 3)
!1862 = !DILocation(line: 153, column: 4, scope: !1861, inlinedAt: !1840)
!1863 = !DILocation(line: 153, column: 10, scope: !1861, inlinedAt: !1840)
!1864 = !DILocation(line: 154, column: 10, scope: !1861, inlinedAt: !1840)
!1865 = !DILocation(line: 156, column: 3, scope: !1855, inlinedAt: !1840)
!1866 = !DILocation(line: 157, column: 3, scope: !1855, inlinedAt: !1840)
!1867 = !DILocation(line: 158, column: 11, scope: !1855, inlinedAt: !1840)
!1868 = !DILocation(line: 158, column: 17, scope: !1855, inlinedAt: !1840)
!1869 = !DILocation(line: 164, column: 2, scope: !1870, inlinedAt: !1871)
!1870 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1871 = !DILocation(line: 160, column: 2, scope: !1848, inlinedAt: !1840)
!1872 = !DILocation(line: 166, column: 2, scope: !1870, inlinedAt: !1871)
!1873 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !55, file: !55, line: 40, type: !1874, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1874 = !DISubroutineType(types: !1875)
!1875 = !{!15, !1793}
!1876 = !DILocation(line: 40, column: 56, scope: !1873)
!1877 = !DILocalVariable(name: "self", arg: 1, scope: !1873, file: !55, line: 40, type: !1793)
!1878 = !DILocation(line: 40, column: 37, scope: !1873)
!1879 = !DILocation(line: 40, column: 72, scope: !1880, inlinedAt: !1876)
!1880 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1881 = !DILocation(line: 138, column: 46, scope: !1880, inlinedAt: !1876)
!1882 = !DILocation(line: 138, column: 72, scope: !1880, inlinedAt: !1876)
!1883 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !55, file: !55, line: 41, type: !1884, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1884 = !DISubroutineType(types: !1885)
!1885 = !{!20, !1793}
!1886 = !DILocation(line: 41, column: 50, scope: !1883)
!1887 = !DILocalVariable(name: "self", arg: 1, scope: !1883, file: !55, line: 41, type: !1793)
!1888 = !DILocation(line: 41, column: 31, scope: !1883)
!1889 = !DILocation(line: 41, column: 56, scope: !1883)
!1890 = !DILocation(line: 41, column: 51, scope: !1883)
!1891 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !55, file: !55, line: 42, type: !1892, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1892 = !DISubroutineType(types: !1893)
!1893 = !{!23, !1793}
!1894 = !DILocation(line: 42, column: 54, scope: !1891)
!1895 = !DILocalVariable(name: "self", arg: 1, scope: !1891, file: !55, line: 42, type: !1793)
!1896 = !DILocation(line: 42, column: 35, scope: !1891)
!1897 = !DILocation(line: 42, column: 62, scope: !1891)
!1898 = !DILocation(line: 42, column: 55, scope: !1891)
!1899 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !55, file: !55, line: 43, type: !1900, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1900 = !DISubroutineType(types: !1901)
!1901 = !{!52, !1793}
!1902 = !DILocation(line: 43, column: 51, scope: !1899)
!1903 = !DILocalVariable(name: "self", arg: 1, scope: !1899, file: !55, line: 43, type: !1793)
!1904 = !DILocation(line: 43, column: 32, scope: !1899)
!1905 = !DILocation(line: 43, column: 57, scope: !1899)
!1906 = !DILocation(line: 43, column: 52, scope: !1899)
!1907 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !55, file: !55, line: 49, type: !1908, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1908 = !DISubroutineType(types: !1909)
!1909 = !{null, !1910, !256}
!1910 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !1911, size: 64, align: 64, dwarfAddressSpace: 0)
!1911 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !55, file: !55, line: 47, baseType: !6, align: 8)
!1912 = !DILocation(line: 50, column: 1, scope: !1907)
!1913 = !DILocalVariable(name: "self", arg: 1, scope: !1907, file: !55, line: 49, type: !1910)
!1914 = !DILocation(line: 49, column: 30, scope: !1907)
!1915 = !DILocalVariable(name: "input", arg: 2, scope: !1907, file: !55, line: 49, type: !256)
!1916 = !DILocation(line: 49, column: 44, scope: !1907)
!1917 = !DILocation(line: 51, column: 3, scope: !1907)
!1918 = !DILocalVariable(name: "return_value", scope: !1919, file: !55, line: 10, type: !6, align: 8)
!1919 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1920 = !DILocation(line: 10, column: 8, scope: !1919, inlinedAt: !1921)
!1921 = !DILocation(line: 51, column: 11, scope: !1907)
!1922 = !DILocation(line: 342, column: 11, scope: !1923, inlinedAt: !1924)
!1923 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1924 = !DILocation(line: 11, column: 16, scope: !1919, inlinedAt: !1921)
!1925 = !DILocation(line: 11, column: 2, scope: !1919, inlinedAt: !1921)
!1926 = !DILocation(line: 12, column: 9, scope: !1919, inlinedAt: !1921)
!1927 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !55, file: !55, line: 54, type: !1928, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1928 = !DISubroutineType(types: !1929)
!1929 = !{!20, !1910}
!1930 = !DILocation(line: 55, column: 1, scope: !1927)
!1931 = !DILocalVariable(name: "self", arg: 1, scope: !1927, file: !55, line: 54, type: !1910)
!1932 = !DILocation(line: 54, column: 30, scope: !1927)
!1933 = !DILocalVariable(name: "s", scope: !1927, file: !55, line: 57, type: !390, align: 8)
!1934 = !DILocation(line: 57, column: 9, scope: !1927)
!1935 = !DILocation(line: 57, column: 14, scope: !1927)
!1936 = !DILocalVariable(name: "xor", scope: !1927, file: !55, line: 58, type: !6, align: 8)
!1937 = !DILocation(line: 58, column: 8, scope: !1927)
!1938 = !DILocation(line: 58, column: 15, scope: !1927)
!1939 = !DILocation(line: 58, column: 20, scope: !1927)
!1940 = !DILocation(line: 58, column: 19, scope: !1927)
!1941 = !DILocation(line: 58, column: 14, scope: !1927)
!1942 = !DILocalVariable(name: "rot", scope: !1927, file: !55, line: 59, type: !52, align: 1)
!1943 = !DILocation(line: 59, column: 7, scope: !1927)
!1944 = !DILocation(line: 59, column: 21, scope: !1927)
!1945 = !DILocation(line: 59, column: 14, scope: !1927)
!1946 = !DILocation(line: 60, column: 3, scope: !1927)
!1947 = !DILocation(line: 60, column: 8, scope: !1927)
!1948 = !DILocation(line: 60, column: 7, scope: !1927)
!1949 = !DILocation(line: 61, column: 17, scope: !1927)
!1950 = !DILocation(line: 61, column: 11, scope: !1927)
!1951 = !DILocation(line: 61, column: 41, scope: !1927)
!1952 = !DILocation(line: 99, column: 50, scope: !1953, inlinedAt: !1950)
!1953 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1954 = !DILocation(line: 99, column: 56, scope: !1953, inlinedAt: !1950)
!1955 = !DILocation(line: 99, column: 62, scope: !1953, inlinedAt: !1950)
!1956 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !55, file: !55, line: 67, type: !1908, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1957 = !DILocation(line: 67, column: 65, scope: !1956)
!1958 = !DILocalVariable(name: "self", arg: 1, scope: !1956, file: !55, line: 67, type: !1910)
!1959 = !DILocation(line: 67, column: 32, scope: !1956)
!1960 = !DILocalVariable(name: "bytes", arg: 2, scope: !1956, file: !55, line: 67, type: !256)
!1961 = !DILocation(line: 67, column: 46, scope: !1956)
!1962 = !DILocation(line: 65, column: 11, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1956, file: !55, line: 67, column: 65)
!1964 = !DILocalVariable(name: "len", scope: !1965, file: !55, line: 146, type: !261, align: 8)
!1965 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1966 = !DILocation(line: 146, column: 6, scope: !1965, inlinedAt: !1957)
!1967 = !DILocation(line: 146, column: 12, scope: !1965, inlinedAt: !1957)
!1968 = !DILocation(line: 148, column: 2, scope: !1965, inlinedAt: !1957)
!1969 = !DILocation(line: 148, column: 9, scope: !1970, inlinedAt: !1957)
!1970 = distinct !DILexicalBlock(scope: !1965, file: !2, line: 148, column: 2)
!1971 = !DILocalVariable(name: "value", scope: !1972, file: !55, line: 150, type: !20, align: 4)
!1972 = distinct !DILexicalBlock(scope: !1970, file: !2, line: 149, column: 2)
!1973 = !DILocation(line: 150, column: 7, scope: !1972, inlinedAt: !1957)
!1974 = !DILocation(line: 67, column: 88, scope: !1972, inlinedAt: !1957)
!1975 = !DILocation(line: 150, column: 15, scope: !1972, inlinedAt: !1957)
!1976 = !DILocation(line: 151, column: 7, scope: !1972, inlinedAt: !1957)
!1977 = !DILocation(line: 153, column: 33, scope: !1978, inlinedAt: !1957)
!1978 = distinct !DILexicalBlock(scope: !1972, file: !2, line: 152, column: 3)
!1979 = !DILocation(line: 153, column: 4, scope: !1978, inlinedAt: !1957)
!1980 = !DILocation(line: 153, column: 10, scope: !1978, inlinedAt: !1957)
!1981 = !DILocation(line: 154, column: 10, scope: !1978, inlinedAt: !1957)
!1982 = !DILocation(line: 156, column: 3, scope: !1972, inlinedAt: !1957)
!1983 = !DILocation(line: 157, column: 3, scope: !1972, inlinedAt: !1957)
!1984 = !DILocation(line: 158, column: 11, scope: !1972, inlinedAt: !1957)
!1985 = !DILocation(line: 158, column: 17, scope: !1972, inlinedAt: !1957)
!1986 = !DILocation(line: 164, column: 2, scope: !1987, inlinedAt: !1988)
!1987 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1988 = !DILocation(line: 160, column: 2, scope: !1965, inlinedAt: !1957)
!1989 = !DILocation(line: 166, column: 2, scope: !1987, inlinedAt: !1988)
!1990 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !55, file: !55, line: 68, type: !1991, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!1991 = !DISubroutineType(types: !1992)
!1992 = !{!15, !1910}
!1993 = !DILocation(line: 68, column: 55, scope: !1990)
!1994 = !DILocalVariable(name: "self", arg: 1, scope: !1990, file: !55, line: 68, type: !1910)
!1995 = !DILocation(line: 68, column: 36, scope: !1990)
!1996 = !DILocation(line: 68, column: 71, scope: !1997, inlinedAt: !1993)
!1997 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!1998 = !DILocation(line: 138, column: 46, scope: !1997, inlinedAt: !1993)
!1999 = !DILocation(line: 138, column: 72, scope: !1997, inlinedAt: !1993)
!2000 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !55, file: !55, line: 69, type: !2001, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2001 = !DISubroutineType(types: !2002)
!2002 = !{!6, !1910}
!2003 = !DILocation(line: 69, column: 51, scope: !2000)
!2004 = !DILocalVariable(name: "self", arg: 1, scope: !2000, file: !55, line: 69, type: !1910)
!2005 = !DILocation(line: 69, column: 32, scope: !2000)
!2006 = !DILocation(line: 69, column: 64, scope: !2007, inlinedAt: !2003)
!2007 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2008 = !DILocation(line: 139, column: 41, scope: !2007, inlinedAt: !2003)
!2009 = !DILocation(line: 139, column: 65, scope: !2007, inlinedAt: !2003)
!2010 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !55, file: !55, line: 70, type: !2011, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2011 = !DISubroutineType(types: !2012)
!2012 = !{!23, !1910}
!2013 = !DILocation(line: 70, column: 53, scope: !2010)
!2014 = !DILocalVariable(name: "self", arg: 1, scope: !2010, file: !55, line: 70, type: !1910)
!2015 = !DILocation(line: 70, column: 34, scope: !2010)
!2016 = !DILocation(line: 70, column: 61, scope: !2010)
!2017 = !DILocation(line: 70, column: 54, scope: !2010)
!2018 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !55, file: !55, line: 71, type: !2019, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2019 = !DISubroutineType(types: !2020)
!2020 = !{!52, !1910}
!2021 = !DILocation(line: 71, column: 50, scope: !2018)
!2022 = !DILocalVariable(name: "self", arg: 1, scope: !2018, file: !55, line: 71, type: !1910)
!2023 = !DILocation(line: 71, column: 31, scope: !2018)
!2024 = !DILocation(line: 71, column: 56, scope: !2018)
!2025 = !DILocation(line: 71, column: 51, scope: !2018)
!2026 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !55, file: !55, line: 78, type: !2027, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2027 = !DISubroutineType(types: !2028)
!2028 = !{null, !2029, !256}
!2029 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !2030, size: 64, align: 64, dwarfAddressSpace: 0)
!2030 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !55, file: !55, line: 76, baseType: !20, align: 4)
!2031 = !DILocation(line: 79, column: 1, scope: !2026)
!2032 = !DILocalVariable(name: "self", arg: 1, scope: !2026, file: !55, line: 78, type: !2029)
!2033 = !DILocation(line: 78, column: 30, scope: !2026)
!2034 = !DILocalVariable(name: "input", arg: 2, scope: !2026, file: !55, line: 78, type: !256)
!2035 = !DILocation(line: 78, column: 44, scope: !2026)
!2036 = !DILocation(line: 80, column: 3, scope: !2026)
!2037 = !DILocalVariable(name: "return_value", scope: !2038, file: !55, line: 10, type: !20, align: 4)
!2038 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2039 = !DILocation(line: 10, column: 8, scope: !2038, inlinedAt: !2040)
!2040 = !DILocation(line: 80, column: 11, scope: !2026)
!2041 = !DILocation(line: 342, column: 11, scope: !2042, inlinedAt: !2043)
!2042 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2043 = !DILocation(line: 11, column: 16, scope: !2038, inlinedAt: !2040)
!2044 = !DILocation(line: 11, column: 2, scope: !2038, inlinedAt: !2040)
!2045 = !DILocation(line: 12, column: 9, scope: !2038, inlinedAt: !2040)
!2046 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !55, file: !55, line: 83, type: !2047, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2047 = !DISubroutineType(types: !2048)
!2048 = !{!23, !2029}
!2049 = !DILocation(line: 84, column: 1, scope: !2046)
!2050 = !DILocalVariable(name: "self", arg: 1, scope: !2046, file: !55, line: 83, type: !2029)
!2051 = !DILocation(line: 83, column: 34, scope: !2046)
!2052 = !DILocalVariable(name: "s", scope: !2046, file: !55, line: 86, type: !498, align: 8)
!2053 = !DILocation(line: 86, column: 8, scope: !2046)
!2054 = !DILocation(line: 86, column: 13, scope: !2046)
!2055 = !DILocalVariable(name: "xor", scope: !2046, file: !55, line: 87, type: !20, align: 4)
!2056 = !DILocation(line: 87, column: 7, scope: !2046)
!2057 = !DILocation(line: 87, column: 14, scope: !2046)
!2058 = !DILocation(line: 87, column: 19, scope: !2046)
!2059 = !DILocation(line: 87, column: 18, scope: !2046)
!2060 = !DILocation(line: 87, column: 13, scope: !2046)
!2061 = !DILocalVariable(name: "rot", scope: !2046, file: !55, line: 88, type: !52, align: 1)
!2062 = !DILocation(line: 88, column: 7, scope: !2046)
!2063 = !DILocation(line: 88, column: 21, scope: !2046)
!2064 = !DILocation(line: 88, column: 14, scope: !2046)
!2065 = !DILocation(line: 89, column: 3, scope: !2046)
!2066 = !DILocation(line: 89, column: 8, scope: !2046)
!2067 = !DILocation(line: 89, column: 7, scope: !2046)
!2068 = !DILocation(line: 90, column: 19, scope: !2046)
!2069 = !DILocation(line: 90, column: 11, scope: !2046)
!2070 = !DILocation(line: 90, column: 43, scope: !2046)
!2071 = !DILocation(line: 115, column: 56, scope: !2072, inlinedAt: !2069)
!2072 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2073 = !DILocation(line: 115, column: 62, scope: !2072, inlinedAt: !2069)
!2074 = !DILocation(line: 115, column: 68, scope: !2072, inlinedAt: !2069)
!2075 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !55, file: !55, line: 96, type: !2027, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2076 = !DILocation(line: 96, column: 65, scope: !2075)
!2077 = !DILocalVariable(name: "self", arg: 1, scope: !2075, file: !55, line: 96, type: !2029)
!2078 = !DILocation(line: 96, column: 32, scope: !2075)
!2079 = !DILocalVariable(name: "bytes", arg: 2, scope: !2075, file: !55, line: 96, type: !256)
!2080 = !DILocation(line: 96, column: 46, scope: !2075)
!2081 = !DILocation(line: 94, column: 11, scope: !2082)
!2082 = distinct !DILexicalBlock(scope: !2075, file: !55, line: 96, column: 65)
!2083 = !DILocalVariable(name: "len", scope: !2084, file: !55, line: 146, type: !261, align: 8)
!2084 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2085 = !DILocation(line: 146, column: 6, scope: !2084, inlinedAt: !2076)
!2086 = !DILocation(line: 146, column: 12, scope: !2084, inlinedAt: !2076)
!2087 = !DILocation(line: 148, column: 2, scope: !2084, inlinedAt: !2076)
!2088 = !DILocation(line: 148, column: 9, scope: !2089, inlinedAt: !2076)
!2089 = distinct !DILexicalBlock(scope: !2084, file: !2, line: 148, column: 2)
!2090 = !DILocalVariable(name: "value", scope: !2091, file: !55, line: 150, type: !23, align: 2)
!2091 = distinct !DILexicalBlock(scope: !2089, file: !2, line: 149, column: 2)
!2092 = !DILocation(line: 150, column: 7, scope: !2091, inlinedAt: !2076)
!2093 = !DILocation(line: 96, column: 88, scope: !2091, inlinedAt: !2076)
!2094 = !DILocation(line: 150, column: 15, scope: !2091, inlinedAt: !2076)
!2095 = !DILocation(line: 151, column: 7, scope: !2091, inlinedAt: !2076)
!2096 = !DILocation(line: 153, column: 33, scope: !2097, inlinedAt: !2076)
!2097 = distinct !DILexicalBlock(scope: !2091, file: !2, line: 152, column: 3)
!2098 = !DILocation(line: 153, column: 4, scope: !2097, inlinedAt: !2076)
!2099 = !DILocation(line: 153, column: 10, scope: !2097, inlinedAt: !2076)
!2100 = !DILocation(line: 154, column: 10, scope: !2097, inlinedAt: !2076)
!2101 = !DILocation(line: 156, column: 3, scope: !2091, inlinedAt: !2076)
!2102 = !DILocation(line: 157, column: 3, scope: !2091, inlinedAt: !2076)
!2103 = !DILocation(line: 158, column: 11, scope: !2091, inlinedAt: !2076)
!2104 = !DILocation(line: 158, column: 17, scope: !2091, inlinedAt: !2076)
!2105 = !DILocation(line: 164, column: 2, scope: !2106, inlinedAt: !2107)
!2106 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2107 = !DILocation(line: 160, column: 2, scope: !2084, inlinedAt: !2076)
!2108 = !DILocation(line: 166, column: 2, scope: !2106, inlinedAt: !2107)
!2109 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !55, file: !55, line: 97, type: !2110, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2110 = !DISubroutineType(types: !2111)
!2111 = !{!15, !2029}
!2112 = !DILocation(line: 97, column: 55, scope: !2109)
!2113 = !DILocalVariable(name: "self", arg: 1, scope: !2109, file: !55, line: 97, type: !2029)
!2114 = !DILocation(line: 97, column: 36, scope: !2109)
!2115 = !DILocation(line: 97, column: 71, scope: !2116, inlinedAt: !2112)
!2116 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2117 = !DILocation(line: 138, column: 46, scope: !2116, inlinedAt: !2112)
!2118 = !DILocation(line: 138, column: 72, scope: !2116, inlinedAt: !2112)
!2119 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !55, file: !55, line: 98, type: !2120, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2120 = !DISubroutineType(types: !2121)
!2121 = !{!6, !2029}
!2122 = !DILocation(line: 98, column: 51, scope: !2119)
!2123 = !DILocalVariable(name: "self", arg: 1, scope: !2119, file: !55, line: 98, type: !2029)
!2124 = !DILocation(line: 98, column: 32, scope: !2119)
!2125 = !DILocation(line: 98, column: 64, scope: !2126, inlinedAt: !2122)
!2126 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2127 = !DILocation(line: 139, column: 41, scope: !2126, inlinedAt: !2122)
!2128 = !DILocation(line: 139, column: 65, scope: !2126, inlinedAt: !2122)
!2129 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !55, file: !55, line: 99, type: !2130, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2130 = !DISubroutineType(types: !2131)
!2131 = !{!20, !2029}
!2132 = !DILocation(line: 99, column: 49, scope: !2129)
!2133 = !DILocalVariable(name: "self", arg: 1, scope: !2129, file: !55, line: 99, type: !2029)
!2134 = !DILocation(line: 99, column: 30, scope: !2129)
!2135 = !DILocation(line: 99, column: 63, scope: !2136, inlinedAt: !2132)
!2136 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2137 = !DILocation(line: 140, column: 41, scope: !2136, inlinedAt: !2132)
!2138 = !DILocation(line: 140, column: 64, scope: !2136, inlinedAt: !2132)
!2139 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !55, file: !55, line: 100, type: !2140, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2140 = !DISubroutineType(types: !2141)
!2141 = !{!52, !2029}
!2142 = !DILocation(line: 100, column: 50, scope: !2139)
!2143 = !DILocalVariable(name: "self", arg: 1, scope: !2139, file: !55, line: 100, type: !2029)
!2144 = !DILocation(line: 100, column: 31, scope: !2139)
!2145 = !DILocation(line: 100, column: 56, scope: !2139)
!2146 = !DILocation(line: 100, column: 51, scope: !2139)
!2147 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !55, file: !55, line: 106, type: !2148, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2148 = !DISubroutineType(types: !2149)
!2149 = !{null, !2150, !256}
!2150 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !2151, size: 64, align: 64, dwarfAddressSpace: 0)
!2151 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !55, file: !55, line: 104, baseType: !23, align: 2)
!2152 = !DILocation(line: 107, column: 1, scope: !2147)
!2153 = !DILocalVariable(name: "self", arg: 1, scope: !2147, file: !55, line: 106, type: !2150)
!2154 = !DILocation(line: 106, column: 30, scope: !2147)
!2155 = !DILocalVariable(name: "input", arg: 2, scope: !2147, file: !55, line: 106, type: !256)
!2156 = !DILocation(line: 106, column: 44, scope: !2147)
!2157 = !DILocation(line: 108, column: 3, scope: !2147)
!2158 = !DILocalVariable(name: "return_value", scope: !2159, file: !55, line: 10, type: !23, align: 2)
!2159 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2160 = !DILocation(line: 10, column: 8, scope: !2159, inlinedAt: !2161)
!2161 = !DILocation(line: 108, column: 11, scope: !2147)
!2162 = !DILocation(line: 342, column: 11, scope: !2163, inlinedAt: !2164)
!2163 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2164 = !DILocation(line: 11, column: 16, scope: !2159, inlinedAt: !2161)
!2165 = !DILocation(line: 11, column: 2, scope: !2159, inlinedAt: !2161)
!2166 = !DILocation(line: 12, column: 9, scope: !2159, inlinedAt: !2161)
!2167 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !55, file: !55, line: 111, type: !2168, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2168 = !DISubroutineType(types: !2169)
!2169 = !{!52, !2150}
!2170 = !DILocation(line: 112, column: 1, scope: !2167)
!2171 = !DILocalVariable(name: "self", arg: 1, scope: !2167, file: !55, line: 111, type: !2150)
!2172 = !DILocation(line: 111, column: 31, scope: !2167)
!2173 = !DILocalVariable(name: "s", scope: !2167, file: !55, line: 114, type: !606, align: 8)
!2174 = !DILocation(line: 114, column: 10, scope: !2167)
!2175 = !DILocation(line: 114, column: 15, scope: !2167)
!2176 = !DILocalVariable(name: "xor", scope: !2167, file: !55, line: 115, type: !23, align: 2)
!2177 = !DILocation(line: 115, column: 9, scope: !2167)
!2178 = !DILocation(line: 115, column: 16, scope: !2167)
!2179 = !DILocation(line: 115, column: 21, scope: !2167)
!2180 = !DILocation(line: 115, column: 20, scope: !2167)
!2181 = !DILocation(line: 115, column: 15, scope: !2167)
!2182 = !DILocalVariable(name: "rot", scope: !2167, file: !55, line: 116, type: !52, align: 1)
!2183 = !DILocation(line: 116, column: 7, scope: !2167)
!2184 = !DILocation(line: 116, column: 21, scope: !2167)
!2185 = !DILocation(line: 116, column: 14, scope: !2167)
!2186 = !DILocation(line: 117, column: 3, scope: !2167)
!2187 = !DILocation(line: 117, column: 8, scope: !2167)
!2188 = !DILocation(line: 117, column: 7, scope: !2167)
!2189 = !DILocation(line: 118, column: 17, scope: !2167)
!2190 = !DILocation(line: 118, column: 11, scope: !2167)
!2191 = !DILocation(line: 131, column: 50, scope: !2192, inlinedAt: !2190)
!2192 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2193 = !DILocation(line: 131, column: 56, scope: !2192, inlinedAt: !2190)
!2194 = !DILocation(line: 131, column: 62, scope: !2192, inlinedAt: !2190)
!2195 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !55, file: !55, line: 121, type: !2148, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2196 = !DILocation(line: 121, column: 65, scope: !2195)
!2197 = !DILocalVariable(name: "self", arg: 1, scope: !2195, file: !55, line: 121, type: !2150)
!2198 = !DILocation(line: 121, column: 32, scope: !2195)
!2199 = !DILocalVariable(name: "bytes", arg: 2, scope: !2195, file: !55, line: 121, type: !256)
!2200 = !DILocation(line: 121, column: 46, scope: !2195)
!2201 = !DILocalVariable(name: "len", scope: !2202, file: !55, line: 146, type: !261, align: 8)
!2202 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2203 = !DILocation(line: 146, column: 6, scope: !2202, inlinedAt: !2196)
!2204 = !DILocation(line: 146, column: 12, scope: !2202, inlinedAt: !2196)
!2205 = !DILocation(line: 148, column: 2, scope: !2202, inlinedAt: !2196)
!2206 = !DILocation(line: 148, column: 9, scope: !2207, inlinedAt: !2196)
!2207 = distinct !DILexicalBlock(scope: !2202, file: !2, line: 148, column: 2)
!2208 = !DILocalVariable(name: "value", scope: !2209, file: !55, line: 150, type: !52, align: 1)
!2209 = distinct !DILexicalBlock(scope: !2207, file: !2, line: 149, column: 2)
!2210 = !DILocation(line: 150, column: 7, scope: !2209, inlinedAt: !2196)
!2211 = !DILocation(line: 121, column: 88, scope: !2209, inlinedAt: !2196)
!2212 = !DILocation(line: 150, column: 15, scope: !2209, inlinedAt: !2196)
!2213 = !DILocation(line: 151, column: 7, scope: !2209, inlinedAt: !2196)
!2214 = !DILocation(line: 153, column: 33, scope: !2215, inlinedAt: !2196)
!2215 = distinct !DILexicalBlock(scope: !2209, file: !2, line: 152, column: 3)
!2216 = !DILocation(line: 153, column: 4, scope: !2215, inlinedAt: !2196)
!2217 = !DILocation(line: 153, column: 10, scope: !2215, inlinedAt: !2196)
!2218 = !DILocation(line: 154, column: 10, scope: !2215, inlinedAt: !2196)
!2219 = !DILocation(line: 156, column: 3, scope: !2209, inlinedAt: !2196)
!2220 = !DILocation(line: 157, column: 3, scope: !2209, inlinedAt: !2196)
!2221 = !DILocation(line: 158, column: 11, scope: !2209, inlinedAt: !2196)
!2222 = !DILocation(line: 158, column: 17, scope: !2209, inlinedAt: !2196)
!2223 = !DILocation(line: 164, column: 2, scope: !2224, inlinedAt: !2225)
!2224 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2225 = !DILocation(line: 160, column: 2, scope: !2202, inlinedAt: !2196)
!2226 = !DILocation(line: 166, column: 2, scope: !2224, inlinedAt: !2225)
!2227 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !55, file: !55, line: 122, type: !2228, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2228 = !DISubroutineType(types: !2229)
!2229 = !{!15, !2150}
!2230 = !DILocation(line: 122, column: 55, scope: !2227)
!2231 = !DILocalVariable(name: "self", arg: 1, scope: !2227, file: !55, line: 122, type: !2150)
!2232 = !DILocation(line: 122, column: 36, scope: !2227)
!2233 = !DILocation(line: 122, column: 71, scope: !2234, inlinedAt: !2230)
!2234 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2235 = !DILocation(line: 138, column: 46, scope: !2234, inlinedAt: !2230)
!2236 = !DILocation(line: 138, column: 72, scope: !2234, inlinedAt: !2230)
!2237 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !55, file: !55, line: 123, type: !2238, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2238 = !DISubroutineType(types: !2239)
!2239 = !{!6, !2150}
!2240 = !DILocation(line: 123, column: 51, scope: !2237)
!2241 = !DILocalVariable(name: "self", arg: 1, scope: !2237, file: !55, line: 123, type: !2150)
!2242 = !DILocation(line: 123, column: 32, scope: !2237)
!2243 = !DILocation(line: 123, column: 64, scope: !2244, inlinedAt: !2240)
!2244 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2245 = !DILocation(line: 139, column: 41, scope: !2244, inlinedAt: !2240)
!2246 = !DILocation(line: 139, column: 65, scope: !2244, inlinedAt: !2240)
!2247 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !55, file: !55, line: 124, type: !2248, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2248 = !DISubroutineType(types: !2249)
!2249 = !{!20, !2150}
!2250 = !DILocation(line: 124, column: 49, scope: !2247)
!2251 = !DILocalVariable(name: "self", arg: 1, scope: !2247, file: !55, line: 124, type: !2150)
!2252 = !DILocation(line: 124, column: 30, scope: !2247)
!2253 = !DILocation(line: 124, column: 63, scope: !2254, inlinedAt: !2250)
!2254 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2255 = !DILocation(line: 140, column: 41, scope: !2254, inlinedAt: !2250)
!2256 = !DILocation(line: 140, column: 64, scope: !2254, inlinedAt: !2250)
!2257 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !55, file: !55, line: 125, type: !2258, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2258 = !DISubroutineType(types: !2259)
!2259 = !{!23, !2150}
!2260 = !DILocation(line: 125, column: 53, scope: !2257)
!2261 = !DILocalVariable(name: "self", arg: 1, scope: !2257, file: !55, line: 125, type: !2150)
!2262 = !DILocation(line: 125, column: 34, scope: !2257)
!2263 = !DILocation(line: 125, column: 68, scope: !2264, inlinedAt: !2260)
!2264 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2265 = !DILocation(line: 141, column: 44, scope: !2264, inlinedAt: !2260)
!2266 = !DILocation(line: 141, column: 68, scope: !2264, inlinedAt: !2260)
!2267 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !81, file: !81, line: 20, type: !2268, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2268 = !DISubroutineType(types: !2269)
!2269 = !{null, !256, !256}
!2270 = !DILocalVariable(name: "input", arg: 1, scope: !2267, file: !81, line: 20, type: !256)
!2271 = !DILocation(line: 20, column: 23, scope: !2267)
!2272 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !2267, file: !81, line: 20, type: !256)
!2273 = !DILocation(line: 20, column: 37, scope: !2267)
!2274 = !DILocalVariable(name: "out_chars", scope: !2267, file: !81, line: 26, type: !261, align: 8)
!2275 = !DILocation(line: 26, column: 6, scope: !2267)
!2276 = !DILocation(line: 26, column: 18, scope: !2267)
!2277 = !DILocalVariable(name: "current", scope: !2278, file: !81, line: 536, type: !2280, align: 8)
!2278 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !2279, file: !2279, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2279 = !DIFile(filename: "mem.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !2281, size: 64, align: 64, dwarfAddressSpace: 0)
!2281 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !81, file: !81, line: 10, size: 320, align: 64, elements: !2282, identifier: "std.core.mem.allocator.TempAllocator")
!2282 = !{!2283, !2290, !2303, !2304, !2305}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !2281, file: !81, line: 12, baseType: !2284, size: 128, align: 64)
!2284 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !2285, identifier: "Allocator")
!2285 = !{!2286, !2288}
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2284, baseType: !2287, size: 64, align: 64)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2284, baseType: !2289, size: 64, align: 64, offset: 64)
!2289 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !2281, file: !81, line: 13, baseType: !2291, size: 64, align: 64, offset: 128)
!2291 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !2292, size: 64, align: 64, dwarfAddressSpace: 0)
!2292 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !81, file: !81, line: 22, size: 320, align: 64, elements: !2293, identifier: "std.core.mem.allocator.TempAllocatorPage")
!2293 = !{!2294, !2295, !2296, !2297, !2298, !2299}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !2292, file: !81, line: 24, baseType: !2291, size: 64, align: 64)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2292, file: !81, line: 25, baseType: !2287, size: 64, align: 64, offset: 64)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !2292, file: !81, line: 26, baseType: !261, size: 64, align: 64, offset: 128)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2292, file: !81, line: 27, baseType: !261, size: 64, align: 64, offset: 192)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !2292, file: !81, line: 28, baseType: !261, size: 64, align: 64, offset: 256)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2292, file: !81, line: 29, baseType: !2300, align: 8, offset: 320)
!2300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, align: 8, elements: !2301)
!2301 = !{!2302}
!2302 = !DISubrange(count: 0, lowerBound: 0)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2281, file: !81, line: 14, baseType: !261, size: 64, align: 64, offset: 192)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2281, file: !81, line: 15, baseType: !261, size: 64, align: 64, offset: 256)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2281, file: !81, line: 16, baseType: !2300, align: 8, offset: 320)
!2306 = !DILocation(line: 536, column: 17, scope: !2278, inlinedAt: !2307)
!2307 = !DILocation(line: 27, column: 2, scope: !2267)
!2308 = !DILocation(line: 396, column: 7, scope: !2309, inlinedAt: !2311)
!2309 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2310, file: !2310, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2310 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!2311 = !DILocation(line: 536, column: 38, scope: !2278, inlinedAt: !2307)
!2312 = !DILocation(line: 398, column: 3, scope: !2313, inlinedAt: !2311)
!2313 = distinct !DILexicalBlock(scope: !2309, file: !2310, line: 397, column: 2)
!2314 = !DILocation(line: 400, column: 9, scope: !2309, inlinedAt: !2311)
!2315 = !DILocalVariable(name: "mark", scope: !2278, file: !81, line: 542, type: !261, align: 8)
!2316 = !DILocation(line: 542, column: 6, scope: !2278, inlinedAt: !2307)
!2317 = !DILocation(line: 542, column: 13, scope: !2278, inlinedAt: !2307)
!2318 = !DILocalVariable(name: "words", scope: !2319, file: !81, line: 29, type: !2320, align: 8)
!2319 = distinct !DILexicalBlock(scope: !2267, file: !81, line: 28, column: 2)
!2320 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !2321, identifier: "ulong[]")
!2321 = !{!2322, !2323}
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2320, baseType: !390, size: 64, align: 64)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2320, baseType: !261, size: 64, align: 64, offset: 64)
!2324 = !DILocation(line: 29, column: 11, scope: !2319)
!2325 = !DILocation(line: 29, column: 49, scope: !2319)
!2326 = !DILocation(line: 722, column: 41, scope: !2327, inlinedAt: !2328)
!2327 = distinct !DISubprogram(name: "temp_alloc_array", linkageName: "temp_alloc_array", scope: !2279, file: !2279, line: 720, scopeLine: 720, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2328 = !DILocation(line: 29, column: 24, scope: !2319)
!2329 = !DILocation(line: 722, column: 26, scope: !2327, inlinedAt: !2328)
!2330 = !DILocation(line: 722, column: 11, scope: !2327, inlinedAt: !2328)
!2331 = !DILocation(line: 722, column: 68, scope: !2327, inlinedAt: !2328)
!2332 = !DILocation(line: 30, column: 3, scope: !2319)
!2333 = !DILocation(line: 30, column: 9, scope: !2319)
!2334 = !DILocalVariable(name: "words_len_2", scope: !2319, file: !81, line: 31, type: !261, align: 8)
!2335 = !DILocation(line: 31, column: 7, scope: !2319)
!2336 = !DILocation(line: 31, column: 21, scope: !2319)
!2337 = !DILocalVariable(name: "i", scope: !2338, file: !81, line: 34, type: !261, align: 8)
!2338 = distinct !DILexicalBlock(scope: !2319, file: !81, line: 34, column: 3)
!2339 = !DILocation(line: 34, column: 12, scope: !2338)
!2340 = !DILocation(line: 34, column: 16, scope: !2338)
!2341 = !DILocation(line: 34, column: 19, scope: !2338)
!2342 = !DILocation(line: 34, column: 23, scope: !2338)
!2343 = !DILocalVariable(name: "j", scope: !2344, file: !81, line: 36, type: !261, align: 8)
!2344 = distinct !DILexicalBlock(scope: !2338, file: !81, line: 35, column: 3)
!2345 = !DILocation(line: 36, column: 8, scope: !2344)
!2346 = !DILocation(line: 36, column: 12, scope: !2344)
!2347 = !DILocation(line: 36, column: 16, scope: !2344)
!2348 = !DILocation(line: 37, column: 4, scope: !2344)
!2349 = !DILocation(line: 37, column: 10, scope: !2344)
!2350 = !DILocation(line: 37, column: 36, scope: !2344)
!2351 = !DILocation(line: 37, column: 42, scope: !2344)
!2352 = !DILocalVariable(name: "x", scope: !2353, file: !81, line: 214, type: !6, align: 8)
!2353 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2354 = !DILocation(line: 214, column: 9, scope: !2353, inlinedAt: !2355)
!2355 = !DILocation(line: 37, column: 16, scope: !2344)
!2356 = !DILocation(line: 215, column: 38, scope: !2353, inlinedAt: !2355)
!2357 = !DILocation(line: 216, column: 10, scope: !2353, inlinedAt: !2355)
!2358 = !DILocation(line: 38, column: 4, scope: !2344)
!2359 = !DILocation(line: 38, column: 10, scope: !2344)
!2360 = !DILocation(line: 38, column: 16, scope: !2344)
!2361 = !DILocation(line: 38, column: 22, scope: !2344)
!2362 = !DILocation(line: 34, column: 38, scope: !2338)
!2363 = !DILocalVariable(name: "remaining", scope: !2319, file: !81, line: 42, type: !261, align: 8)
!2364 = !DILocation(line: 42, column: 7, scope: !2319)
!2365 = !DILocation(line: 42, column: 19, scope: !2319)
!2366 = !DILocation(line: 42, column: 31, scope: !2319)
!2367 = !DILocation(line: 43, column: 7, scope: !2319)
!2368 = !DILocalVariable(name: "rest", scope: !2369, file: !81, line: 45, type: !6, align: 8)
!2369 = distinct !DILexicalBlock(scope: !2319, file: !81, line: 44, column: 3)
!2370 = !DILocation(line: 45, column: 10, scope: !2369)
!2371 = !DILocation(line: 45, column: 17, scope: !2369)
!2372 = !DILocation(line: 46, column: 22, scope: !2369)
!2373 = !DILocation(line: 46, column: 29, scope: !2369)
!2374 = !DILocation(line: 309, column: 11, scope: !2375, inlinedAt: !2377)
!2375 = distinct !DILexicalBlock(scope: !2376, file: !2279, line: 312, column: 1)
!2376 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2279, file: !2279, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2377 = !DILocation(line: 46, column: 9, scope: !2369)
!2378 = !DILocation(line: 309, column: 23, scope: !2375, inlinedAt: !2377)
!2379 = !DILocation(line: 309, column: 29, scope: !2375, inlinedAt: !2377)
!2380 = !DILocation(line: 309, column: 36, scope: !2375, inlinedAt: !2377)
!2381 = !DILocation(line: 309, column: 43, scope: !2375, inlinedAt: !2377)
!2382 = !DILocation(line: 309, column: 49, scope: !2375, inlinedAt: !2377)
!2383 = !DILocation(line: 309, column: 56, scope: !2375, inlinedAt: !2377)
!2384 = !DILocation(line: 313, column: 11, scope: !2376, inlinedAt: !2377)
!2385 = !DILocation(line: 313, column: 16, scope: !2376, inlinedAt: !2377)
!2386 = !DILocation(line: 313, column: 21, scope: !2376, inlinedAt: !2377)
!2387 = !DILocation(line: 313, column: 26, scope: !2376, inlinedAt: !2377)
!2388 = !DILocation(line: 47, column: 4, scope: !2369)
!2389 = !DILocation(line: 47, column: 11, scope: !2369)
!2390 = !DILocation(line: 47, column: 17, scope: !2369)
!2391 = !DILocation(line: 48, column: 4, scope: !2369)
!2392 = !DILocation(line: 48, column: 11, scope: !2369)
!2393 = !DILocation(line: 48, column: 17, scope: !2369)
!2394 = !DILocation(line: 48, column: 24, scope: !2369)
!2395 = !DILocalVariable(name: "i", scope: !2396, file: !81, line: 52, type: !2397, align: 8)
!2396 = distinct !DILexicalBlock(scope: !2319, file: !81, line: 52, column: 3)
!2397 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !101)
!2398 = !DILocation(line: 52, column: 12, scope: !2396)
!2399 = !DILocation(line: 52, column: 16, scope: !2396)
!2400 = !DILocation(line: 52, column: 33, scope: !2396)
!2401 = !DILocalVariable(name: "j", scope: !2402, file: !81, line: 54, type: !2397, align: 8)
!2402 = distinct !DILexicalBlock(scope: !2396, file: !81, line: 53, column: 3)
!2403 = !DILocation(line: 54, column: 8, scope: !2402)
!2404 = !DILocation(line: 54, column: 12, scope: !2402)
!2405 = !DILocation(line: 54, column: 16, scope: !2402)
!2406 = !DILocation(line: 55, column: 4, scope: !2402)
!2407 = !DILocation(line: 55, column: 10, scope: !2402)
!2408 = !DILocation(line: 55, column: 16, scope: !2402)
!2409 = !DILocation(line: 55, column: 23, scope: !2402)
!2410 = !DILocation(line: 55, column: 32, scope: !2402)
!2411 = !DILocation(line: 56, column: 4, scope: !2402)
!2412 = !DILocation(line: 56, column: 10, scope: !2402)
!2413 = !DILocation(line: 56, column: 16, scope: !2402)
!2414 = !DILocation(line: 56, column: 22, scope: !2402)
!2415 = !DILocation(line: 52, column: 41, scope: !2396)
!2416 = !DILocalVariable(name: "i", scope: !2417, file: !81, line: 60, type: !261, align: 8)
!2417 = distinct !DILexicalBlock(scope: !2319, file: !81, line: 60, column: 3)
!2418 = !DILocation(line: 60, column: 12, scope: !2417)
!2419 = !DILocation(line: 60, column: 16, scope: !2417)
!2420 = !DILocation(line: 60, column: 19, scope: !2417)
!2421 = !DILocation(line: 60, column: 23, scope: !2417)
!2422 = !DILocalVariable(name: "j", scope: !2423, file: !81, line: 62, type: !261, align: 8)
!2423 = distinct !DILexicalBlock(scope: !2417, file: !81, line: 61, column: 3)
!2424 = !DILocation(line: 62, column: 8, scope: !2423)
!2425 = !DILocation(line: 62, column: 12, scope: !2423)
!2426 = !DILocation(line: 62, column: 16, scope: !2423)
!2427 = !DILocation(line: 63, column: 4, scope: !2423)
!2428 = !DILocation(line: 63, column: 10, scope: !2423)
!2429 = !DILocation(line: 64, column: 4, scope: !2423)
!2430 = !DILocation(line: 64, column: 10, scope: !2423)
!2431 = !DILocation(line: 64, column: 16, scope: !2423)
!2432 = !DILocation(line: 64, column: 22, scope: !2423)
!2433 = !DILocation(line: 60, column: 36, scope: !2417)
!2434 = !DILocation(line: 66, column: 28, scope: !2319)
!2435 = !DILocation(line: 66, column: 40, scope: !2319)
!2436 = !DILocation(line: 66, column: 3, scope: !2319)
!2437 = !DILocation(line: 66, column: 14, scope: !2319)
!2438 = !DILocation(line: 545, column: 17, scope: !2439, inlinedAt: !2307)
!2439 = distinct !DILexicalBlock(scope: !2278, file: !2279, line: 544, column: 2)
!2440 = !DILocation(line: 545, column: 3, scope: !2439, inlinedAt: !2307)
!2441 = !DILocation(line: 549, column: 2, scope: !2439, inlinedAt: !2307)
!2442 = !DILocation(line: 37, column: 26, scope: !2344)
!2443 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !81, file: !81, line: 75, type: !2444, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2444 = !DISubroutineType(types: !2445)
!2445 = !{!2446}
!2446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 256, align: 8, elements: !2447)
!2447 = !{!2448}
!2448 = !DISubrange(count: 32, lowerBound: 0)
!2449 = !DILocalVariable(name: "addr", scope: !2443, file: !81, line: 78, type: !2287, align: 8)
!2450 = !DILocation(line: 78, column: 8, scope: !2443)
!2451 = !DILocation(line: 78, column: 15, scope: !2443)
!2452 = !DILocation(line: 79, column: 7, scope: !2443)
!2453 = !DILocation(line: 79, column: 2, scope: !2443)
!2454 = !DILocation(line: 81, column: 2, scope: !2443)
!2455 = !DILocalVariable(name: "entropy_data", scope: !2443, file: !81, line: 82, type: !2456, align: 16)
!2456 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, align: 32, elements: !2457)
!2457 = !{!2458}
!2458 = !DISubrange(count: 8, lowerBound: 0)
!2459 = !DILocation(line: 82, column: 10, scope: !2443)
!2460 = !DILocation(line: 212, column: 20, scope: !2461, inlinedAt: !2462)
!2461 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2462 = !DILocation(line: 72, column: 26, scope: !2463, inlinedAt: !2464)
!2463 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2464 = !DILocation(line: 83, column: 3, scope: !2443)
!2465 = !DILocation(line: 212, column: 12, scope: !2461, inlinedAt: !2462)
!2466 = !DILocation(line: 72, column: 17, scope: !2463, inlinedAt: !2464)
!2467 = !DILocation(line: 212, column: 20, scope: !2468, inlinedAt: !2469)
!2468 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2469 = !DILocation(line: 72, column: 26, scope: !2470, inlinedAt: !2471)
!2470 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2471 = !DILocation(line: 84, column: 3, scope: !2443)
!2472 = !DILocation(line: 212, column: 12, scope: !2468, inlinedAt: !2469)
!2473 = !DILocation(line: 72, column: 17, scope: !2470, inlinedAt: !2471)
!2474 = !DILocation(line: 212, column: 20, scope: !2475, inlinedAt: !2476)
!2475 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2476 = !DILocation(line: 72, column: 26, scope: !2477, inlinedAt: !2478)
!2477 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2478 = !DILocation(line: 85, column: 3, scope: !2443)
!2479 = !DILocation(line: 212, column: 12, scope: !2475, inlinedAt: !2476)
!2480 = !DILocation(line: 72, column: 17, scope: !2477, inlinedAt: !2478)
!2481 = !DILocation(line: 212, column: 20, scope: !2482, inlinedAt: !2483)
!2482 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2483 = !DILocation(line: 72, column: 26, scope: !2484, inlinedAt: !2485)
!2484 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2485 = !DILocation(line: 86, column: 3, scope: !2443)
!2486 = !DILocation(line: 212, column: 12, scope: !2482, inlinedAt: !2483)
!2487 = !DILocation(line: 72, column: 17, scope: !2484, inlinedAt: !2485)
!2488 = !DILocation(line: 87, column: 3, scope: !2443)
!2489 = !DILocation(line: 88, column: 15, scope: !2443)
!2490 = !DILocation(line: 212, column: 20, scope: !2491, inlinedAt: !2492)
!2491 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2492 = !DILocation(line: 72, column: 26, scope: !2493, inlinedAt: !2494)
!2493 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2494 = !DILocation(line: 88, column: 3, scope: !2443)
!2495 = !DILocation(line: 212, column: 12, scope: !2491, inlinedAt: !2492)
!2496 = !DILocation(line: 72, column: 17, scope: !2493, inlinedAt: !2494)
!2497 = !DILocation(line: 212, column: 20, scope: !2498, inlinedAt: !2499)
!2498 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2499 = !DILocation(line: 72, column: 26, scope: !2500, inlinedAt: !2501)
!2500 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2501 = !DILocation(line: 89, column: 3, scope: !2443)
!2502 = !DILocation(line: 212, column: 12, scope: !2498, inlinedAt: !2499)
!2503 = !DILocation(line: 72, column: 17, scope: !2500, inlinedAt: !2501)
!2504 = !DILocation(line: 212, column: 20, scope: !2505, inlinedAt: !2506)
!2505 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2506 = !DILocation(line: 72, column: 26, scope: !2507, inlinedAt: !2508)
!2507 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2508 = !DILocation(line: 90, column: 3, scope: !2443)
!2509 = !DILocation(line: 212, column: 12, scope: !2505, inlinedAt: !2506)
!2510 = !DILocation(line: 72, column: 17, scope: !2507, inlinedAt: !2508)
!2511 = !DILocation(line: 212, column: 20, scope: !2512, inlinedAt: !2513)
!2512 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2513 = !DILocation(line: 92, column: 9, scope: !2443)
!2514 = !DILocation(line: 212, column: 12, scope: !2512, inlinedAt: !2513)
!2515 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !2516, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2516 = !DISubroutineType(types: !2517)
!2517 = !{null, !2518, !256}
!2518 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !2519, size: 64, align: 64, dwarfAddressSpace: 0)
!2519 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !1136, align: 16)
!2520 = !DILocation(line: 16, column: 1, scope: !2515)
!2521 = !DILocalVariable(name: "self", arg: 1, scope: !2515, file: !4, line: 15, type: !2518)
!2522 = !DILocation(line: 15, column: 32, scope: !2515)
!2523 = !DILocalVariable(name: "input", arg: 2, scope: !2515, file: !4, line: 15, type: !256)
!2524 = !DILocation(line: 15, column: 46, scope: !2515)
!2525 = !DILocation(line: 17, column: 3, scope: !2515)
!2526 = !DILocalVariable(name: "return_value", scope: !2527, file: !4, line: 10, type: !1136, align: 16)
!2527 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2528 = !DILocation(line: 10, column: 8, scope: !2527, inlinedAt: !2529)
!2529 = !DILocation(line: 17, column: 11, scope: !2515)
!2530 = !DILocation(line: 342, column: 11, scope: !2531, inlinedAt: !2532)
!2531 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2532 = !DILocation(line: 11, column: 16, scope: !2527, inlinedAt: !2529)
!2533 = !DILocation(line: 11, column: 2, scope: !2527, inlinedAt: !2529)
!2534 = !DILocation(line: 12, column: 9, scope: !2527, inlinedAt: !2529)
!2535 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !2536, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2536 = !DISubroutineType(types: !2537)
!2537 = !{!15, !2518}
!2538 = !DILocation(line: 21, column: 1, scope: !2535)
!2539 = !DILocalVariable(name: "self", arg: 1, scope: !2535, file: !4, line: 20, type: !2518)
!2540 = !DILocation(line: 20, column: 37, scope: !2535)
!2541 = !DILocalVariable(name: "s", scope: !2535, file: !4, line: 22, type: !284, align: 8)
!2542 = !DILocation(line: 22, column: 11, scope: !2535)
!2543 = !DILocation(line: 22, column: 16, scope: !2535)
!2544 = !DILocalVariable(name: "result", scope: !2535, file: !4, line: 23, type: !15, align: 16)
!2545 = !DILocation(line: 23, column: 10, scope: !2535)
!2546 = !DILocation(line: 23, column: 19, scope: !2535)
!2547 = !DILocation(line: 23, column: 21, scope: !2535)
!2548 = !DILocation(line: 23, column: 26, scope: !2535)
!2549 = !DILocation(line: 23, column: 28, scope: !2535)
!2550 = !DILocation(line: 23, column: 33, scope: !2535)
!2551 = !DILocation(line: 23, column: 35, scope: !2535)
!2552 = !DILocation(line: 24, column: 2, scope: !2535)
!2553 = !DILocation(line: 24, column: 9, scope: !2535)
!2554 = !DILocation(line: 24, column: 11, scope: !2535)
!2555 = !DILocation(line: 24, column: 16, scope: !2535)
!2556 = !DILocation(line: 24, column: 18, scope: !2535)
!2557 = !DILocation(line: 25, column: 2, scope: !2535)
!2558 = !DILocation(line: 25, column: 4, scope: !2535)
!2559 = !DILocation(line: 25, column: 9, scope: !2535)
!2560 = !DILocation(line: 25, column: 11, scope: !2535)
!2561 = !DILocation(line: 25, column: 16, scope: !2535)
!2562 = !DILocation(line: 25, column: 18, scope: !2535)
!2563 = !DILocation(line: 26, column: 2, scope: !2535)
!2564 = !DILocation(line: 26, column: 4, scope: !2535)
!2565 = !DILocation(line: 26, column: 9, scope: !2535)
!2566 = !DILocation(line: 26, column: 11, scope: !2535)
!2567 = !DILocation(line: 163, column: 59, scope: !2568, inlinedAt: !2565)
!2568 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2569 = !DILocation(line: 163, column: 65, scope: !2568, inlinedAt: !2565)
!2570 = !DILocation(line: 163, column: 71, scope: !2568, inlinedAt: !2565)
!2571 = !DILocation(line: 26, column: 25, scope: !2535)
!2572 = !DILocation(line: 27, column: 2, scope: !2535)
!2573 = !DILocation(line: 27, column: 4, scope: !2535)
!2574 = !DILocation(line: 28, column: 9, scope: !2535)
!2575 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !2516, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2576 = !DILocation(line: 34, column: 66, scope: !2575)
!2577 = !DILocalVariable(name: "self", arg: 1, scope: !2575, file: !4, line: 34, type: !2518)
!2578 = !DILocation(line: 34, column: 33, scope: !2575)
!2579 = !DILocalVariable(name: "bytes", arg: 2, scope: !2575, file: !4, line: 34, type: !256)
!2580 = !DILocation(line: 34, column: 47, scope: !2575)
!2581 = !DILocation(line: 32, column: 11, scope: !2582)
!2582 = distinct !DILexicalBlock(scope: !2575, file: !4, line: 34, column: 66)
!2583 = !DILocalVariable(name: "len", scope: !2584, file: !4, line: 146, type: !261, align: 8)
!2584 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2585 = !DILocation(line: 146, column: 6, scope: !2584, inlinedAt: !2576)
!2586 = !DILocation(line: 146, column: 12, scope: !2584, inlinedAt: !2576)
!2587 = !DILocation(line: 148, column: 2, scope: !2584, inlinedAt: !2576)
!2588 = !DILocation(line: 148, column: 9, scope: !2589, inlinedAt: !2576)
!2589 = distinct !DILexicalBlock(scope: !2584, file: !2, line: 148, column: 2)
!2590 = !DILocalVariable(name: "value", scope: !2591, file: !4, line: 150, type: !15, align: 16)
!2591 = distinct !DILexicalBlock(scope: !2589, file: !2, line: 149, column: 2)
!2592 = !DILocation(line: 150, column: 7, scope: !2591, inlinedAt: !2576)
!2593 = !DILocation(line: 34, column: 89, scope: !2591, inlinedAt: !2576)
!2594 = !DILocation(line: 150, column: 15, scope: !2591, inlinedAt: !2576)
!2595 = !DILocation(line: 151, column: 7, scope: !2591, inlinedAt: !2576)
!2596 = !DILocation(line: 153, column: 33, scope: !2597, inlinedAt: !2576)
!2597 = distinct !DILexicalBlock(scope: !2591, file: !2, line: 152, column: 3)
!2598 = !DILocation(line: 153, column: 4, scope: !2597, inlinedAt: !2576)
!2599 = !DILocation(line: 153, column: 10, scope: !2597, inlinedAt: !2576)
!2600 = !DILocation(line: 154, column: 10, scope: !2597, inlinedAt: !2576)
!2601 = !DILocation(line: 156, column: 3, scope: !2591, inlinedAt: !2576)
!2602 = !DILocation(line: 157, column: 3, scope: !2591, inlinedAt: !2576)
!2603 = !DILocation(line: 158, column: 11, scope: !2591, inlinedAt: !2576)
!2604 = !DILocation(line: 158, column: 17, scope: !2591, inlinedAt: !2576)
!2605 = !DILocation(line: 164, column: 2, scope: !2606, inlinedAt: !2607)
!2606 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2607 = !DILocation(line: 160, column: 2, scope: !2584, inlinedAt: !2576)
!2608 = !DILocation(line: 166, column: 2, scope: !2606, inlinedAt: !2607)
!2609 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !2610, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2610 = !DISubroutineType(types: !2611)
!2611 = !{!6, !2518}
!2612 = !DILocation(line: 35, column: 52, scope: !2609)
!2613 = !DILocalVariable(name: "self", arg: 1, scope: !2609, file: !4, line: 35, type: !2518)
!2614 = !DILocation(line: 35, column: 33, scope: !2609)
!2615 = !DILocation(line: 35, column: 58, scope: !2609)
!2616 = !DILocation(line: 35, column: 53, scope: !2609)
!2617 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !2618, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2618 = !DISubroutineType(types: !2619)
!2619 = !{!20, !2518}
!2620 = !DILocation(line: 36, column: 50, scope: !2617)
!2621 = !DILocalVariable(name: "self", arg: 1, scope: !2617, file: !4, line: 36, type: !2518)
!2622 = !DILocation(line: 36, column: 31, scope: !2617)
!2623 = !DILocation(line: 36, column: 56, scope: !2617)
!2624 = !DILocation(line: 36, column: 51, scope: !2617)
!2625 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !2626, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{!23, !2518}
!2628 = !DILocation(line: 37, column: 54, scope: !2625)
!2629 = !DILocalVariable(name: "self", arg: 1, scope: !2625, file: !4, line: 37, type: !2518)
!2630 = !DILocation(line: 37, column: 35, scope: !2625)
!2631 = !DILocation(line: 37, column: 62, scope: !2625)
!2632 = !DILocation(line: 37, column: 55, scope: !2625)
!2633 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !2634, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2634 = !DISubroutineType(types: !2635)
!2635 = !{!52, !2518}
!2636 = !DILocation(line: 38, column: 51, scope: !2633)
!2637 = !DILocalVariable(name: "self", arg: 1, scope: !2633, file: !4, line: 38, type: !2518)
!2638 = !DILocation(line: 38, column: 32, scope: !2633)
!2639 = !DILocation(line: 38, column: 57, scope: !2633)
!2640 = !DILocation(line: 38, column: 52, scope: !2633)
!2641 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !2642, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2642 = !DISubroutineType(types: !2643)
!2643 = !{null, !2644, !256}
!2644 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2645 = !DILocation(line: 46, column: 1, scope: !2641)
!2646 = !DILocalVariable(name: "self", arg: 1, scope: !2641, file: !4, line: 45, type: !2644)
!2647 = !DILocation(line: 45, column: 31, scope: !2641)
!2648 = !DILocalVariable(name: "input", arg: 2, scope: !2641, file: !4, line: 45, type: !256)
!2649 = !DILocation(line: 45, column: 45, scope: !2641)
!2650 = !DILocation(line: 47, column: 3, scope: !2641)
!2651 = !DILocalVariable(name: "return_value", scope: !2652, file: !4, line: 10, type: !5, align: 16)
!2652 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2653 = !DILocation(line: 10, column: 8, scope: !2652, inlinedAt: !2654)
!2654 = !DILocation(line: 47, column: 11, scope: !2641)
!2655 = !DILocation(line: 342, column: 11, scope: !2656, inlinedAt: !2657)
!2656 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2657 = !DILocation(line: 11, column: 16, scope: !2652, inlinedAt: !2654)
!2658 = !DILocation(line: 11, column: 2, scope: !2652, inlinedAt: !2654)
!2659 = !DILocation(line: 12, column: 9, scope: !2652, inlinedAt: !2654)
!2660 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !2661, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2661 = !DISubroutineType(types: !2662)
!2662 = !{!6, !2644}
!2663 = !DILocation(line: 51, column: 1, scope: !2660)
!2664 = !DILocalVariable(name: "self", arg: 1, scope: !2660, file: !4, line: 50, type: !2644)
!2665 = !DILocation(line: 50, column: 32, scope: !2660)
!2666 = !DILocalVariable(name: "s", scope: !2660, file: !4, line: 52, type: !390, align: 8)
!2667 = !DILocation(line: 52, column: 9, scope: !2660)
!2668 = !DILocation(line: 52, column: 14, scope: !2660)
!2669 = !DILocalVariable(name: "result", scope: !2660, file: !4, line: 53, type: !6, align: 8)
!2670 = !DILocation(line: 53, column: 8, scope: !2660)
!2671 = !DILocation(line: 53, column: 17, scope: !2660)
!2672 = !DILocation(line: 53, column: 19, scope: !2660)
!2673 = !DILocation(line: 53, column: 24, scope: !2660)
!2674 = !DILocation(line: 53, column: 26, scope: !2660)
!2675 = !DILocation(line: 53, column: 31, scope: !2660)
!2676 = !DILocation(line: 53, column: 33, scope: !2660)
!2677 = !DILocation(line: 54, column: 2, scope: !2660)
!2678 = !DILocation(line: 54, column: 9, scope: !2660)
!2679 = !DILocation(line: 54, column: 11, scope: !2660)
!2680 = !DILocation(line: 54, column: 16, scope: !2660)
!2681 = !DILocation(line: 54, column: 18, scope: !2660)
!2682 = !DILocation(line: 55, column: 2, scope: !2660)
!2683 = !DILocation(line: 55, column: 4, scope: !2660)
!2684 = !DILocation(line: 55, column: 9, scope: !2660)
!2685 = !DILocation(line: 55, column: 11, scope: !2660)
!2686 = !DILocation(line: 55, column: 16, scope: !2660)
!2687 = !DILocation(line: 55, column: 18, scope: !2660)
!2688 = !DILocation(line: 56, column: 2, scope: !2660)
!2689 = !DILocation(line: 56, column: 4, scope: !2660)
!2690 = !DILocation(line: 56, column: 9, scope: !2660)
!2691 = !DILocation(line: 56, column: 11, scope: !2660)
!2692 = !DILocation(line: 147, column: 53, scope: !2693, inlinedAt: !2690)
!2693 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2694 = !DILocation(line: 147, column: 59, scope: !2693, inlinedAt: !2690)
!2695 = !DILocation(line: 147, column: 65, scope: !2693, inlinedAt: !2690)
!2696 = !DILocation(line: 56, column: 25, scope: !2660)
!2697 = !DILocation(line: 57, column: 2, scope: !2660)
!2698 = !DILocation(line: 57, column: 4, scope: !2660)
!2699 = !DILocation(line: 58, column: 9, scope: !2660)
!2700 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !2642, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2701 = !DILocation(line: 64, column: 65, scope: !2700)
!2702 = !DILocalVariable(name: "self", arg: 1, scope: !2700, file: !4, line: 64, type: !2644)
!2703 = !DILocation(line: 64, column: 32, scope: !2700)
!2704 = !DILocalVariable(name: "bytes", arg: 2, scope: !2700, file: !4, line: 64, type: !256)
!2705 = !DILocation(line: 64, column: 46, scope: !2700)
!2706 = !DILocation(line: 62, column: 11, scope: !2707)
!2707 = distinct !DILexicalBlock(scope: !2700, file: !4, line: 64, column: 65)
!2708 = !DILocalVariable(name: "len", scope: !2709, file: !4, line: 146, type: !261, align: 8)
!2709 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2710 = !DILocation(line: 146, column: 6, scope: !2709, inlinedAt: !2701)
!2711 = !DILocation(line: 146, column: 12, scope: !2709, inlinedAt: !2701)
!2712 = !DILocation(line: 148, column: 2, scope: !2709, inlinedAt: !2701)
!2713 = !DILocation(line: 148, column: 9, scope: !2714, inlinedAt: !2701)
!2714 = distinct !DILexicalBlock(scope: !2709, file: !2, line: 148, column: 2)
!2715 = !DILocalVariable(name: "value", scope: !2716, file: !4, line: 150, type: !6, align: 8)
!2716 = distinct !DILexicalBlock(scope: !2714, file: !2, line: 149, column: 2)
!2717 = !DILocation(line: 150, column: 7, scope: !2716, inlinedAt: !2701)
!2718 = !DILocation(line: 64, column: 88, scope: !2716, inlinedAt: !2701)
!2719 = !DILocation(line: 150, column: 15, scope: !2716, inlinedAt: !2701)
!2720 = !DILocation(line: 151, column: 7, scope: !2716, inlinedAt: !2701)
!2721 = !DILocation(line: 153, column: 33, scope: !2722, inlinedAt: !2701)
!2722 = distinct !DILexicalBlock(scope: !2716, file: !2, line: 152, column: 3)
!2723 = !DILocation(line: 153, column: 4, scope: !2722, inlinedAt: !2701)
!2724 = !DILocation(line: 153, column: 10, scope: !2722, inlinedAt: !2701)
!2725 = !DILocation(line: 154, column: 10, scope: !2722, inlinedAt: !2701)
!2726 = !DILocation(line: 156, column: 3, scope: !2716, inlinedAt: !2701)
!2727 = !DILocation(line: 157, column: 3, scope: !2716, inlinedAt: !2701)
!2728 = !DILocation(line: 158, column: 11, scope: !2716, inlinedAt: !2701)
!2729 = !DILocation(line: 158, column: 17, scope: !2716, inlinedAt: !2701)
!2730 = !DILocation(line: 164, column: 2, scope: !2731, inlinedAt: !2732)
!2731 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2732 = !DILocation(line: 160, column: 2, scope: !2709, inlinedAt: !2701)
!2733 = !DILocation(line: 166, column: 2, scope: !2731, inlinedAt: !2732)
!2734 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !2735, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2735 = !DISubroutineType(types: !2736)
!2736 = !{!15, !2644}
!2737 = !DILocation(line: 65, column: 55, scope: !2734)
!2738 = !DILocalVariable(name: "self", arg: 1, scope: !2734, file: !4, line: 65, type: !2644)
!2739 = !DILocation(line: 65, column: 36, scope: !2734)
!2740 = !DILocation(line: 65, column: 71, scope: !2741, inlinedAt: !2737)
!2741 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2742 = !DILocation(line: 138, column: 46, scope: !2741, inlinedAt: !2737)
!2743 = !DILocation(line: 138, column: 72, scope: !2741, inlinedAt: !2737)
!2744 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !2745, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2745 = !DISubroutineType(types: !2746)
!2746 = !{!20, !2644}
!2747 = !DILocation(line: 66, column: 49, scope: !2744)
!2748 = !DILocalVariable(name: "self", arg: 1, scope: !2744, file: !4, line: 66, type: !2644)
!2749 = !DILocation(line: 66, column: 30, scope: !2744)
!2750 = !DILocation(line: 66, column: 55, scope: !2744)
!2751 = !DILocation(line: 66, column: 50, scope: !2744)
!2752 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !2753, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2753 = !DISubroutineType(types: !2754)
!2754 = !{!23, !2644}
!2755 = !DILocation(line: 67, column: 53, scope: !2752)
!2756 = !DILocalVariable(name: "self", arg: 1, scope: !2752, file: !4, line: 67, type: !2644)
!2757 = !DILocation(line: 67, column: 34, scope: !2752)
!2758 = !DILocation(line: 67, column: 61, scope: !2752)
!2759 = !DILocation(line: 67, column: 54, scope: !2752)
!2760 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !2761, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2761 = !DISubroutineType(types: !2762)
!2762 = !{!52, !2644}
!2763 = !DILocation(line: 68, column: 50, scope: !2760)
!2764 = !DILocalVariable(name: "self", arg: 1, scope: !2760, file: !4, line: 68, type: !2644)
!2765 = !DILocation(line: 68, column: 31, scope: !2760)
!2766 = !DILocation(line: 68, column: 56, scope: !2760)
!2767 = !DILocation(line: 68, column: 51, scope: !2760)
!2768 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !2769, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2769 = !DISubroutineType(types: !2770)
!2770 = !{null, !2771, !256}
!2771 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !2772, size: 64, align: 64, dwarfAddressSpace: 0)
!2772 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !1399, align: 4)
!2773 = !DILocation(line: 75, column: 1, scope: !2768)
!2774 = !DILocalVariable(name: "self", arg: 1, scope: !2768, file: !4, line: 74, type: !2771)
!2775 = !DILocation(line: 74, column: 31, scope: !2768)
!2776 = !DILocalVariable(name: "input", arg: 2, scope: !2768, file: !4, line: 74, type: !256)
!2777 = !DILocation(line: 74, column: 45, scope: !2768)
!2778 = !DILocation(line: 76, column: 3, scope: !2768)
!2779 = !DILocalVariable(name: "return_value", scope: !2780, file: !4, line: 10, type: !1399, align: 16)
!2780 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2781 = !DILocation(line: 10, column: 8, scope: !2780, inlinedAt: !2782)
!2782 = !DILocation(line: 76, column: 11, scope: !2768)
!2783 = !DILocation(line: 342, column: 11, scope: !2784, inlinedAt: !2785)
!2784 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2785 = !DILocation(line: 11, column: 16, scope: !2780, inlinedAt: !2782)
!2786 = !DILocation(line: 11, column: 2, scope: !2780, inlinedAt: !2782)
!2787 = !DILocation(line: 12, column: 9, scope: !2780, inlinedAt: !2782)
!2788 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !2789, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2789 = !DISubroutineType(types: !2790)
!2790 = !{!20, !2771}
!2791 = !DILocation(line: 80, column: 1, scope: !2788)
!2792 = !DILocalVariable(name: "sfc", arg: 1, scope: !2788, file: !4, line: 79, type: !2771)
!2793 = !DILocation(line: 79, column: 30, scope: !2788)
!2794 = !DILocalVariable(name: "s", scope: !2788, file: !4, line: 81, type: !498, align: 8)
!2795 = !DILocation(line: 81, column: 8, scope: !2788)
!2796 = !DILocation(line: 81, column: 13, scope: !2788)
!2797 = !DILocalVariable(name: "result", scope: !2788, file: !4, line: 82, type: !20, align: 4)
!2798 = !DILocation(line: 82, column: 7, scope: !2788)
!2799 = !DILocation(line: 82, column: 16, scope: !2788)
!2800 = !DILocation(line: 82, column: 18, scope: !2788)
!2801 = !DILocation(line: 82, column: 23, scope: !2788)
!2802 = !DILocation(line: 82, column: 25, scope: !2788)
!2803 = !DILocation(line: 82, column: 30, scope: !2788)
!2804 = !DILocation(line: 82, column: 32, scope: !2788)
!2805 = !DILocation(line: 83, column: 2, scope: !2788)
!2806 = !DILocation(line: 83, column: 9, scope: !2788)
!2807 = !DILocation(line: 83, column: 11, scope: !2788)
!2808 = !DILocation(line: 83, column: 16, scope: !2788)
!2809 = !DILocation(line: 83, column: 18, scope: !2788)
!2810 = !DILocation(line: 84, column: 2, scope: !2788)
!2811 = !DILocation(line: 84, column: 4, scope: !2788)
!2812 = !DILocation(line: 84, column: 9, scope: !2788)
!2813 = !DILocation(line: 84, column: 11, scope: !2788)
!2814 = !DILocation(line: 84, column: 16, scope: !2788)
!2815 = !DILocation(line: 84, column: 18, scope: !2788)
!2816 = !DILocation(line: 85, column: 2, scope: !2788)
!2817 = !DILocation(line: 85, column: 4, scope: !2788)
!2818 = !DILocation(line: 85, column: 9, scope: !2788)
!2819 = !DILocation(line: 85, column: 11, scope: !2788)
!2820 = !DILocation(line: 99, column: 50, scope: !2821, inlinedAt: !2818)
!2821 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2822 = !DILocation(line: 99, column: 56, scope: !2821, inlinedAt: !2818)
!2823 = !DILocation(line: 99, column: 62, scope: !2821, inlinedAt: !2818)
!2824 = !DILocation(line: 85, column: 25, scope: !2788)
!2825 = !DILocation(line: 86, column: 2, scope: !2788)
!2826 = !DILocation(line: 86, column: 4, scope: !2788)
!2827 = !DILocation(line: 87, column: 9, scope: !2788)
!2828 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !2769, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2829 = !DILocation(line: 93, column: 65, scope: !2828)
!2830 = !DILocalVariable(name: "self", arg: 1, scope: !2828, file: !4, line: 93, type: !2771)
!2831 = !DILocation(line: 93, column: 32, scope: !2828)
!2832 = !DILocalVariable(name: "bytes", arg: 2, scope: !2828, file: !4, line: 93, type: !256)
!2833 = !DILocation(line: 93, column: 46, scope: !2828)
!2834 = !DILocation(line: 91, column: 11, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2828, file: !4, line: 93, column: 65)
!2836 = !DILocalVariable(name: "len", scope: !2837, file: !4, line: 146, type: !261, align: 8)
!2837 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2838 = !DILocation(line: 146, column: 6, scope: !2837, inlinedAt: !2829)
!2839 = !DILocation(line: 146, column: 12, scope: !2837, inlinedAt: !2829)
!2840 = !DILocation(line: 148, column: 2, scope: !2837, inlinedAt: !2829)
!2841 = !DILocation(line: 148, column: 9, scope: !2842, inlinedAt: !2829)
!2842 = distinct !DILexicalBlock(scope: !2837, file: !2, line: 148, column: 2)
!2843 = !DILocalVariable(name: "value", scope: !2844, file: !4, line: 150, type: !20, align: 4)
!2844 = distinct !DILexicalBlock(scope: !2842, file: !2, line: 149, column: 2)
!2845 = !DILocation(line: 150, column: 7, scope: !2844, inlinedAt: !2829)
!2846 = !DILocation(line: 93, column: 88, scope: !2844, inlinedAt: !2829)
!2847 = !DILocation(line: 150, column: 15, scope: !2844, inlinedAt: !2829)
!2848 = !DILocation(line: 151, column: 7, scope: !2844, inlinedAt: !2829)
!2849 = !DILocation(line: 153, column: 33, scope: !2850, inlinedAt: !2829)
!2850 = distinct !DILexicalBlock(scope: !2844, file: !2, line: 152, column: 3)
!2851 = !DILocation(line: 153, column: 4, scope: !2850, inlinedAt: !2829)
!2852 = !DILocation(line: 153, column: 10, scope: !2850, inlinedAt: !2829)
!2853 = !DILocation(line: 154, column: 10, scope: !2850, inlinedAt: !2829)
!2854 = !DILocation(line: 156, column: 3, scope: !2844, inlinedAt: !2829)
!2855 = !DILocation(line: 157, column: 3, scope: !2844, inlinedAt: !2829)
!2856 = !DILocation(line: 158, column: 11, scope: !2844, inlinedAt: !2829)
!2857 = !DILocation(line: 158, column: 17, scope: !2844, inlinedAt: !2829)
!2858 = !DILocation(line: 164, column: 2, scope: !2859, inlinedAt: !2860)
!2859 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2860 = !DILocation(line: 160, column: 2, scope: !2837, inlinedAt: !2829)
!2861 = !DILocation(line: 166, column: 2, scope: !2859, inlinedAt: !2860)
!2862 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !2863, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2863 = !DISubroutineType(types: !2864)
!2864 = !{!15, !2771}
!2865 = !DILocation(line: 94, column: 55, scope: !2862)
!2866 = !DILocalVariable(name: "self", arg: 1, scope: !2862, file: !4, line: 94, type: !2771)
!2867 = !DILocation(line: 94, column: 36, scope: !2862)
!2868 = !DILocation(line: 94, column: 71, scope: !2869, inlinedAt: !2865)
!2869 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2870 = !DILocation(line: 138, column: 46, scope: !2869, inlinedAt: !2865)
!2871 = !DILocation(line: 138, column: 72, scope: !2869, inlinedAt: !2865)
!2872 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !2873, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2873 = !DISubroutineType(types: !2874)
!2874 = !{!6, !2771}
!2875 = !DILocation(line: 95, column: 51, scope: !2872)
!2876 = !DILocalVariable(name: "self", arg: 1, scope: !2872, file: !4, line: 95, type: !2771)
!2877 = !DILocation(line: 95, column: 32, scope: !2872)
!2878 = !DILocation(line: 95, column: 64, scope: !2879, inlinedAt: !2875)
!2879 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2880 = !DILocation(line: 139, column: 41, scope: !2879, inlinedAt: !2875)
!2881 = !DILocation(line: 139, column: 65, scope: !2879, inlinedAt: !2875)
!2882 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !2883, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!23, !2771}
!2885 = !DILocation(line: 96, column: 53, scope: !2882)
!2886 = !DILocalVariable(name: "self", arg: 1, scope: !2882, file: !4, line: 96, type: !2771)
!2887 = !DILocation(line: 96, column: 34, scope: !2882)
!2888 = !DILocation(line: 96, column: 61, scope: !2882)
!2889 = !DILocation(line: 96, column: 54, scope: !2882)
!2890 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !2891, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2891 = !DISubroutineType(types: !2892)
!2892 = !{!52, !2771}
!2893 = !DILocation(line: 97, column: 50, scope: !2890)
!2894 = !DILocalVariable(name: "self", arg: 1, scope: !2890, file: !4, line: 97, type: !2771)
!2895 = !DILocation(line: 97, column: 31, scope: !2890)
!2896 = !DILocation(line: 97, column: 56, scope: !2890)
!2897 = !DILocation(line: 97, column: 51, scope: !2890)
!2898 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !2899, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2899 = !DISubroutineType(types: !2900)
!2900 = !{null, !2901, !256}
!2901 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !2902, size: 64, align: 64, dwarfAddressSpace: 0)
!2902 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !1534, align: 2)
!2903 = !DILocation(line: 104, column: 1, scope: !2898)
!2904 = !DILocalVariable(name: "self", arg: 1, scope: !2898, file: !4, line: 103, type: !2901)
!2905 = !DILocation(line: 103, column: 31, scope: !2898)
!2906 = !DILocalVariable(name: "input", arg: 2, scope: !2898, file: !4, line: 103, type: !256)
!2907 = !DILocation(line: 103, column: 45, scope: !2898)
!2908 = !DILocation(line: 105, column: 3, scope: !2898)
!2909 = !DILocalVariable(name: "return_value", scope: !2910, file: !4, line: 10, type: !1534, align: 2)
!2910 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2911 = !DILocation(line: 10, column: 8, scope: !2910, inlinedAt: !2912)
!2912 = !DILocation(line: 105, column: 11, scope: !2898)
!2913 = !DILocation(line: 342, column: 11, scope: !2914, inlinedAt: !2915)
!2914 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2915 = !DILocation(line: 11, column: 16, scope: !2910, inlinedAt: !2912)
!2916 = !DILocation(line: 11, column: 2, scope: !2910, inlinedAt: !2912)
!2917 = !DILocation(line: 12, column: 9, scope: !2910, inlinedAt: !2912)
!2918 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !2919, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2919 = !DISubroutineType(types: !2920)
!2920 = !{!23, !2901}
!2921 = !DILocation(line: 110, column: 1, scope: !2918)
!2922 = !DILocalVariable(name: "seed", arg: 1, scope: !2918, file: !4, line: 109, type: !2901)
!2923 = !DILocation(line: 109, column: 34, scope: !2918)
!2924 = !DILocalVariable(name: "s", scope: !2918, file: !4, line: 111, type: !606, align: 8)
!2925 = !DILocation(line: 111, column: 10, scope: !2918)
!2926 = !DILocation(line: 111, column: 15, scope: !2918)
!2927 = !DILocalVariable(name: "result", scope: !2918, file: !4, line: 112, type: !23, align: 2)
!2928 = !DILocation(line: 112, column: 9, scope: !2918)
!2929 = !DILocation(line: 112, column: 18, scope: !2918)
!2930 = !DILocation(line: 112, column: 20, scope: !2918)
!2931 = !DILocation(line: 112, column: 25, scope: !2918)
!2932 = !DILocation(line: 112, column: 27, scope: !2918)
!2933 = !DILocation(line: 112, column: 32, scope: !2918)
!2934 = !DILocation(line: 112, column: 34, scope: !2918)
!2935 = !DILocation(line: 113, column: 2, scope: !2918)
!2936 = !DILocation(line: 113, column: 9, scope: !2918)
!2937 = !DILocation(line: 113, column: 11, scope: !2918)
!2938 = !DILocation(line: 113, column: 16, scope: !2918)
!2939 = !DILocation(line: 113, column: 18, scope: !2918)
!2940 = !DILocation(line: 114, column: 2, scope: !2918)
!2941 = !DILocation(line: 114, column: 4, scope: !2918)
!2942 = !DILocation(line: 114, column: 9, scope: !2918)
!2943 = !DILocation(line: 114, column: 11, scope: !2918)
!2944 = !DILocation(line: 114, column: 16, scope: !2918)
!2945 = !DILocation(line: 114, column: 18, scope: !2918)
!2946 = !DILocation(line: 115, column: 2, scope: !2918)
!2947 = !DILocation(line: 115, column: 4, scope: !2918)
!2948 = !DILocation(line: 115, column: 9, scope: !2918)
!2949 = !DILocation(line: 115, column: 11, scope: !2918)
!2950 = !DILocation(line: 115, column: 56, scope: !2951, inlinedAt: !2948)
!2951 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2952 = !DILocation(line: 115, column: 62, scope: !2951, inlinedAt: !2948)
!2953 = !DILocation(line: 115, column: 68, scope: !2951, inlinedAt: !2948)
!2954 = !DILocation(line: 115, column: 25, scope: !2918)
!2955 = !DILocation(line: 116, column: 2, scope: !2918)
!2956 = !DILocation(line: 116, column: 4, scope: !2918)
!2957 = !DILocation(line: 117, column: 9, scope: !2918)
!2958 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !2899, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2959 = !DILocation(line: 123, column: 65, scope: !2958)
!2960 = !DILocalVariable(name: "self", arg: 1, scope: !2958, file: !4, line: 123, type: !2901)
!2961 = !DILocation(line: 123, column: 32, scope: !2958)
!2962 = !DILocalVariable(name: "bytes", arg: 2, scope: !2958, file: !4, line: 123, type: !256)
!2963 = !DILocation(line: 123, column: 46, scope: !2958)
!2964 = !DILocation(line: 121, column: 11, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2958, file: !4, line: 123, column: 65)
!2966 = !DILocalVariable(name: "len", scope: !2967, file: !4, line: 146, type: !261, align: 8)
!2967 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2968 = !DILocation(line: 146, column: 6, scope: !2967, inlinedAt: !2959)
!2969 = !DILocation(line: 146, column: 12, scope: !2967, inlinedAt: !2959)
!2970 = !DILocation(line: 148, column: 2, scope: !2967, inlinedAt: !2959)
!2971 = !DILocation(line: 148, column: 9, scope: !2972, inlinedAt: !2959)
!2972 = distinct !DILexicalBlock(scope: !2967, file: !2, line: 148, column: 2)
!2973 = !DILocalVariable(name: "value", scope: !2974, file: !4, line: 150, type: !23, align: 2)
!2974 = distinct !DILexicalBlock(scope: !2972, file: !2, line: 149, column: 2)
!2975 = !DILocation(line: 150, column: 7, scope: !2974, inlinedAt: !2959)
!2976 = !DILocation(line: 123, column: 88, scope: !2974, inlinedAt: !2959)
!2977 = !DILocation(line: 150, column: 15, scope: !2974, inlinedAt: !2959)
!2978 = !DILocation(line: 151, column: 7, scope: !2974, inlinedAt: !2959)
!2979 = !DILocation(line: 153, column: 33, scope: !2980, inlinedAt: !2959)
!2980 = distinct !DILexicalBlock(scope: !2974, file: !2, line: 152, column: 3)
!2981 = !DILocation(line: 153, column: 4, scope: !2980, inlinedAt: !2959)
!2982 = !DILocation(line: 153, column: 10, scope: !2980, inlinedAt: !2959)
!2983 = !DILocation(line: 154, column: 10, scope: !2980, inlinedAt: !2959)
!2984 = !DILocation(line: 156, column: 3, scope: !2974, inlinedAt: !2959)
!2985 = !DILocation(line: 157, column: 3, scope: !2974, inlinedAt: !2959)
!2986 = !DILocation(line: 158, column: 11, scope: !2974, inlinedAt: !2959)
!2987 = !DILocation(line: 158, column: 17, scope: !2974, inlinedAt: !2959)
!2988 = !DILocation(line: 164, column: 2, scope: !2989, inlinedAt: !2990)
!2989 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!2990 = !DILocation(line: 160, column: 2, scope: !2967, inlinedAt: !2959)
!2991 = !DILocation(line: 166, column: 2, scope: !2989, inlinedAt: !2990)
!2992 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !2993, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!2993 = !DISubroutineType(types: !2994)
!2994 = !{!15, !2901}
!2995 = !DILocation(line: 124, column: 55, scope: !2992)
!2996 = !DILocalVariable(name: "self", arg: 1, scope: !2992, file: !4, line: 124, type: !2901)
!2997 = !DILocation(line: 124, column: 36, scope: !2992)
!2998 = !DILocation(line: 124, column: 71, scope: !2999, inlinedAt: !2995)
!2999 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3000 = !DILocation(line: 138, column: 46, scope: !2999, inlinedAt: !2995)
!3001 = !DILocation(line: 138, column: 72, scope: !2999, inlinedAt: !2995)
!3002 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !3003, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3003 = !DISubroutineType(types: !3004)
!3004 = !{!6, !2901}
!3005 = !DILocation(line: 125, column: 51, scope: !3002)
!3006 = !DILocalVariable(name: "self", arg: 1, scope: !3002, file: !4, line: 125, type: !2901)
!3007 = !DILocation(line: 125, column: 32, scope: !3002)
!3008 = !DILocation(line: 125, column: 64, scope: !3009, inlinedAt: !3005)
!3009 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3010 = !DILocation(line: 139, column: 41, scope: !3009, inlinedAt: !3005)
!3011 = !DILocation(line: 139, column: 65, scope: !3009, inlinedAt: !3005)
!3012 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !3013, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3013 = !DISubroutineType(types: !3014)
!3014 = !{!20, !2901}
!3015 = !DILocation(line: 126, column: 49, scope: !3012)
!3016 = !DILocalVariable(name: "self", arg: 1, scope: !3012, file: !4, line: 126, type: !2901)
!3017 = !DILocation(line: 126, column: 30, scope: !3012)
!3018 = !DILocation(line: 126, column: 63, scope: !3019, inlinedAt: !3015)
!3019 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3020 = !DILocation(line: 140, column: 41, scope: !3019, inlinedAt: !3015)
!3021 = !DILocation(line: 140, column: 64, scope: !3019, inlinedAt: !3015)
!3022 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !3023, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3023 = !DISubroutineType(types: !3024)
!3024 = !{!52, !2901}
!3025 = !DILocation(line: 127, column: 50, scope: !3022)
!3026 = !DILocalVariable(name: "self", arg: 1, scope: !3022, file: !4, line: 127, type: !2901)
!3027 = !DILocation(line: 127, column: 31, scope: !3022)
!3028 = !DILocation(line: 127, column: 56, scope: !3022)
!3029 = !DILocation(line: 127, column: 51, scope: !3022)
!3030 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !3031, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3031 = !DISubroutineType(types: !3032)
!3032 = !{null, !3033, !256}
!3033 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !3034, size: 64, align: 64, dwarfAddressSpace: 0)
!3034 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !1671, align: 1)
!3035 = !DILocation(line: 135, column: 1, scope: !3030)
!3036 = !DILocalVariable(name: "self", arg: 1, scope: !3030, file: !4, line: 134, type: !3033)
!3037 = !DILocation(line: 134, column: 30, scope: !3030)
!3038 = !DILocalVariable(name: "input", arg: 2, scope: !3030, file: !4, line: 134, type: !256)
!3039 = !DILocation(line: 134, column: 44, scope: !3030)
!3040 = !DILocation(line: 136, column: 3, scope: !3030)
!3041 = !DILocalVariable(name: "return_value", scope: !3042, file: !4, line: 10, type: !1671, align: 1)
!3042 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3043 = !DILocation(line: 10, column: 8, scope: !3042, inlinedAt: !3044)
!3044 = !DILocation(line: 136, column: 11, scope: !3030)
!3045 = !DILocation(line: 342, column: 11, scope: !3046, inlinedAt: !3047)
!3046 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !119, file: !119, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3047 = !DILocation(line: 11, column: 16, scope: !3042, inlinedAt: !3044)
!3048 = !DILocation(line: 11, column: 2, scope: !3042, inlinedAt: !3044)
!3049 = !DILocation(line: 12, column: 9, scope: !3042, inlinedAt: !3044)
!3050 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !3051, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3051 = !DISubroutineType(types: !3052)
!3052 = !{!52, !3033}
!3053 = !DILocation(line: 140, column: 1, scope: !3050)
!3054 = !DILocalVariable(name: "self", arg: 1, scope: !3050, file: !4, line: 139, type: !3033)
!3055 = !DILocation(line: 139, column: 30, scope: !3050)
!3056 = !DILocalVariable(name: "s", scope: !3050, file: !4, line: 141, type: !259, align: 8)
!3057 = !DILocation(line: 141, column: 8, scope: !3050)
!3058 = !DILocation(line: 141, column: 13, scope: !3050)
!3059 = !DILocalVariable(name: "result", scope: !3050, file: !4, line: 142, type: !52, align: 1)
!3060 = !DILocation(line: 142, column: 7, scope: !3050)
!3061 = !DILocation(line: 142, column: 16, scope: !3050)
!3062 = !DILocation(line: 142, column: 18, scope: !3050)
!3063 = !DILocation(line: 142, column: 23, scope: !3050)
!3064 = !DILocation(line: 142, column: 25, scope: !3050)
!3065 = !DILocation(line: 142, column: 30, scope: !3050)
!3066 = !DILocation(line: 142, column: 32, scope: !3050)
!3067 = !DILocation(line: 143, column: 2, scope: !3050)
!3068 = !DILocation(line: 143, column: 9, scope: !3050)
!3069 = !DILocation(line: 143, column: 11, scope: !3050)
!3070 = !DILocation(line: 143, column: 16, scope: !3050)
!3071 = !DILocation(line: 143, column: 18, scope: !3050)
!3072 = !DILocation(line: 144, column: 2, scope: !3050)
!3073 = !DILocation(line: 144, column: 4, scope: !3050)
!3074 = !DILocation(line: 144, column: 9, scope: !3050)
!3075 = !DILocation(line: 144, column: 11, scope: !3050)
!3076 = !DILocation(line: 144, column: 16, scope: !3050)
!3077 = !DILocation(line: 144, column: 18, scope: !3050)
!3078 = !DILocation(line: 145, column: 2, scope: !3050)
!3079 = !DILocation(line: 145, column: 4, scope: !3050)
!3080 = !DILocation(line: 145, column: 9, scope: !3050)
!3081 = !DILocation(line: 145, column: 11, scope: !3050)
!3082 = !DILocation(line: 131, column: 50, scope: !3083, inlinedAt: !3080)
!3083 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3084 = !DILocation(line: 131, column: 56, scope: !3083, inlinedAt: !3080)
!3085 = !DILocation(line: 131, column: 62, scope: !3083, inlinedAt: !3080)
!3086 = !DILocation(line: 145, column: 24, scope: !3050)
!3087 = !DILocation(line: 146, column: 2, scope: !3050)
!3088 = !DILocation(line: 146, column: 4, scope: !3050)
!3089 = !DILocation(line: 147, column: 9, scope: !3050)
!3090 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !3031, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3091 = !DILocation(line: 150, column: 64, scope: !3090)
!3092 = !DILocalVariable(name: "self", arg: 1, scope: !3090, file: !4, line: 150, type: !3033)
!3093 = !DILocation(line: 150, column: 31, scope: !3090)
!3094 = !DILocalVariable(name: "bytes", arg: 2, scope: !3090, file: !4, line: 150, type: !256)
!3095 = !DILocation(line: 150, column: 45, scope: !3090)
!3096 = !DILocalVariable(name: "len", scope: !3097, file: !4, line: 146, type: !261, align: 8)
!3097 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3098 = !DILocation(line: 146, column: 6, scope: !3097, inlinedAt: !3091)
!3099 = !DILocation(line: 146, column: 12, scope: !3097, inlinedAt: !3091)
!3100 = !DILocation(line: 148, column: 2, scope: !3097, inlinedAt: !3091)
!3101 = !DILocation(line: 148, column: 9, scope: !3102, inlinedAt: !3091)
!3102 = distinct !DILexicalBlock(scope: !3097, file: !2, line: 148, column: 2)
!3103 = !DILocalVariable(name: "value", scope: !3104, file: !4, line: 150, type: !52, align: 1)
!3104 = distinct !DILexicalBlock(scope: !3102, file: !2, line: 149, column: 2)
!3105 = !DILocation(line: 150, column: 7, scope: !3104, inlinedAt: !3091)
!3106 = !DILocation(line: 150, column: 87, scope: !3104, inlinedAt: !3091)
!3107 = !DILocation(line: 150, column: 15, scope: !3104, inlinedAt: !3091)
!3108 = !DILocation(line: 151, column: 7, scope: !3104, inlinedAt: !3091)
!3109 = !DILocation(line: 153, column: 33, scope: !3110, inlinedAt: !3091)
!3110 = distinct !DILexicalBlock(scope: !3104, file: !2, line: 152, column: 3)
!3111 = !DILocation(line: 153, column: 4, scope: !3110, inlinedAt: !3091)
!3112 = !DILocation(line: 153, column: 10, scope: !3110, inlinedAt: !3091)
!3113 = !DILocation(line: 154, column: 10, scope: !3110, inlinedAt: !3091)
!3114 = !DILocation(line: 156, column: 3, scope: !3104, inlinedAt: !3091)
!3115 = !DILocation(line: 157, column: 3, scope: !3104, inlinedAt: !3091)
!3116 = !DILocation(line: 158, column: 11, scope: !3104, inlinedAt: !3091)
!3117 = !DILocation(line: 158, column: 17, scope: !3104, inlinedAt: !3091)
!3118 = !DILocation(line: 164, column: 2, scope: !3119, inlinedAt: !3120)
!3119 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3120 = !DILocation(line: 160, column: 2, scope: !3097, inlinedAt: !3091)
!3121 = !DILocation(line: 166, column: 2, scope: !3119, inlinedAt: !3120)
!3122 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !3123, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3123 = !DISubroutineType(types: !3124)
!3124 = !{!15, !3033}
!3125 = !DILocation(line: 151, column: 54, scope: !3122)
!3126 = !DILocalVariable(name: "self", arg: 1, scope: !3122, file: !4, line: 151, type: !3033)
!3127 = !DILocation(line: 151, column: 35, scope: !3122)
!3128 = !DILocation(line: 151, column: 70, scope: !3129, inlinedAt: !3125)
!3129 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3130 = !DILocation(line: 138, column: 46, scope: !3129, inlinedAt: !3125)
!3131 = !DILocation(line: 138, column: 72, scope: !3129, inlinedAt: !3125)
!3132 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !3133, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3133 = !DISubroutineType(types: !3134)
!3134 = !{!6, !3033}
!3135 = !DILocation(line: 152, column: 50, scope: !3132)
!3136 = !DILocalVariable(name: "self", arg: 1, scope: !3132, file: !4, line: 152, type: !3033)
!3137 = !DILocation(line: 152, column: 31, scope: !3132)
!3138 = !DILocation(line: 152, column: 63, scope: !3139, inlinedAt: !3135)
!3139 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3140 = !DILocation(line: 139, column: 41, scope: !3139, inlinedAt: !3135)
!3141 = !DILocation(line: 139, column: 65, scope: !3139, inlinedAt: !3135)
!3142 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !3143, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!20, !3033}
!3145 = !DILocation(line: 153, column: 48, scope: !3142)
!3146 = !DILocalVariable(name: "self", arg: 1, scope: !3142, file: !4, line: 153, type: !3033)
!3147 = !DILocation(line: 153, column: 29, scope: !3142)
!3148 = !DILocation(line: 153, column: 62, scope: !3149, inlinedAt: !3145)
!3149 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3150 = !DILocation(line: 140, column: 41, scope: !3149, inlinedAt: !3145)
!3151 = !DILocation(line: 140, column: 64, scope: !3149, inlinedAt: !3145)
!3152 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !3153, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3153 = !DISubroutineType(types: !3154)
!3154 = !{!23, !3033}
!3155 = !DILocation(line: 154, column: 52, scope: !3152)
!3156 = !DILocalVariable(name: "self", arg: 1, scope: !3152, file: !4, line: 154, type: !3033)
!3157 = !DILocation(line: 154, column: 33, scope: !3152)
!3158 = !DILocation(line: 154, column: 67, scope: !3159, inlinedAt: !3155)
!3159 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3160 = !DILocation(line: 141, column: 44, scope: !3159, inlinedAt: !3155)
!3161 = !DILocation(line: 141, column: 68, scope: !3159, inlinedAt: !3155)
!3162 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !100, file: !100, line: 6, type: !3163, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3163 = !DISubroutineType(types: !3164)
!3164 = !{null, !3165, !256}
!3165 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !3166, size: 64, align: 64, dwarfAddressSpace: 0)
!3166 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !100, file: !100, line: 3, baseType: !6, align: 8)
!3167 = !DILocation(line: 7, column: 1, scope: !3162)
!3168 = !DILocalVariable(name: "self", arg: 1, scope: !3162, file: !100, line: 6, type: !3165)
!3169 = !DILocation(line: 6, column: 31, scope: !3162)
!3170 = !DILocalVariable(name: "seed", arg: 2, scope: !3162, file: !100, line: 6, type: !256)
!3171 = !DILocation(line: 6, column: 45, scope: !3162)
!3172 = !DILocalVariable(name: "full", scope: !3162, file: !100, line: 8, type: !3173, align: 1)
!3173 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 64, align: 8, elements: !2457)
!3174 = !DILocation(line: 8, column: 10, scope: !3162)
!3175 = !DILocalVariable(name: ".temp", scope: !3176, file: !100, line: 9, type: !261, align: 8)
!3176 = distinct !DILexicalBlock(scope: !3162, file: !100, line: 9, column: 2)
!3177 = !DILocation(line: 9, column: 18, scope: !3176)
!3178 = !DILocation(line: 9, column: 11, scope: !3176)
!3179 = !DILocalVariable(name: "i", scope: !3180, file: !100, line: 9, type: !261, align: 8)
!3180 = distinct !DILexicalBlock(scope: !3176, file: !100, line: 10, column: 2)
!3181 = !DILocation(line: 9, column: 11, scope: !3180)
!3182 = !DILocalVariable(name: "c", scope: !3180, file: !100, line: 9, type: !52, align: 1)
!3183 = !DILocation(line: 9, column: 14, scope: !3180)
!3184 = !DILocation(line: 9, column: 18, scope: !3180)
!3185 = !DILocation(line: 11, column: 8, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3180, file: !100, line: 10, column: 2)
!3187 = !DILocation(line: 11, column: 18, scope: !3186)
!3188 = !DILocation(line: 11, column: 3, scope: !3186)
!3189 = !DILocation(line: 13, column: 3, scope: !3162)
!3190 = !DILocalVariable(name: "x", scope: !3191, file: !100, line: 214, type: !6, align: 8)
!3191 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !119, file: !119, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3192 = !DILocation(line: 214, column: 9, scope: !3191, inlinedAt: !3193)
!3193 = !DILocation(line: 13, column: 25, scope: !3162)
!3194 = !DILocation(line: 215, column: 38, scope: !3191, inlinedAt: !3193)
!3195 = !DILocation(line: 216, column: 10, scope: !3191, inlinedAt: !3193)
!3196 = !DILocation(line: 13, column: 11, scope: !3162)
!3197 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !100, file: !100, line: 16, type: !3198, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3198 = !DISubroutineType(types: !3199)
!3199 = !{!20, !3165}
!3200 = !DILocation(line: 17, column: 1, scope: !3197)
!3201 = !DILocalVariable(name: "self", arg: 1, scope: !3197, file: !100, line: 16, type: !3165)
!3202 = !DILocation(line: 16, column: 31, scope: !3197)
!3203 = !DILocalVariable(name: "nextseed", scope: !3197, file: !100, line: 18, type: !6, align: 8)
!3204 = !DILocation(line: 18, column: 8, scope: !3197)
!3205 = !DILocation(line: 18, column: 28, scope: !3197)
!3206 = !DILocation(line: 18, column: 21, scope: !3197)
!3207 = !DILocation(line: 19, column: 3, scope: !3197)
!3208 = !DILocation(line: 19, column: 11, scope: !3197)
!3209 = !DILocation(line: 20, column: 16, scope: !3197)
!3210 = !DILocation(line: 20, column: 10, scope: !3197)
!3211 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !100, file: !100, line: 26, type: !3163, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3212 = !DILocation(line: 26, column: 66, scope: !3211)
!3213 = !DILocalVariable(name: "self", arg: 1, scope: !3211, file: !100, line: 26, type: !3165)
!3214 = !DILocation(line: 26, column: 33, scope: !3211)
!3215 = !DILocalVariable(name: "bytes", arg: 2, scope: !3211, file: !100, line: 26, type: !256)
!3216 = !DILocation(line: 26, column: 47, scope: !3211)
!3217 = !DILocation(line: 24, column: 11, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3211, file: !100, line: 26, column: 66)
!3219 = !DILocalVariable(name: "len", scope: !3220, file: !100, line: 146, type: !261, align: 8)
!3220 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3221 = !DILocation(line: 146, column: 6, scope: !3220, inlinedAt: !3212)
!3222 = !DILocation(line: 146, column: 12, scope: !3220, inlinedAt: !3212)
!3223 = !DILocation(line: 148, column: 2, scope: !3220, inlinedAt: !3212)
!3224 = !DILocation(line: 148, column: 9, scope: !3225, inlinedAt: !3212)
!3225 = distinct !DILexicalBlock(scope: !3220, file: !2, line: 148, column: 2)
!3226 = !DILocalVariable(name: "value", scope: !3227, file: !100, line: 150, type: !20, align: 4)
!3227 = distinct !DILexicalBlock(scope: !3225, file: !2, line: 149, column: 2)
!3228 = !DILocation(line: 150, column: 7, scope: !3227, inlinedAt: !3212)
!3229 = !DILocation(line: 26, column: 89, scope: !3227, inlinedAt: !3212)
!3230 = !DILocation(line: 150, column: 15, scope: !3227, inlinedAt: !3212)
!3231 = !DILocation(line: 151, column: 7, scope: !3227, inlinedAt: !3212)
!3232 = !DILocation(line: 153, column: 33, scope: !3233, inlinedAt: !3212)
!3233 = distinct !DILexicalBlock(scope: !3227, file: !2, line: 152, column: 3)
!3234 = !DILocation(line: 153, column: 4, scope: !3233, inlinedAt: !3212)
!3235 = !DILocation(line: 153, column: 10, scope: !3233, inlinedAt: !3212)
!3236 = !DILocation(line: 154, column: 10, scope: !3233, inlinedAt: !3212)
!3237 = !DILocation(line: 156, column: 3, scope: !3227, inlinedAt: !3212)
!3238 = !DILocation(line: 157, column: 3, scope: !3227, inlinedAt: !3212)
!3239 = !DILocation(line: 158, column: 11, scope: !3227, inlinedAt: !3212)
!3240 = !DILocation(line: 158, column: 17, scope: !3227, inlinedAt: !3212)
!3241 = !DILocation(line: 164, column: 2, scope: !3242, inlinedAt: !3243)
!3242 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !119, file: !119, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3243 = !DILocation(line: 160, column: 2, scope: !3220, inlinedAt: !3212)
!3244 = !DILocation(line: 166, column: 2, scope: !3242, inlinedAt: !3243)
!3245 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !100, file: !100, line: 27, type: !3246, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{!15, !3165}
!3248 = !DILocation(line: 27, column: 56, scope: !3245)
!3249 = !DILocalVariable(name: "self", arg: 1, scope: !3245, file: !100, line: 27, type: !3165)
!3250 = !DILocation(line: 27, column: 37, scope: !3245)
!3251 = !DILocation(line: 27, column: 72, scope: !3252, inlinedAt: !3248)
!3252 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3253 = !DILocation(line: 138, column: 46, scope: !3252, inlinedAt: !3248)
!3254 = !DILocation(line: 138, column: 72, scope: !3252, inlinedAt: !3248)
!3255 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !100, file: !100, line: 28, type: !3256, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3256 = !DISubroutineType(types: !3257)
!3257 = !{!6, !3165}
!3258 = !DILocation(line: 28, column: 52, scope: !3255)
!3259 = !DILocalVariable(name: "self", arg: 1, scope: !3255, file: !100, line: 28, type: !3165)
!3260 = !DILocation(line: 28, column: 33, scope: !3255)
!3261 = !DILocation(line: 28, column: 65, scope: !3262, inlinedAt: !3258)
!3262 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !109)
!3263 = !DILocation(line: 139, column: 41, scope: !3262, inlinedAt: !3258)
!3264 = !DILocation(line: 139, column: 65, scope: !3262, inlinedAt: !3258)
!3265 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !100, file: !100, line: 29, type: !3266, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3266 = !DISubroutineType(types: !3267)
!3267 = !{!23, !3165}
!3268 = !DILocation(line: 29, column: 54, scope: !3265)
!3269 = !DILocalVariable(name: "self", arg: 1, scope: !3265, file: !100, line: 29, type: !3165)
!3270 = !DILocation(line: 29, column: 35, scope: !3265)
!3271 = !DILocation(line: 29, column: 62, scope: !3265)
!3272 = !DILocation(line: 29, column: 55, scope: !3265)
!3273 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !100, file: !100, line: 30, type: !3274, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !109, retainedNodes: !114)
!3274 = !DISubroutineType(types: !3275)
!3275 = !{!52, !3165}
!3276 = !DILocation(line: 30, column: 51, scope: !3273)
!3277 = !DILocalVariable(name: "self", arg: 1, scope: !3273, file: !100, line: 30, type: !3165)
!3278 = !DILocation(line: 30, column: 32, scope: !3273)
!3279 = !DILocation(line: 30, column: 57, scope: !3273)
!3280 = !DILocation(line: 30, column: 52, scope: !3273)
