; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64 }

$std.core.String.trim = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.new_split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.contains = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_new_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_new_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_new_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_ascii_to_lower = comdat any

$std.core.String.new_ascii_to_lower = comdat any

$std.core.String.temp_ascii_to_lower = comdat any

$std.core.String.convert_ascii_to_upper = comdat any

$std.core.String.new_ascii_to_upper = comdat any

$std.core.String.iterator = comdat any

$std.core.String.temp_ascii_to_upper = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.splitter = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.new_format = comdat any

$std.core.string.tformat = comdat any

$std.core.string.new_format_zstr = comdat any

$std.core.string.join_new = comdat any

$std.core.string.new_from_utf32 = comdat any

$std.core.string.new_from_utf16 = comdat any

$std.core.string.new_from_wstring = comdat any

$std.core.string.temp_from_wstring = comdat any

$std.core.string.temp_from_utf16 = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF8" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF16" = comdat any

$"std.core.string.UnicodeResult$CONVERSION_FAILED" = comdat any

$"$ct.std.core.string.UnicodeResult" = comdat any

$"std.core.string.NumberConversion$EMPTY_STRING" = comdat any

$"std.core.string.NumberConversion$NEGATIVE_VALUE" = comdat any

$"std.core.string.NumberConversion$MALFORMED_INTEGER" = comdat any

$"std.core.string.NumberConversion$INTEGER_OVERFLOW" = comdat any

$"std.core.string.NumberConversion$MALFORMED_FLOAT" = comdat any

$"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = comdat any

$"$ct.std.core.string.NumberConversion" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$sel.acquire" = comdat any

$"$ct.anyfault" = comdat any

$"$ct.long" = comdat any

$"$ct.ulong" = comdat any

$"$sel.release" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$sel.resize" = comdat any

$"$ct.uint" = comdat any

$"$ct.int" = comdat any

$"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = comdat any

$"$ct.std.core.builtin.IteratorResult" = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.UnicodeResult$INVALID_UTF8" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault, i64 12 }, i64 1 }, comdat, align 8
@.fault = internal constant [13 x i8] c"INVALID_UTF8\00", align 1
@"std.core.string.UnicodeResult$INVALID_UTF16" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.1, i64 13 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [14 x i8] c"INVALID_UTF16\00", align 1
@"std.core.string.UnicodeResult$CONVERSION_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.2, i64 17 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [18 x i8] c"CONVERSION_FAILED\00", align 1
@"$ct.std.core.string.UnicodeResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.NumberConversion$EMPTY_STRING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.3, i64 12 }, i64 1 }, comdat, align 8
@.fault.3 = internal constant [13 x i8] c"EMPTY_STRING\00", align 1
@"std.core.string.NumberConversion$NEGATIVE_VALUE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.4, i64 14 }, i64 2 }, comdat, align 8
@.fault.4 = internal constant [15 x i8] c"NEGATIVE_VALUE\00", align 1
@"std.core.string.NumberConversion$MALFORMED_INTEGER" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.5, i64 17 }, i64 3 }, comdat, align 8
@.fault.5 = internal constant [18 x i8] c"MALFORMED_INTEGER\00", align 1
@"std.core.string.NumberConversion$INTEGER_OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.6, i64 16 }, i64 4 }, comdat, align 8
@.fault.6 = internal constant [17 x i8] c"INTEGER_OVERFLOW\00", align 1
@"std.core.string.NumberConversion$MALFORMED_FLOAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.7, i64 15 }, i64 5 }, comdat, align 8
@.fault.7 = internal constant [16 x i8] c"MALFORMED_FLOAT\00", align 1
@"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.8, i64 18 }, i64 6 }, comdat, align 8
@.fault.8 = internal constant [19 x i8] c"FLOAT_OUT_OF_RANGE\00", align 1
@"$ct.std.core.string.NumberConversion" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@std.core.mem.allocator.thread_temp_allocator = external thread_local global ptr, align 8
@.panic_msg = internal constant [49 x i8] c"Dereference of null pointer, 'current' was null.\00", align 1
@.file = internal constant [7 x i8] c"mem.c3\00", align 1
@.func = internal constant [7 x i8] c"format\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@.func.15 = internal constant [16 x i8] c"new_format_zstr\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.16 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file.17 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func.18 = internal constant [9 x i8] c"join_new\00", align 1
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.19 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.20 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.21 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.22 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.23 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.24 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.25 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.26 = internal constant [15 x i8] c"new_from_utf32\00", align 1
@.func.27 = internal constant [15 x i8] c"new_from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.28 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.29 = internal constant [5 x i8] c"trim\00", align 1
@.panic_msg.30 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.func.31 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.32 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.33 = internal constant [6 x i8] c"strip\00", align 1
@.func.34 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.35 = internal constant [84 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be at least 1 character long'.\00", align 1
@.func.36 = internal constant [6 x i8] c"split\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.37, i64 7 }, i64 1 }, comdat, align 8
@.fault.37 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.38 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.39 = internal constant [35 x i8] c"@ensure \22return.len > 0\22 violated.\00", align 1
@.func.40 = internal constant [10 x i8] c"new_split\00", align 1
@.func.41 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.42 = internal constant [35 x i8] c"@ensure \22return < s.len\22 violated.\00", align 1
@.func.43 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.44 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.panic_msg.45 = internal constant [72 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be len 1 or more'.\00", align 1
@.func.46 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.47 = internal constant [54 x i8] c"Dereference of null pointer, 's[..^needed]' was null.\00", align 1
@.func.48 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.49 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.50 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.func.51 = internal constant [7 x i8] c"concat\00", align 1
@.func.52 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.53 = internal constant [60 x i8] c"Reference parameter 's' was passed a null pointer argument.\00", align 1
@.func.54 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.55 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.56 = internal constant [13 x i8] c"to_new_utf16\00", align 1
@.func.57 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.58 = internal constant [23 x i8] c"convert_ascii_to_lower\00", align 1
@.panic_msg.59 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@.func.60 = internal constant [23 x i8] c"convert_ascii_to_upper\00", align 1
@.func.61 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.62 = internal constant [80 x i8] c"@require \22(base <= 10 && base > 1) || base == 16\22 violated: 'Unsupported base'.\00", align 1
@.func.63 = internal constant [10 x i8] c"to_int128\00", align 1
@.func.64 = internal constant [8 x i8] c"to_long\00", align 1
@.func.65 = internal constant [7 x i8] c"to_int\00", align 1
@.func.66 = internal constant [9 x i8] c"to_short\00", align 1
@.func.67 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.68 = internal constant [11 x i8] c"to_uint128\00", align 1
@.func.69 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.70 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.71 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.72 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.file.73 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.74 = internal constant [10 x i8] c"to_double\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.75 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.77 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.78 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.79 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !26
@.panic_msg.80 = internal constant [17 x i8] c"Assert violation\00", align 1
@.panic_msg.81 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.82 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.83 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.84 = internal constant [11 x i8] c"% by zero.\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.func.85 = internal constant [9 x i8] c"to_float\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !37
@.panic_msg.90 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.91 = internal constant [6 x i8] c"reset\00", align 1
@.panic_msg.92 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.93 = internal constant [5 x i8] c"next\00", align 1
@"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.IteratorResult" to i64), %"char[]" { ptr @.fault.94, i64 15 }, i64 1 }, comdat, align 8
@.fault.94 = internal constant [16 x i8] c"NO_MORE_ELEMENT\00", align 1
@"$ct.std.core.builtin.IteratorResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.KMAX = weak local_unnamed_addr constant i32 128, comdat, align 4, !dbg !39
@std.core.string.MASK = weak local_unnamed_addr constant i32 127, comdat, align 4, !dbg !42
@std.core.string.B1B_DIG = weak local_unnamed_addr constant i32 2, comdat, align 4, !dbg !44
@std.core.string.B1B_MAX = weak local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.trim(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !53 {
entry:
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon9 = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %end = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %c71 = alloca i8, align 1
  %set72 = alloca %"char[]", align 8
  %blockret73 = alloca i8, align 1
  %.anon74 = alloca i64, align 8
  %.anon76 = alloca i64, align 8
  %ch80 = alloca i8, align 1
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %taddr120 = alloca i64, align 8
  %taddr121 = alloca i64, align 8
  %indirectarg122 = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %varargslots125 = alloca [2 x %any], align 16
  %indirectarg128 = alloca %"any[]", align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !66, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.declare(metadata ptr %2, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata ptr %start, metadata !70, metadata !DIExpression()), !dbg !71
  store i64 0, ptr %start, align 8, !dbg !72
  call void @llvm.dbg.declare(metadata ptr %len, metadata !73, metadata !DIExpression()), !dbg !74
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !75
  %3 = load i64, ptr %ptradd, align 8, !dbg !75
  store i64 %3, ptr %len, align 8, !dbg !75
  br label %loop.cond, !dbg !76

loop.cond:                                        ; preds = %loop.body26, %entry
  %4 = load i64, ptr %start, align 8, !dbg !77
  %5 = load i64, ptr %len, align 8, !dbg !79
  %lt = icmp ult i64 %4, %5, !dbg !77
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !77

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !80
  %6 = load i64, ptr %ptradd1, align 8, !dbg !80
  %7 = load ptr, ptr %1, align 8, !dbg !80
  %8 = load i64, ptr %start, align 8, !dbg !81
  %ge = icmp uge i64 %8, %6, !dbg !81
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !81
  br i1 %9, label %panic, label %checkok, !dbg !81

checkok:                                          ; preds = %and.rhs
  %ptradd7 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !81
  %10 = load i8, ptr %ptradd7, align 1
  store i8 %10, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !82, metadata !DIExpression()), !dbg !85
  %ptradd8 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !85
  %11 = load i64, ptr %ptradd8, align 8, !dbg !85
  store i64 %11, ptr %.anon, align 8, !dbg !85
  call void @llvm.dbg.declare(metadata ptr %.anon9, metadata !82, metadata !DIExpression()), !dbg !85
  store i64 0, ptr %.anon9, align 8, !dbg !85
  br label %loop.cond10, !dbg !85

loop.cond10:                                      ; preds = %if.exit, %checkok
  %12 = load i64, ptr %.anon9, align 8, !dbg !85
  %13 = load i64, ptr %.anon, align 8, !dbg !85
  %lt11 = icmp ult i64 %12, %13, !dbg !85
  br i1 %lt11, label %loop.body, label %loop.exit, !dbg !85

loop.body:                                        ; preds = %loop.cond10
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !87, metadata !DIExpression()), !dbg !89
  %ptradd12 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !90
  %14 = load i64, ptr %ptradd12, align 8, !dbg !90
  %15 = load ptr, ptr %set, align 8, !dbg !90
  %16 = load i64, ptr %.anon9, align 8, !dbg !90
  %ge13 = icmp uge i64 %16, %14, !dbg !90
  %17 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !90
  br i1 %17, label %panic14, label %checkok24, !dbg !90

checkok24:                                        ; preds = %loop.body
  %ptradd25 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !90
  %18 = load i8, ptr %ptradd25, align 1, !dbg !90
  store i8 %18, ptr %ch, align 1, !dbg !90
  %19 = load i8, ptr %ch, align 1, !dbg !91
  %20 = load i8, ptr %c, align 1, !dbg !92
  %eq = icmp eq i8 %19, %20, !dbg !91
  br i1 %eq, label %if.then, label %if.exit, !dbg !91

if.then:                                          ; preds = %checkok24
  store i8 1, ptr %blockret, align 1, !dbg !93
  br label %expr_block.exit, !dbg !93

if.exit:                                          ; preds = %checkok24
  %21 = load i64, ptr %.anon9, align 8, !dbg !85
  %addnuw = add nuw i64 %21, 1, !dbg !85
  store i64 %addnuw, ptr %.anon9, align 8, !dbg !85
  br label %loop.cond10, !dbg !85

loop.exit:                                        ; preds = %loop.cond10
  store i8 0, ptr %blockret, align 1, !dbg !94
  br label %expr_block.exit, !dbg !94

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !94
  %23 = trunc i8 %22 to i1, !dbg !94
  br label %and.phi, !dbg !94

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !94
  br i1 %val, label %loop.body26, label %loop.exit27, !dbg !94

loop.body26:                                      ; preds = %and.phi
  %24 = load i64, ptr %start, align 8, !dbg !95
  %add = add i64 %24, 1, !dbg !95
  store i64 %add, ptr %start, align 8, !dbg !95
  br label %loop.cond, !dbg !95

loop.exit27:                                      ; preds = %and.phi
  %25 = load i64, ptr %start, align 8, !dbg !96
  %26 = load i64, ptr %len, align 8, !dbg !97
  %eq28 = icmp eq i64 %25, %26, !dbg !96
  br i1 %eq28, label %if.then29, label %if.exit53, !dbg !96

if.then29:                                        ; preds = %loop.exit27
  %27 = load %"char[]", ptr %1, align 8, !dbg !98
  %28 = extractvalue %"char[]" %27, 0, !dbg !98
  %29 = extractvalue %"char[]" %27, 1, !dbg !98
  %gt = icmp sgt i64 0, %29, !dbg !98
  %30 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !98
  br i1 %30, label %panic30, label %checkok40, !dbg !98

checkok40:                                        ; preds = %if.then29
  %lt41 = icmp slt i64 %29, 0, !dbg !98
  %31 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !98
  br i1 %31, label %panic42, label %checkok52, !dbg !98

checkok52:                                        ; preds = %checkok40
  %32 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !98
  %33 = insertvalue %"char[]" %32, i64 0, 1, !dbg !98
  store %"char[]" %33, ptr %0, align 8, !dbg !98
  ret void, !dbg !98

if.exit53:                                        ; preds = %loop.exit27
  call void @llvm.dbg.declare(metadata ptr %end, metadata !99, metadata !DIExpression()), !dbg !100
  %34 = load i64, ptr %len, align 8, !dbg !101
  %sub = sub i64 %34, 1, !dbg !101
  store i64 %sub, ptr %end, align 8, !dbg !101
  br label %loop.cond54, !dbg !102

loop.cond54:                                      ; preds = %loop.body103, %if.exit53
  %35 = load i64, ptr %end, align 8, !dbg !103
  %36 = load i64, ptr %start, align 8, !dbg !105
  %gt55 = icmp ugt i64 %35, %36, !dbg !103
  br i1 %gt55, label %and.rhs56, label %and.phi101, !dbg !103

and.rhs56:                                        ; preds = %loop.cond54
  %ptradd57 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !106
  %37 = load i64, ptr %ptradd57, align 8, !dbg !106
  %38 = load ptr, ptr %1, align 8, !dbg !106
  %39 = load i64, ptr %end, align 8, !dbg !107
  %ge58 = icmp uge i64 %39, %37, !dbg !107
  %40 = call i1 @llvm.expect.i1(i1 %ge58, i1 false), !dbg !107
  br i1 %40, label %panic59, label %checkok69, !dbg !107

checkok69:                                        ; preds = %and.rhs56
  %ptradd70 = getelementptr inbounds i8, ptr %38, i64 %39, !dbg !107
  %41 = load i8, ptr %ptradd70, align 1
  store i8 %41, ptr %c71, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set72, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %.anon74, metadata !108, metadata !DIExpression()), !dbg !111
  %ptradd75 = getelementptr inbounds i8, ptr %set72, i64 8, !dbg !111
  %42 = load i64, ptr %ptradd75, align 8, !dbg !111
  store i64 %42, ptr %.anon74, align 8, !dbg !111
  call void @llvm.dbg.declare(metadata ptr %.anon76, metadata !108, metadata !DIExpression()), !dbg !111
  store i64 0, ptr %.anon76, align 8, !dbg !111
  br label %loop.cond77, !dbg !111

loop.cond77:                                      ; preds = %if.exit97, %checkok69
  %43 = load i64, ptr %.anon76, align 8, !dbg !111
  %44 = load i64, ptr %.anon74, align 8, !dbg !111
  %lt78 = icmp ult i64 %43, %44, !dbg !111
  br i1 %lt78, label %loop.body79, label %loop.exit99, !dbg !111

loop.body79:                                      ; preds = %loop.cond77
  call void @llvm.dbg.declare(metadata ptr %ch80, metadata !113, metadata !DIExpression()), !dbg !115
  %ptradd81 = getelementptr inbounds i8, ptr %set72, i64 8, !dbg !116
  %45 = load i64, ptr %ptradd81, align 8, !dbg !116
  %46 = load ptr, ptr %set72, align 8, !dbg !116
  %47 = load i64, ptr %.anon76, align 8, !dbg !116
  %ge82 = icmp uge i64 %47, %45, !dbg !116
  %48 = call i1 @llvm.expect.i1(i1 %ge82, i1 false), !dbg !116
  br i1 %48, label %panic83, label %checkok93, !dbg !116

checkok93:                                        ; preds = %loop.body79
  %ptradd94 = getelementptr inbounds i8, ptr %46, i64 %47, !dbg !116
  %49 = load i8, ptr %ptradd94, align 1, !dbg !116
  store i8 %49, ptr %ch80, align 1, !dbg !116
  %50 = load i8, ptr %ch80, align 1, !dbg !117
  %51 = load i8, ptr %c71, align 1, !dbg !118
  %eq95 = icmp eq i8 %50, %51, !dbg !117
  br i1 %eq95, label %if.then96, label %if.exit97, !dbg !117

if.then96:                                        ; preds = %checkok93
  store i8 1, ptr %blockret73, align 1, !dbg !119
  br label %expr_block.exit100, !dbg !119

if.exit97:                                        ; preds = %checkok93
  %52 = load i64, ptr %.anon76, align 8, !dbg !111
  %addnuw98 = add nuw i64 %52, 1, !dbg !111
  store i64 %addnuw98, ptr %.anon76, align 8, !dbg !111
  br label %loop.cond77, !dbg !111

loop.exit99:                                      ; preds = %loop.cond77
  store i8 0, ptr %blockret73, align 1, !dbg !120
  br label %expr_block.exit100, !dbg !120

expr_block.exit100:                               ; preds = %loop.exit99, %if.then96
  %53 = load i8, ptr %blockret73, align 1, !dbg !120
  %54 = trunc i8 %53 to i1, !dbg !120
  br label %and.phi101, !dbg !120

and.phi101:                                       ; preds = %expr_block.exit100, %loop.cond54
  %val102 = phi i1 [ false, %loop.cond54 ], [ %54, %expr_block.exit100 ], !dbg !120
  br i1 %val102, label %loop.body103, label %loop.exit105, !dbg !120

loop.body103:                                     ; preds = %and.phi101
  %55 = load i64, ptr %end, align 8, !dbg !121
  %sub104 = sub i64 %55, 1, !dbg !121
  store i64 %sub104, ptr %end, align 8, !dbg !121
  br label %loop.cond54, !dbg !121

loop.exit105:                                     ; preds = %and.phi101
  %56 = load %"char[]", ptr %1, align 8, !dbg !122
  %57 = extractvalue %"char[]" %56, 0, !dbg !122
  %58 = load i64, ptr %start, align 8, !dbg !123
  %59 = extractvalue %"char[]" %56, 1, !dbg !123
  %gt106 = icmp ugt i64 %58, %59, !dbg !123
  %60 = call i1 @llvm.expect.i1(i1 %gt106, i1 false), !dbg !123
  br i1 %60, label %panic107, label %checkok117, !dbg !123

checkok117:                                       ; preds = %loop.exit105
  %61 = load i64, ptr %end, align 8, !dbg !124
  %gt118 = icmp ugt i64 %58, %61, !dbg !124
  %62 = call i1 @llvm.expect.i1(i1 %gt118, i1 false), !dbg !124
  br i1 %62, label %panic119, label %checkok129, !dbg !124

checkok129:                                       ; preds = %checkok117
  %le = icmp ule i64 %59, %61, !dbg !122
  %63 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !122
  br i1 %63, label %panic130, label %checkok140, !dbg !122

checkok140:                                       ; preds = %checkok129
  %64 = add i64 %61, 1, !dbg !122
  %size = sub i64 %64, %58, !dbg !122
  %ptradd141 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !122
  %65 = insertvalue %"char[]" undef, ptr %ptradd141, 0, !dbg !122
  %66 = insertvalue %"char[]" %65, i64 %size, 1, !dbg !122
  store %"char[]" %66, ptr %0, align 8, !dbg !122
  ret void, !dbg !122

panic:                                            ; preds = %and.rhs
  store i64 %6, ptr %taddr, align 8
  %67 = insertvalue %any undef, ptr %taddr, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %69 = insertvalue %any undef, ptr %taddr2, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg4, align 8
  store %any %68, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %70, ptr %ptradd5, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 150, ptr align 8 %indirectarg6), !dbg !81
  unreachable, !dbg !81

panic14:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr15, align 8
  %72 = insertvalue %any undef, ptr %taddr15, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr16, align 8
  %74 = insertvalue %any undef, ptr %taddr16, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg19, align 8
  store %any %73, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %75, ptr %ptradd21, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 109, ptr align 8 %indirectarg23), !dbg !90
  unreachable, !dbg !90

panic30:                                          ; preds = %if.then29
  store i64 %29, ptr %taddr31, align 8
  %77 = insertvalue %any undef, ptr %taddr31, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %79 = insertvalue %any undef, ptr %taddr32, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg35, align 8
  store %any %78, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %80, ptr %ptradd37, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 151, ptr align 8 %indirectarg39), !dbg !98
  unreachable, !dbg !98

panic42:                                          ; preds = %checkok40
  store i64 -1, ptr %taddr43, align 8
  %82 = insertvalue %any undef, ptr %taddr43, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %29, ptr %taddr44, align 8
  %84 = insertvalue %any undef, ptr %taddr44, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg47, align 8
  store %any %83, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %85, ptr %ptradd49, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 151, ptr align 8 %indirectarg51), !dbg !98
  unreachable, !dbg !98

panic59:                                          ; preds = %and.rhs56
  store i64 %37, ptr %taddr60, align 8
  %87 = insertvalue %any undef, ptr %taddr60, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr61, align 8
  %89 = insertvalue %any undef, ptr %taddr61, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg64, align 8
  store %any %88, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %90, ptr %ptradd66, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 153, ptr align 8 %indirectarg68), !dbg !107
  unreachable, !dbg !107

panic83:                                          ; preds = %loop.body79
  store i64 %45, ptr %taddr84, align 8
  %92 = insertvalue %any undef, ptr %taddr84, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr85, align 8
  %94 = insertvalue %any undef, ptr %taddr85, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg88, align 8
  store %any %93, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %95, ptr %ptradd90, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 109, ptr align 8 %indirectarg92), !dbg !116
  unreachable, !dbg !116

panic107:                                         ; preds = %loop.exit105
  store i64 %59, ptr %taddr108, align 8
  %97 = insertvalue %any undef, ptr %taddr108, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr109, align 8
  %99 = insertvalue %any undef, ptr %taddr109, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg112, align 8
  store %any %98, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %100, ptr %ptradd114, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 154, ptr align 8 %indirectarg116), !dbg !122
  unreachable, !dbg !122

panic119:                                         ; preds = %checkok117
  store i64 %58, ptr %taddr120, align 8
  %102 = insertvalue %any undef, ptr %taddr120, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %61, ptr %taddr121, align 8
  %104 = insertvalue %any undef, ptr %taddr121, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.30, i64 44 }, ptr %indirectarg122, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg124, align 8
  store %any %103, ptr %varargslots125, align 16
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots125, i64 16
  store %any %105, ptr %ptradd126, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots125, 0
  %"$$temp127" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp127", ptr %indirectarg128, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg122, ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, i32 154, ptr align 8 %indirectarg128), !dbg !122
  unreachable, !dbg !122

panic130:                                         ; preds = %checkok129
  store i64 %61, ptr %taddr131, align 8
  %107 = insertvalue %any undef, ptr %taddr131, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr132, align 8
  %109 = insertvalue %any undef, ptr %taddr132, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.func.29, i64 4 }, ptr %indirectarg135, align 8
  store %any %108, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %110, ptr %ptradd137, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, i32 154, ptr align 8 %indirectarg139), !dbg !122
  unreachable, !dbg !122
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.starts_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !125 {
entry:
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !129, metadata !DIExpression()), !dbg !130
  call void @llvm.dbg.declare(metadata ptr %1, metadata !131, metadata !DIExpression()), !dbg !132
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !133
  %2 = load i64, ptr %ptradd, align 8, !dbg !133
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !134
  %3 = load i64, ptr %ptradd1, align 8, !dbg !134
  %gt = icmp ugt i64 %2, %3, !dbg !133
  br i1 %gt, label %if.then, label %if.exit, !dbg !133

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !135

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !136
  %4 = load i64, ptr %ptradd2, align 8, !dbg !136
  %not = icmp eq i64 %4, 0, !dbg !136
  br i1 %not, label %if.then3, label %if.exit4, !dbg !136

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !137

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !138
  %6 = extractvalue %"char[]" %5, 0, !dbg !138
  %7 = extractvalue %"char[]" %5, 1, !dbg !139
  %gt5 = icmp ugt i64 0, %7, !dbg !139
  %8 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !139
  br i1 %8, label %panic, label %checkok, !dbg !139

checkok:                                          ; preds = %if.exit4
  %ptradd11 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !140
  %9 = load i64, ptr %ptradd11, align 8, !dbg !140
  %add = add i64 0, %9, !dbg !140
  %lt = icmp ult i64 %7, %add, !dbg !140
  %sub = sub i64 %add, 1, !dbg !140
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !140
  br i1 %10, label %panic12, label %checkok22, !dbg !140

checkok22:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !138
  %11 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !138
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !138
  %13 = load %"char[]", ptr %1, align 8, !dbg !141
  %14 = extractvalue %"char[]" %12, 1, !dbg !138
  %15 = extractvalue %"char[]" %13, 1, !dbg !138
  %16 = extractvalue %"char[]" %12, 0, !dbg !138
  %17 = extractvalue %"char[]" %13, 0, !dbg !138
  %eq = icmp eq i64 %14, %15, !dbg !138
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !138

slice_cmp_values:                                 ; preds = %checkok22
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %18 = load i64, ptr %cmp.idx, align 8
  %lt23 = icmp slt i64 %18, %14
  br i1 %lt23, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd24 = getelementptr inbounds i8, ptr %16, i64 %18
  %ptradd25 = getelementptr inbounds i8, ptr %17, i64 %18
  %19 = load i8, ptr %ptradd24, align 1
  %20 = load i8, ptr %ptradd25, align 1
  %eq26 = icmp eq i8 %19, %20
  %21 = add i64 %18, 1
  store i64 %21, ptr %cmp.idx, align 8
  br i1 %eq26, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok22
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok22 ], [ false, %slice_loop_comparison ]
  %22 = zext i1 %slice_cmp_phi to i8
  ret i8 %22

panic:                                            ; preds = %if.exit4
  store i64 %7, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %25 = insertvalue %any undef, ptr %taddr6, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.31, i64 11 }, ptr %indirectarg8, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd9, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 169, ptr align 8 %indirectarg10), !dbg !138
  unreachable, !dbg !138

panic12:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr13, align 8
  %28 = insertvalue %any undef, ptr %taddr13, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr14, align 8
  %30 = insertvalue %any undef, ptr %taddr14, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.31, i64 11 }, ptr %indirectarg17, align 8
  store %any %29, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %31, ptr %ptradd19, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 169, ptr align 8 %indirectarg21), !dbg !138
  unreachable, !dbg !138
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.ends_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !142 {
entry:
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !143, metadata !DIExpression()), !dbg !144
  call void @llvm.dbg.declare(metadata ptr %1, metadata !145, metadata !DIExpression()), !dbg !146
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !147
  %2 = load i64, ptr %ptradd, align 8, !dbg !147
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !148
  %3 = load i64, ptr %ptradd1, align 8, !dbg !148
  %gt = icmp ugt i64 %2, %3, !dbg !147
  br i1 %gt, label %if.then, label %if.exit, !dbg !147

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !149

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !150
  %4 = load i64, ptr %ptradd2, align 8, !dbg !150
  %not = icmp eq i64 %4, 0, !dbg !150
  br i1 %not, label %if.then3, label %if.exit4, !dbg !150

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !151

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !152
  %6 = extractvalue %"char[]" %5, 0, !dbg !152
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !153
  %7 = load i64, ptr %ptradd5, align 8, !dbg !153
  %8 = extractvalue %"char[]" %5, 1, !dbg !153
  %sub = sub i64 %8, %7, !dbg !153
  %gt6 = icmp ugt i64 %sub, %8, !dbg !153
  %9 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !153
  br i1 %9, label %panic, label %checkok, !dbg !153

checkok:                                          ; preds = %if.exit4
  %size = sub i64 %8, %sub, !dbg !152
  %ptradd12 = getelementptr inbounds i8, ptr %6, i64 %sub, !dbg !152
  %10 = insertvalue %"char[]" undef, ptr %ptradd12, 0, !dbg !152
  %11 = insertvalue %"char[]" %10, i64 %size, 1, !dbg !152
  %12 = load %"char[]", ptr %1, align 8, !dbg !154
  %13 = extractvalue %"char[]" %11, 1, !dbg !152
  %14 = extractvalue %"char[]" %12, 1, !dbg !152
  %15 = extractvalue %"char[]" %11, 0, !dbg !152
  %16 = extractvalue %"char[]" %12, 0, !dbg !152
  %eq = icmp eq i64 %13, %14, !dbg !152
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !152

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %17 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %17, %13
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd13 = getelementptr inbounds i8, ptr %15, i64 %17
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = load i8, ptr %ptradd13, align 1
  %19 = load i8, ptr %ptradd14, align 1
  %eq15 = icmp eq i8 %18, %19
  %20 = add i64 %17, 1
  store i64 %20, ptr %cmp.idx, align 8
  br i1 %eq15, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %21 = zext i1 %slice_cmp_phi to i8
  ret i8 %21

panic:                                            ; preds = %if.exit4
  store i64 %8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %24 = insertvalue %any undef, ptr %taddr7, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.32, i64 9 }, ptr %indirectarg9, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd10, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 184, ptr align 8 %indirectarg11), !dbg !152
  unreachable, !dbg !152
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.strip(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !155 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !156, metadata !DIExpression()), !dbg !157
  call void @llvm.dbg.declare(metadata ptr %2, metadata !158, metadata !DIExpression()), !dbg !159
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !160
  %3 = load i64, ptr %ptradd, align 8, !dbg !160
  %not = icmp eq i64 %3, 0, !dbg !160
  br i1 %not, label %or.phi, label %or.rhs, !dbg !160

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.starts_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !161
  %5 = trunc i8 %4 to i1, !dbg !161
  %not2 = xor i1 %5, true, !dbg !161
  br label %or.phi, !dbg !161

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not2, %or.rhs ], !dbg !161
  br i1 %val, label %if.then, label %if.exit, !dbg !161

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !162
  ret void, !dbg !162

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !163
  %7 = extractvalue %"char[]" %6, 0, !dbg !163
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !164
  %8 = load i64, ptr %ptradd3, align 8, !dbg !164
  %9 = extractvalue %"char[]" %6, 1, !dbg !164
  %gt = icmp ugt i64 %8, %9, !dbg !164
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !164
  br i1 %10, label %panic, label %checkok, !dbg !164

checkok:                                          ; preds = %if.exit
  %size = sub i64 %9, %8, !dbg !163
  %ptradd10 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !163
  %11 = insertvalue %"char[]" undef, ptr %ptradd10, 0, !dbg !163
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !163
  store %"char[]" %12, ptr %0, align 8, !dbg !163
  ret void, !dbg !163

panic:                                            ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg7, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd8, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 198, ptr align 8 %indirectarg9), !dbg !163
  unreachable, !dbg !163
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.strip_end(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !165 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !166, metadata !DIExpression()), !dbg !167
  call void @llvm.dbg.declare(metadata ptr %2, metadata !168, metadata !DIExpression()), !dbg !169
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !170
  %3 = load i64, ptr %ptradd, align 8, !dbg !170
  %not = icmp eq i64 %3, 0, !dbg !170
  br i1 %not, label %or.phi, label %or.rhs, !dbg !170

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.ends_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !171
  %5 = trunc i8 %4 to i1, !dbg !171
  %not2 = xor i1 %5, true, !dbg !171
  br label %or.phi, !dbg !171

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not2, %or.rhs ], !dbg !171
  br i1 %val, label %if.then, label %if.exit, !dbg !171

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !172
  ret void, !dbg !172

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !173
  %7 = extractvalue %"char[]" %6, 0, !dbg !173
  %8 = extractvalue %"char[]" %6, 1, !dbg !174
  %gt = icmp ugt i64 0, %8, !dbg !174
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !174
  br i1 %9, label %panic, label %checkok, !dbg !174

checkok:                                          ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !175
  %10 = load i64, ptr %ptradd9, align 8, !dbg !175
  %ptradd10 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !176
  %11 = load i64, ptr %ptradd10, align 8, !dbg !176
  %sub = sub i64 %10, %11, !dbg !175
  %add = add i64 0, %sub, !dbg !175
  %lt = icmp ult i64 %8, %add, !dbg !175
  %sub11 = sub i64 %add, 1, !dbg !175
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !175
  br i1 %12, label %panic12, label %checkok22, !dbg !175

checkok22:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !173
  %13 = insertvalue %"char[]" undef, ptr %7, 0, !dbg !173
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !173
  store %"char[]" %14, ptr %0, align 8, !dbg !173
  ret void, !dbg !173

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %17 = insertvalue %any undef, ptr %taddr3, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.34, i64 9 }, ptr %indirectarg6, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd7, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 213, ptr align 8 %indirectarg8), !dbg !173
  unreachable, !dbg !173

panic12:                                          ; preds = %checkok
  store i64 %sub11, ptr %taddr13, align 8
  %20 = insertvalue %any undef, ptr %taddr13, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr14, align 8
  %22 = insertvalue %any undef, ptr %taddr14, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.34, i64 9 }, ptr %indirectarg17, align 8
  store %any %21, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %23, ptr %ptradd19, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 213, ptr align 8 %indirectarg21), !dbg !173
  unreachable, !dbg !173
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.split(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3, ptr align 8 %4) #0 comdat !dbg !177 {
entry:
  %max = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements4 = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %res = alloca %"char[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %allocator68 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var70 = alloca i64, align 8
  %allocator71 = alloca %any, align 8
  %ptr72 = alloca ptr, align 8
  %new_size73 = alloca i64, align 8
  %blockret74 = alloca ptr, align 8
  %allocator77 = alloca %any, align 8
  %ptr78 = alloca ptr, align 8
  %.inlinecache83 = alloca ptr, align 8
  %.cachedtype84 = alloca ptr, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %.inlinecache101 = alloca ptr, align 8
  %.cachedtype102 = alloca ptr, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %retparam114 = alloca ptr, align 8
  %.inlinecache120 = alloca ptr, align 8
  %.cachedtype121 = alloca ptr, align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %retparam133 = alloca ptr, align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %varargslots142 = alloca [1 x %any], align 16
  %indirectarg144 = alloca %"any[]", align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype121, align 8
  store ptr null, ptr %.cachedtype102, align 8
  store ptr null, ptr %.cachedtype84, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !191, metadata !DIExpression()), !dbg !192
  call void @llvm.dbg.declare(metadata ptr %2, metadata !193, metadata !DIExpression()), !dbg !194
  store i64 %3, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !195, metadata !DIExpression()), !dbg !196
  call void @llvm.dbg.declare(metadata ptr %4, metadata !197, metadata !DIExpression()), !dbg !198
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !199
  %5 = load i64, ptr %ptradd, align 8, !dbg !199
  %lt = icmp ult i64 0, %5, !dbg !199
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !199

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.35, i64 83 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 223), !dbg !199
  unreachable, !dbg !199

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %capacity, metadata !201, metadata !DIExpression()), !dbg !202
  store i64 16, ptr %capacity, align 8, !dbg !203
  call void @llvm.dbg.declare(metadata ptr %i, metadata !204, metadata !DIExpression()), !dbg !205
  store i64 0, ptr %i, align 8, !dbg !206
  call void @llvm.dbg.declare(metadata ptr %holder, metadata !207, metadata !DIExpression()), !dbg !208
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %4, i32 16, i1 false)
  %7 = load i64, ptr %capacity, align 8
  store i64 %7, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load i64, ptr %elements, align 8
  store i64 %8, ptr %elements4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %9 = load i64, ptr %elements4, align 8, !dbg !209
  %mul = mul i64 16, %9, !dbg !215
  store i64 %mul, ptr %size, align 8
  %10 = load i64, ptr %size, align 8, !dbg !216
  %not = icmp eq i64 %10, 0, !dbg !216
  br i1 %not, label %if.then, label %if.exit, !dbg !216

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !219
  br label %expr_block.exit, !dbg !219

if.exit:                                          ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !220
  %11 = load i64, ptr %ptradd6, align 8, !dbg !220
  %12 = inttoptr i64 %11 to ptr, !dbg !220
  %type = load ptr, ptr %.cachedtype, align 8
  %13 = icmp eq ptr %12, %type
  br i1 %13, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16
  %14 = load ptr, ptr %ptradd7, align 8
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.acquire")
  store ptr %15, ptr %.inlinecache, align 8
  store ptr %12, ptr %.cachedtype, align 8
  br label %16

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %16

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ]
  %17 = icmp eq ptr %fn_phi, null
  br i1 %17, label %missing_function, label %match

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg10, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 68), !dbg !222
  unreachable, !dbg !222

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator5, align 8
  %20 = load i64, ptr %size, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !222
  %not_err = icmp eq i64 %21, 0, !dbg !222
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !222
  br i1 %22, label %after_check, label %assign_optional, !dbg !222

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !222
  br label %panic_block, !dbg !222

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !222
  store ptr %23, ptr %blockret, align 8, !dbg !222
  br label %expr_block.exit, !dbg !222

expr_block.exit:                                  ; preds = %after_check, %if.then
  %24 = load ptr, ptr %blockret, align 8, !dbg !222
  store ptr %24, ptr %taddr, align 8
  %25 = load ptr, ptr %taddr, align 8
  %26 = load i64, ptr %elements4, align 8, !dbg !223
  %add = add i64 0, %26, !dbg !223
  %size11 = sub i64 %add, 0, !dbg !223
  %27 = insertvalue %"char[][]" undef, ptr %25, 0, !dbg !223
  %28 = insertvalue %"char[][]" %27, i64 %size11, 1, !dbg !223
  br label %noerr_block, !dbg !223

panic_block:                                      ; preds = %assign_optional
  %29 = insertvalue %any undef, ptr %error_var, 0, !dbg !223
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !223
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg14, align 8
  store %any %30, ptr %varargslots, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 269, ptr align 8 %indirectarg15), !dbg !212
  unreachable, !dbg !212

noerr_block:                                      ; preds = %expr_block.exit
  %32 = extractvalue %"char[][]" %28, 0, !dbg !212
  store ptr %32, ptr %holder, align 8, !dbg !212
  call void @llvm.dbg.declare(metadata ptr %no_more, metadata !224, metadata !DIExpression()), !dbg !225
  store i8 0, ptr %no_more, align 1, !dbg !226
  br label %loop.cond, !dbg !227

loop.cond:                                        ; preds = %if.exit146, %noerr_block
  %33 = load i8, ptr %no_more, align 1, !dbg !228
  %34 = trunc i8 %33 to i1, !dbg !228
  %not16 = xor i1 %34, true, !dbg !228
  br i1 %not16, label %loop.body, label %loop.exit, !dbg !228

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %index, metadata !230, metadata !DIExpression()), !dbg !232
  %35 = load i64, ptr %i, align 8, !dbg !233
  %36 = load i64, ptr %max, align 8, !dbg !234
  %sub = sub i64 %36, 1, !dbg !234
  %eq = icmp eq i64 %sub, %35, !dbg !233
  %check = icmp sge i64 %sub, 0, !dbg !233
  %siui-eq = and i1 %check, %eq, !dbg !233
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !233

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !235
  br label %after_assign, !dbg !235

cond.rhs:                                         ; preds = %loop.body
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg18, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg19, ptr align 8 %2, i32 16, i1 false)
  %37 = call i64 @std.core.String.index_of(ptr %retparam17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19), !dbg !236
  %not_err20 = icmp eq i64 %37, 0, !dbg !236
  %38 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !236
  br i1 %38, label %after_check22, label %assign_optional21, !dbg !236

assign_optional21:                                ; preds = %cond.rhs
  store i64 %37, ptr %index.f, align 8, !dbg !236
  br label %after_assign, !dbg !236

after_check22:                                    ; preds = %cond.rhs
  %39 = load i64, ptr %retparam17, align 8, !dbg !236
  br label %cond.phi, !dbg !236

cond.phi:                                         ; preds = %after_check22
  store i64 %39, ptr %index, align 8, !dbg !236
  store i64 0, ptr %index.f, align 8, !dbg !236
  br label %after_assign, !dbg !236

after_assign:                                     ; preds = %cond.phi, %assign_optional21, %cond.lhs
  call void @llvm.dbg.declare(metadata ptr %res, metadata !237, metadata !DIExpression()), !dbg !238
  %load.err = load i64, ptr %index.f, align 8, !dbg !239
  %result = icmp eq i64 %load.err, 0, !dbg !239
  br i1 %result, label %if.then23, label %if.else, !dbg !239

if.then23:                                        ; preds = %after_assign
  %40 = load %"char[]", ptr %1, align 8, !dbg !240
  %41 = extractvalue %"char[]" %40, 0, !dbg !240
  %42 = extractvalue %"char[]" %40, 1, !dbg !242
  %gt = icmp ugt i64 0, %42, !dbg !242
  %43 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !242
  br i1 %43, label %panic, label %checkok, !dbg !242

checkok:                                          ; preds = %if.then23
  %44 = load i64, ptr %index, align 8, !dbg !243
  %add33 = add i64 0, %44, !dbg !243
  %lt34 = icmp ult i64 %42, %add33, !dbg !243
  %sub35 = sub i64 %add33, 1, !dbg !243
  %45 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !243
  br i1 %45, label %panic36, label %checkok46, !dbg !243

checkok46:                                        ; preds = %checkok
  %size47 = sub i64 %add33, 0, !dbg !240
  %46 = insertvalue %"char[]" undef, ptr %41, 0, !dbg !240
  %47 = insertvalue %"char[]" %46, i64 %size47, 1, !dbg !240
  store %"char[]" %47, ptr %res, align 8, !dbg !240
  %48 = load %"char[]", ptr %1, align 8, !dbg !244
  %49 = extractvalue %"char[]" %48, 0, !dbg !244
  %50 = load i64, ptr %index, align 8, !dbg !245
  %ptradd48 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !246
  %51 = load i64, ptr %ptradd48, align 8, !dbg !246
  %add49 = add i64 %50, %51, !dbg !245
  %52 = extractvalue %"char[]" %48, 1, !dbg !245
  %gt50 = icmp ugt i64 %add49, %52, !dbg !245
  %53 = call i1 @llvm.expect.i1(i1 %gt50, i1 false), !dbg !245
  br i1 %53, label %panic51, label %checkok61, !dbg !245

checkok61:                                        ; preds = %checkok46
  %size62 = sub i64 %52, %add49, !dbg !244
  %ptradd63 = getelementptr inbounds i8, ptr %49, i64 %add49, !dbg !244
  %54 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !244
  %55 = insertvalue %"char[]" %54, i64 %size62, 1, !dbg !244
  store %"char[]" %55, ptr %1, align 8, !dbg !244
  br label %if.exit64, !dbg !244

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %1, i32 16, i1 false), !dbg !247
  store i8 1, ptr %no_more, align 1, !dbg !249
  br label %if.exit64, !dbg !249

if.exit64:                                        ; preds = %if.else, %checkok61
  %56 = load i64, ptr %i, align 8, !dbg !250
  %57 = load i64, ptr %capacity, align 8, !dbg !251
  %eq65 = icmp eq i64 %56, %57, !dbg !250
  br i1 %eq65, label %if.then66, label %if.exit146, !dbg !250

if.then66:                                        ; preds = %if.exit64
  %58 = load i64, ptr %capacity, align 8, !dbg !252
  %mul67 = mul i64 %58, 2, !dbg !252
  store i64 %mul67, ptr %capacity, align 8, !dbg !252
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator68, ptr align 8 %4, i32 16, i1 false)
  %59 = load ptr, ptr %holder, align 8, !dbg !254
  store ptr %59, ptr %ptr, align 8
  %60 = load i64, ptr %capacity, align 8, !dbg !255
  %mul69 = mul i64 16, %60, !dbg !256
  store i64 %mul69, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator71, ptr align 8 %allocator68, i32 16, i1 false)
  %61 = load ptr, ptr %ptr, align 8
  store ptr %61, ptr %ptr72, align 8
  %62 = load i64, ptr %new_size, align 8
  store i64 %62, ptr %new_size73, align 8
  %63 = load i64, ptr %new_size73, align 8, !dbg !257
  %not75 = icmp eq i64 %63, 0, !dbg !257
  br i1 %not75, label %if.then76, label %if.exit97, !dbg !257

if.then76:                                        ; preds = %if.then66
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator77, ptr align 8 %allocator71, i32 16, i1 false)
  %64 = load ptr, ptr %ptr72, align 8
  store ptr %64, ptr %ptr78, align 8
  %65 = load ptr, ptr %ptr78, align 8, !dbg !262
  %not79 = icmp eq ptr %65, null, !dbg !262
  br i1 %not79, label %if.then80, label %if.exit81, !dbg !262

if.then80:                                        ; preds = %if.then76
  br label %expr_block.exit96, !dbg !266

if.exit81:                                        ; preds = %if.then76
  %ptradd82 = getelementptr inbounds i8, ptr %allocator77, i64 8, !dbg !267
  %66 = load i64, ptr %ptradd82, align 8, !dbg !267
  %67 = inttoptr i64 %66 to ptr, !dbg !267
  %type85 = load ptr, ptr %.cachedtype84, align 8
  %68 = icmp eq ptr %67, %type85
  br i1 %68, label %cache_hit88, label %cache_miss86

cache_miss86:                                     ; preds = %if.exit81
  %ptradd87 = getelementptr inbounds i8, ptr %67, i64 16
  %69 = load ptr, ptr %ptradd87, align 8
  %70 = call ptr @.dyn_search(ptr %69, ptr @"$sel.release")
  store ptr %70, ptr %.inlinecache83, align 8
  store ptr %67, ptr %.cachedtype84, align 8
  br label %71

cache_hit88:                                      ; preds = %if.exit81
  %cache_hit_fn89 = load ptr, ptr %.inlinecache83, align 8
  br label %71

71:                                               ; preds = %cache_hit88, %cache_miss86
  %fn_phi90 = phi ptr [ %cache_hit_fn89, %cache_hit88 ], [ %70, %cache_miss86 ]
  %72 = icmp eq ptr %fn_phi90, null
  br i1 %72, label %missing_function91, label %match95

missing_function91:                               ; preds = %71
  store %"char[]" { ptr @.panic_msg.28, i64 44 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg94, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 105), !dbg !268
  unreachable, !dbg !268

match95:                                          ; preds = %71
  %74 = load ptr, ptr %allocator77, align 8, !dbg !268
  %75 = load ptr, ptr %ptr78, align 8, !dbg !268
  call void %fn_phi90(ptr %74, ptr %75, i8 zeroext 0), !dbg !268
  br label %expr_block.exit96, !dbg !268

expr_block.exit96:                                ; preds = %match95, %if.then80
  store ptr null, ptr %blockret74, align 8, !dbg !269
  br label %expr_block.exit137, !dbg !269

if.exit97:                                        ; preds = %if.then66
  %76 = load ptr, ptr %ptr72, align 8, !dbg !270
  %not98 = icmp eq ptr %76, null, !dbg !270
  br i1 %not98, label %if.then99, label %if.exit118, !dbg !270

if.then99:                                        ; preds = %if.exit97
  %ptradd100 = getelementptr inbounds i8, ptr %allocator71, i64 8, !dbg !271
  %77 = load i64, ptr %ptradd100, align 8, !dbg !271
  %78 = inttoptr i64 %77 to ptr, !dbg !271
  %type103 = load ptr, ptr %.cachedtype102, align 8
  %79 = icmp eq ptr %78, %type103
  br i1 %79, label %cache_hit106, label %cache_miss104

cache_miss104:                                    ; preds = %if.then99
  %ptradd105 = getelementptr inbounds i8, ptr %78, i64 16
  %80 = load ptr, ptr %ptradd105, align 8
  %81 = call ptr @.dyn_search(ptr %80, ptr @"$sel.acquire")
  store ptr %81, ptr %.inlinecache101, align 8
  store ptr %78, ptr %.cachedtype102, align 8
  br label %82

cache_hit106:                                     ; preds = %if.then99
  %cache_hit_fn107 = load ptr, ptr %.inlinecache101, align 8
  br label %82

82:                                               ; preds = %cache_hit106, %cache_miss104
  %fn_phi108 = phi ptr [ %cache_hit_fn107, %cache_hit106 ], [ %81, %cache_miss104 ]
  %83 = icmp eq ptr %fn_phi108, null
  br i1 %83, label %missing_function109, label %match113

missing_function109:                              ; preds = %82
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg112, align 8
  %84 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %84(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 95), !dbg !273
  unreachable, !dbg !273

match113:                                         ; preds = %82
  %85 = load ptr, ptr %allocator71, align 8
  %86 = load i64, ptr %new_size73, align 8
  %87 = call i64 %fn_phi108(ptr %retparam114, ptr %85, i64 %86, i32 0, i64 0), !dbg !273
  %not_err115 = icmp eq i64 %87, 0, !dbg !273
  %88 = call i1 @llvm.expect.i1(i1 %not_err115, i1 true), !dbg !273
  br i1 %88, label %after_check117, label %assign_optional116, !dbg !273

assign_optional116:                               ; preds = %match113
  store i64 %87, ptr %error_var70, align 8, !dbg !273
  br label %panic_block138, !dbg !273

after_check117:                                   ; preds = %match113
  %89 = load ptr, ptr %retparam114, align 8, !dbg !273
  store ptr %89, ptr %blockret74, align 8, !dbg !273
  br label %expr_block.exit137, !dbg !273

if.exit118:                                       ; preds = %if.exit97
  %ptradd119 = getelementptr inbounds i8, ptr %allocator71, i64 8, !dbg !274
  %90 = load i64, ptr %ptradd119, align 8, !dbg !274
  %91 = inttoptr i64 %90 to ptr, !dbg !274
  %type122 = load ptr, ptr %.cachedtype121, align 8
  %92 = icmp eq ptr %91, %type122
  br i1 %92, label %cache_hit125, label %cache_miss123

cache_miss123:                                    ; preds = %if.exit118
  %ptradd124 = getelementptr inbounds i8, ptr %91, i64 16
  %93 = load ptr, ptr %ptradd124, align 8
  %94 = call ptr @.dyn_search(ptr %93, ptr @"$sel.resize")
  store ptr %94, ptr %.inlinecache120, align 8
  store ptr %91, ptr %.cachedtype121, align 8
  br label %95

cache_hit125:                                     ; preds = %if.exit118
  %cache_hit_fn126 = load ptr, ptr %.inlinecache120, align 8
  br label %95

95:                                               ; preds = %cache_hit125, %cache_miss123
  %fn_phi127 = phi ptr [ %cache_hit_fn126, %cache_hit125 ], [ %94, %cache_miss123 ]
  %96 = icmp eq ptr %fn_phi127, null
  br i1 %96, label %missing_function128, label %match132

missing_function128:                              ; preds = %95
  store %"char[]" { ptr @.panic_msg.38, i64 43 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg131, align 8
  %97 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %97(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 96), !dbg !276
  unreachable, !dbg !276

match132:                                         ; preds = %95
  %98 = load ptr, ptr %allocator71, align 8
  %99 = load ptr, ptr %ptr72, align 8
  %100 = load i64, ptr %new_size73, align 8
  %101 = call i64 %fn_phi127(ptr %retparam133, ptr %98, ptr %99, i64 %100, i64 0), !dbg !276
  %not_err134 = icmp eq i64 %101, 0, !dbg !276
  %102 = call i1 @llvm.expect.i1(i1 %not_err134, i1 true), !dbg !276
  br i1 %102, label %after_check136, label %assign_optional135, !dbg !276

assign_optional135:                               ; preds = %match132
  store i64 %101, ptr %error_var70, align 8, !dbg !276
  br label %panic_block138, !dbg !276

after_check136:                                   ; preds = %match132
  %103 = load ptr, ptr %retparam133, align 8, !dbg !276
  store ptr %103, ptr %blockret74, align 8, !dbg !276
  br label %expr_block.exit137, !dbg !276

expr_block.exit137:                               ; preds = %after_check136, %after_check117, %expr_block.exit96
  br label %noerr_block145, !dbg !276

panic_block138:                                   ; preds = %assign_optional135, %assign_optional116
  %104 = insertvalue %any undef, ptr %error_var70, 0, !dbg !276
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !276
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg141, align 8
  store %any %105, ptr %varargslots142, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp143" = insertvalue %"any[]" %106, i64 1, 1
  store %"any[]" %"$$temp143", ptr %indirectarg144, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, i32 85, ptr align 8 %indirectarg144), !dbg !259
  unreachable, !dbg !259

noerr_block145:                                   ; preds = %expr_block.exit137
  %107 = load ptr, ptr %blockret74, align 8, !dbg !259
  store ptr %107, ptr %holder, align 8, !dbg !259
  br label %if.exit146, !dbg !259

if.exit146:                                       ; preds = %noerr_block145, %if.exit64
  %108 = load ptr, ptr %holder, align 8, !dbg !277
  %109 = load i64, ptr %i, align 8, !dbg !278
  %add147 = add i64 %109, 1, !dbg !278
  store i64 %add147, ptr %i, align 8, !dbg !278
  %ptroffset = getelementptr inbounds [16 x i8], ptr %108, i64 %109, !dbg !278
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !279
  br label %loop.cond, !dbg !279

loop.exit:                                        ; preds = %loop.cond
  %110 = load ptr, ptr %holder, align 8, !dbg !280
  %111 = load i64, ptr %i, align 8, !dbg !281
  %add148 = add i64 0, %111, !dbg !281
  %size149 = sub i64 %add148, 0, !dbg !281
  %112 = insertvalue %"char[][]" undef, ptr %110, 0, !dbg !281
  %113 = insertvalue %"char[][]" %112, i64 %size149, 1, !dbg !281
  %114 = extractvalue %"char[][]" %113, 1, !dbg !282
  %lt150 = icmp ult i64 0, %114, !dbg !282
  br i1 %lt150, label %assert_ok155, label %assert_fail151, !dbg !282

assert_fail151:                                   ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.39, i64 34 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg154, align 8
  %115 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %115(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 224), !dbg !282
  unreachable, !dbg !282

assert_ok155:                                     ; preds = %loop.exit
  store %"char[][]" %113, ptr %0, align 8, !dbg !282
  ret void, !dbg !282

panic:                                            ; preds = %if.then23
  store i64 %42, ptr %taddr24, align 8
  %116 = insertvalue %any undef, ptr %taddr24, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %118 = insertvalue %any undef, ptr %taddr25, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg28, align 8
  store %any %117, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %119, ptr %ptradd30, align 16
  %120 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %120, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 238, ptr align 8 %indirectarg32), !dbg !240
  unreachable, !dbg !240

panic36:                                          ; preds = %checkok
  store i64 %sub35, ptr %taddr37, align 8
  %121 = insertvalue %any undef, ptr %taddr37, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr38, align 8
  %123 = insertvalue %any undef, ptr %taddr38, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg41, align 8
  store %any %122, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %124, ptr %ptradd43, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 238, ptr align 8 %indirectarg45), !dbg !240
  unreachable, !dbg !240

panic51:                                          ; preds = %checkok46
  store i64 %52, ptr %taddr52, align 8
  %126 = insertvalue %any undef, ptr %taddr52, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add49, ptr %taddr53, align 8
  %128 = insertvalue %any undef, ptr %taddr53, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.36, i64 5 }, ptr %indirectarg56, align 8
  store %any %127, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %129, ptr %ptradd58, align 16
  %130 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %130, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 239, ptr align 8 %indirectarg60), !dbg !244
  unreachable, !dbg !244
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.new_split(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3) #0 comdat !dbg !283 {
entry:
  %max = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sretparam = alloca %"char[][]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %any, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !286, metadata !DIExpression()), !dbg !287
  call void @llvm.dbg.declare(metadata ptr %2, metadata !288, metadata !DIExpression()), !dbg !289
  store i64 %3, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !290, metadata !DIExpression()), !dbg !291
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !292
  %4 = load i64, ptr %ptradd, align 8, !dbg !292
  %lt = icmp ult i64 0, %4, !dbg !292
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !292

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.35, i64 83 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.40, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 263), !dbg !292
  unreachable, !dbg !292

assert_ok:                                        ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %2, i32 16, i1 false)
  %6 = load i64, ptr %max, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @std.core.String.split(ptr sret(%"char[][]") align 8 %sretparam, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i64 %6, ptr align 8 %indirectarg5) #5, !dbg !294
  %7 = load %"char[][]", ptr %sretparam, align 8, !dbg !294
  %ptradd6 = getelementptr inbounds i8, ptr %sretparam, i64 8, !dbg !295
  %8 = load i64, ptr %ptradd6, align 8, !dbg !295
  %lt7 = icmp ult i64 0, %8, !dbg !295
  br i1 %lt7, label %assert_ok12, label %assert_fail8, !dbg !295

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.39, i64 34 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.40, i64 9 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 264), !dbg !295
  unreachable, !dbg !295

assert_ok12:                                      ; preds = %assert_ok
  store %"char[][]" %7, ptr %0, align 8, !dbg !295
  ret void, !dbg !295
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tsplit(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3) #0 comdat !dbg !296 {
entry:
  %max = alloca i64, align 8
  %sretparam = alloca %"char[][]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !297, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata ptr %2, metadata !299, metadata !DIExpression()), !dbg !300
  store i64 %3, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !301, metadata !DIExpression()), !dbg !302
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !303
  %not = icmp eq ptr %4, null, !dbg !303
  br i1 %not, label %if.then, label %if.exit, !dbg !303

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !306
  br label %if.exit, !dbg !306

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !308
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !308
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !308
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %8 = load i64, ptr %max, align 8
  store %any %7, ptr %indirectarg2, align 8
  call void @std.core.String.split(ptr sret(%"char[][]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i64 %8, ptr align 8 %indirectarg2) #5, !dbg !309
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !309
  ret void, !dbg !309
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.contains(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !310 {
entry:
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !311, metadata !DIExpression()), !dbg !312
  call void @llvm.dbg.declare(metadata ptr %1, metadata !313, metadata !DIExpression()), !dbg !314
  br label %testblock

testblock:                                        ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %1, i32 16, i1 false)
  %2 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !315
  %not_err = icmp eq i64 %2, 0, !dbg !315
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !315
  br i1 %3, label %after_check, label %assign_optional, !dbg !315

assign_optional:                                  ; preds = %testblock
  store i64 %2, ptr %temp_err, align 8, !dbg !315
  br label %end_block, !dbg !315

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !315
  br label %end_block, !dbg !315

end_block:                                        ; preds = %after_check, %assign_optional
  %4 = load i64, ptr %temp_err, align 8, !dbg !315
  %neq = icmp ne i64 %4, 0, !dbg !315
  br i1 %neq, label %if.then, label %if.exit, !dbg !315

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !319
  br label %expr_block.exit, !dbg !319

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !320
  br label %expr_block.exit, !dbg !320

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %5 = load i8, ptr %blockret, align 1, !dbg !320
  ret i8 %5, !dbg !320
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !321 {
entry:
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !327, metadata !DIExpression()), !dbg !328
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !329, metadata !DIExpression()), !dbg !330
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !331, metadata !DIExpression()), !dbg !333
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !333
  %3 = load i64, ptr %ptradd, align 8, !dbg !333
  store i64 %3, ptr %.anon, align 8, !dbg !333
  call void @llvm.dbg.declare(metadata ptr %.anon1, metadata !331, metadata !DIExpression()), !dbg !334
  store i64 0, ptr %.anon1, align 8, !dbg !334
  br label %loop.cond, !dbg !334

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon1, align 8, !dbg !334
  %5 = load i64, ptr %.anon, align 8, !dbg !333
  %lt = icmp ult i64 %4, %5, !dbg !334
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !334

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !335, metadata !DIExpression()), !dbg !337
  %6 = load i64, ptr %.anon1, align 8, !dbg !337
  store i64 %6, ptr %i, align 8, !dbg !337
  call void @llvm.dbg.declare(metadata ptr %c, metadata !338, metadata !DIExpression()), !dbg !339
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !340
  %7 = load i64, ptr %ptradd2, align 8, !dbg !340
  %8 = load ptr, ptr %1, align 8, !dbg !340
  %9 = load i64, ptr %.anon1, align 8, !dbg !337
  %ge = icmp uge i64 %9, %7, !dbg !337
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !337
  br i1 %10, label %panic, label %checkok, !dbg !337

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !337
  %11 = load i8, ptr %ptradd8, align 1, !dbg !337
  store i8 %11, ptr %c, align 1, !dbg !337
  %12 = load i8, ptr %c, align 1, !dbg !341
  %13 = load i8, ptr %needle, align 1, !dbg !343
  %eq = icmp eq i8 %12, %13, !dbg !341
  br i1 %eq, label %if.then, label %if.exit, !dbg !341

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !344
  %15 = load i64, ptr %i, align 8, !dbg !345
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !346
  %16 = load i64, ptr %ptradd9, align 8, !dbg !346
  %lt10 = icmp ult i64 %15, %16, !dbg !345
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !345

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.42, i64 34 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.41, i64 13 }, ptr %indirectarg13, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 297), !dbg !345
  unreachable, !dbg !345

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !345
  ret i64 0, !dbg !345

if.exit:                                          ; preds = %checkok
  %18 = load i64, ptr %.anon1, align 8, !dbg !334
  %addnuw = add nuw i64 %18, 1, !dbg !334
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !334
  br label %loop.cond, !dbg !334

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !347

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.41, i64 13 }, ptr %indirectarg5, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd6, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 303, ptr align 8 %indirectarg7), !dbg !337
  unreachable, !dbg !337
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char_from(ptr %0, ptr align 8 %1, i8 %2, i64 %3) #0 comdat !dbg !348 {
entry:
  %needle = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !351, metadata !DIExpression()), !dbg !352
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !353, metadata !DIExpression()), !dbg !354
  store i64 %3, ptr %start_index, align 8
  call void @llvm.dbg.declare(metadata ptr %start_index, metadata !355, metadata !DIExpression()), !dbg !356
  call void @llvm.dbg.declare(metadata ptr %len, metadata !357, metadata !DIExpression()), !dbg !358
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !359
  %4 = load i64, ptr %ptradd, align 8, !dbg !359
  store i64 %4, ptr %len, align 8, !dbg !359
  %5 = load i64, ptr %len, align 8, !dbg !360
  %6 = load i64, ptr %start_index, align 8, !dbg !361
  %le = icmp ule i64 %5, %6, !dbg !360
  br i1 %le, label %if.then, label %if.exit, !dbg !360

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !362

if.exit:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !363, metadata !DIExpression()), !dbg !365
  %7 = load i64, ptr %start_index, align 8, !dbg !366
  store i64 %7, ptr %i, align 8, !dbg !366
  br label %loop.cond, !dbg !366

loop.cond:                                        ; preds = %if.exit14, %if.exit
  %8 = load i64, ptr %i, align 8, !dbg !367
  %9 = load i64, ptr %len, align 8, !dbg !368
  %lt = icmp ult i64 %8, %9, !dbg !367
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !367

loop.body:                                        ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !369
  %10 = load i64, ptr %ptradd1, align 8, !dbg !369
  %11 = load ptr, ptr %1, align 8, !dbg !369
  %12 = load i64, ptr %i, align 8, !dbg !371
  %ge = icmp uge i64 %12, %10, !dbg !371
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !371
  br i1 %13, label %panic, label %checkok, !dbg !371

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !371
  %14 = load i8, ptr %ptradd7, align 1, !dbg !371
  %15 = load i8, ptr %needle, align 1, !dbg !372
  %eq = icmp eq i8 %14, %15, !dbg !369
  br i1 %eq, label %if.then8, label %if.exit14, !dbg !369

if.then8:                                         ; preds = %checkok
  %16 = load i64, ptr %i, align 8, !dbg !373
  %17 = load i64, ptr %i, align 8, !dbg !374
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !375
  %18 = load i64, ptr %ptradd9, align 8, !dbg !375
  %lt10 = icmp ult i64 %17, %18, !dbg !374
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !374

assert_fail:                                      ; preds = %if.then8
  store %"char[]" { ptr @.panic_msg.42, i64 34 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.43, i64 18 }, ptr %indirectarg13, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 317), !dbg !374
  unreachable, !dbg !374

assert_ok:                                        ; preds = %if.then8
  store i64 %16, ptr %0, align 8, !dbg !374
  ret i64 0, !dbg !374

if.exit14:                                        ; preds = %checkok
  %20 = load i64, ptr %i, align 8, !dbg !376
  %add = add i64 %20, 1, !dbg !376
  store i64 %add, ptr %i, align 8, !dbg !376
  br label %loop.cond, !dbg !376

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !377

panic:                                            ; preds = %loop.body
  store i64 %10, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr2, align 8
  %23 = insertvalue %any undef, ptr %taddr2, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.43, i64 18 }, ptr %indirectarg4, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 327, ptr align 8 %indirectarg6), !dbg !371
  unreachable, !dbg !371
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !378 {
entry:
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !379, metadata !DIExpression()), !dbg !380
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !381, metadata !DIExpression()), !dbg !382
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !383, metadata !DIExpression()), !dbg !385
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !386
  %3 = load i64, ptr %ptradd, align 8, !dbg !386
  store i64 %3, ptr %.anon, align 8, !dbg !386
  br label %loop.cond, !dbg !386

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !385
  %gt = icmp ugt i64 %4, 0, !dbg !385
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !385

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %.anon, align 8, !dbg !385
  %subnuw = sub nuw i64 %5, 1, !dbg !385
  store i64 %subnuw, ptr %.anon, align 8, !dbg !385
  call void @llvm.dbg.declare(metadata ptr %i, metadata !387, metadata !DIExpression()), !dbg !389
  %6 = load i64, ptr %.anon, align 8, !dbg !389
  store i64 %6, ptr %i, align 8, !dbg !389
  call void @llvm.dbg.declare(metadata ptr %c, metadata !390, metadata !DIExpression()), !dbg !391
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !392
  %7 = load i64, ptr %ptradd1, align 8, !dbg !392
  %8 = load ptr, ptr %1, align 8, !dbg !392
  %9 = load i64, ptr %.anon, align 8, !dbg !389
  %ge = icmp uge i64 %9, %7, !dbg !389
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !389
  br i1 %10, label %panic, label %checkok, !dbg !389

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !389
  %11 = load i8, ptr %ptradd7, align 1, !dbg !389
  store i8 %11, ptr %c, align 1, !dbg !389
  %12 = load i8, ptr %c, align 1, !dbg !393
  %13 = load i8, ptr %needle, align 1, !dbg !395
  %eq = icmp eq i8 %12, %13, !dbg !393
  br i1 %eq, label %if.then, label %if.exit, !dbg !393

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !396
  %15 = load i64, ptr %i, align 8, !dbg !397
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !398
  %16 = load i64, ptr %ptradd8, align 8, !dbg !398
  %lt = icmp ult i64 %15, %16, !dbg !397
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !397

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.42, i64 34 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.44, i64 14 }, ptr %indirectarg11, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 338), !dbg !397
  unreachable, !dbg !397

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !397
  ret i64 0, !dbg !397

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !397

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !399

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr2, align 8
  %20 = insertvalue %any undef, ptr %taddr2, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.44, i64 14 }, ptr %indirectarg4, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 344, ptr align 8 %indirectarg6), !dbg !389
  unreachable, !dbg !389
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !400 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %.anon49 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %.anon56 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %varargslots86 = alloca [2 x %any], align 16
  %indirectarg89 = alloca %"any[]", align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !403, metadata !DIExpression()), !dbg !404
  call void @llvm.dbg.declare(metadata ptr %2, metadata !405, metadata !DIExpression()), !dbg !406
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !407
  %3 = load i64, ptr %ptradd, align 8, !dbg !407
  %lt = icmp ult i64 0, %3, !dbg !407
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !407

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.45, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 358), !dbg !407
  unreachable, !dbg !407

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !409, metadata !DIExpression()), !dbg !410
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !411
  %5 = load i64, ptr %ptradd3, align 8, !dbg !411
  store i64 %5, ptr %needed, align 8, !dbg !411
  %6 = load i64, ptr %needed, align 8, !dbg !412
  %lt4 = icmp ult i64 0, %6, !dbg !412
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !412

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !413
  %7 = load i64, ptr %ptradd5, align 8, !dbg !413
  %8 = load i64, ptr %needed, align 8, !dbg !414
  %ge = icmp uge i64 %7, %8, !dbg !413
  br label %and.phi, !dbg !413

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !413
  br i1 %val, label %if.then, label %if.exit121, !dbg !413

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !415, metadata !DIExpression()), !dbg !417
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !418
  %9 = load i64, ptr %ptradd6, align 8, !dbg !418
  %10 = load ptr, ptr %2, align 8, !dbg !418
  %ge7 = icmp sge i64 0, %9, !dbg !419
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !419
  br i1 %11, label %panic, label %checkok, !dbg !419

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !419
  store i8 %12, ptr %first, align 1, !dbg !419
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !420, metadata !DIExpression()), !dbg !422
  %13 = load %"char[]", ptr %1, align 8, !dbg !422
  %14 = extractvalue %"char[]" %13, 0, !dbg !422
  %15 = extractvalue %"char[]" %13, 1, !dbg !423
  %gt = icmp ugt i64 0, %15, !dbg !423
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !423
  br i1 %16, label %panic14, label %checkok24, !dbg !423

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !424
  %sub = sub i64 %15, %17, !dbg !424
  %gt25 = icmp ugt i64 0, %sub, !dbg !424
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !424
  br i1 %18, label %panic26, label %checkok36, !dbg !424

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !422
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !422
  br i1 %19, label %panic37, label %checkok47, !dbg !422

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !422
  %size = sub i64 %20, 0, !dbg !422
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !422
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !422
  store %"char[]" %22, ptr %taddr48, align 8
  store ptr %taddr48, ptr %.anon, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon49, metadata !425, metadata !DIExpression()), !dbg !422
  %23 = load ptr, ptr %.anon, align 8, !dbg !422
  %checknull = icmp eq ptr %23, null, !dbg !422
  %24 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !422
  br i1 %24, label %panic50, label %checkok54, !dbg !422

checkok54:                                        ; preds = %checkok47
  %ptradd55 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !422
  %25 = load i64, ptr %ptradd55, align 8, !dbg !422
  store i64 %25, ptr %.anon49, align 8, !dbg !422
  call void @llvm.dbg.declare(metadata ptr %.anon56, metadata !425, metadata !DIExpression()), !dbg !426
  store i64 0, ptr %.anon56, align 8, !dbg !426
  br label %loop.cond, !dbg !426

loop.cond:                                        ; preds = %if.exit, %checkok54
  %26 = load i64, ptr %.anon56, align 8, !dbg !426
  %27 = load i64, ptr %.anon49, align 8, !dbg !422
  %lt57 = icmp ult i64 %26, %27, !dbg !426
  br i1 %lt57, label %loop.body, label %loop.exit, !dbg !426

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !427, metadata !DIExpression()), !dbg !429
  %28 = load i64, ptr %.anon56, align 8, !dbg !429
  store i64 %28, ptr %i, align 8, !dbg !429
  call void @llvm.dbg.declare(metadata ptr %c, metadata !430, metadata !DIExpression()), !dbg !431
  %29 = load ptr, ptr %.anon, align 8, !dbg !432
  %checknull58 = icmp eq ptr %29, null, !dbg !432
  %30 = call i1 @llvm.expect.i1(i1 %checknull58, i1 false), !dbg !432
  br i1 %30, label %panic59, label %checkok63, !dbg !432

checkok63:                                        ; preds = %loop.body
  %ptradd64 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !432
  %31 = load i64, ptr %ptradd64, align 8, !dbg !432
  %32 = load ptr, ptr %29, align 8, !dbg !432
  %33 = load i64, ptr %.anon56, align 8, !dbg !429
  %ge65 = icmp uge i64 %33, %31, !dbg !429
  %34 = call i1 @llvm.expect.i1(i1 %ge65, i1 false), !dbg !429
  br i1 %34, label %panic66, label %checkok76, !dbg !429

checkok76:                                        ; preds = %checkok63
  %ptradd77 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !429
  %35 = load i8, ptr %ptradd77, align 1, !dbg !429
  store i8 %35, ptr %c, align 1, !dbg !429
  %36 = load i8, ptr %c, align 1, !dbg !433
  %37 = load i8, ptr %first, align 1, !dbg !435
  %eq = icmp eq i8 %36, %37, !dbg !433
  br i1 %eq, label %and.rhs78, label %and.phi111, !dbg !433

and.rhs78:                                        ; preds = %checkok76
  %38 = load %"char[]", ptr %1, align 8, !dbg !436
  %39 = extractvalue %"char[]" %38, 0, !dbg !436
  %40 = load i64, ptr %i, align 8, !dbg !437
  %41 = extractvalue %"char[]" %38, 1, !dbg !437
  %gt79 = icmp ugt i64 %40, %41, !dbg !437
  %42 = call i1 @llvm.expect.i1(i1 %gt79, i1 false), !dbg !437
  br i1 %42, label %panic80, label %checkok90, !dbg !437

checkok90:                                        ; preds = %and.rhs78
  %43 = load i64, ptr %needed, align 8, !dbg !438
  %add = add i64 %40, %43, !dbg !438
  %lt91 = icmp ult i64 %41, %add, !dbg !438
  %sub92 = sub i64 %add, 1, !dbg !438
  %44 = call i1 @llvm.expect.i1(i1 %lt91, i1 false), !dbg !438
  br i1 %44, label %panic93, label %checkok103, !dbg !438

checkok103:                                       ; preds = %checkok90
  %size104 = sub i64 %add, %40, !dbg !436
  %ptradd105 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !436
  %45 = insertvalue %"char[]" undef, ptr %ptradd105, 0, !dbg !436
  %46 = insertvalue %"char[]" %45, i64 %size104, 1, !dbg !436
  %47 = load %"char[]", ptr %2, align 8, !dbg !439
  %48 = extractvalue %"char[]" %46, 1, !dbg !436
  %49 = extractvalue %"char[]" %47, 1, !dbg !436
  %50 = extractvalue %"char[]" %46, 0, !dbg !436
  %51 = extractvalue %"char[]" %47, 0, !dbg !436
  %eq106 = icmp eq i64 %48, %49, !dbg !436
  br i1 %eq106, label %slice_cmp_values, label %slice_cmp_exit, !dbg !436

slice_cmp_values:                                 ; preds = %checkok103
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %52 = load i64, ptr %cmp.idx, align 8
  %lt107 = icmp slt i64 %52, %48
  br i1 %lt107, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd108 = getelementptr inbounds i8, ptr %50, i64 %52
  %ptradd109 = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load i8, ptr %ptradd108, align 1
  %54 = load i8, ptr %ptradd109, align 1
  %eq110 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx, align 8
  br i1 %eq110, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok103
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok103 ], [ false, %slice_loop_comparison ]
  br label %and.phi111

and.phi111:                                       ; preds = %slice_cmp_exit, %checkok76
  %val112 = phi i1 [ false, %checkok76 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val112, label %if.then113, label %if.exit

if.then113:                                       ; preds = %and.phi111
  %56 = load i64, ptr %i, align 8, !dbg !440
  %57 = load i64, ptr %i, align 8, !dbg !441
  %ptradd114 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !442
  %58 = load i64, ptr %ptradd114, align 8, !dbg !442
  %lt115 = icmp ult i64 %57, %58, !dbg !441
  br i1 %lt115, label %assert_ok120, label %assert_fail116, !dbg !441

assert_fail116:                                   ; preds = %if.then113
  store %"char[]" { ptr @.panic_msg.42, i64 34 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg119, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, i32 357), !dbg !441
  unreachable, !dbg !441

assert_ok120:                                     ; preds = %if.then113
  store i64 %56, ptr %0, align 8, !dbg !441
  ret i64 0, !dbg !441

if.exit:                                          ; preds = %and.phi111
  %60 = load i64, ptr %.anon56, align 8, !dbg !426
  %addnuw = add nuw i64 %60, 1, !dbg !426
  store i64 %addnuw, ptr %.anon56, align 8, !dbg !426
  br label %loop.cond, !dbg !426

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit121, !dbg !426

if.exit121:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !443

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %63 = insertvalue %any undef, ptr %taddr8, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg11, align 8
  store %any %62, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd12, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 367, ptr align 8 %indirectarg13), !dbg !419
  unreachable, !dbg !419

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %66 = insertvalue %any undef, ptr %taddr15, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %68 = insertvalue %any undef, ptr %taddr16, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg19, align 8
  store %any %67, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %69, ptr %ptradd21, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 368, ptr align 8 %indirectarg23), !dbg !422
  unreachable, !dbg !422

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %71 = insertvalue %any undef, ptr %taddr27, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %73 = insertvalue %any undef, ptr %taddr28, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.30, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg31, align 8
  store %any %72, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %74, ptr %ptradd33, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 368, ptr align 8 %indirectarg35), !dbg !422
  unreachable, !dbg !422

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %76 = insertvalue %any undef, ptr %taddr38, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %78 = insertvalue %any undef, ptr %taddr39, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg42, align 8
  store %any %77, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %79, ptr %ptradd44, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 368, ptr align 8 %indirectarg46), !dbg !422
  unreachable, !dbg !422

panic50:                                          ; preds = %checkok47
  store %"char[]" { ptr @.panic_msg.47, i64 53 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg53, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 368), !dbg !422
  unreachable, !dbg !422

panic59:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.47, i64 53 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg62, align 8
  %82 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %82(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 368), !dbg !432
  unreachable, !dbg !432

panic66:                                          ; preds = %checkok63
  store i64 %31, ptr %taddr67, align 8
  %83 = insertvalue %any undef, ptr %taddr67, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr68, align 8
  %85 = insertvalue %any undef, ptr %taddr68, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg71, align 8
  store %any %84, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %86, ptr %ptradd73, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 368, ptr align 8 %indirectarg75), !dbg !429
  unreachable, !dbg !429

panic80:                                          ; preds = %and.rhs78
  store i64 %41, ptr %taddr81, align 8
  %88 = insertvalue %any undef, ptr %taddr81, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr82, align 8
  %90 = insertvalue %any undef, ptr %taddr82, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg85, align 8
  store %any %89, ptr %varargslots86, align 16
  %ptradd87 = getelementptr inbounds i8, ptr %varargslots86, i64 16
  store %any %91, ptr %ptradd87, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots86, 0
  %"$$temp88" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp88", ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 370, ptr align 8 %indirectarg89), !dbg !436
  unreachable, !dbg !436

panic93:                                          ; preds = %checkok90
  store i64 %sub92, ptr %taddr94, align 8
  %93 = insertvalue %any undef, ptr %taddr94, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr95, align 8
  %95 = insertvalue %any undef, ptr %taddr95, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %indirectarg98, align 8
  store %any %94, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %96, ptr %ptradd100, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 370, ptr align 8 %indirectarg102), !dbg !436
  unreachable, !dbg !436
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !444 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %.anon49 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %varargslots98 = alloca [2 x %any], align 16
  %indirectarg101 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !445, metadata !DIExpression()), !dbg !446
  call void @llvm.dbg.declare(metadata ptr %2, metadata !447, metadata !DIExpression()), !dbg !448
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !449
  %3 = load i64, ptr %ptradd, align 8, !dbg !449
  %lt = icmp ult i64 0, %3, !dbg !449
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !449

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.45, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 383), !dbg !449
  unreachable, !dbg !449

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !451, metadata !DIExpression()), !dbg !452
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !453
  %5 = load i64, ptr %ptradd3, align 8, !dbg !453
  store i64 %5, ptr %needed, align 8, !dbg !453
  %6 = load i64, ptr %needed, align 8, !dbg !454
  %lt4 = icmp ult i64 0, %6, !dbg !454
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !454

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !455
  %7 = load i64, ptr %ptradd5, align 8, !dbg !455
  %8 = load i64, ptr %needed, align 8, !dbg !456
  %ge = icmp uge i64 %7, %8, !dbg !455
  br label %and.phi, !dbg !455

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !455
  br i1 %val, label %if.then, label %if.exit120, !dbg !455

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !457, metadata !DIExpression()), !dbg !459
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !460
  %9 = load i64, ptr %ptradd6, align 8, !dbg !460
  %10 = load ptr, ptr %2, align 8, !dbg !460
  %ge7 = icmp sge i64 0, %9, !dbg !461
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !461
  br i1 %11, label %panic, label %checkok, !dbg !461

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !461
  store i8 %12, ptr %first, align 1, !dbg !461
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !462, metadata !DIExpression()), !dbg !464
  %13 = load %"char[]", ptr %1, align 8, !dbg !464
  %14 = extractvalue %"char[]" %13, 0, !dbg !464
  %15 = extractvalue %"char[]" %13, 1, !dbg !465
  %gt = icmp ugt i64 0, %15, !dbg !465
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !465
  br i1 %16, label %panic14, label %checkok24, !dbg !465

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !466
  %sub = sub i64 %15, %17, !dbg !466
  %gt25 = icmp ugt i64 0, %sub, !dbg !466
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !466
  br i1 %18, label %panic26, label %checkok36, !dbg !466

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !464
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !464
  br i1 %19, label %panic37, label %checkok47, !dbg !464

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !464
  %size = sub i64 %20, 0, !dbg !464
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !464
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !464
  store %"char[]" %22, ptr %taddr48, align 8
  store ptr %taddr48, ptr %.anon, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon49, metadata !467, metadata !DIExpression()), !dbg !468
  %23 = load ptr, ptr %.anon, align 8, !dbg !464
  %checknull = icmp eq ptr %23, null, !dbg !464
  %24 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !464
  br i1 %24, label %panic50, label %checkok54, !dbg !464

checkok54:                                        ; preds = %checkok47
  %ptradd55 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !464
  %25 = load i64, ptr %ptradd55, align 8, !dbg !464
  store i64 %25, ptr %.anon49, align 8, !dbg !464
  br label %loop.cond, !dbg !464

loop.cond:                                        ; preds = %if.exit, %checkok54
  %26 = load i64, ptr %.anon49, align 8, !dbg !468
  %gt56 = icmp ugt i64 %26, 0, !dbg !468
  br i1 %gt56, label %loop.body, label %loop.exit, !dbg !468

loop.body:                                        ; preds = %loop.cond
  %27 = load i64, ptr %.anon49, align 8, !dbg !468
  %subnuw = sub nuw i64 %27, 1, !dbg !468
  store i64 %subnuw, ptr %.anon49, align 8, !dbg !468
  call void @llvm.dbg.declare(metadata ptr %i, metadata !469, metadata !DIExpression()), !dbg !471
  %28 = load i64, ptr %.anon49, align 8, !dbg !471
  store i64 %28, ptr %i, align 8, !dbg !471
  call void @llvm.dbg.declare(metadata ptr %c, metadata !472, metadata !DIExpression()), !dbg !473
  %29 = load ptr, ptr %.anon, align 8, !dbg !474
  %checknull57 = icmp eq ptr %29, null, !dbg !474
  %30 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !474
  br i1 %30, label %panic58, label %checkok62, !dbg !474

checkok62:                                        ; preds = %loop.body
  %ptradd63 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !474
  %31 = load i64, ptr %ptradd63, align 8, !dbg !474
  %32 = load ptr, ptr %29, align 8, !dbg !474
  %33 = load i64, ptr %.anon49, align 8, !dbg !471
  %ge64 = icmp uge i64 %33, %31, !dbg !471
  %34 = call i1 @llvm.expect.i1(i1 %ge64, i1 false), !dbg !471
  br i1 %34, label %panic65, label %checkok75, !dbg !471

checkok75:                                        ; preds = %checkok62
  %ptradd76 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !471
  %35 = load i8, ptr %ptradd76, align 1, !dbg !471
  store i8 %35, ptr %c, align 1, !dbg !471
  %36 = load i8, ptr %c, align 1, !dbg !475
  %37 = load i8, ptr %first, align 1, !dbg !477
  %eq = icmp eq i8 %36, %37, !dbg !475
  br i1 %eq, label %and.rhs77, label %and.phi110, !dbg !475

and.rhs77:                                        ; preds = %checkok75
  %38 = load %"char[]", ptr %1, align 8, !dbg !478
  %39 = extractvalue %"char[]" %38, 0, !dbg !478
  %40 = load i64, ptr %i, align 8, !dbg !479
  %41 = extractvalue %"char[]" %38, 1, !dbg !479
  %gt78 = icmp ugt i64 %40, %41, !dbg !479
  %42 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !479
  br i1 %42, label %panic79, label %checkok89, !dbg !479

checkok89:                                        ; preds = %and.rhs77
  %43 = load i64, ptr %needed, align 8, !dbg !480
  %add = add i64 %40, %43, !dbg !480
  %lt90 = icmp ult i64 %41, %add, !dbg !480
  %sub91 = sub i64 %add, 1, !dbg !480
  %44 = call i1 @llvm.expect.i1(i1 %lt90, i1 false), !dbg !480
  br i1 %44, label %panic92, label %checkok102, !dbg !480

checkok102:                                       ; preds = %checkok89
  %size103 = sub i64 %add, %40, !dbg !478
  %ptradd104 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !478
  %45 = insertvalue %"char[]" undef, ptr %ptradd104, 0, !dbg !478
  %46 = insertvalue %"char[]" %45, i64 %size103, 1, !dbg !478
  %47 = load %"char[]", ptr %2, align 8, !dbg !481
  %48 = extractvalue %"char[]" %46, 1, !dbg !478
  %49 = extractvalue %"char[]" %47, 1, !dbg !478
  %50 = extractvalue %"char[]" %46, 0, !dbg !478
  %51 = extractvalue %"char[]" %47, 0, !dbg !478
  %eq105 = icmp eq i64 %48, %49, !dbg !478
  br i1 %eq105, label %slice_cmp_values, label %slice_cmp_exit, !dbg !478

slice_cmp_values:                                 ; preds = %checkok102
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %52 = load i64, ptr %cmp.idx, align 8
  %lt106 = icmp slt i64 %52, %48
  br i1 %lt106, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd107 = getelementptr inbounds i8, ptr %50, i64 %52
  %ptradd108 = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load i8, ptr %ptradd107, align 1
  %54 = load i8, ptr %ptradd108, align 1
  %eq109 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx, align 8
  br i1 %eq109, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok102
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok102 ], [ false, %slice_loop_comparison ]
  br label %and.phi110

and.phi110:                                       ; preds = %slice_cmp_exit, %checkok75
  %val111 = phi i1 [ false, %checkok75 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val111, label %if.then112, label %if.exit

if.then112:                                       ; preds = %and.phi110
  %56 = load i64, ptr %i, align 8, !dbg !482
  %57 = load i64, ptr %i, align 8, !dbg !483
  %ptradd113 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !484
  %58 = load i64, ptr %ptradd113, align 8, !dbg !484
  %lt114 = icmp ult i64 %57, %58, !dbg !483
  br i1 %lt114, label %assert_ok119, label %assert_fail115, !dbg !483

assert_fail115:                                   ; preds = %if.then112
  store %"char[]" { ptr @.panic_msg.42, i64 34 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg118, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 382), !dbg !483
  unreachable, !dbg !483

assert_ok119:                                     ; preds = %if.then112
  store i64 %56, ptr %0, align 8, !dbg !483
  ret i64 0, !dbg !483

if.exit:                                          ; preds = %and.phi110
  br label %loop.cond, !dbg !483

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit120, !dbg !483

if.exit120:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !485

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %60 = insertvalue %any undef, ptr %taddr, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %62 = insertvalue %any undef, ptr %taddr8, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg11, align 8
  store %any %61, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %63, ptr %ptradd12, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 392, ptr align 8 %indirectarg13), !dbg !461
  unreachable, !dbg !461

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %65 = insertvalue %any undef, ptr %taddr15, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %67 = insertvalue %any undef, ptr %taddr16, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg19, align 8
  store %any %66, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %68, ptr %ptradd21, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 393, ptr align 8 %indirectarg23), !dbg !464
  unreachable, !dbg !464

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %70 = insertvalue %any undef, ptr %taddr27, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %72 = insertvalue %any undef, ptr %taddr28, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.30, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg31, align 8
  store %any %71, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %73, ptr %ptradd33, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 393, ptr align 8 %indirectarg35), !dbg !464
  unreachable, !dbg !464

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %75 = insertvalue %any undef, ptr %taddr38, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %77 = insertvalue %any undef, ptr %taddr39, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg42, align 8
  store %any %76, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %78, ptr %ptradd44, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 393, ptr align 8 %indirectarg46), !dbg !464
  unreachable, !dbg !464

panic50:                                          ; preds = %checkok47
  store %"char[]" { ptr @.panic_msg.47, i64 53 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg53, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 393), !dbg !464
  unreachable, !dbg !464

panic58:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.47, i64 53 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg61, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 393), !dbg !474
  unreachable, !dbg !474

panic65:                                          ; preds = %checkok62
  store i64 %31, ptr %taddr66, align 8
  %82 = insertvalue %any undef, ptr %taddr66, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr67, align 8
  %84 = insertvalue %any undef, ptr %taddr67, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg70, align 8
  store %any %83, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %85, ptr %ptradd72, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 393, ptr align 8 %indirectarg74), !dbg !471
  unreachable, !dbg !471

panic79:                                          ; preds = %and.rhs77
  store i64 %41, ptr %taddr80, align 8
  %87 = insertvalue %any undef, ptr %taddr80, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr81, align 8
  %89 = insertvalue %any undef, ptr %taddr81, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg84, align 8
  store %any %88, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %90, ptr %ptradd86, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 395, ptr align 8 %indirectarg88), !dbg !478
  unreachable, !dbg !478

panic92:                                          ; preds = %checkok89
  store i64 %sub91, ptr %taddr93, align 8
  %92 = insertvalue %any undef, ptr %taddr93, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr94, align 8
  %94 = insertvalue %any undef, ptr %taddr94, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.48, i64 9 }, ptr %indirectarg97, align 8
  store %any %93, ptr %varargslots98, align 16
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %95, ptr %ptradd99, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp100", ptr %indirectarg101, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 395, ptr align 8 %indirectarg101), !dbg !478
  unreachable, !dbg !478
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.ZString.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !486 {
entry:
  %str = alloca ptr, align 8
  store ptr %1, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !490, metadata !DIExpression()), !dbg !491
  %2 = load ptr, ptr %str, align 8, !dbg !492
  %3 = load ptr, ptr %str, align 8, !dbg !493
  %4 = call i64 @std.core.string.ZString.len(ptr %3), !dbg !493
  %add = add i64 0, %4, !dbg !493
  %size = sub i64 %add, 0, !dbg !493
  %5 = insertvalue %"char[]" undef, ptr %2, 0, !dbg !493
  %6 = insertvalue %"char[]" %5, i64 %size, 1, !dbg !493
  store %"char[]" %6, ptr %0, align 8, !dbg !493
  ret void, !dbg !493
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !494 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !497, metadata !DIExpression()), !dbg !498
  call void @llvm.dbg.declare(metadata ptr %len, metadata !499, metadata !DIExpression()), !dbg !500
  store i64 0, ptr %len, align 8, !dbg !501
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !502, metadata !DIExpression()), !dbg !503
  %1 = load ptr, ptr %str, align 8, !dbg !504
  store ptr %1, ptr %ptr, align 8, !dbg !504
  br label %loop.cond, !dbg !505

loop.cond:                                        ; preds = %if.exit, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !506, metadata !DIExpression()), !dbg !508
  %2 = load ptr, ptr %ptr, align 8, !dbg !509
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !509
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !509
  %3 = load i8, ptr %2, align 1, !dbg !510
  store i8 %3, ptr %c, align 1, !dbg !510
  %4 = load i8, ptr %c, align 1, !dbg !510
  %intbool = icmp ne i8 %4, 0, !dbg !510
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !510

loop.body:                                        ; preds = %loop.cond
  %5 = load i8, ptr %c, align 1, !dbg !511
  %zext = zext i8 %5 to i32, !dbg !511
  %and = and i32 %zext, 192, !dbg !511
  %neq = icmp ne i32 %and, 128, !dbg !511
  br i1 %neq, label %if.then, label %if.exit, !dbg !511

if.then:                                          ; preds = %loop.body
  %6 = load i64, ptr %len, align 8, !dbg !513
  %add = add i64 %6, 1, !dbg !513
  store i64 %add, ptr %len, align 8, !dbg !513
  br label %if.exit, !dbg !513

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !513

loop.exit:                                        ; preds = %loop.cond
  %7 = load i64, ptr %len, align 8, !dbg !514
  ret i64 %7, !dbg !514
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !515 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !516, metadata !DIExpression()), !dbg !517
  call void @llvm.dbg.declare(metadata ptr %len, metadata !518, metadata !DIExpression()), !dbg !519
  store i64 0, ptr %len, align 8, !dbg !520
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !521, metadata !DIExpression()), !dbg !522
  %1 = load ptr, ptr %str, align 8, !dbg !523
  store ptr %1, ptr %ptr, align 8, !dbg !523
  br label %loop.cond, !dbg !524

loop.cond:                                        ; preds = %loop.body, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !525, metadata !DIExpression()), !dbg !527
  %2 = load ptr, ptr %ptr, align 8, !dbg !528
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !528
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !528
  %3 = load i8, ptr %2, align 1, !dbg !529
  store i8 %3, ptr %c, align 1, !dbg !529
  %4 = load i8, ptr %c, align 1, !dbg !529
  %intbool = icmp ne i8 %4, 0, !dbg !529
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !529

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !530
  %add = add i64 %5, 1, !dbg !530
  store i64 %add, ptr %len, align 8, !dbg !530
  br label %loop.cond, !dbg !530

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !531
  ret i64 %6, !dbg !531
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_copy(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !532 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len11 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !535
  call void @llvm.dbg.declare(metadata ptr %0, metadata !536, metadata !DIExpression()), !dbg !537
  call void @llvm.dbg.declare(metadata ptr %1, metadata !538, metadata !DIExpression()), !dbg !539
  call void @llvm.dbg.declare(metadata ptr %len, metadata !540, metadata !DIExpression()), !dbg !541
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !535
  %2 = load i64, ptr %ptradd, align 8, !dbg !535
  store i64 %2, ptr %len, align 8, !dbg !535
  call void @llvm.dbg.declare(metadata ptr %str, metadata !542, metadata !DIExpression()), !dbg !543
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %3 = load i64, ptr %len, align 8, !dbg !544
  %add = add i64 %3, 1, !dbg !544
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size2, align 8
  %5 = load i64, ptr %size2, align 8, !dbg !545
  %not = icmp eq i64 %5, 0, !dbg !545
  br i1 %not, label %if.then, label %if.exit, !dbg !545

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !550
  br label %expr_block.exit, !dbg !550

if.exit:                                          ; preds = %entry
  %ptradd3 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !551
  %6 = load i64, ptr %ptradd3, align 8, !dbg !551
  %7 = inttoptr i64 %6 to ptr, !dbg !551
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !535
  %8 = icmp eq ptr %7, %type, !dbg !535
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !535

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !535
  %9 = load ptr, ptr %ptradd4, align 8, !dbg !535
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire"), !dbg !535
  store ptr %10, ptr %.inlinecache, align 8, !dbg !535
  store ptr %7, ptr %.cachedtype, align 8, !dbg !535
  br label %11, !dbg !535

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !535
  br label %11, !dbg !535

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !535
  %12 = icmp eq ptr %fn_phi, null, !dbg !535
  br i1 %12, label %missing_function, label %match, !dbg !535

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 68), !dbg !553
  unreachable, !dbg !553

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator1, align 8
  %15 = load i64, ptr %size2, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !553
  %not_err = icmp eq i64 %16, 0, !dbg !553
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !553
  br i1 %17, label %after_check, label %assign_optional, !dbg !553

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !553
  br label %panic_block, !dbg !553

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !553
  store ptr %18, ptr %blockret, align 8, !dbg !553
  br label %expr_block.exit, !dbg !553

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !553

panic_block:                                      ; preds = %assign_optional
  %19 = insertvalue %any undef, ptr %error_var, 0, !dbg !553
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !553
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %indirectarg9, align 8
  store %any %20, ptr %varargslots, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 57, ptr align 8 %indirectarg10), !dbg !547
  unreachable, !dbg !547

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !547
  store ptr %22, ptr %str, align 8, !dbg !547
  %23 = load ptr, ptr %str, align 8, !dbg !554
  store ptr %23, ptr %dst, align 8
  %24 = load ptr, ptr %0, align 8, !dbg !555
  store ptr %24, ptr %src, align 8
  %25 = load i64, ptr %len, align 8
  store i64 %25, ptr %len11, align 8
  %26 = load i64, ptr %len11, align 8, !dbg !556
  %eq = icmp eq i64 0, %26, !dbg !556
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !556

or.rhs:                                           ; preds = %noerr_block
  %27 = load ptr, ptr %dst, align 8, !dbg !561
  %28 = load i64, ptr %len11, align 8, !dbg !562
  %ptradd_any = getelementptr i8, ptr %27, i64 %28, !dbg !562
  %29 = load ptr, ptr %src, align 8, !dbg !563
  %le = icmp ule ptr %ptradd_any, %29, !dbg !561
  br label %or.phi, !dbg !561

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !561
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !561

or.rhs12:                                         ; preds = %or.phi
  %30 = load ptr, ptr %src, align 8, !dbg !564
  %31 = load i64, ptr %len11, align 8, !dbg !565
  %ptradd_any13 = getelementptr i8, ptr %30, i64 %31, !dbg !565
  %32 = load ptr, ptr %dst, align 8, !dbg !566
  %le14 = icmp ule ptr %ptradd_any13, %32, !dbg !564
  br label %or.phi15, !dbg !564

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !564
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !564

assert_fail:                                      ; preds = %or.phi15
  store %"char[]" { ptr @.panic_msg.50, i64 95 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 309), !dbg !556
  unreachable, !dbg !556

assert_ok:                                        ; preds = %or.phi15
  %34 = load ptr, ptr %dst, align 8, !dbg !567
  %35 = load ptr, ptr %src, align 8, !dbg !568
  %36 = load i64, ptr %len11, align 8, !dbg !569
  call void @llvm.memcpy.p0.p0.i64(ptr %34, ptr %35, i64 %36, i1 false), !dbg !570
  %37 = load ptr, ptr %str, align 8, !dbg !571
  %38 = load i64, ptr %len, align 8, !dbg !572
  %ptradd20 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !572
  store i8 0, ptr %ptradd20, align 1, !dbg !573
  %39 = load ptr, ptr %str, align 8, !dbg !574
  ret ptr %39, !dbg !574
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.concat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !575 {
entry:
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size4 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %s1_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %dst23 = alloca ptr, align 8
  %src24 = alloca ptr, align 8
  %len26 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !578
  call void @llvm.dbg.declare(metadata ptr %1, metadata !579, metadata !DIExpression()), !dbg !580
  call void @llvm.dbg.declare(metadata ptr %2, metadata !581, metadata !DIExpression()), !dbg !582
  call void @llvm.dbg.declare(metadata ptr %3, metadata !583, metadata !DIExpression()), !dbg !584
  call void @llvm.dbg.declare(metadata ptr %full_len, metadata !585, metadata !DIExpression()), !dbg !586
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !578
  %4 = load i64, ptr %ptradd, align 8, !dbg !578
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !587
  %5 = load i64, ptr %ptradd1, align 8, !dbg !587
  %add = add i64 %4, %5, !dbg !578
  store i64 %add, ptr %full_len, align 8, !dbg !578
  call void @llvm.dbg.declare(metadata ptr %str, metadata !588, metadata !DIExpression()), !dbg !589
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %3, i32 16, i1 false)
  %6 = load i64, ptr %full_len, align 8, !dbg !590
  %add2 = add i64 %6, 1, !dbg !590
  store i64 %add2, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %7 = load i64, ptr %size, align 8
  store i64 %7, ptr %size4, align 8
  %8 = load i64, ptr %size4, align 8, !dbg !591
  %not = icmp eq i64 %8, 0, !dbg !591
  br i1 %not, label %if.then, label %if.exit, !dbg !591

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !596
  br label %expr_block.exit, !dbg !596

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !597
  %9 = load i64, ptr %ptradd5, align 8, !dbg !597
  %10 = inttoptr i64 %9 to ptr, !dbg !597
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !578
  %11 = icmp eq ptr %10, %type, !dbg !578
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !578

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !578
  %12 = load ptr, ptr %ptradd6, align 8, !dbg !578
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire"), !dbg !578
  store ptr %13, ptr %.inlinecache, align 8, !dbg !578
  store ptr %10, ptr %.cachedtype, align 8, !dbg !578
  br label %14, !dbg !578

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !578
  br label %14, !dbg !578

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !578
  %15 = icmp eq ptr %fn_phi, null, !dbg !578
  br i1 %15, label %missing_function, label %match, !dbg !578

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.51, i64 6 }, ptr %indirectarg8, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 68), !dbg !599
  unreachable, !dbg !599

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator3, align 8
  %18 = load i64, ptr %size4, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !599
  %not_err = icmp eq i64 %19, 0, !dbg !599
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !599
  br i1 %20, label %after_check, label %assign_optional, !dbg !599

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !599
  br label %panic_block, !dbg !599

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !599
  store ptr %21, ptr %blockret, align 8, !dbg !599
  br label %expr_block.exit, !dbg !599

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !599

panic_block:                                      ; preds = %assign_optional
  %22 = insertvalue %any undef, ptr %error_var, 0, !dbg !599
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !599
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.51, i64 6 }, ptr %indirectarg11, align 8
  store %any %23, ptr %varargslots, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 57, ptr align 8 %indirectarg12), !dbg !593
  unreachable, !dbg !593

noerr_block:                                      ; preds = %expr_block.exit
  %25 = load ptr, ptr %blockret, align 8, !dbg !593
  store ptr %25, ptr %str, align 8, !dbg !593
  call void @llvm.dbg.declare(metadata ptr %s1_len, metadata !600, metadata !DIExpression()), !dbg !601
  %ptradd13 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !602
  %26 = load i64, ptr %ptradd13, align 8, !dbg !602
  store i64 %26, ptr %s1_len, align 8, !dbg !602
  %27 = load ptr, ptr %str, align 8, !dbg !603
  store ptr %27, ptr %dst, align 8
  %28 = load ptr, ptr %1, align 8, !dbg !604
  store ptr %28, ptr %src, align 8
  %29 = load i64, ptr %s1_len, align 8
  store i64 %29, ptr %len, align 8
  %30 = load i64, ptr %len, align 8, !dbg !605
  %eq = icmp eq i64 0, %30, !dbg !605
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !605

or.rhs:                                           ; preds = %noerr_block
  %31 = load ptr, ptr %dst, align 8, !dbg !609
  %32 = load i64, ptr %len, align 8, !dbg !610
  %ptradd_any = getelementptr i8, ptr %31, i64 %32, !dbg !610
  %33 = load ptr, ptr %src, align 8, !dbg !611
  %le = icmp ule ptr %ptradd_any, %33, !dbg !609
  br label %or.phi, !dbg !609

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !609
  br i1 %val, label %or.phi17, label %or.rhs14, !dbg !609

or.rhs14:                                         ; preds = %or.phi
  %34 = load ptr, ptr %src, align 8, !dbg !612
  %35 = load i64, ptr %len, align 8, !dbg !613
  %ptradd_any15 = getelementptr i8, ptr %34, i64 %35, !dbg !613
  %36 = load ptr, ptr %dst, align 8, !dbg !614
  %le16 = icmp ule ptr %ptradd_any15, %36, !dbg !612
  br label %or.phi17, !dbg !612

or.phi17:                                         ; preds = %or.rhs14, %or.phi
  %val18 = phi i1 [ true, %or.phi ], [ %le16, %or.rhs14 ], !dbg !612
  br i1 %val18, label %assert_ok, label %assert_fail, !dbg !612

assert_fail:                                      ; preds = %or.phi17
  store %"char[]" { ptr @.panic_msg.50, i64 95 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.51, i64 6 }, ptr %indirectarg21, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 309), !dbg !605
  unreachable, !dbg !605

assert_ok:                                        ; preds = %or.phi17
  %38 = load ptr, ptr %dst, align 8, !dbg !615
  %39 = load ptr, ptr %src, align 8, !dbg !616
  %40 = load i64, ptr %len, align 8, !dbg !617
  call void @llvm.memcpy.p0.p0.i64(ptr %38, ptr %39, i64 %40, i1 false), !dbg !618
  %41 = load ptr, ptr %str, align 8, !dbg !619
  %42 = load i64, ptr %s1_len, align 8, !dbg !620
  %ptradd_any22 = getelementptr i8, ptr %41, i64 %42, !dbg !620
  store ptr %ptradd_any22, ptr %dst23, align 8
  %43 = load ptr, ptr %2, align 8, !dbg !621
  store ptr %43, ptr %src24, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !622
  %44 = load i64, ptr %ptradd25, align 8
  store i64 %44, ptr %len26, align 8
  %45 = load i64, ptr %len26, align 8, !dbg !623
  %eq27 = icmp eq i64 0, %45, !dbg !623
  br i1 %eq27, label %or.phi31, label %or.rhs28, !dbg !623

or.rhs28:                                         ; preds = %assert_ok
  %46 = load ptr, ptr %dst23, align 8, !dbg !627
  %47 = load i64, ptr %len26, align 8, !dbg !628
  %ptradd_any29 = getelementptr i8, ptr %46, i64 %47, !dbg !628
  %48 = load ptr, ptr %src24, align 8, !dbg !629
  %le30 = icmp ule ptr %ptradd_any29, %48, !dbg !627
  br label %or.phi31, !dbg !627

or.phi31:                                         ; preds = %or.rhs28, %assert_ok
  %val32 = phi i1 [ true, %assert_ok ], [ %le30, %or.rhs28 ], !dbg !627
  br i1 %val32, label %or.phi36, label %or.rhs33, !dbg !627

or.rhs33:                                         ; preds = %or.phi31
  %49 = load ptr, ptr %src24, align 8, !dbg !630
  %50 = load i64, ptr %len26, align 8, !dbg !631
  %ptradd_any34 = getelementptr i8, ptr %49, i64 %50, !dbg !631
  %51 = load ptr, ptr %dst23, align 8, !dbg !632
  %le35 = icmp ule ptr %ptradd_any34, %51, !dbg !630
  br label %or.phi36, !dbg !630

or.phi36:                                         ; preds = %or.rhs33, %or.phi31
  %val37 = phi i1 [ true, %or.phi31 ], [ %le35, %or.rhs33 ], !dbg !630
  br i1 %val37, label %assert_ok42, label %assert_fail38, !dbg !630

assert_fail38:                                    ; preds = %or.phi36
  store %"char[]" { ptr @.panic_msg.50, i64 95 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.51, i64 6 }, ptr %indirectarg41, align 8
  %52 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %52(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 309), !dbg !623
  unreachable, !dbg !623

assert_ok42:                                      ; preds = %or.phi36
  %53 = load ptr, ptr %dst23, align 8, !dbg !633
  %54 = load ptr, ptr %src24, align 8, !dbg !634
  %55 = load i64, ptr %len26, align 8, !dbg !635
  call void @llvm.memcpy.p0.p0.i64(ptr %53, ptr %54, i64 %55, i1 false), !dbg !636
  %56 = load ptr, ptr %str, align 8, !dbg !637
  %57 = load i64, ptr %full_len, align 8, !dbg !638
  %ptradd43 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !638
  store i8 0, ptr %ptradd43, align 1, !dbg !639
  %58 = load ptr, ptr %str, align 8, !dbg !640
  %59 = load i64, ptr %full_len, align 8, !dbg !641
  %add44 = add i64 0, %59, !dbg !641
  %size45 = sub i64 %add44, 0, !dbg !641
  %60 = insertvalue %"char[]" undef, ptr %58, 0, !dbg !641
  %61 = insertvalue %"char[]" %60, i64 %size45, 1, !dbg !641
  store %"char[]" %61, ptr %0, align 8, !dbg !641
  ret void, !dbg !641
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tconcat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !642 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !643, metadata !DIExpression()), !dbg !644
  call void @llvm.dbg.declare(metadata ptr %2, metadata !645, metadata !DIExpression()), !dbg !646
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !647
  %not = icmp eq ptr %3, null, !dbg !647
  br i1 %not, label %if.then, label %if.exit, !dbg !647

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !650
  br label %if.exit, !dbg !650

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !652
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !652
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !652
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  store %any %6, ptr %indirectarg2, align 8
  call void @std.core.String.concat(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2), !dbg !653
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !653
  ret void, !dbg !653
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_tcopy(ptr align 8 %0) #0 comdat !dbg !654 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !657, metadata !DIExpression()), !dbg !658
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !659
  %not = icmp eq ptr %1, null, !dbg !659
  br i1 %not, label %if.then, label %if.exit, !dbg !659

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !662
  br label %if.exit, !dbg !662

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !664
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !664
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !664
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  store %any %4, ptr %indirectarg1, align 8
  %5 = call ptr @std.core.String.zstr_copy(ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !665
  ret ptr %5, !dbg !665
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !666 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len11 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !669
  call void @llvm.dbg.declare(metadata ptr %1, metadata !670, metadata !DIExpression()), !dbg !671
  call void @llvm.dbg.declare(metadata ptr %2, metadata !672, metadata !DIExpression()), !dbg !673
  call void @llvm.dbg.declare(metadata ptr %len, metadata !674, metadata !DIExpression()), !dbg !675
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !669
  %3 = load i64, ptr %ptradd, align 8, !dbg !669
  store i64 %3, ptr %len, align 8, !dbg !669
  call void @llvm.dbg.declare(metadata ptr %str, metadata !676, metadata !DIExpression()), !dbg !677
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !678
  %add = add i64 %4, 1, !dbg !678
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %size, align 8
  store i64 %5, ptr %size2, align 8
  %6 = load i64, ptr %size2, align 8, !dbg !679
  %not = icmp eq i64 %6, 0, !dbg !679
  br i1 %not, label %if.then, label %if.exit, !dbg !679

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !684
  br label %expr_block.exit, !dbg !684

if.exit:                                          ; preds = %entry
  %ptradd3 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !685
  %7 = load i64, ptr %ptradd3, align 8, !dbg !685
  %8 = inttoptr i64 %7 to ptr, !dbg !685
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !669
  %9 = icmp eq ptr %8, %type, !dbg !669
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !669

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !669
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !669
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire"), !dbg !669
  store ptr %11, ptr %.inlinecache, align 8, !dbg !669
  store ptr %8, ptr %.cachedtype, align 8, !dbg !669
  br label %12, !dbg !669

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !669
  br label %12, !dbg !669

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !669
  %13 = icmp eq ptr %fn_phi, null, !dbg !669
  br i1 %13, label %missing_function, label %match, !dbg !669

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.52, i64 4 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 68), !dbg !687
  unreachable, !dbg !687

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size2, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !687
  %not_err = icmp eq i64 %17, 0, !dbg !687
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !687
  br i1 %18, label %after_check, label %assign_optional, !dbg !687

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !687
  br label %panic_block, !dbg !687

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !687
  store ptr %19, ptr %blockret, align 8, !dbg !687
  br label %expr_block.exit, !dbg !687

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !687

panic_block:                                      ; preds = %assign_optional
  %20 = insertvalue %any undef, ptr %error_var, 0, !dbg !687
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !687
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.52, i64 4 }, ptr %indirectarg9, align 8
  store %any %21, ptr %varargslots, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 57, ptr align 8 %indirectarg10), !dbg !681
  unreachable, !dbg !681

noerr_block:                                      ; preds = %expr_block.exit
  %23 = load ptr, ptr %blockret, align 8, !dbg !681
  store ptr %23, ptr %str, align 8, !dbg !681
  %24 = load ptr, ptr %str, align 8, !dbg !688
  store ptr %24, ptr %dst, align 8
  %25 = load ptr, ptr %1, align 8, !dbg !689
  store ptr %25, ptr %src, align 8
  %26 = load i64, ptr %len, align 8
  store i64 %26, ptr %len11, align 8
  %27 = load i64, ptr %len11, align 8, !dbg !690
  %eq = icmp eq i64 0, %27, !dbg !690
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !690

or.rhs:                                           ; preds = %noerr_block
  %28 = load ptr, ptr %dst, align 8, !dbg !694
  %29 = load i64, ptr %len11, align 8, !dbg !695
  %ptradd_any = getelementptr i8, ptr %28, i64 %29, !dbg !695
  %30 = load ptr, ptr %src, align 8, !dbg !696
  %le = icmp ule ptr %ptradd_any, %30, !dbg !694
  br label %or.phi, !dbg !694

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !694
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !694

or.rhs12:                                         ; preds = %or.phi
  %31 = load ptr, ptr %src, align 8, !dbg !697
  %32 = load i64, ptr %len11, align 8, !dbg !698
  %ptradd_any13 = getelementptr i8, ptr %31, i64 %32, !dbg !698
  %33 = load ptr, ptr %dst, align 8, !dbg !699
  %le14 = icmp ule ptr %ptradd_any13, %33, !dbg !697
  br label %or.phi15, !dbg !697

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !697
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !697

assert_fail:                                      ; preds = %or.phi15
  store %"char[]" { ptr @.panic_msg.50, i64 95 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.52, i64 4 }, ptr %indirectarg19, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 309), !dbg !690
  unreachable, !dbg !690

assert_ok:                                        ; preds = %or.phi15
  %35 = load ptr, ptr %dst, align 8, !dbg !700
  %36 = load ptr, ptr %src, align 8, !dbg !701
  %37 = load i64, ptr %len11, align 8, !dbg !702
  call void @llvm.memcpy.p0.p0.i64(ptr %35, ptr %36, i64 %37, i1 false), !dbg !703
  %38 = load ptr, ptr %str, align 8, !dbg !704
  %39 = load i64, ptr %len, align 8, !dbg !705
  %ptradd20 = getelementptr inbounds i8, ptr %38, i64 %39, !dbg !705
  store i8 0, ptr %ptradd20, align 1, !dbg !706
  %40 = load ptr, ptr %str, align 8, !dbg !707
  %41 = load i64, ptr %len, align 8, !dbg !708
  %add21 = add i64 0, %41, !dbg !708
  %size22 = sub i64 %add21, 0, !dbg !708
  %42 = insertvalue %"char[]" undef, ptr %40, 0, !dbg !708
  %43 = insertvalue %"char[]" %42, i64 %size22, 1, !dbg !708
  store %"char[]" %43, ptr %0, align 8, !dbg !708
  ret void, !dbg !708
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.free(ptr %0, ptr align 8 %1) #0 comdat !dbg !709 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %s = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !712
  %2 = icmp eq ptr %0, null, !dbg !712
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !712
  br i1 %3, label %panic, label %checkok, !dbg !712

checkok:                                          ; preds = %entry
  store ptr %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !713, metadata !DIExpression()), !dbg !714
  call void @llvm.dbg.declare(metadata ptr %1, metadata !715, metadata !DIExpression()), !dbg !716
  %4 = load ptr, ptr %s, align 8, !dbg !717
  %checknull = icmp eq ptr %4, null, !dbg !717
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !717
  br i1 %5, label %panic3, label %checkok7, !dbg !717

checkok7:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !717
  %6 = load i64, ptr %ptradd, align 8, !dbg !717
  %not = icmp eq i64 %6, 0, !dbg !717
  br i1 %not, label %if.then, label %if.exit, !dbg !717

if.then:                                          ; preds = %checkok7
  ret void, !dbg !718

if.exit:                                          ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %7 = load ptr, ptr %s, align 8, !dbg !719
  %checknull8 = icmp eq ptr %7, null, !dbg !719
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !719
  br i1 %8, label %panic9, label %checkok13, !dbg !719

checkok13:                                        ; preds = %if.exit
  %9 = load ptr, ptr %7, align 8, !dbg !719
  store ptr %9, ptr %ptr, align 8
  %10 = load ptr, ptr %ptr, align 8, !dbg !720
  %not14 = icmp eq ptr %10, null, !dbg !720
  br i1 %not14, label %if.then15, label %if.exit16, !dbg !720

if.then15:                                        ; preds = %checkok13
  br label %expr_block.exit, !dbg !723

if.exit16:                                        ; preds = %checkok13
  %ptradd17 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !724
  %11 = load i64, ptr %ptradd17, align 8, !dbg !724
  %12 = inttoptr i64 %11 to ptr, !dbg !724
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !712
  %13 = icmp eq ptr %12, %type, !dbg !712
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !712

cache_miss:                                       ; preds = %if.exit16
  %ptradd18 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !712
  %14 = load ptr, ptr %ptradd18, align 8, !dbg !712
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !712
  store ptr %15, ptr %.inlinecache, align 8, !dbg !712
  store ptr %12, ptr %.cachedtype, align 8, !dbg !712
  br label %16, !dbg !712

cache_hit:                                        ; preds = %if.exit16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !712
  br label %16, !dbg !712

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !712
  %17 = icmp eq ptr %fn_phi, null, !dbg !712
  br i1 %17, label %missing_function, label %match, !dbg !712

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.28, i64 44 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 105), !dbg !725
  unreachable, !dbg !725

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !725
  %20 = load ptr, ptr %ptr, align 8, !dbg !725
  call void %fn_phi(ptr %19, ptr %20, i8 zeroext 0), !dbg !725
  br label %expr_block.exit, !dbg !725

expr_block.exit:                                  ; preds = %match, %if.then15
  %21 = load ptr, ptr %s, align 8, !dbg !726
  %checknull22 = icmp eq ptr %21, null, !dbg !726
  %22 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !726
  br i1 %22, label %panic23, label %checkok27, !dbg !726

checkok27:                                        ; preds = %expr_block.exit
  store %"char[]" zeroinitializer, ptr %21, align 8, !dbg !727
  ret void, !dbg !727

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.53, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 460), !dbg !714
  unreachable, !dbg !714

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.55, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %indirectarg6, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 462), !dbg !717
  unreachable, !dbg !717

panic9:                                           ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.55, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %indirectarg12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 463), !dbg !719
  unreachable, !dbg !719

panic23:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.55, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %indirectarg26, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 464), !dbg !726
  unreachable, !dbg !726
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !728 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !731, metadata !DIExpression()), !dbg !732
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !733
  %not = icmp eq ptr %2, null, !dbg !733
  br i1 %not, label %if.then, label %if.exit, !dbg !733

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !736
  br label %if.exit, !dbg !736

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !738
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !738
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !738
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !739
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !739
  ret void, !dbg !739
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.ZString.copy(ptr noalias sret(%"char[]") align 8 %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !740 {
entry:
  %z = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !743, metadata !DIExpression()), !dbg !744
  call void @llvm.dbg.declare(metadata ptr %2, metadata !745, metadata !DIExpression()), !dbg !746
  %3 = load ptr, ptr %z, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %3), !dbg !747
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !747
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !747
  ret void, !dbg !747
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.ZString.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !748 {
entry:
  %z = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !749, metadata !DIExpression()), !dbg !750
  %2 = load ptr, ptr %z, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %2), !dbg !751
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !752
  %not = icmp eq ptr %3, null, !dbg !752
  br i1 %not, label %if.then, label %if.exit, !dbg !752

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !755
  br label %if.exit, !dbg !755

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !757
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !757
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !757
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  store %any %6, ptr %indirectarg2, align 8
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !751
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !751
  ret void, !dbg !751
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !758 {
entry:
  %len16 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !769, metadata !DIExpression()), !dbg !770
  call void @llvm.dbg.declare(metadata ptr %2, metadata !771, metadata !DIExpression()), !dbg !772
  call void @llvm.dbg.declare(metadata ptr %len16, metadata !773, metadata !DIExpression()), !dbg !774
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8 %indirectarg), !dbg !775
  store i64 %3, ptr %len16, align 8, !dbg !775
  call void @llvm.dbg.declare(metadata ptr %data, metadata !776, metadata !DIExpression()), !dbg !777
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len16, align 8, !dbg !778
  %add = add i64 %4, 1, !dbg !778
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !779
  %mul = mul i64 2, %5, !dbg !782
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !783
  %not = icmp eq i64 %6, 0, !dbg !783
  br i1 %not, label %if.then, label %if.exit, !dbg !783

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !786
  br label %expr_block.exit, !dbg !786

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !787
  %7 = load i64, ptr %ptradd, align 8, !dbg !787
  %8 = inttoptr i64 %7 to ptr, !dbg !787
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.56, i64 12 }, ptr %indirectarg5, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 68), !dbg !789
  unreachable, !dbg !789

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !789
  %not_err = icmp eq i64 %17, 0, !dbg !789
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !789
  br i1 %18, label %after_check, label %assign_optional, !dbg !789

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !789
  br label %guard_block, !dbg !789

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !789
  store ptr %19, ptr %blockret, align 8, !dbg !789
  br label %expr_block.exit, !dbg !789

expr_block.exit:                                  ; preds = %after_check, %if.then
  %20 = load ptr, ptr %blockret, align 8, !dbg !789
  store ptr %20, ptr %taddr, align 8
  %21 = load ptr, ptr %taddr, align 8
  %22 = load i64, ptr %elements, align 8, !dbg !790
  %add6 = add i64 0, %22, !dbg !790
  %size7 = sub i64 %add6, 0, !dbg !790
  %23 = insertvalue %"ushort[]" undef, ptr %21, 0, !dbg !790
  %24 = insertvalue %"ushort[]" %23, i64 %size7, 1, !dbg !790
  br label %noerr_block, !dbg !790

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !790
  ret i64 %25, !dbg !790

noerr_block:                                      ; preds = %expr_block.exit
  %26 = extractvalue %"ushort[]" %24, 0, !dbg !790
  store ptr %26, ptr %data, align 8, !dbg !790
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %1, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  %28 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8 %indirectarg9, ptr %27), !dbg !791
  %not_err10 = icmp eq i64 %28, 0, !dbg !791
  %29 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !791
  br i1 %29, label %after_check12, label %assign_optional11, !dbg !791

assign_optional11:                                ; preds = %noerr_block
  store i64 %28, ptr %error_var8, align 8, !dbg !791
  br label %guard_block13, !dbg !791

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !791

guard_block13:                                    ; preds = %assign_optional11
  %30 = load i64, ptr %error_var8, align 8, !dbg !791
  ret i64 %30, !dbg !791

noerr_block14:                                    ; preds = %after_check12
  %31 = load ptr, ptr %data, align 8, !dbg !792
  %32 = load i64, ptr %len16, align 8, !dbg !793
  %ptroffset = getelementptr inbounds [2 x i8], ptr %31, i64 %32, !dbg !793
  store i16 0, ptr %ptroffset, align 2, !dbg !794
  %33 = load ptr, ptr %data, align 8, !dbg !795
  %34 = load i64, ptr %len16, align 8, !dbg !796
  %add15 = add i64 0, %34, !dbg !796
  %size16 = sub i64 %add15, 0, !dbg !796
  %35 = insertvalue %"ushort[]" undef, ptr %33, 0, !dbg !796
  %36 = insertvalue %"ushort[]" %35, i64 %size16, 1, !dbg !796
  store %"ushort[]" %36, ptr %0, align 8, !dbg !796
  ret i64 0, !dbg !796
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !797 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !800, metadata !DIExpression()), !dbg !801
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !802
  %not = icmp eq ptr %2, null, !dbg !802
  br i1 %not, label %if.then, label %if.exit, !dbg !802

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !805
  br label %if.exit, !dbg !805

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !807
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !807
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !807
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !808
  %not_err = icmp eq i64 %6, 0, !dbg !808
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !808
  br i1 %7, label %after_check, label %assign_optional, !dbg !808

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !808
  br label %err_retblock, !dbg !808

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !808
  ret i64 0, !dbg !808

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !808
  ret i64 %8, !dbg !808
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_wstring(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !809 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !815, metadata !DIExpression()), !dbg !816
  call void @llvm.dbg.declare(metadata ptr %2, metadata !817, metadata !DIExpression()), !dbg !818
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !819
  %not_err = icmp eq i64 %3, 0, !dbg !819
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !819
  br i1 %4, label %after_check, label %assign_optional, !dbg !819

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !819
  br label %err_retblock, !dbg !819

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !819
  store ptr %5, ptr %0, align 8, !dbg !819
  ret i64 0, !dbg !819

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !819
  ret i64 %6, !dbg !819
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_wstring(ptr %0, ptr align 8 %1) #0 comdat !dbg !820 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !823, metadata !DIExpression()), !dbg !824
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !825
  %not = icmp eq ptr %2, null, !dbg !825
  br i1 %not, label %if.then, label %if.exit, !dbg !825

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !828
  br label %if.exit, !dbg !828

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !830
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !830
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !830
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !831
  %not_err = icmp eq i64 %6, 0, !dbg !831
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !831
  br i1 %7, label %after_check, label %assign_optional, !dbg !831

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !831
  br label %err_retblock, !dbg !831

after_check:                                      ; preds = %if.exit
  %8 = load ptr, ptr %retparam, align 8, !dbg !831
  store ptr %8, ptr %0, align 8, !dbg !831
  ret i64 0, !dbg !831

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !831
  ret i64 %9, !dbg !831
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_wstring(ptr %0, ptr align 8 %1) #0 comdat !dbg !832 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !833, metadata !DIExpression()), !dbg !834
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  %2 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !835
  %not_err = icmp eq i64 %2, 0, !dbg !835
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !835
  br i1 %3, label %after_check, label %assign_optional, !dbg !835

assign_optional:                                  ; preds = %entry
  store i64 %2, ptr %reterr, align 8, !dbg !835
  br label %err_retblock, !dbg !835

after_check:                                      ; preds = %entry
  %4 = load ptr, ptr %retparam, align 8, !dbg !835
  store ptr %4, ptr %0, align 8, !dbg !835
  ret i64 0, !dbg !835

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !835
  ret i64 %5, !dbg !835
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !836 {
entry:
  %codepoints = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !846, metadata !DIExpression()), !dbg !847
  call void @llvm.dbg.declare(metadata ptr %2, metadata !848, metadata !DIExpression()), !dbg !849
  call void @llvm.dbg.declare(metadata ptr %codepoints, metadata !850, metadata !DIExpression()), !dbg !851
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8_codepoints(ptr align 8 %indirectarg), !dbg !852
  store i64 %3, ptr %codepoints, align 8, !dbg !852
  call void @llvm.dbg.declare(metadata ptr %data, metadata !853, metadata !DIExpression()), !dbg !854
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %codepoints, align 8, !dbg !855
  %add = add i64 %4, 1, !dbg !855
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !856
  %mul = mul i64 4, %5, !dbg !859
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !860
  %not = icmp eq i64 %6, 0, !dbg !860
  br i1 %not, label %if.then, label %if.exit, !dbg !860

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !863
  br label %expr_block.exit, !dbg !863

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !864
  %7 = load i64, ptr %ptradd, align 8, !dbg !864
  %8 = inttoptr i64 %7 to ptr, !dbg !864
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.57, i64 8 }, ptr %indirectarg5, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 68), !dbg !866
  unreachable, !dbg !866

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !866
  %not_err = icmp eq i64 %17, 0, !dbg !866
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !866
  br i1 %18, label %after_check, label %assign_optional, !dbg !866

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !866
  br label %guard_block, !dbg !866

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !866
  store ptr %19, ptr %blockret, align 8, !dbg !866
  br label %expr_block.exit, !dbg !866

expr_block.exit:                                  ; preds = %after_check, %if.then
  %20 = load ptr, ptr %blockret, align 8, !dbg !866
  store ptr %20, ptr %taddr, align 8
  %21 = load ptr, ptr %taddr, align 8
  %22 = load i64, ptr %elements, align 8, !dbg !867
  %add6 = add i64 0, %22, !dbg !867
  %size7 = sub i64 %add6, 0, !dbg !867
  %23 = insertvalue %"uint[]" undef, ptr %21, 0, !dbg !867
  %24 = insertvalue %"uint[]" %23, i64 %size7, 1, !dbg !867
  br label %noerr_block, !dbg !867

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !867
  ret i64 %25, !dbg !867

noerr_block:                                      ; preds = %expr_block.exit
  %26 = extractvalue %"uint[]" %24, 0, !dbg !867
  store ptr %26, ptr %data, align 8, !dbg !867
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %1, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  %28 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8 %indirectarg9, ptr %27), !dbg !868
  %not_err10 = icmp eq i64 %28, 0, !dbg !868
  %29 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !868
  br i1 %29, label %after_check12, label %assign_optional11, !dbg !868

assign_optional11:                                ; preds = %noerr_block
  store i64 %28, ptr %error_var8, align 8, !dbg !868
  br label %guard_block13, !dbg !868

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !868

guard_block13:                                    ; preds = %assign_optional11
  %30 = load i64, ptr %error_var8, align 8, !dbg !868
  ret i64 %30, !dbg !868

noerr_block14:                                    ; preds = %after_check12
  %31 = load ptr, ptr %data, align 8, !dbg !869
  %32 = load i64, ptr %codepoints, align 8, !dbg !870
  %ptroffset = getelementptr inbounds [4 x i8], ptr %31, i64 %32, !dbg !870
  store i32 0, ptr %ptroffset, align 4, !dbg !871
  %33 = load ptr, ptr %data, align 8, !dbg !872
  %34 = load i64, ptr %codepoints, align 8, !dbg !873
  %add15 = add i64 0, %34, !dbg !873
  %size16 = sub i64 %add15, 0, !dbg !873
  %35 = insertvalue %"uint[]" undef, ptr %33, 0, !dbg !873
  %36 = insertvalue %"uint[]" %35, i64 %size16, 1, !dbg !873
  store %"uint[]" %36, ptr %0, align 8, !dbg !873
  ret i64 0, !dbg !873
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf32(ptr %0, ptr align 8 %1) #0 comdat !dbg !874 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !877, metadata !DIExpression()), !dbg !878
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  %2 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !879
  %not_err = icmp eq i64 %2, 0, !dbg !879
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !879
  br i1 %3, label %after_check, label %assign_optional, !dbg !879

assign_optional:                                  ; preds = %entry
  store i64 %2, ptr %reterr, align 8, !dbg !879
  br label %err_retblock, !dbg !879

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !879
  ret i64 0, !dbg !879

err_retblock:                                     ; preds = %assign_optional
  %4 = load i64, ptr %reterr, align 8, !dbg !879
  ret i64 %4, !dbg !879
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf32(ptr %0, ptr align 8 %1) #0 comdat !dbg !880 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !881, metadata !DIExpression()), !dbg !882
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !883
  %not = icmp eq ptr %2, null, !dbg !883
  br i1 %not, label %if.then, label %if.exit, !dbg !883

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !886
  br label %if.exit, !dbg !886

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !888
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !888
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !888
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !889
  %not_err = icmp eq i64 %6, 0, !dbg !889
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !889
  br i1 %7, label %after_check, label %assign_optional, !dbg !889

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !889
  br label %err_retblock, !dbg !889

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !889
  ret i64 0, !dbg !889

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !889
  ret i64 %8, !dbg !889
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_lower(ptr align 8 %0) #0 comdat !dbg !890 {
entry:
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !893, metadata !DIExpression()), !dbg !894
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !895, metadata !DIExpression()), !dbg !897
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !897
  %1 = load i64, ptr %ptradd, align 8, !dbg !897
  store i64 %1, ptr %.anon, align 8, !dbg !897
  call void @llvm.dbg.declare(metadata ptr %.anon1, metadata !895, metadata !DIExpression()), !dbg !897
  store i64 0, ptr %.anon1, align 8, !dbg !897
  br label %loop.cond, !dbg !897

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !897
  %3 = load i64, ptr %.anon, align 8, !dbg !897
  %lt = icmp ult i64 %2, %3, !dbg !897
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !897

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !898, metadata !DIExpression()), !dbg !900
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !901
  %4 = load i64, ptr %ptradd2, align 8, !dbg !901
  %5 = load ptr, ptr %0, align 8, !dbg !901
  %6 = load i64, ptr %.anon1, align 8, !dbg !901
  %ge = icmp uge i64 %6, %4, !dbg !901
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !901
  br i1 %7, label %panic, label %checkok, !dbg !901

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !901
  store ptr %ptradd8, ptr %c, align 8, !dbg !901
  %8 = load ptr, ptr %c, align 8, !dbg !902
  %checknull = icmp eq ptr %8, null, !dbg !902
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !902
  br i1 %9, label %panic9, label %checkok13, !dbg !902

checkok13:                                        ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !902
  %11 = call i8 @std.ascii.char.is_upper(i8 %10), !dbg !902
  %12 = trunc i8 %11 to i1, !dbg !902
  br i1 %12, label %if.then, label %if.exit, !dbg !902

if.then:                                          ; preds = %checkok13
  %13 = load ptr, ptr %c, align 8, !dbg !903
  %checknull14 = icmp eq ptr %13, null, !dbg !903
  %14 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !903
  br i1 %14, label %panic15, label %checkok19, !dbg !903

checkok19:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !903
  %add = add i8 %15, 32, !dbg !904
  store i8 %add, ptr %13, align 1, !dbg !904
  br label %if.exit, !dbg !904

if.exit:                                          ; preds = %checkok19, %checkok13
  %16 = load i64, ptr %.anon1, align 8, !dbg !897
  %addnuw = add nuw i64 %16, 1, !dbg !897
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !897
  br label %loop.cond, !dbg !897

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !897

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.58, i64 22 }, ptr %indirectarg5, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd6, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 533, ptr align 8 %indirectarg7), !dbg !901
  unreachable, !dbg !901

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.59, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.58, i64 22 }, ptr %indirectarg12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 533), !dbg !902
  unreachable, !dbg !902

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.59, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.58, i64 22 }, ptr %indirectarg18, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 533), !dbg !903
  unreachable, !dbg !903
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.new_ascii_to_lower(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !905 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !906, metadata !DIExpression()), !dbg !907
  call void @llvm.dbg.declare(metadata ptr %2, metadata !908, metadata !DIExpression()), !dbg !909
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !910, metadata !DIExpression()), !dbg !911
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !912
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_ascii_to_lower(ptr align 8 %indirectarg2), !dbg !913
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !914
  ret void, !dbg !914
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.temp_ascii_to_lower(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !915 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !916, metadata !DIExpression()), !dbg !917
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !918
  %not = icmp eq ptr %2, null, !dbg !918
  br i1 %not, label %if.then, label %if.exit, !dbg !918

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !921
  br label %if.exit, !dbg !921

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !923
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !923
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !923
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.new_ascii_to_lower(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !924
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !924
  ret void, !dbg !924
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_upper(ptr align 8 %0) #0 comdat !dbg !925 {
entry:
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !926, metadata !DIExpression()), !dbg !927
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !928, metadata !DIExpression()), !dbg !930
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !930
  %1 = load i64, ptr %ptradd, align 8, !dbg !930
  store i64 %1, ptr %.anon, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata ptr %.anon1, metadata !928, metadata !DIExpression()), !dbg !930
  store i64 0, ptr %.anon1, align 8, !dbg !930
  br label %loop.cond, !dbg !930

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !930
  %3 = load i64, ptr %.anon, align 8, !dbg !930
  %lt = icmp ult i64 %2, %3, !dbg !930
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !930

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !931, metadata !DIExpression()), !dbg !933
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !934
  %4 = load i64, ptr %ptradd2, align 8, !dbg !934
  %5 = load ptr, ptr %0, align 8, !dbg !934
  %6 = load i64, ptr %.anon1, align 8, !dbg !934
  %ge = icmp uge i64 %6, %4, !dbg !934
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !934
  br i1 %7, label %panic, label %checkok, !dbg !934

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !934
  store ptr %ptradd8, ptr %c, align 8, !dbg !934
  %8 = load ptr, ptr %c, align 8, !dbg !935
  %checknull = icmp eq ptr %8, null, !dbg !935
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !935
  br i1 %9, label %panic9, label %checkok13, !dbg !935

checkok13:                                        ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !935
  %11 = call i8 @std.ascii.char.is_lower(i8 %10), !dbg !935
  %12 = trunc i8 %11 to i1, !dbg !935
  br i1 %12, label %if.then, label %if.exit, !dbg !935

if.then:                                          ; preds = %checkok13
  %13 = load ptr, ptr %c, align 8, !dbg !936
  %checknull14 = icmp eq ptr %13, null, !dbg !936
  %14 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !936
  br i1 %14, label %panic15, label %checkok19, !dbg !936

checkok19:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !936
  %sub = sub i8 %15, 32, !dbg !937
  store i8 %sub, ptr %13, align 1, !dbg !937
  br label %if.exit, !dbg !937

if.exit:                                          ; preds = %checkok19, %checkok13
  %16 = load i64, ptr %.anon1, align 8, !dbg !930
  %addnuw = add nuw i64 %16, 1, !dbg !930
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !930
  br label %loop.cond, !dbg !930

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !930

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %indirectarg5, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd6, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 556, ptr align 8 %indirectarg7), !dbg !934
  unreachable, !dbg !934

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.59, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %indirectarg12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 556), !dbg !935
  unreachable, !dbg !935

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.59, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %indirectarg18, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 556), !dbg !936
  unreachable, !dbg !936
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.new_ascii_to_upper(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !938 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !939, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.declare(metadata ptr %2, metadata !941, metadata !DIExpression()), !dbg !942
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !943, metadata !DIExpression()), !dbg !944
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !945
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_ascii_to_upper(ptr align 8 %indirectarg2), !dbg !946
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !947
  ret void, !dbg !947
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr align 8 %1) #0 comdat !dbg !948 {
entry:
  %literal = alloca %StringIterator, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !955, metadata !DIExpression()), !dbg !956
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !957
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !957
  store i64 0, ptr %ptradd, align 8, !dbg !958
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !958
  ret void, !dbg !958
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.temp_ascii_to_upper(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !959 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !960, metadata !DIExpression()), !dbg !961
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !962
  %not = icmp eq ptr %2, null, !dbg !962
  br i1 %not, label %if.then, label %if.exit, !dbg !962

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !965
  br label %if.exit, !dbg !965

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !967
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !967
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !967
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.new_ascii_to_upper(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !968
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !968
  ret void, !dbg !968
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.utf8_codepoints(ptr align 8 %0) #0 comdat !dbg !969 {
entry:
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !972, metadata !DIExpression()), !dbg !973
  call void @llvm.dbg.declare(metadata ptr %len, metadata !974, metadata !DIExpression()), !dbg !975
  store i64 0, ptr %len, align 8, !dbg !976
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !977, metadata !DIExpression()), !dbg !979
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !979
  %1 = load i64, ptr %ptradd, align 8, !dbg !979
  store i64 %1, ptr %.anon, align 8, !dbg !979
  call void @llvm.dbg.declare(metadata ptr %.anon1, metadata !977, metadata !DIExpression()), !dbg !979
  store i64 0, ptr %.anon1, align 8, !dbg !979
  br label %loop.cond, !dbg !979

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !979
  %3 = load i64, ptr %.anon, align 8, !dbg !979
  %lt = icmp ult i64 %2, %3, !dbg !979
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !979

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !980, metadata !DIExpression()), !dbg !982
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !983
  %4 = load i64, ptr %ptradd2, align 8, !dbg !983
  %5 = load ptr, ptr %0, align 8, !dbg !983
  %6 = load i64, ptr %.anon1, align 8, !dbg !983
  %ge = icmp uge i64 %6, %4, !dbg !983
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !983
  br i1 %7, label %panic, label %checkok, !dbg !983

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !983
  %8 = load i8, ptr %ptradd8, align 1, !dbg !983
  store i8 %8, ptr %c, align 1, !dbg !983
  %9 = load i8, ptr %c, align 1, !dbg !984
  %zext = zext i8 %9 to i32, !dbg !984
  %and = and i32 %zext, 192, !dbg !984
  %neq = icmp ne i32 %and, 128, !dbg !984
  br i1 %neq, label %if.then, label %if.exit, !dbg !984

if.then:                                          ; preds = %checkok
  %10 = load i64, ptr %len, align 8, !dbg !986
  %add = add i64 %10, 1, !dbg !986
  store i64 %add, ptr %len, align 8, !dbg !986
  br label %if.exit, !dbg !986

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load i64, ptr %.anon1, align 8, !dbg !979
  %addnuw = add nuw i64 %11, 1, !dbg !979
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !979
  br label %loop.cond, !dbg !979

loop.exit:                                        ; preds = %loop.cond
  %12 = load i64, ptr %len, align 8, !dbg !987
  ret i64 %12, !dbg !987

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.61, i64 15 }, ptr %indirectarg5, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd6, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 622, ptr align 8 %indirectarg7), !dbg !983
  unreachable, !dbg !983
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !988 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i128, align 16
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value138 = alloca i128, align 16
  call void @llvm.dbg.declare(metadata ptr %1, metadata !993, metadata !DIExpression()), !dbg !994
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !995, metadata !DIExpression()), !dbg !996
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !997
  %le = icmp sle i32 %4, 10, !dbg !997
  br i1 %le, label %and.rhs, label %and.phi, !dbg !997

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1001
  %gt = icmp sgt i32 %5, 1, !dbg !1001
  br label %and.phi, !dbg !1001

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1001
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1001

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1002
  %eq = icmp eq i32 %6, 16, !dbg !1002
  br label %or.phi, !dbg !1002

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1002
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1002

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.63, i64 9 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !997
  unreachable, !dbg !997

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1003, metadata !DIExpression()), !dbg !1004
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1005
  %8 = load i64, ptr %ptradd, align 8, !dbg !1005
  store i64 %8, ptr %len, align 8, !dbg !1005
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1006, metadata !DIExpression()), !dbg !1007
  store i64 0, ptr %index, align 8, !dbg !1008
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1009, metadata !DIExpression()), !dbg !1010
  %9 = load ptr, ptr %string, align 8, !dbg !1011
  store ptr %9, ptr %ptr, align 8, !dbg !1011
  br label %loop.cond, !dbg !1012

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1013
  %11 = load i64, ptr %len, align 8, !dbg !1015
  %lt = icmp ult i64 %10, %11, !dbg !1013
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1013

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1016
  %13 = load i64, ptr %index, align 8, !dbg !1017
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1017
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1018
  %eq7 = icmp eq i8 %15, 32, !dbg !1018
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1018

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1022
  %eq9 = icmp eq i8 %16, 9, !dbg !1022
  br label %or.phi10, !dbg !1022

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1022
  br label %and.phi12, !dbg !1022

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1022
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1022

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1023
  %add = add i64 %17, 1, !dbg !1023
  store i64 %add, ptr %index, align 8, !dbg !1023
  br label %loop.cond, !dbg !1023

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1024
  %19 = load i64, ptr %index, align 8, !dbg !1025
  %eq14 = icmp eq i64 %18, %19, !dbg !1024
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1024

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1026
  br label %err_retblock, !dbg !1026

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1027, metadata !DIExpression()), !dbg !1028
  store i8 0, ptr %is_negative, align 1, !dbg !1028
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1029
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1029
  %21 = load ptr, ptr %string, align 8, !dbg !1029
  %22 = load i64, ptr %index, align 8, !dbg !1031
  %ge = icmp uge i64 %22, %20, !dbg !1031
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1031
  br i1 %23, label %panic, label %checkok, !dbg !1031

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1031
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1032

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1034
  %26 = load i64, ptr %index, align 8, !dbg !1035
  %add24 = add i64 %26, 1, !dbg !1035
  store i64 %add24, ptr %index, align 8, !dbg !1035
  br label %switch.exit, !dbg !1035

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1036
  %add26 = add i64 %27, 1, !dbg !1036
  store i64 %add26, ptr %index, align 8, !dbg !1036
  br label %switch.exit, !dbg !1036

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1038

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1040
  %29 = load i64, ptr %index, align 8, !dbg !1041
  %eq27 = icmp eq i64 %28, %29, !dbg !1040
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1040

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1042
  br label %err_retblock, !dbg !1042

if.exit29:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1043, metadata !DIExpression()), !dbg !1044
  %30 = load i32, ptr %base1, align 4, !dbg !1045
  %sext = sext i32 %30 to i128, !dbg !1045
  store i128 %sext, ptr %base_used, align 16, !dbg !1045
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1046
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1046
  %32 = load ptr, ptr %string, align 8, !dbg !1046
  %33 = load i64, ptr %index, align 8, !dbg !1047
  %ge31 = icmp uge i64 %33, %31, !dbg !1047
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1047
  br i1 %34, label %panic32, label %checkok42, !dbg !1047

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1047
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1047
  %eq44 = icmp eq i8 %35, 48, !dbg !1046
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1046

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1048
  %eq46 = icmp eq i32 %36, 10, !dbg !1048
  br label %and.phi47, !dbg !1048

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1048
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1048

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1049
  %add50 = add i64 %37, 1, !dbg !1049
  store i64 %add50, ptr %index, align 8, !dbg !1049
  %38 = load i64, ptr %index, align 8, !dbg !1051
  %39 = load i64, ptr %len, align 8, !dbg !1052
  %eq51 = icmp eq i64 %38, %39, !dbg !1051
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1051

if.then52:                                        ; preds = %if.then49
  store i128 0, ptr %blockret, align 16, !dbg !1053
  br label %expr_block.exit149, !dbg !1053

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1054
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1054
  %41 = load ptr, ptr %string, align 8, !dbg !1054
  %42 = load i64, ptr %index, align 8, !dbg !1056
  %ge55 = icmp uge i64 %42, %40, !dbg !1056
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1056
  br i1 %43, label %panic56, label %checkok66, !dbg !1056

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1056
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 16, ptr %base_used, align 16, !dbg !1057
  %46 = load i64, ptr %index, align 8, !dbg !1059
  %add71 = add i64 %46, 1, !dbg !1059
  store i64 %add71, ptr %index, align 8, !dbg !1059
  br label %switch.exit77, !dbg !1059

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 2, ptr %base_used, align 16, !dbg !1060
  %47 = load i64, ptr %index, align 8, !dbg !1062
  %add73 = add i64 %47, 1, !dbg !1062
  store i64 %add73, ptr %index, align 8, !dbg !1062
  br label %switch.exit77, !dbg !1062

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 8, ptr %base_used, align 16, !dbg !1063
  %48 = load i64, ptr %index, align 8, !dbg !1065
  %add75 = add i64 %48, 1, !dbg !1065
  store i64 %add75, ptr %index, align 8, !dbg !1065
  br label %switch.exit77, !dbg !1065

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1066

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1068
  %50 = load i64, ptr %index, align 8, !dbg !1069
  %eq78 = icmp eq i64 %49, %50, !dbg !1068
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1068

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1070
  br label %err_retblock, !dbg !1070

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1070

if.exit81:                                        ; preds = %if.exit80, %and.phi47
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1071, metadata !DIExpression()), !dbg !1072
  store i128 0, ptr %value, align 16, !dbg !1073
  br label %loop.cond82, !dbg !1074

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1075
  %52 = load i64, ptr %len, align 8, !dbg !1077
  %neq = icmp ne i64 %51, %52, !dbg !1075
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !1075

loop.body83:                                      ; preds = %loop.cond82
  call void @llvm.dbg.declare(metadata ptr %c84, metadata !1078, metadata !DIExpression()), !dbg !1080
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1081, metadata !DIExpression()), !dbg !1083
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1084
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1084
  %54 = load ptr, ptr %string, align 8, !dbg !1084
  %55 = load i64, ptr %index, align 8, !dbg !1085
  %add87 = add i64 %55, 1, !dbg !1085
  store i64 %add87, ptr %index, align 8, !dbg !1085
  %ge88 = icmp uge i64 %55, %53, !dbg !1085
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1085
  br i1 %56, label %panic89, label %checkok99, !dbg !1085

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1085
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1085
  store i8 %57, ptr %ch, align 1, !dbg !1085
  %58 = load i128, ptr %base_used, align 16, !dbg !1086
  %neq101 = icmp ne i128 %58, 16, !dbg !1086
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1086

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1087
  %lt103 = icmp ult i8 %59, 65, !dbg !1087
  br label %or.phi104, !dbg !1087

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1087
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !1087

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1088
  %zext = zext i8 %60 to i32, !dbg !1088
  %sub = sub i32 %zext, 48, !dbg !1089
  %trunc = trunc i32 %sub to i8, !dbg !1089
  store i8 %trunc, ptr %blockret85, align 1, !dbg !1089
  br label %expr_block.exit, !dbg !1089

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1090
  %le108 = icmp ule i8 %61, 70, !dbg !1090
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !1090

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !1091
  %zext110 = zext i8 %62 to i32, !dbg !1091
  %sub111 = sub i32 %zext110, 65, !dbg !1091
  %add112 = add i32 %sub111, 10, !dbg !1092
  %trunc113 = trunc i32 %add112 to i8, !dbg !1092
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !1092
  br label %expr_block.exit, !dbg !1092

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !1093
  %lt115 = icmp ult i8 %63, 97, !dbg !1093
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !1093

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1094
  br label %guard_block, !dbg !1094

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !1095
  %gt118 = icmp ugt i8 %64, 102, !dbg !1095
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !1095

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1096
  br label %guard_block, !dbg !1096

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !1097
  %zext121 = zext i8 %65 to i32, !dbg !1097
  %sub122 = sub i32 %zext121, 97, !dbg !1097
  %add123 = add i32 %sub122, 10, !dbg !1098
  %trunc124 = trunc i32 %add123 to i8, !dbg !1098
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !1098
  br label %expr_block.exit, !dbg !1098

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !1098

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !1098
  store i64 %66, ptr %reterr, align 8, !dbg !1098
  br label %err_retblock, !dbg !1098

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1098
  store i8 %67, ptr %c84, align 1, !dbg !1098
  %68 = load i8, ptr %c84, align 1, !dbg !1099
  %zext125 = zext i8 %68 to i128, !dbg !1099
  %69 = load i128, ptr %base_used, align 16, !dbg !1100
  %le126 = icmp sle i128 %69, %zext125, !dbg !1099
  %check = icmp slt i128 %zext125, 0, !dbg !1099
  %siui-le = or i1 %check, %le126, !dbg !1099
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !1099

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1101
  br label %err_retblock, !dbg !1101

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1102
  %71 = trunc i8 %70 to i1, !dbg !1102
  br i1 %71, label %if.then131, label %if.exit137, !dbg !1102

if.then131:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1104, metadata !DIExpression()), !dbg !1106
  %72 = load i128, ptr %value, align 16, !dbg !1107
  %73 = load i128, ptr %base_used, align 16, !dbg !1108
  %mul = mul i128 %72, %73, !dbg !1107
  %74 = load i8, ptr %c84, align 1, !dbg !1109
  %zext132 = zext i8 %74 to i128, !dbg !1109
  %sub133 = sub i128 %mul, %zext132, !dbg !1107
  store i128 %sub133, ptr %new_value, align 16, !dbg !1107
  %75 = load i128, ptr %new_value, align 16, !dbg !1110
  %76 = load i128, ptr %value, align 16, !dbg !1111
  %gt134 = icmp sgt i128 %75, %76, !dbg !1110
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !1110

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1112
  br label %guard_block146, !dbg !1112

if.exit136:                                       ; preds = %if.then131
  %77 = load i128, ptr %new_value, align 16, !dbg !1113
  store i128 %77, ptr %blockret130, align 16, !dbg !1113
  br label %expr_block.exit145, !dbg !1113

if.exit137:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value138, metadata !1114, metadata !DIExpression()), !dbg !1115
  %78 = load i128, ptr %value, align 16, !dbg !1116
  %79 = load i128, ptr %base_used, align 16, !dbg !1117
  %mul139 = mul i128 %78, %79, !dbg !1116
  %80 = load i8, ptr %c84, align 1, !dbg !1118
  %zext140 = zext i8 %80 to i128, !dbg !1118
  %add141 = add i128 %mul139, %zext140, !dbg !1116
  store i128 %add141, ptr %new_value138, align 16, !dbg !1116
  %81 = load i128, ptr %new_value138, align 16, !dbg !1119
  %82 = load i128, ptr %value, align 16, !dbg !1120
  %lt142 = icmp slt i128 %81, %82, !dbg !1119
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !1119

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1121
  br label %guard_block146, !dbg !1121

if.exit144:                                       ; preds = %if.exit137
  %83 = load i128, ptr %new_value138, align 16, !dbg !1122
  store i128 %83, ptr %blockret130, align 16, !dbg !1122
  br label %expr_block.exit145, !dbg !1122

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !1122

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !1122
  store i64 %84, ptr %reterr, align 8, !dbg !1122
  br label %err_retblock, !dbg !1122

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i128, ptr %blockret130, align 16, !dbg !1122
  store i128 %85, ptr %value, align 16, !dbg !1122
  br label %loop.cond82, !dbg !1122

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i128, ptr %value, align 16, !dbg !1123
  store i128 %86, ptr %blockret, align 16, !dbg !1123
  br label %expr_block.exit149, !dbg !1123

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i128, ptr %blockret, align 16, !dbg !1123
  store i128 %87, ptr %0, align 16, !dbg !1123
  ret i64 0, !dbg !1123

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1123
  ret i64 %88, !dbg !1123

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.63, i64 9 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1031
  unreachable, !dbg !1031

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.63, i64 9 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 654, ptr align 8 %indirectarg41), !dbg !1047
  unreachable, !dbg !1047

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.63, i64 9 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 658, ptr align 8 %indirectarg65), !dbg !1056
  unreachable, !dbg !1056

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.63, i64 9 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 681, ptr align 8 %indirectarg98), !dbg !1085
  unreachable, !dbg !1085
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_long(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1124 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i64, align 8
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value138 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1128, metadata !DIExpression()), !dbg !1129
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1130, metadata !DIExpression()), !dbg !1131
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1132
  %le = icmp sle i32 %4, 10, !dbg !1132
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1132

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1136
  %gt = icmp sgt i32 %5, 1, !dbg !1136
  br label %and.phi, !dbg !1136

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1136
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1136

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1137
  %eq = icmp eq i32 %6, 16, !dbg !1137
  br label %or.phi, !dbg !1137

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1137
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1137

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.64, i64 7 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1132
  unreachable, !dbg !1132

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1138, metadata !DIExpression()), !dbg !1139
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1140
  %8 = load i64, ptr %ptradd, align 8, !dbg !1140
  store i64 %8, ptr %len, align 8, !dbg !1140
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1141, metadata !DIExpression()), !dbg !1142
  store i64 0, ptr %index, align 8, !dbg !1143
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1144, metadata !DIExpression()), !dbg !1145
  %9 = load ptr, ptr %string, align 8, !dbg !1146
  store ptr %9, ptr %ptr, align 8, !dbg !1146
  br label %loop.cond, !dbg !1147

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1148
  %11 = load i64, ptr %len, align 8, !dbg !1150
  %lt = icmp ult i64 %10, %11, !dbg !1148
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1148

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1151
  %13 = load i64, ptr %index, align 8, !dbg !1152
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1152
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1153
  %eq7 = icmp eq i8 %15, 32, !dbg !1153
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1153

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1156
  %eq9 = icmp eq i8 %16, 9, !dbg !1156
  br label %or.phi10, !dbg !1156

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1156
  br label %and.phi12, !dbg !1156

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1156
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1156

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1157
  %add = add i64 %17, 1, !dbg !1157
  store i64 %add, ptr %index, align 8, !dbg !1157
  br label %loop.cond, !dbg !1157

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1158
  %19 = load i64, ptr %index, align 8, !dbg !1159
  %eq14 = icmp eq i64 %18, %19, !dbg !1158
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1158

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1160
  br label %err_retblock, !dbg !1160

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1161, metadata !DIExpression()), !dbg !1162
  store i8 0, ptr %is_negative, align 1, !dbg !1162
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1163
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1163
  %21 = load ptr, ptr %string, align 8, !dbg !1163
  %22 = load i64, ptr %index, align 8, !dbg !1165
  %ge = icmp uge i64 %22, %20, !dbg !1165
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1165
  br i1 %23, label %panic, label %checkok, !dbg !1165

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1165
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1166

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1168
  %26 = load i64, ptr %index, align 8, !dbg !1169
  %add24 = add i64 %26, 1, !dbg !1169
  store i64 %add24, ptr %index, align 8, !dbg !1169
  br label %switch.exit, !dbg !1169

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1170
  %add26 = add i64 %27, 1, !dbg !1170
  store i64 %add26, ptr %index, align 8, !dbg !1170
  br label %switch.exit, !dbg !1170

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1172

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1174
  %29 = load i64, ptr %index, align 8, !dbg !1175
  %eq27 = icmp eq i64 %28, %29, !dbg !1174
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1174

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1176
  br label %err_retblock, !dbg !1176

if.exit29:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1177, metadata !DIExpression()), !dbg !1178
  %30 = load i32, ptr %base1, align 4, !dbg !1179
  %sext = sext i32 %30 to i64, !dbg !1179
  store i64 %sext, ptr %base_used, align 8, !dbg !1179
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1180
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1180
  %32 = load ptr, ptr %string, align 8, !dbg !1180
  %33 = load i64, ptr %index, align 8, !dbg !1181
  %ge31 = icmp uge i64 %33, %31, !dbg !1181
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1181
  br i1 %34, label %panic32, label %checkok42, !dbg !1181

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1181
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1181
  %eq44 = icmp eq i8 %35, 48, !dbg !1180
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1180

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1182
  %eq46 = icmp eq i32 %36, 10, !dbg !1182
  br label %and.phi47, !dbg !1182

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1182
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1182

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1183
  %add50 = add i64 %37, 1, !dbg !1183
  store i64 %add50, ptr %index, align 8, !dbg !1183
  %38 = load i64, ptr %index, align 8, !dbg !1185
  %39 = load i64, ptr %len, align 8, !dbg !1186
  %eq51 = icmp eq i64 %38, %39, !dbg !1185
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1185

if.then52:                                        ; preds = %if.then49
  store i64 0, ptr %blockret, align 8, !dbg !1187
  br label %expr_block.exit149, !dbg !1187

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1188
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1188
  %41 = load ptr, ptr %string, align 8, !dbg !1188
  %42 = load i64, ptr %index, align 8, !dbg !1190
  %ge55 = icmp uge i64 %42, %40, !dbg !1190
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1190
  br i1 %43, label %panic56, label %checkok66, !dbg !1190

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1190
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 16, ptr %base_used, align 8, !dbg !1191
  %46 = load i64, ptr %index, align 8, !dbg !1193
  %add71 = add i64 %46, 1, !dbg !1193
  store i64 %add71, ptr %index, align 8, !dbg !1193
  br label %switch.exit77, !dbg !1193

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 2, ptr %base_used, align 8, !dbg !1194
  %47 = load i64, ptr %index, align 8, !dbg !1196
  %add73 = add i64 %47, 1, !dbg !1196
  store i64 %add73, ptr %index, align 8, !dbg !1196
  br label %switch.exit77, !dbg !1196

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 8, ptr %base_used, align 8, !dbg !1197
  %48 = load i64, ptr %index, align 8, !dbg !1199
  %add75 = add i64 %48, 1, !dbg !1199
  store i64 %add75, ptr %index, align 8, !dbg !1199
  br label %switch.exit77, !dbg !1199

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1200

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1202
  %50 = load i64, ptr %index, align 8, !dbg !1203
  %eq78 = icmp eq i64 %49, %50, !dbg !1202
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1202

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1204
  br label %err_retblock, !dbg !1204

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1204

if.exit81:                                        ; preds = %if.exit80, %and.phi47
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i64 0, ptr %value, align 8, !dbg !1207
  br label %loop.cond82, !dbg !1208

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1209
  %52 = load i64, ptr %len, align 8, !dbg !1211
  %neq = icmp ne i64 %51, %52, !dbg !1209
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !1209

loop.body83:                                      ; preds = %loop.cond82
  call void @llvm.dbg.declare(metadata ptr %c84, metadata !1212, metadata !DIExpression()), !dbg !1214
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1215, metadata !DIExpression()), !dbg !1217
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1218
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1218
  %54 = load ptr, ptr %string, align 8, !dbg !1218
  %55 = load i64, ptr %index, align 8, !dbg !1219
  %add87 = add i64 %55, 1, !dbg !1219
  store i64 %add87, ptr %index, align 8, !dbg !1219
  %ge88 = icmp uge i64 %55, %53, !dbg !1219
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1219
  br i1 %56, label %panic89, label %checkok99, !dbg !1219

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1219
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1219
  store i8 %57, ptr %ch, align 1, !dbg !1219
  %58 = load i64, ptr %base_used, align 8, !dbg !1220
  %neq101 = icmp ne i64 %58, 16, !dbg !1220
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1220

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1221
  %lt103 = icmp ult i8 %59, 65, !dbg !1221
  br label %or.phi104, !dbg !1221

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1221
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !1221

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1222
  %zext = zext i8 %60 to i32, !dbg !1222
  %sub = sub i32 %zext, 48, !dbg !1223
  %trunc = trunc i32 %sub to i8, !dbg !1223
  store i8 %trunc, ptr %blockret85, align 1, !dbg !1223
  br label %expr_block.exit, !dbg !1223

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1224
  %le108 = icmp ule i8 %61, 70, !dbg !1224
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !1224

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !1225
  %zext110 = zext i8 %62 to i32, !dbg !1225
  %sub111 = sub i32 %zext110, 65, !dbg !1225
  %add112 = add i32 %sub111, 10, !dbg !1226
  %trunc113 = trunc i32 %add112 to i8, !dbg !1226
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !1226
  br label %expr_block.exit, !dbg !1226

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !1227
  %lt115 = icmp ult i8 %63, 97, !dbg !1227
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !1227

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1228
  br label %guard_block, !dbg !1228

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !1229
  %gt118 = icmp ugt i8 %64, 102, !dbg !1229
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !1229

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1230
  br label %guard_block, !dbg !1230

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !1231
  %zext121 = zext i8 %65 to i32, !dbg !1231
  %sub122 = sub i32 %zext121, 97, !dbg !1231
  %add123 = add i32 %sub122, 10, !dbg !1232
  %trunc124 = trunc i32 %add123 to i8, !dbg !1232
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !1232
  br label %expr_block.exit, !dbg !1232

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !1232

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !1232
  store i64 %66, ptr %reterr, align 8, !dbg !1232
  br label %err_retblock, !dbg !1232

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1232
  store i8 %67, ptr %c84, align 1, !dbg !1232
  %68 = load i8, ptr %c84, align 1, !dbg !1233
  %zext125 = zext i8 %68 to i64, !dbg !1233
  %69 = load i64, ptr %base_used, align 8, !dbg !1234
  %le126 = icmp sle i64 %69, %zext125, !dbg !1233
  %check = icmp slt i64 %zext125, 0, !dbg !1233
  %siui-le = or i1 %check, %le126, !dbg !1233
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !1233

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1235
  br label %err_retblock, !dbg !1235

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1236
  %71 = trunc i8 %70 to i1, !dbg !1236
  br i1 %71, label %if.then131, label %if.exit137, !dbg !1236

if.then131:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1238, metadata !DIExpression()), !dbg !1240
  %72 = load i64, ptr %value, align 8, !dbg !1241
  %73 = load i64, ptr %base_used, align 8, !dbg !1242
  %mul = mul i64 %72, %73, !dbg !1241
  %74 = load i8, ptr %c84, align 1, !dbg !1243
  %zext132 = zext i8 %74 to i64, !dbg !1243
  %sub133 = sub i64 %mul, %zext132, !dbg !1241
  store i64 %sub133, ptr %new_value, align 8, !dbg !1241
  %75 = load i64, ptr %new_value, align 8, !dbg !1244
  %76 = load i64, ptr %value, align 8, !dbg !1245
  %gt134 = icmp sgt i64 %75, %76, !dbg !1244
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !1244

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1246
  br label %guard_block146, !dbg !1246

if.exit136:                                       ; preds = %if.then131
  %77 = load i64, ptr %new_value, align 8, !dbg !1247
  store i64 %77, ptr %blockret130, align 8, !dbg !1247
  br label %expr_block.exit145, !dbg !1247

if.exit137:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value138, metadata !1248, metadata !DIExpression()), !dbg !1249
  %78 = load i64, ptr %value, align 8, !dbg !1250
  %79 = load i64, ptr %base_used, align 8, !dbg !1251
  %mul139 = mul i64 %78, %79, !dbg !1250
  %80 = load i8, ptr %c84, align 1, !dbg !1252
  %zext140 = zext i8 %80 to i64, !dbg !1252
  %add141 = add i64 %mul139, %zext140, !dbg !1250
  store i64 %add141, ptr %new_value138, align 8, !dbg !1250
  %81 = load i64, ptr %new_value138, align 8, !dbg !1253
  %82 = load i64, ptr %value, align 8, !dbg !1254
  %lt142 = icmp slt i64 %81, %82, !dbg !1253
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !1253

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1255
  br label %guard_block146, !dbg !1255

if.exit144:                                       ; preds = %if.exit137
  %83 = load i64, ptr %new_value138, align 8, !dbg !1256
  store i64 %83, ptr %blockret130, align 8, !dbg !1256
  br label %expr_block.exit145, !dbg !1256

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !1256

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !1256
  store i64 %84, ptr %reterr, align 8, !dbg !1256
  br label %err_retblock, !dbg !1256

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i64, ptr %blockret130, align 8, !dbg !1256
  store i64 %85, ptr %value, align 8, !dbg !1256
  br label %loop.cond82, !dbg !1256

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i64, ptr %value, align 8, !dbg !1257
  store i64 %86, ptr %blockret, align 8, !dbg !1257
  br label %expr_block.exit149, !dbg !1257

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i64, ptr %blockret, align 8, !dbg !1257
  store i64 %87, ptr %0, align 8, !dbg !1257
  ret i64 0, !dbg !1257

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1257
  ret i64 %88, !dbg !1257

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.64, i64 7 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1165
  unreachable, !dbg !1165

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.64, i64 7 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 654, ptr align 8 %indirectarg41), !dbg !1181
  unreachable, !dbg !1181

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.64, i64 7 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 658, ptr align 8 %indirectarg65), !dbg !1190
  unreachable, !dbg !1190

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.64, i64 7 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 681, ptr align 8 %indirectarg98), !dbg !1219
  unreachable, !dbg !1219
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1258 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i32, align 4
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value138 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1262, metadata !DIExpression()), !dbg !1263
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1264, metadata !DIExpression()), !dbg !1265
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1266
  %le = icmp sle i32 %4, 10, !dbg !1266
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1266

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1270
  %gt = icmp sgt i32 %5, 1, !dbg !1270
  br label %and.phi, !dbg !1270

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1270
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1270

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1271
  %eq = icmp eq i32 %6, 16, !dbg !1271
  br label %or.phi, !dbg !1271

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1271
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1271

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.65, i64 6 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1266
  unreachable, !dbg !1266

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1272, metadata !DIExpression()), !dbg !1273
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1274
  %8 = load i64, ptr %ptradd, align 8, !dbg !1274
  store i64 %8, ptr %len, align 8, !dbg !1274
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1275, metadata !DIExpression()), !dbg !1276
  store i64 0, ptr %index, align 8, !dbg !1277
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1278, metadata !DIExpression()), !dbg !1279
  %9 = load ptr, ptr %string, align 8, !dbg !1280
  store ptr %9, ptr %ptr, align 8, !dbg !1280
  br label %loop.cond, !dbg !1281

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1282
  %11 = load i64, ptr %len, align 8, !dbg !1284
  %lt = icmp ult i64 %10, %11, !dbg !1282
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1282

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1285
  %13 = load i64, ptr %index, align 8, !dbg !1286
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1286
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1287
  %eq7 = icmp eq i8 %15, 32, !dbg !1287
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1287

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1290
  %eq9 = icmp eq i8 %16, 9, !dbg !1290
  br label %or.phi10, !dbg !1290

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1290
  br label %and.phi12, !dbg !1290

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1290
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1290

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1291
  %add = add i64 %17, 1, !dbg !1291
  store i64 %add, ptr %index, align 8, !dbg !1291
  br label %loop.cond, !dbg !1291

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1292
  %19 = load i64, ptr %index, align 8, !dbg !1293
  %eq14 = icmp eq i64 %18, %19, !dbg !1292
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1292

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1294
  br label %err_retblock, !dbg !1294

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1295, metadata !DIExpression()), !dbg !1296
  store i8 0, ptr %is_negative, align 1, !dbg !1296
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1297
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1297
  %21 = load ptr, ptr %string, align 8, !dbg !1297
  %22 = load i64, ptr %index, align 8, !dbg !1299
  %ge = icmp uge i64 %22, %20, !dbg !1299
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1299
  br i1 %23, label %panic, label %checkok, !dbg !1299

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1299
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1300

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1302
  %26 = load i64, ptr %index, align 8, !dbg !1303
  %add24 = add i64 %26, 1, !dbg !1303
  store i64 %add24, ptr %index, align 8, !dbg !1303
  br label %switch.exit, !dbg !1303

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1304
  %add26 = add i64 %27, 1, !dbg !1304
  store i64 %add26, ptr %index, align 8, !dbg !1304
  br label %switch.exit, !dbg !1304

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1306

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1308
  %29 = load i64, ptr %index, align 8, !dbg !1309
  %eq27 = icmp eq i64 %28, %29, !dbg !1308
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1308

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1310
  br label %err_retblock, !dbg !1310

if.exit29:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1311, metadata !DIExpression()), !dbg !1312
  %30 = load i32, ptr %base1, align 4, !dbg !1313
  store i32 %30, ptr %base_used, align 4, !dbg !1313
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1314
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1314
  %32 = load ptr, ptr %string, align 8, !dbg !1314
  %33 = load i64, ptr %index, align 8, !dbg !1315
  %ge31 = icmp uge i64 %33, %31, !dbg !1315
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1315
  br i1 %34, label %panic32, label %checkok42, !dbg !1315

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1315
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1315
  %eq44 = icmp eq i8 %35, 48, !dbg !1314
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1314

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1316
  %eq46 = icmp eq i32 %36, 10, !dbg !1316
  br label %and.phi47, !dbg !1316

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1316
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1316

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1317
  %add50 = add i64 %37, 1, !dbg !1317
  store i64 %add50, ptr %index, align 8, !dbg !1317
  %38 = load i64, ptr %index, align 8, !dbg !1319
  %39 = load i64, ptr %len, align 8, !dbg !1320
  %eq51 = icmp eq i64 %38, %39, !dbg !1319
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1319

if.then52:                                        ; preds = %if.then49
  store i32 0, ptr %blockret, align 4, !dbg !1321
  br label %expr_block.exit149, !dbg !1321

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1322
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1322
  %41 = load ptr, ptr %string, align 8, !dbg !1322
  %42 = load i64, ptr %index, align 8, !dbg !1324
  %ge55 = icmp uge i64 %42, %40, !dbg !1324
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1324
  br i1 %43, label %panic56, label %checkok66, !dbg !1324

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1324
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 16, ptr %base_used, align 4, !dbg !1325
  %46 = load i64, ptr %index, align 8, !dbg !1327
  %add71 = add i64 %46, 1, !dbg !1327
  store i64 %add71, ptr %index, align 8, !dbg !1327
  br label %switch.exit77, !dbg !1327

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 2, ptr %base_used, align 4, !dbg !1328
  %47 = load i64, ptr %index, align 8, !dbg !1330
  %add73 = add i64 %47, 1, !dbg !1330
  store i64 %add73, ptr %index, align 8, !dbg !1330
  br label %switch.exit77, !dbg !1330

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 8, ptr %base_used, align 4, !dbg !1331
  %48 = load i64, ptr %index, align 8, !dbg !1333
  %add75 = add i64 %48, 1, !dbg !1333
  store i64 %add75, ptr %index, align 8, !dbg !1333
  br label %switch.exit77, !dbg !1333

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1334

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1336
  %50 = load i64, ptr %index, align 8, !dbg !1337
  %eq78 = icmp eq i64 %49, %50, !dbg !1336
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1336

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1338
  br label %err_retblock, !dbg !1338

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1338

if.exit81:                                        ; preds = %if.exit80, %and.phi47
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1339, metadata !DIExpression()), !dbg !1340
  store i32 0, ptr %value, align 4, !dbg !1341
  br label %loop.cond82, !dbg !1342

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1343
  %52 = load i64, ptr %len, align 8, !dbg !1345
  %neq = icmp ne i64 %51, %52, !dbg !1343
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !1343

loop.body83:                                      ; preds = %loop.cond82
  call void @llvm.dbg.declare(metadata ptr %c84, metadata !1346, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1349, metadata !DIExpression()), !dbg !1351
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1352
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1352
  %54 = load ptr, ptr %string, align 8, !dbg !1352
  %55 = load i64, ptr %index, align 8, !dbg !1353
  %add87 = add i64 %55, 1, !dbg !1353
  store i64 %add87, ptr %index, align 8, !dbg !1353
  %ge88 = icmp uge i64 %55, %53, !dbg !1353
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1353
  br i1 %56, label %panic89, label %checkok99, !dbg !1353

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1353
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1353
  store i8 %57, ptr %ch, align 1, !dbg !1353
  %58 = load i32, ptr %base_used, align 4, !dbg !1354
  %neq101 = icmp ne i32 %58, 16, !dbg !1354
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1354

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1355
  %lt103 = icmp ult i8 %59, 65, !dbg !1355
  br label %or.phi104, !dbg !1355

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1355
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !1355

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1356
  %zext = zext i8 %60 to i32, !dbg !1356
  %sub = sub i32 %zext, 48, !dbg !1357
  %trunc = trunc i32 %sub to i8, !dbg !1357
  store i8 %trunc, ptr %blockret85, align 1, !dbg !1357
  br label %expr_block.exit, !dbg !1357

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1358
  %le108 = icmp ule i8 %61, 70, !dbg !1358
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !1358

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !1359
  %zext110 = zext i8 %62 to i32, !dbg !1359
  %sub111 = sub i32 %zext110, 65, !dbg !1359
  %add112 = add i32 %sub111, 10, !dbg !1360
  %trunc113 = trunc i32 %add112 to i8, !dbg !1360
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !1360
  br label %expr_block.exit, !dbg !1360

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !1361
  %lt115 = icmp ult i8 %63, 97, !dbg !1361
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !1361

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1362
  br label %guard_block, !dbg !1362

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !1363
  %gt118 = icmp ugt i8 %64, 102, !dbg !1363
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !1363

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1364
  br label %guard_block, !dbg !1364

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !1365
  %zext121 = zext i8 %65 to i32, !dbg !1365
  %sub122 = sub i32 %zext121, 97, !dbg !1365
  %add123 = add i32 %sub122, 10, !dbg !1366
  %trunc124 = trunc i32 %add123 to i8, !dbg !1366
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !1366
  br label %expr_block.exit, !dbg !1366

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !1366

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !1366
  store i64 %66, ptr %reterr, align 8, !dbg !1366
  br label %err_retblock, !dbg !1366

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1366
  store i8 %67, ptr %c84, align 1, !dbg !1366
  %68 = load i8, ptr %c84, align 1, !dbg !1367
  %zext125 = zext i8 %68 to i32, !dbg !1367
  %69 = load i32, ptr %base_used, align 4, !dbg !1368
  %le126 = icmp sle i32 %69, %zext125, !dbg !1367
  %check = icmp slt i32 %zext125, 0, !dbg !1367
  %siui-le = or i1 %check, %le126, !dbg !1367
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !1367

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1369
  br label %err_retblock, !dbg !1369

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1370
  %71 = trunc i8 %70 to i1, !dbg !1370
  br i1 %71, label %if.then131, label %if.exit137, !dbg !1370

if.then131:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1372, metadata !DIExpression()), !dbg !1374
  %72 = load i32, ptr %value, align 4, !dbg !1375
  %73 = load i32, ptr %base_used, align 4, !dbg !1376
  %mul = mul i32 %72, %73, !dbg !1375
  %74 = load i8, ptr %c84, align 1, !dbg !1377
  %zext132 = zext i8 %74 to i32, !dbg !1377
  %sub133 = sub i32 %mul, %zext132, !dbg !1375
  store i32 %sub133, ptr %new_value, align 4, !dbg !1375
  %75 = load i32, ptr %new_value, align 4, !dbg !1378
  %76 = load i32, ptr %value, align 4, !dbg !1379
  %gt134 = icmp sgt i32 %75, %76, !dbg !1378
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !1378

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1380
  br label %guard_block146, !dbg !1380

if.exit136:                                       ; preds = %if.then131
  %77 = load i32, ptr %new_value, align 4, !dbg !1381
  store i32 %77, ptr %blockret130, align 4, !dbg !1381
  br label %expr_block.exit145, !dbg !1381

if.exit137:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value138, metadata !1382, metadata !DIExpression()), !dbg !1383
  %78 = load i32, ptr %value, align 4, !dbg !1384
  %79 = load i32, ptr %base_used, align 4, !dbg !1385
  %mul139 = mul i32 %78, %79, !dbg !1384
  %80 = load i8, ptr %c84, align 1, !dbg !1386
  %zext140 = zext i8 %80 to i32, !dbg !1386
  %add141 = add i32 %mul139, %zext140, !dbg !1384
  store i32 %add141, ptr %new_value138, align 4, !dbg !1384
  %81 = load i32, ptr %new_value138, align 4, !dbg !1387
  %82 = load i32, ptr %value, align 4, !dbg !1388
  %lt142 = icmp slt i32 %81, %82, !dbg !1387
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !1387

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1389
  br label %guard_block146, !dbg !1389

if.exit144:                                       ; preds = %if.exit137
  %83 = load i32, ptr %new_value138, align 4, !dbg !1390
  store i32 %83, ptr %blockret130, align 4, !dbg !1390
  br label %expr_block.exit145, !dbg !1390

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !1390

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !1390
  store i64 %84, ptr %reterr, align 8, !dbg !1390
  br label %err_retblock, !dbg !1390

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i32, ptr %blockret130, align 4, !dbg !1390
  store i32 %85, ptr %value, align 4, !dbg !1390
  br label %loop.cond82, !dbg !1390

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i32, ptr %value, align 4, !dbg !1391
  store i32 %86, ptr %blockret, align 4, !dbg !1391
  br label %expr_block.exit149, !dbg !1391

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i32, ptr %blockret, align 4, !dbg !1391
  store i32 %87, ptr %0, align 4, !dbg !1391
  ret i64 0, !dbg !1391

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1391
  ret i64 %88, !dbg !1391

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.65, i64 6 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1299
  unreachable, !dbg !1299

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.65, i64 6 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 654, ptr align 8 %indirectarg41), !dbg !1315
  unreachable, !dbg !1315

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.65, i64 6 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 658, ptr align 8 %indirectarg65), !dbg !1324
  unreachable, !dbg !1324

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.65, i64 6 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 681, ptr align 8 %indirectarg98), !dbg !1353
  unreachable, !dbg !1353
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_short(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1392 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i16, align 2
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value142 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1397, metadata !DIExpression()), !dbg !1398
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1399, metadata !DIExpression()), !dbg !1400
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1401
  %le = icmp sle i32 %4, 10, !dbg !1401
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1401

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1405
  %gt = icmp sgt i32 %5, 1, !dbg !1405
  br label %and.phi, !dbg !1405

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1405
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1405

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1406
  %eq = icmp eq i32 %6, 16, !dbg !1406
  br label %or.phi, !dbg !1406

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1406
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1406

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1401
  unreachable, !dbg !1401

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1407, metadata !DIExpression()), !dbg !1408
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1409
  %8 = load i64, ptr %ptradd, align 8, !dbg !1409
  store i64 %8, ptr %len, align 8, !dbg !1409
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1410, metadata !DIExpression()), !dbg !1411
  store i64 0, ptr %index, align 8, !dbg !1412
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1413, metadata !DIExpression()), !dbg !1414
  %9 = load ptr, ptr %string, align 8, !dbg !1415
  store ptr %9, ptr %ptr, align 8, !dbg !1415
  br label %loop.cond, !dbg !1416

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1417
  %11 = load i64, ptr %len, align 8, !dbg !1419
  %lt = icmp ult i64 %10, %11, !dbg !1417
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1417

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1420
  %13 = load i64, ptr %index, align 8, !dbg !1421
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1421
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1422
  %eq7 = icmp eq i8 %15, 32, !dbg !1422
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1422

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1425
  %eq9 = icmp eq i8 %16, 9, !dbg !1425
  br label %or.phi10, !dbg !1425

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1425
  br label %and.phi12, !dbg !1425

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1425
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1425

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1426
  %add = add i64 %17, 1, !dbg !1426
  store i64 %add, ptr %index, align 8, !dbg !1426
  br label %loop.cond, !dbg !1426

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1427
  %19 = load i64, ptr %index, align 8, !dbg !1428
  %eq14 = icmp eq i64 %18, %19, !dbg !1427
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1427

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1429
  br label %err_retblock, !dbg !1429

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1430, metadata !DIExpression()), !dbg !1431
  store i8 0, ptr %is_negative, align 1, !dbg !1431
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1432
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1432
  %21 = load ptr, ptr %string, align 8, !dbg !1432
  %22 = load i64, ptr %index, align 8, !dbg !1434
  %ge = icmp uge i64 %22, %20, !dbg !1434
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1434
  br i1 %23, label %panic, label %checkok, !dbg !1434

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1434
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1435

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1437
  %26 = load i64, ptr %index, align 8, !dbg !1438
  %add24 = add i64 %26, 1, !dbg !1438
  store i64 %add24, ptr %index, align 8, !dbg !1438
  br label %switch.exit, !dbg !1438

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1439
  %add26 = add i64 %27, 1, !dbg !1439
  store i64 %add26, ptr %index, align 8, !dbg !1439
  br label %switch.exit, !dbg !1439

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1441

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1443
  %29 = load i64, ptr %index, align 8, !dbg !1444
  %eq27 = icmp eq i64 %28, %29, !dbg !1443
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1443

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1445
  br label %err_retblock, !dbg !1445

if.exit29:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1446, metadata !DIExpression()), !dbg !1447
  %30 = load i32, ptr %base1, align 4, !dbg !1448
  %trunc = trunc i32 %30 to i16, !dbg !1448
  store i16 %trunc, ptr %base_used, align 2, !dbg !1448
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1449
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1449
  %32 = load ptr, ptr %string, align 8, !dbg !1449
  %33 = load i64, ptr %index, align 8, !dbg !1450
  %ge31 = icmp uge i64 %33, %31, !dbg !1450
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1450
  br i1 %34, label %panic32, label %checkok42, !dbg !1450

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1450
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1450
  %eq44 = icmp eq i8 %35, 48, !dbg !1449
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1449

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1451
  %eq46 = icmp eq i32 %36, 10, !dbg !1451
  br label %and.phi47, !dbg !1451

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1451
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1451

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1452
  %add50 = add i64 %37, 1, !dbg !1452
  store i64 %add50, ptr %index, align 8, !dbg !1452
  %38 = load i64, ptr %index, align 8, !dbg !1454
  %39 = load i64, ptr %len, align 8, !dbg !1455
  %eq51 = icmp eq i64 %38, %39, !dbg !1454
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1454

if.then52:                                        ; preds = %if.then49
  store i16 0, ptr %blockret, align 2, !dbg !1456
  br label %expr_block.exit156, !dbg !1456

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1457
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1457
  %41 = load ptr, ptr %string, align 8, !dbg !1457
  %42 = load i64, ptr %index, align 8, !dbg !1459
  %ge55 = icmp uge i64 %42, %40, !dbg !1459
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1459
  br i1 %43, label %panic56, label %checkok66, !dbg !1459

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1459
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 16, ptr %base_used, align 2, !dbg !1460
  %46 = load i64, ptr %index, align 8, !dbg !1462
  %add71 = add i64 %46, 1, !dbg !1462
  store i64 %add71, ptr %index, align 8, !dbg !1462
  br label %switch.exit77, !dbg !1462

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 2, ptr %base_used, align 2, !dbg !1463
  %47 = load i64, ptr %index, align 8, !dbg !1465
  %add73 = add i64 %47, 1, !dbg !1465
  store i64 %add73, ptr %index, align 8, !dbg !1465
  br label %switch.exit77, !dbg !1465

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 8, ptr %base_used, align 2, !dbg !1466
  %48 = load i64, ptr %index, align 8, !dbg !1468
  %add75 = add i64 %48, 1, !dbg !1468
  store i64 %add75, ptr %index, align 8, !dbg !1468
  br label %switch.exit77, !dbg !1468

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1469

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1471
  %50 = load i64, ptr %index, align 8, !dbg !1472
  %eq78 = icmp eq i64 %49, %50, !dbg !1471
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1471

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1473
  br label %err_retblock, !dbg !1473

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1473

if.exit81:                                        ; preds = %if.exit80, %and.phi47
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1474, metadata !DIExpression()), !dbg !1475
  store i16 0, ptr %value, align 2, !dbg !1476
  br label %loop.cond82, !dbg !1477

loop.cond82:                                      ; preds = %noerr_block154, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1478
  %52 = load i64, ptr %len, align 8, !dbg !1480
  %neq = icmp ne i64 %51, %52, !dbg !1478
  br i1 %neq, label %loop.body83, label %loop.exit155, !dbg !1478

loop.body83:                                      ; preds = %loop.cond82
  call void @llvm.dbg.declare(metadata ptr %c84, metadata !1481, metadata !DIExpression()), !dbg !1483
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1484, metadata !DIExpression()), !dbg !1486
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1487
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1487
  %54 = load ptr, ptr %string, align 8, !dbg !1487
  %55 = load i64, ptr %index, align 8, !dbg !1488
  %add87 = add i64 %55, 1, !dbg !1488
  store i64 %add87, ptr %index, align 8, !dbg !1488
  %ge88 = icmp uge i64 %55, %53, !dbg !1488
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1488
  br i1 %56, label %panic89, label %checkok99, !dbg !1488

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1488
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1488
  store i8 %57, ptr %ch, align 1, !dbg !1488
  %58 = load i16, ptr %base_used, align 2, !dbg !1489
  %sext = sext i16 %58 to i32, !dbg !1489
  %neq101 = icmp ne i32 %sext, 16, !dbg !1489
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1489

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1490
  %lt103 = icmp ult i8 %59, 65, !dbg !1490
  br label %or.phi104, !dbg !1490

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1490
  br i1 %val105, label %if.then106, label %if.exit108, !dbg !1490

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1491
  %zext = zext i8 %60 to i32, !dbg !1491
  %sub = sub i32 %zext, 48, !dbg !1492
  %trunc107 = trunc i32 %sub to i8, !dbg !1492
  store i8 %trunc107, ptr %blockret85, align 1, !dbg !1492
  br label %expr_block.exit, !dbg !1492

if.exit108:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1493
  %le109 = icmp ule i8 %61, 70, !dbg !1493
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1493

if.then110:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1494
  %zext111 = zext i8 %62 to i32, !dbg !1494
  %sub112 = sub i32 %zext111, 65, !dbg !1494
  %add113 = add i32 %sub112, 10, !dbg !1495
  %trunc114 = trunc i32 %add113 to i8, !dbg !1495
  store i8 %trunc114, ptr %blockret85, align 1, !dbg !1495
  br label %expr_block.exit, !dbg !1495

if.exit115:                                       ; preds = %if.exit108
  %63 = load i8, ptr %ch, align 1, !dbg !1496
  %lt116 = icmp ult i8 %63, 97, !dbg !1496
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1496

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1497
  br label %guard_block, !dbg !1497

if.exit118:                                       ; preds = %if.exit115
  %64 = load i8, ptr %ch, align 1, !dbg !1498
  %gt119 = icmp ugt i8 %64, 102, !dbg !1498
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1498

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1499
  br label %guard_block, !dbg !1499

if.exit121:                                       ; preds = %if.exit118
  %65 = load i8, ptr %ch, align 1, !dbg !1500
  %zext122 = zext i8 %65 to i32, !dbg !1500
  %sub123 = sub i32 %zext122, 97, !dbg !1500
  %add124 = add i32 %sub123, 10, !dbg !1501
  %trunc125 = trunc i32 %add124 to i8, !dbg !1501
  store i8 %trunc125, ptr %blockret85, align 1, !dbg !1501
  br label %expr_block.exit, !dbg !1501

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then106
  br label %noerr_block, !dbg !1501

guard_block:                                      ; preds = %if.then120, %if.then117
  %66 = load i64, ptr %error_var, align 8, !dbg !1501
  store i64 %66, ptr %reterr, align 8, !dbg !1501
  br label %err_retblock, !dbg !1501

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1501
  store i8 %67, ptr %c84, align 1, !dbg !1501
  %68 = load i8, ptr %c84, align 1, !dbg !1502
  %zext126 = zext i8 %68 to i16, !dbg !1502
  %69 = load i16, ptr %base_used, align 2, !dbg !1503
  %le127 = icmp sle i16 %69, %zext126, !dbg !1502
  %check = icmp slt i16 %zext126, 0, !dbg !1502
  %siui-le = or i1 %check, %le127, !dbg !1502
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1502

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1504
  br label %err_retblock, !dbg !1504

if.exit129:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1505
  %71 = trunc i8 %70 to i1, !dbg !1505
  br i1 %71, label %if.then132, label %if.exit141, !dbg !1505

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1507, metadata !DIExpression()), !dbg !1509
  %72 = load i16, ptr %value, align 2, !dbg !1510
  %sext133 = sext i16 %72 to i32, !dbg !1510
  %73 = load i16, ptr %base_used, align 2, !dbg !1511
  %sext134 = sext i16 %73 to i32, !dbg !1511
  %mul = mul i32 %sext133, %sext134, !dbg !1510
  %74 = load i8, ptr %c84, align 1, !dbg !1512
  %zext135 = zext i8 %74 to i32, !dbg !1512
  %sub136 = sub i32 %mul, %zext135, !dbg !1510
  %trunc137 = trunc i32 %sub136 to i16, !dbg !1510
  store i16 %trunc137, ptr %new_value, align 2, !dbg !1510
  %75 = load i16, ptr %new_value, align 2, !dbg !1513
  %76 = load i16, ptr %value, align 2, !dbg !1514
  %gt138 = icmp sgt i16 %75, %76, !dbg !1513
  br i1 %gt138, label %if.then139, label %if.exit140, !dbg !1513

if.then139:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1515
  br label %guard_block153, !dbg !1515

if.exit140:                                       ; preds = %if.then132
  %77 = load i16, ptr %new_value, align 2, !dbg !1516
  store i16 %77, ptr %blockret131, align 2, !dbg !1516
  br label %expr_block.exit152, !dbg !1516

if.exit141:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value142, metadata !1517, metadata !DIExpression()), !dbg !1518
  %78 = load i16, ptr %value, align 2, !dbg !1519
  %sext143 = sext i16 %78 to i32, !dbg !1519
  %79 = load i16, ptr %base_used, align 2, !dbg !1520
  %sext144 = sext i16 %79 to i32, !dbg !1520
  %mul145 = mul i32 %sext143, %sext144, !dbg !1519
  %80 = load i8, ptr %c84, align 1, !dbg !1521
  %zext146 = zext i8 %80 to i32, !dbg !1521
  %add147 = add i32 %mul145, %zext146, !dbg !1519
  %trunc148 = trunc i32 %add147 to i16, !dbg !1519
  store i16 %trunc148, ptr %new_value142, align 2, !dbg !1519
  %81 = load i16, ptr %new_value142, align 2, !dbg !1522
  %82 = load i16, ptr %value, align 2, !dbg !1523
  %lt149 = icmp slt i16 %81, %82, !dbg !1522
  br i1 %lt149, label %if.then150, label %if.exit151, !dbg !1522

if.then150:                                       ; preds = %if.exit141
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1524
  br label %guard_block153, !dbg !1524

if.exit151:                                       ; preds = %if.exit141
  %83 = load i16, ptr %new_value142, align 2, !dbg !1525
  store i16 %83, ptr %blockret131, align 2, !dbg !1525
  br label %expr_block.exit152, !dbg !1525

expr_block.exit152:                               ; preds = %if.exit151, %if.exit140
  br label %noerr_block154, !dbg !1525

guard_block153:                                   ; preds = %if.then150, %if.then139
  %84 = load i64, ptr %error_var130, align 8, !dbg !1525
  store i64 %84, ptr %reterr, align 8, !dbg !1525
  br label %err_retblock, !dbg !1525

noerr_block154:                                   ; preds = %expr_block.exit152
  %85 = load i16, ptr %blockret131, align 2, !dbg !1525
  store i16 %85, ptr %value, align 2, !dbg !1525
  br label %loop.cond82, !dbg !1525

loop.exit155:                                     ; preds = %loop.cond82
  %86 = load i16, ptr %value, align 2, !dbg !1526
  store i16 %86, ptr %blockret, align 2, !dbg !1526
  br label %expr_block.exit156, !dbg !1526

expr_block.exit156:                               ; preds = %loop.exit155, %if.then52
  %87 = load i16, ptr %blockret, align 2, !dbg !1526
  store i16 %87, ptr %0, align 2, !dbg !1526
  ret i64 0, !dbg !1526

err_retblock:                                     ; preds = %guard_block153, %if.then128, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1526
  ret i64 %88, !dbg !1526

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1434
  unreachable, !dbg !1434

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 654, ptr align 8 %indirectarg41), !dbg !1450
  unreachable, !dbg !1450

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 658, ptr align 8 %indirectarg65), !dbg !1459
  unreachable, !dbg !1459

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 681, ptr align 8 %indirectarg98), !dbg !1488
  unreachable, !dbg !1488
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ichar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1527 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i8, align 1
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value141 = alloca i8, align 1
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1532, metadata !DIExpression()), !dbg !1533
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1534, metadata !DIExpression()), !dbg !1535
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1536
  %le = icmp sle i32 %4, 10, !dbg !1536
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1536

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1540
  %gt = icmp sgt i32 %5, 1, !dbg !1540
  br label %and.phi, !dbg !1540

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1540
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1540

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1541
  %eq = icmp eq i32 %6, 16, !dbg !1541
  br label %or.phi, !dbg !1541

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1541
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1541

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.67, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1536
  unreachable, !dbg !1536

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1542, metadata !DIExpression()), !dbg !1543
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1544
  %8 = load i64, ptr %ptradd, align 8, !dbg !1544
  store i64 %8, ptr %len, align 8, !dbg !1544
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1545, metadata !DIExpression()), !dbg !1546
  store i64 0, ptr %index, align 8, !dbg !1547
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1548, metadata !DIExpression()), !dbg !1549
  %9 = load ptr, ptr %string, align 8, !dbg !1550
  store ptr %9, ptr %ptr, align 8, !dbg !1550
  br label %loop.cond, !dbg !1551

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1552
  %11 = load i64, ptr %len, align 8, !dbg !1554
  %lt = icmp ult i64 %10, %11, !dbg !1552
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1552

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1555
  %13 = load i64, ptr %index, align 8, !dbg !1556
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1556
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1557
  %eq7 = icmp eq i8 %15, 32, !dbg !1557
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1557

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1560
  %eq9 = icmp eq i8 %16, 9, !dbg !1560
  br label %or.phi10, !dbg !1560

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1560
  br label %and.phi12, !dbg !1560

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1560
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1560

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1561
  %add = add i64 %17, 1, !dbg !1561
  store i64 %add, ptr %index, align 8, !dbg !1561
  br label %loop.cond, !dbg !1561

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1562
  %19 = load i64, ptr %index, align 8, !dbg !1563
  %eq14 = icmp eq i64 %18, %19, !dbg !1562
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1562

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1564
  br label %err_retblock, !dbg !1564

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1565, metadata !DIExpression()), !dbg !1566
  store i8 0, ptr %is_negative, align 1, !dbg !1566
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1567
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1567
  %21 = load ptr, ptr %string, align 8, !dbg !1567
  %22 = load i64, ptr %index, align 8, !dbg !1569
  %ge = icmp uge i64 %22, %20, !dbg !1569
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1569
  br i1 %23, label %panic, label %checkok, !dbg !1569

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1569
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1570

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1572
  %26 = load i64, ptr %index, align 8, !dbg !1573
  %add24 = add i64 %26, 1, !dbg !1573
  store i64 %add24, ptr %index, align 8, !dbg !1573
  br label %switch.exit, !dbg !1573

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1574
  %add26 = add i64 %27, 1, !dbg !1574
  store i64 %add26, ptr %index, align 8, !dbg !1574
  br label %switch.exit, !dbg !1574

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1576

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1578
  %29 = load i64, ptr %index, align 8, !dbg !1579
  %eq27 = icmp eq i64 %28, %29, !dbg !1578
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1578

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1580
  br label %err_retblock, !dbg !1580

if.exit29:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1581, metadata !DIExpression()), !dbg !1582
  %30 = load i32, ptr %base1, align 4, !dbg !1583
  %trunc = trunc i32 %30 to i8, !dbg !1583
  store i8 %trunc, ptr %base_used, align 1, !dbg !1583
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1584
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1584
  %32 = load ptr, ptr %string, align 8, !dbg !1584
  %33 = load i64, ptr %index, align 8, !dbg !1585
  %ge31 = icmp uge i64 %33, %31, !dbg !1585
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1585
  br i1 %34, label %panic32, label %checkok42, !dbg !1585

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1585
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1585
  %eq44 = icmp eq i8 %35, 48, !dbg !1584
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1584

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1586
  %eq46 = icmp eq i32 %36, 10, !dbg !1586
  br label %and.phi47, !dbg !1586

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1586
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1586

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1587
  %add50 = add i64 %37, 1, !dbg !1587
  store i64 %add50, ptr %index, align 8, !dbg !1587
  %38 = load i64, ptr %index, align 8, !dbg !1589
  %39 = load i64, ptr %len, align 8, !dbg !1590
  %eq51 = icmp eq i64 %38, %39, !dbg !1589
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1589

if.then52:                                        ; preds = %if.then49
  store i8 0, ptr %blockret, align 1, !dbg !1591
  br label %expr_block.exit155, !dbg !1591

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1592
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1592
  %41 = load ptr, ptr %string, align 8, !dbg !1592
  %42 = load i64, ptr %index, align 8, !dbg !1594
  %ge55 = icmp uge i64 %42, %40, !dbg !1594
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1594
  br i1 %43, label %panic56, label %checkok66, !dbg !1594

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1594
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 16, ptr %base_used, align 1, !dbg !1595
  %46 = load i64, ptr %index, align 8, !dbg !1597
  %add71 = add i64 %46, 1, !dbg !1597
  store i64 %add71, ptr %index, align 8, !dbg !1597
  br label %switch.exit77, !dbg !1597

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 2, ptr %base_used, align 1, !dbg !1598
  %47 = load i64, ptr %index, align 8, !dbg !1600
  %add73 = add i64 %47, 1, !dbg !1600
  store i64 %add73, ptr %index, align 8, !dbg !1600
  br label %switch.exit77, !dbg !1600

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 8, ptr %base_used, align 1, !dbg !1601
  %48 = load i64, ptr %index, align 8, !dbg !1603
  %add75 = add i64 %48, 1, !dbg !1603
  store i64 %add75, ptr %index, align 8, !dbg !1603
  br label %switch.exit77, !dbg !1603

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1604

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1606
  %50 = load i64, ptr %index, align 8, !dbg !1607
  %eq78 = icmp eq i64 %49, %50, !dbg !1606
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1606

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1608
  br label %err_retblock, !dbg !1608

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1608

if.exit81:                                        ; preds = %if.exit80, %and.phi47
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1609, metadata !DIExpression()), !dbg !1610
  store i8 0, ptr %value, align 1, !dbg !1611
  br label %loop.cond82, !dbg !1612

loop.cond82:                                      ; preds = %noerr_block153, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1613
  %52 = load i64, ptr %len, align 8, !dbg !1615
  %neq = icmp ne i64 %51, %52, !dbg !1613
  br i1 %neq, label %loop.body83, label %loop.exit154, !dbg !1613

loop.body83:                                      ; preds = %loop.cond82
  call void @llvm.dbg.declare(metadata ptr %c84, metadata !1616, metadata !DIExpression()), !dbg !1618
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1619, metadata !DIExpression()), !dbg !1621
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1622
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1622
  %54 = load ptr, ptr %string, align 8, !dbg !1622
  %55 = load i64, ptr %index, align 8, !dbg !1623
  %add87 = add i64 %55, 1, !dbg !1623
  store i64 %add87, ptr %index, align 8, !dbg !1623
  %ge88 = icmp uge i64 %55, %53, !dbg !1623
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1623
  br i1 %56, label %panic89, label %checkok99, !dbg !1623

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1623
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1623
  store i8 %57, ptr %ch, align 1, !dbg !1623
  %58 = load i8, ptr %base_used, align 1, !dbg !1624
  %sext = sext i8 %58 to i32, !dbg !1624
  %neq101 = icmp ne i32 %sext, 16, !dbg !1624
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1624

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1625
  %lt103 = icmp ult i8 %59, 65, !dbg !1625
  br label %or.phi104, !dbg !1625

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1625
  br i1 %val105, label %if.then106, label %if.exit108, !dbg !1625

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1626
  %zext = zext i8 %60 to i32, !dbg !1626
  %sub = sub i32 %zext, 48, !dbg !1627
  %trunc107 = trunc i32 %sub to i8, !dbg !1627
  store i8 %trunc107, ptr %blockret85, align 1, !dbg !1627
  br label %expr_block.exit, !dbg !1627

if.exit108:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1628
  %le109 = icmp ule i8 %61, 70, !dbg !1628
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1628

if.then110:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1629
  %zext111 = zext i8 %62 to i32, !dbg !1629
  %sub112 = sub i32 %zext111, 65, !dbg !1629
  %add113 = add i32 %sub112, 10, !dbg !1630
  %trunc114 = trunc i32 %add113 to i8, !dbg !1630
  store i8 %trunc114, ptr %blockret85, align 1, !dbg !1630
  br label %expr_block.exit, !dbg !1630

if.exit115:                                       ; preds = %if.exit108
  %63 = load i8, ptr %ch, align 1, !dbg !1631
  %lt116 = icmp ult i8 %63, 97, !dbg !1631
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1631

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1632
  br label %guard_block, !dbg !1632

if.exit118:                                       ; preds = %if.exit115
  %64 = load i8, ptr %ch, align 1, !dbg !1633
  %gt119 = icmp ugt i8 %64, 102, !dbg !1633
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1633

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1634
  br label %guard_block, !dbg !1634

if.exit121:                                       ; preds = %if.exit118
  %65 = load i8, ptr %ch, align 1, !dbg !1635
  %zext122 = zext i8 %65 to i32, !dbg !1635
  %sub123 = sub i32 %zext122, 97, !dbg !1635
  %add124 = add i32 %sub123, 10, !dbg !1636
  %trunc125 = trunc i32 %add124 to i8, !dbg !1636
  store i8 %trunc125, ptr %blockret85, align 1, !dbg !1636
  br label %expr_block.exit, !dbg !1636

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then106
  br label %noerr_block, !dbg !1636

guard_block:                                      ; preds = %if.then120, %if.then117
  %66 = load i64, ptr %error_var, align 8, !dbg !1636
  store i64 %66, ptr %reterr, align 8, !dbg !1636
  br label %err_retblock, !dbg !1636

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1636
  store i8 %67, ptr %c84, align 1, !dbg !1636
  %68 = load i8, ptr %c84, align 1, !dbg !1637
  %69 = load i8, ptr %base_used, align 1, !dbg !1638
  %le126 = icmp sle i8 %69, %68, !dbg !1637
  %check = icmp slt i8 %68, 0, !dbg !1637
  %siui-le = or i1 %check, %le126, !dbg !1637
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !1637

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1639
  br label %err_retblock, !dbg !1639

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1640
  %71 = trunc i8 %70 to i1, !dbg !1640
  br i1 %71, label %if.then131, label %if.exit140, !dbg !1640

if.then131:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1642, metadata !DIExpression()), !dbg !1644
  %72 = load i8, ptr %value, align 1, !dbg !1645
  %sext132 = sext i8 %72 to i32, !dbg !1645
  %73 = load i8, ptr %base_used, align 1, !dbg !1646
  %sext133 = sext i8 %73 to i32, !dbg !1646
  %mul = mul i32 %sext132, %sext133, !dbg !1645
  %74 = load i8, ptr %c84, align 1, !dbg !1647
  %zext134 = zext i8 %74 to i32, !dbg !1647
  %sub135 = sub i32 %mul, %zext134, !dbg !1645
  %trunc136 = trunc i32 %sub135 to i8, !dbg !1645
  store i8 %trunc136, ptr %new_value, align 1, !dbg !1645
  %75 = load i8, ptr %new_value, align 1, !dbg !1648
  %76 = load i8, ptr %value, align 1, !dbg !1649
  %gt137 = icmp sgt i8 %75, %76, !dbg !1648
  br i1 %gt137, label %if.then138, label %if.exit139, !dbg !1648

if.then138:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1650
  br label %guard_block152, !dbg !1650

if.exit139:                                       ; preds = %if.then131
  %77 = load i8, ptr %new_value, align 1, !dbg !1651
  store i8 %77, ptr %blockret130, align 1, !dbg !1651
  br label %expr_block.exit151, !dbg !1651

if.exit140:                                       ; preds = %if.exit128
  call void @llvm.dbg.declare(metadata ptr %new_value141, metadata !1652, metadata !DIExpression()), !dbg !1653
  %78 = load i8, ptr %value, align 1, !dbg !1654
  %sext142 = sext i8 %78 to i32, !dbg !1654
  %79 = load i8, ptr %base_used, align 1, !dbg !1655
  %sext143 = sext i8 %79 to i32, !dbg !1655
  %mul144 = mul i32 %sext142, %sext143, !dbg !1654
  %80 = load i8, ptr %c84, align 1, !dbg !1656
  %zext145 = zext i8 %80 to i32, !dbg !1656
  %add146 = add i32 %mul144, %zext145, !dbg !1654
  %trunc147 = trunc i32 %add146 to i8, !dbg !1654
  store i8 %trunc147, ptr %new_value141, align 1, !dbg !1654
  %81 = load i8, ptr %new_value141, align 1, !dbg !1657
  %82 = load i8, ptr %value, align 1, !dbg !1658
  %lt148 = icmp slt i8 %81, %82, !dbg !1657
  br i1 %lt148, label %if.then149, label %if.exit150, !dbg !1657

if.then149:                                       ; preds = %if.exit140
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1659
  br label %guard_block152, !dbg !1659

if.exit150:                                       ; preds = %if.exit140
  %83 = load i8, ptr %new_value141, align 1, !dbg !1660
  store i8 %83, ptr %blockret130, align 1, !dbg !1660
  br label %expr_block.exit151, !dbg !1660

expr_block.exit151:                               ; preds = %if.exit150, %if.exit139
  br label %noerr_block153, !dbg !1660

guard_block152:                                   ; preds = %if.then149, %if.then138
  %84 = load i64, ptr %error_var129, align 8, !dbg !1660
  store i64 %84, ptr %reterr, align 8, !dbg !1660
  br label %err_retblock, !dbg !1660

noerr_block153:                                   ; preds = %expr_block.exit151
  %85 = load i8, ptr %blockret130, align 1, !dbg !1660
  store i8 %85, ptr %value, align 1, !dbg !1660
  br label %loop.cond82, !dbg !1660

loop.exit154:                                     ; preds = %loop.cond82
  %86 = load i8, ptr %value, align 1, !dbg !1661
  store i8 %86, ptr %blockret, align 1, !dbg !1661
  br label %expr_block.exit155, !dbg !1661

expr_block.exit155:                               ; preds = %loop.exit154, %if.then52
  %87 = load i8, ptr %blockret, align 1, !dbg !1661
  store i8 %87, ptr %0, align 1, !dbg !1661
  ret i64 0, !dbg !1661

err_retblock:                                     ; preds = %guard_block152, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1661
  ret i64 %88, !dbg !1661

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.67, i64 8 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1569
  unreachable, !dbg !1569

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.67, i64 8 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 654, ptr align 8 %indirectarg41), !dbg !1585
  unreachable, !dbg !1585

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.67, i64 8 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 658, ptr align 8 %indirectarg65), !dbg !1594
  unreachable, !dbg !1594

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.67, i64 8 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 681, ptr align 8 %indirectarg98), !dbg !1623
  unreachable, !dbg !1623
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1662 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i128, align 16
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value139 = alloca i128, align 16
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1667, metadata !DIExpression()), !dbg !1668
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1669, metadata !DIExpression()), !dbg !1670
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1671
  %le = icmp sle i32 %4, 10, !dbg !1671
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1671

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1675
  %gt = icmp sgt i32 %5, 1, !dbg !1675
  br label %and.phi, !dbg !1675

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1675
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1675

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1676
  %eq = icmp eq i32 %6, 16, !dbg !1676
  br label %or.phi, !dbg !1676

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1676
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1676

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.68, i64 10 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1671
  unreachable, !dbg !1671

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1677, metadata !DIExpression()), !dbg !1678
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1679
  %8 = load i64, ptr %ptradd, align 8, !dbg !1679
  store i64 %8, ptr %len, align 8, !dbg !1679
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1680, metadata !DIExpression()), !dbg !1681
  store i64 0, ptr %index, align 8, !dbg !1682
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1683, metadata !DIExpression()), !dbg !1684
  %9 = load ptr, ptr %string, align 8, !dbg !1685
  store ptr %9, ptr %ptr, align 8, !dbg !1685
  br label %loop.cond, !dbg !1686

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1687
  %11 = load i64, ptr %len, align 8, !dbg !1689
  %lt = icmp ult i64 %10, %11, !dbg !1687
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1687

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1690
  %13 = load i64, ptr %index, align 8, !dbg !1691
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1691
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1692
  %eq7 = icmp eq i8 %15, 32, !dbg !1692
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1692

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1695
  %eq9 = icmp eq i8 %16, 9, !dbg !1695
  br label %or.phi10, !dbg !1695

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1695
  br label %and.phi12, !dbg !1695

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1695
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1695

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1696
  %add = add i64 %17, 1, !dbg !1696
  store i64 %add, ptr %index, align 8, !dbg !1696
  br label %loop.cond, !dbg !1696

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1697
  %19 = load i64, ptr %index, align 8, !dbg !1698
  %eq14 = icmp eq i64 %18, %19, !dbg !1697
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1697

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1699
  br label %err_retblock, !dbg !1699

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1700, metadata !DIExpression()), !dbg !1701
  store i8 0, ptr %is_negative, align 1, !dbg !1701
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1702
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1702
  %21 = load ptr, ptr %string, align 8, !dbg !1702
  %22 = load i64, ptr %index, align 8, !dbg !1704
  %ge = icmp uge i64 %22, %20, !dbg !1704
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1704
  br i1 %23, label %panic, label %checkok, !dbg !1704

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1704
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1705

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1707
  br label %err_retblock, !dbg !1707

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1708
  %add27 = add i64 %26, 1, !dbg !1708
  store i64 %add27, ptr %index, align 8, !dbg !1708
  br label %switch.exit, !dbg !1708

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1710

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1712
  %28 = load i64, ptr %index, align 8, !dbg !1713
  %eq28 = icmp eq i64 %27, %28, !dbg !1712
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1712

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1714
  br label %err_retblock, !dbg !1714

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1715, metadata !DIExpression()), !dbg !1716
  %29 = load i32, ptr %base1, align 4, !dbg !1717
  %sext = sext i32 %29 to i128, !dbg !1717
  store i128 %sext, ptr %base_used, align 16, !dbg !1717
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1718
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1718
  %31 = load ptr, ptr %string, align 8, !dbg !1718
  %32 = load i64, ptr %index, align 8, !dbg !1719
  %ge32 = icmp uge i64 %32, %30, !dbg !1719
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1719
  br i1 %33, label %panic33, label %checkok43, !dbg !1719

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1719
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1719
  %eq45 = icmp eq i8 %34, 48, !dbg !1718
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1718

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1720
  %eq47 = icmp eq i32 %35, 10, !dbg !1720
  br label %and.phi48, !dbg !1720

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1720
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1720

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1721
  %add51 = add i64 %36, 1, !dbg !1721
  store i64 %add51, ptr %index, align 8, !dbg !1721
  %37 = load i64, ptr %index, align 8, !dbg !1723
  %38 = load i64, ptr %len, align 8, !dbg !1724
  %eq52 = icmp eq i64 %37, %38, !dbg !1723
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1723

if.then53:                                        ; preds = %if.then50
  store i128 0, ptr %blockret, align 16, !dbg !1725
  br label %expr_block.exit150, !dbg !1725

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1726
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1726
  %40 = load ptr, ptr %string, align 8, !dbg !1726
  %41 = load i64, ptr %index, align 8, !dbg !1728
  %ge56 = icmp uge i64 %41, %39, !dbg !1728
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1728
  br i1 %42, label %panic57, label %checkok67, !dbg !1728

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1728
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 16, ptr %base_used, align 16, !dbg !1729
  %45 = load i64, ptr %index, align 8, !dbg !1731
  %add72 = add i64 %45, 1, !dbg !1731
  store i64 %add72, ptr %index, align 8, !dbg !1731
  br label %switch.exit78, !dbg !1731

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 2, ptr %base_used, align 16, !dbg !1732
  %46 = load i64, ptr %index, align 8, !dbg !1734
  %add74 = add i64 %46, 1, !dbg !1734
  store i64 %add74, ptr %index, align 8, !dbg !1734
  br label %switch.exit78, !dbg !1734

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 8, ptr %base_used, align 16, !dbg !1735
  %47 = load i64, ptr %index, align 8, !dbg !1737
  %add76 = add i64 %47, 1, !dbg !1737
  store i64 %add76, ptr %index, align 8, !dbg !1737
  br label %switch.exit78, !dbg !1737

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1738

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1740
  %49 = load i64, ptr %index, align 8, !dbg !1741
  %eq79 = icmp eq i64 %48, %49, !dbg !1740
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1740

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1742
  br label %err_retblock, !dbg !1742

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1742

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1743, metadata !DIExpression()), !dbg !1744
  store i128 0, ptr %value, align 16, !dbg !1745
  br label %loop.cond83, !dbg !1746

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1747
  %51 = load i64, ptr %len, align 8, !dbg !1749
  %neq = icmp ne i64 %50, %51, !dbg !1747
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1747

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1750, metadata !DIExpression()), !dbg !1752
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1753, metadata !DIExpression()), !dbg !1755
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1756
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1756
  %53 = load ptr, ptr %string, align 8, !dbg !1756
  %54 = load i64, ptr %index, align 8, !dbg !1757
  %add88 = add i64 %54, 1, !dbg !1757
  store i64 %add88, ptr %index, align 8, !dbg !1757
  %ge89 = icmp uge i64 %54, %52, !dbg !1757
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1757
  br i1 %55, label %panic90, label %checkok100, !dbg !1757

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1757
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1757
  store i8 %56, ptr %ch, align 1, !dbg !1757
  %57 = load i128, ptr %base_used, align 16, !dbg !1758
  %neq102 = icmp ne i128 16, %57, !dbg !1758
  %siui-ne = or i1 false, %neq102, !dbg !1758
  br i1 %siui-ne, label %or.phi105, label %or.rhs103, !dbg !1758

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1759
  %lt104 = icmp ult i8 %58, 65, !dbg !1759
  br label %or.phi105, !dbg !1759

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1759
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1759

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1760
  %zext = zext i8 %59 to i32, !dbg !1760
  %sub = sub i32 %zext, 48, !dbg !1761
  %trunc = trunc i32 %sub to i8, !dbg !1761
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1761
  br label %expr_block.exit, !dbg !1761

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1762
  %le109 = icmp ule i8 %60, 70, !dbg !1762
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1762

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !1763
  %zext111 = zext i8 %61 to i32, !dbg !1763
  %sub112 = sub i32 %zext111, 65, !dbg !1763
  %add113 = add i32 %sub112, 10, !dbg !1764
  %trunc114 = trunc i32 %add113 to i8, !dbg !1764
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1764
  br label %expr_block.exit, !dbg !1764

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1765
  %lt116 = icmp ult i8 %62, 97, !dbg !1765
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1765

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1766
  br label %guard_block, !dbg !1766

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !1767
  %gt119 = icmp ugt i8 %63, 102, !dbg !1767
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1767

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1768
  br label %guard_block, !dbg !1768

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !1769
  %zext122 = zext i8 %64 to i32, !dbg !1769
  %sub123 = sub i32 %zext122, 97, !dbg !1769
  %add124 = add i32 %sub123, 10, !dbg !1770
  %trunc125 = trunc i32 %add124 to i8, !dbg !1770
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1770
  br label %expr_block.exit, !dbg !1770

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1770

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !1770
  store i64 %65, ptr %reterr, align 8, !dbg !1770
  br label %err_retblock, !dbg !1770

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1770
  store i8 %66, ptr %c85, align 1, !dbg !1770
  %67 = load i8, ptr %c85, align 1, !dbg !1771
  %zext126 = zext i8 %67 to i128, !dbg !1771
  %68 = load i128, ptr %base_used, align 16, !dbg !1772
  %ge127 = icmp uge i128 %zext126, %68, !dbg !1771
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !1771

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1773
  br label %err_retblock, !dbg !1773

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1774
  %70 = trunc i8 %69 to i1, !dbg !1774
  br i1 %70, label %if.then132, label %if.exit138, !dbg !1774

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1776, metadata !DIExpression()), !dbg !1778
  %71 = load i128, ptr %value, align 16, !dbg !1779
  %72 = load i128, ptr %base_used, align 16, !dbg !1780
  %mul = mul i128 %71, %72, !dbg !1779
  %73 = load i8, ptr %c85, align 1, !dbg !1781
  %zext133 = zext i8 %73 to i128, !dbg !1781
  %sub134 = sub i128 %mul, %zext133, !dbg !1779
  store i128 %sub134, ptr %new_value, align 16, !dbg !1779
  %74 = load i128, ptr %new_value, align 16, !dbg !1782
  %75 = load i128, ptr %value, align 16, !dbg !1783
  %gt135 = icmp ugt i128 %74, %75, !dbg !1782
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1782

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1784
  br label %guard_block147, !dbg !1784

if.exit137:                                       ; preds = %if.then132
  %76 = load i128, ptr %new_value, align 16, !dbg !1785
  store i128 %76, ptr %blockret131, align 16, !dbg !1785
  br label %expr_block.exit146, !dbg !1785

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !1786, metadata !DIExpression()), !dbg !1787
  %77 = load i128, ptr %value, align 16, !dbg !1788
  %78 = load i128, ptr %base_used, align 16, !dbg !1789
  %mul140 = mul i128 %77, %78, !dbg !1788
  %79 = load i8, ptr %c85, align 1, !dbg !1790
  %zext141 = zext i8 %79 to i128, !dbg !1790
  %add142 = add i128 %mul140, %zext141, !dbg !1788
  store i128 %add142, ptr %new_value139, align 16, !dbg !1788
  %80 = load i128, ptr %new_value139, align 16, !dbg !1791
  %81 = load i128, ptr %value, align 16, !dbg !1792
  %lt143 = icmp ult i128 %80, %81, !dbg !1791
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1791

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1793
  br label %guard_block147, !dbg !1793

if.exit145:                                       ; preds = %if.exit138
  %82 = load i128, ptr %new_value139, align 16, !dbg !1794
  store i128 %82, ptr %blockret131, align 16, !dbg !1794
  br label %expr_block.exit146, !dbg !1794

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1794

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !1794
  store i64 %83, ptr %reterr, align 8, !dbg !1794
  br label %err_retblock, !dbg !1794

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i128, ptr %blockret131, align 16, !dbg !1794
  store i128 %84, ptr %value, align 16, !dbg !1794
  br label %loop.cond83, !dbg !1794

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i128, ptr %value, align 16, !dbg !1795
  store i128 %85, ptr %blockret, align 16, !dbg !1795
  br label %expr_block.exit150, !dbg !1795

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i128, ptr %blockret, align 16, !dbg !1795
  store i128 %86, ptr %0, align 16, !dbg !1795
  ret i64 0, !dbg !1795

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1795
  ret i64 %87, !dbg !1795

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.68, i64 10 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1704
  unreachable, !dbg !1704

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.68, i64 10 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 654, ptr align 8 %indirectarg42), !dbg !1719
  unreachable, !dbg !1719

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.68, i64 10 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 658, ptr align 8 %indirectarg66), !dbg !1728
  unreachable, !dbg !1728

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.68, i64 10 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 681, ptr align 8 %indirectarg99), !dbg !1757
  unreachable, !dbg !1757
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ulong(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1796 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i64, align 8
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value139 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1800, metadata !DIExpression()), !dbg !1801
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1802, metadata !DIExpression()), !dbg !1803
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1804
  %le = icmp sle i32 %4, 10, !dbg !1804
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1804

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1808
  %gt = icmp sgt i32 %5, 1, !dbg !1808
  br label %and.phi, !dbg !1808

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1808
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1808

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1809
  %eq = icmp eq i32 %6, 16, !dbg !1809
  br label %or.phi, !dbg !1809

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1809
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1809

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1804
  unreachable, !dbg !1804

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1810, metadata !DIExpression()), !dbg !1811
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1812
  %8 = load i64, ptr %ptradd, align 8, !dbg !1812
  store i64 %8, ptr %len, align 8, !dbg !1812
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1813, metadata !DIExpression()), !dbg !1814
  store i64 0, ptr %index, align 8, !dbg !1815
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1816, metadata !DIExpression()), !dbg !1817
  %9 = load ptr, ptr %string, align 8, !dbg !1818
  store ptr %9, ptr %ptr, align 8, !dbg !1818
  br label %loop.cond, !dbg !1819

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1820
  %11 = load i64, ptr %len, align 8, !dbg !1822
  %lt = icmp ult i64 %10, %11, !dbg !1820
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1820

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1823
  %13 = load i64, ptr %index, align 8, !dbg !1824
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1824
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1825
  %eq7 = icmp eq i8 %15, 32, !dbg !1825
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1825

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1828
  %eq9 = icmp eq i8 %16, 9, !dbg !1828
  br label %or.phi10, !dbg !1828

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1828
  br label %and.phi12, !dbg !1828

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1828
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1828

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1829
  %add = add i64 %17, 1, !dbg !1829
  store i64 %add, ptr %index, align 8, !dbg !1829
  br label %loop.cond, !dbg !1829

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1830
  %19 = load i64, ptr %index, align 8, !dbg !1831
  %eq14 = icmp eq i64 %18, %19, !dbg !1830
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1830

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1832
  br label %err_retblock, !dbg !1832

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1833, metadata !DIExpression()), !dbg !1834
  store i8 0, ptr %is_negative, align 1, !dbg !1834
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1835
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1835
  %21 = load ptr, ptr %string, align 8, !dbg !1835
  %22 = load i64, ptr %index, align 8, !dbg !1837
  %ge = icmp uge i64 %22, %20, !dbg !1837
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1837
  br i1 %23, label %panic, label %checkok, !dbg !1837

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1837
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1838

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1840
  br label %err_retblock, !dbg !1840

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1841
  %add27 = add i64 %26, 1, !dbg !1841
  store i64 %add27, ptr %index, align 8, !dbg !1841
  br label %switch.exit, !dbg !1841

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1843

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1845
  %28 = load i64, ptr %index, align 8, !dbg !1846
  %eq28 = icmp eq i64 %27, %28, !dbg !1845
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1845

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1847
  br label %err_retblock, !dbg !1847

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1848, metadata !DIExpression()), !dbg !1849
  %29 = load i32, ptr %base1, align 4, !dbg !1850
  %sext = sext i32 %29 to i64, !dbg !1850
  store i64 %sext, ptr %base_used, align 8, !dbg !1850
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1851
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1851
  %31 = load ptr, ptr %string, align 8, !dbg !1851
  %32 = load i64, ptr %index, align 8, !dbg !1852
  %ge32 = icmp uge i64 %32, %30, !dbg !1852
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1852
  br i1 %33, label %panic33, label %checkok43, !dbg !1852

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1852
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1852
  %eq45 = icmp eq i8 %34, 48, !dbg !1851
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1851

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1853
  %eq47 = icmp eq i32 %35, 10, !dbg !1853
  br label %and.phi48, !dbg !1853

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1853
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1853

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1854
  %add51 = add i64 %36, 1, !dbg !1854
  store i64 %add51, ptr %index, align 8, !dbg !1854
  %37 = load i64, ptr %index, align 8, !dbg !1856
  %38 = load i64, ptr %len, align 8, !dbg !1857
  %eq52 = icmp eq i64 %37, %38, !dbg !1856
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1856

if.then53:                                        ; preds = %if.then50
  store i64 0, ptr %blockret, align 8, !dbg !1858
  br label %expr_block.exit150, !dbg !1858

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1859
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1859
  %40 = load ptr, ptr %string, align 8, !dbg !1859
  %41 = load i64, ptr %index, align 8, !dbg !1861
  %ge56 = icmp uge i64 %41, %39, !dbg !1861
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1861
  br i1 %42, label %panic57, label %checkok67, !dbg !1861

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1861
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 16, ptr %base_used, align 8, !dbg !1862
  %45 = load i64, ptr %index, align 8, !dbg !1864
  %add72 = add i64 %45, 1, !dbg !1864
  store i64 %add72, ptr %index, align 8, !dbg !1864
  br label %switch.exit78, !dbg !1864

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 2, ptr %base_used, align 8, !dbg !1865
  %46 = load i64, ptr %index, align 8, !dbg !1867
  %add74 = add i64 %46, 1, !dbg !1867
  store i64 %add74, ptr %index, align 8, !dbg !1867
  br label %switch.exit78, !dbg !1867

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 8, ptr %base_used, align 8, !dbg !1868
  %47 = load i64, ptr %index, align 8, !dbg !1870
  %add76 = add i64 %47, 1, !dbg !1870
  store i64 %add76, ptr %index, align 8, !dbg !1870
  br label %switch.exit78, !dbg !1870

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1871

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1873
  %49 = load i64, ptr %index, align 8, !dbg !1874
  %eq79 = icmp eq i64 %48, %49, !dbg !1873
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1873

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1875
  br label %err_retblock, !dbg !1875

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1875

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1876, metadata !DIExpression()), !dbg !1877
  store i64 0, ptr %value, align 8, !dbg !1878
  br label %loop.cond83, !dbg !1879

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1880
  %51 = load i64, ptr %len, align 8, !dbg !1882
  %neq = icmp ne i64 %50, %51, !dbg !1880
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1880

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1883, metadata !DIExpression()), !dbg !1885
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1886, metadata !DIExpression()), !dbg !1888
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1889
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1889
  %53 = load ptr, ptr %string, align 8, !dbg !1889
  %54 = load i64, ptr %index, align 8, !dbg !1890
  %add88 = add i64 %54, 1, !dbg !1890
  store i64 %add88, ptr %index, align 8, !dbg !1890
  %ge89 = icmp uge i64 %54, %52, !dbg !1890
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1890
  br i1 %55, label %panic90, label %checkok100, !dbg !1890

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1890
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1890
  store i8 %56, ptr %ch, align 1, !dbg !1890
  %57 = load i64, ptr %base_used, align 8, !dbg !1891
  %neq102 = icmp ne i64 16, %57, !dbg !1891
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1891

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1892
  %lt104 = icmp ult i8 %58, 65, !dbg !1892
  br label %or.phi105, !dbg !1892

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1892
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1892

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1893
  %zext = zext i8 %59 to i32, !dbg !1893
  %sub = sub i32 %zext, 48, !dbg !1894
  %trunc = trunc i32 %sub to i8, !dbg !1894
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1894
  br label %expr_block.exit, !dbg !1894

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1895
  %le109 = icmp ule i8 %60, 70, !dbg !1895
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1895

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !1896
  %zext111 = zext i8 %61 to i32, !dbg !1896
  %sub112 = sub i32 %zext111, 65, !dbg !1896
  %add113 = add i32 %sub112, 10, !dbg !1897
  %trunc114 = trunc i32 %add113 to i8, !dbg !1897
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1897
  br label %expr_block.exit, !dbg !1897

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1898
  %lt116 = icmp ult i8 %62, 97, !dbg !1898
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1898

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1899
  br label %guard_block, !dbg !1899

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !1900
  %gt119 = icmp ugt i8 %63, 102, !dbg !1900
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1900

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1901
  br label %guard_block, !dbg !1901

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !1902
  %zext122 = zext i8 %64 to i32, !dbg !1902
  %sub123 = sub i32 %zext122, 97, !dbg !1902
  %add124 = add i32 %sub123, 10, !dbg !1903
  %trunc125 = trunc i32 %add124 to i8, !dbg !1903
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1903
  br label %expr_block.exit, !dbg !1903

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1903

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !1903
  store i64 %65, ptr %reterr, align 8, !dbg !1903
  br label %err_retblock, !dbg !1903

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1903
  store i8 %66, ptr %c85, align 1, !dbg !1903
  %67 = load i8, ptr %c85, align 1, !dbg !1904
  %zext126 = zext i8 %67 to i64, !dbg !1904
  %68 = load i64, ptr %base_used, align 8, !dbg !1905
  %ge127 = icmp uge i64 %zext126, %68, !dbg !1904
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !1904

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1906
  br label %err_retblock, !dbg !1906

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1907
  %70 = trunc i8 %69 to i1, !dbg !1907
  br i1 %70, label %if.then132, label %if.exit138, !dbg !1907

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1909, metadata !DIExpression()), !dbg !1911
  %71 = load i64, ptr %value, align 8, !dbg !1912
  %72 = load i64, ptr %base_used, align 8, !dbg !1913
  %mul = mul i64 %71, %72, !dbg !1912
  %73 = load i8, ptr %c85, align 1, !dbg !1914
  %zext133 = zext i8 %73 to i64, !dbg !1914
  %sub134 = sub i64 %mul, %zext133, !dbg !1912
  store i64 %sub134, ptr %new_value, align 8, !dbg !1912
  %74 = load i64, ptr %new_value, align 8, !dbg !1915
  %75 = load i64, ptr %value, align 8, !dbg !1916
  %gt135 = icmp ugt i64 %74, %75, !dbg !1915
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1915

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1917
  br label %guard_block147, !dbg !1917

if.exit137:                                       ; preds = %if.then132
  %76 = load i64, ptr %new_value, align 8, !dbg !1918
  store i64 %76, ptr %blockret131, align 8, !dbg !1918
  br label %expr_block.exit146, !dbg !1918

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !1919, metadata !DIExpression()), !dbg !1920
  %77 = load i64, ptr %value, align 8, !dbg !1921
  %78 = load i64, ptr %base_used, align 8, !dbg !1922
  %mul140 = mul i64 %77, %78, !dbg !1921
  %79 = load i8, ptr %c85, align 1, !dbg !1923
  %zext141 = zext i8 %79 to i64, !dbg !1923
  %add142 = add i64 %mul140, %zext141, !dbg !1921
  store i64 %add142, ptr %new_value139, align 8, !dbg !1921
  %80 = load i64, ptr %new_value139, align 8, !dbg !1924
  %81 = load i64, ptr %value, align 8, !dbg !1925
  %lt143 = icmp ult i64 %80, %81, !dbg !1924
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1924

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1926
  br label %guard_block147, !dbg !1926

if.exit145:                                       ; preds = %if.exit138
  %82 = load i64, ptr %new_value139, align 8, !dbg !1927
  store i64 %82, ptr %blockret131, align 8, !dbg !1927
  br label %expr_block.exit146, !dbg !1927

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1927

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !1927
  store i64 %83, ptr %reterr, align 8, !dbg !1927
  br label %err_retblock, !dbg !1927

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i64, ptr %blockret131, align 8, !dbg !1927
  store i64 %84, ptr %value, align 8, !dbg !1927
  br label %loop.cond83, !dbg !1927

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i64, ptr %value, align 8, !dbg !1928
  store i64 %85, ptr %blockret, align 8, !dbg !1928
  br label %expr_block.exit150, !dbg !1928

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i64, ptr %blockret, align 8, !dbg !1928
  store i64 %86, ptr %0, align 8, !dbg !1928
  ret i64 0, !dbg !1928

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1928
  ret i64 %87, !dbg !1928

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1837
  unreachable, !dbg !1837

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 654, ptr align 8 %indirectarg42), !dbg !1852
  unreachable, !dbg !1852

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 658, ptr align 8 %indirectarg66), !dbg !1861
  unreachable, !dbg !1861

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 681, ptr align 8 %indirectarg99), !dbg !1890
  unreachable, !dbg !1890
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1929 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i32, align 4
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value139 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %1, metadata !1933, metadata !DIExpression()), !dbg !1934
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1935, metadata !DIExpression()), !dbg !1936
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1937
  %le = icmp sle i32 %4, 10, !dbg !1937
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1937

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1941
  %gt = icmp sgt i32 %5, 1, !dbg !1941
  br label %and.phi, !dbg !1941

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1941
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1941

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1942
  %eq = icmp eq i32 %6, 16, !dbg !1942
  br label %or.phi, !dbg !1942

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1942
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1942

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.70, i64 7 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !1937
  unreachable, !dbg !1937

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1943, metadata !DIExpression()), !dbg !1944
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1945
  %8 = load i64, ptr %ptradd, align 8, !dbg !1945
  store i64 %8, ptr %len, align 8, !dbg !1945
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1946, metadata !DIExpression()), !dbg !1947
  store i64 0, ptr %index, align 8, !dbg !1948
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1949, metadata !DIExpression()), !dbg !1950
  %9 = load ptr, ptr %string, align 8, !dbg !1951
  store ptr %9, ptr %ptr, align 8, !dbg !1951
  br label %loop.cond, !dbg !1952

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1953
  %11 = load i64, ptr %len, align 8, !dbg !1955
  %lt = icmp ult i64 %10, %11, !dbg !1953
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1953

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1956
  %13 = load i64, ptr %index, align 8, !dbg !1957
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1957
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1958
  %eq7 = icmp eq i8 %15, 32, !dbg !1958
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1958

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1961
  %eq9 = icmp eq i8 %16, 9, !dbg !1961
  br label %or.phi10, !dbg !1961

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1961
  br label %and.phi12, !dbg !1961

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1961
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1961

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1962
  %add = add i64 %17, 1, !dbg !1962
  store i64 %add, ptr %index, align 8, !dbg !1962
  br label %loop.cond, !dbg !1962

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1963
  %19 = load i64, ptr %index, align 8, !dbg !1964
  %eq14 = icmp eq i64 %18, %19, !dbg !1963
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1963

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1965
  br label %err_retblock, !dbg !1965

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1966, metadata !DIExpression()), !dbg !1967
  store i8 0, ptr %is_negative, align 1, !dbg !1967
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1968
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1968
  %21 = load ptr, ptr %string, align 8, !dbg !1968
  %22 = load i64, ptr %index, align 8, !dbg !1970
  %ge = icmp uge i64 %22, %20, !dbg !1970
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1970
  br i1 %23, label %panic, label %checkok, !dbg !1970

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1970
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1971

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1973
  br label %err_retblock, !dbg !1973

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1974
  %add27 = add i64 %26, 1, !dbg !1974
  store i64 %add27, ptr %index, align 8, !dbg !1974
  br label %switch.exit, !dbg !1974

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1976

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1978
  %28 = load i64, ptr %index, align 8, !dbg !1979
  %eq28 = icmp eq i64 %27, %28, !dbg !1978
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1978

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1980
  br label %err_retblock, !dbg !1980

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1981, metadata !DIExpression()), !dbg !1982
  %29 = load i32, ptr %base1, align 4, !dbg !1983
  store i32 %29, ptr %base_used, align 4, !dbg !1983
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1984
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1984
  %31 = load ptr, ptr %string, align 8, !dbg !1984
  %32 = load i64, ptr %index, align 8, !dbg !1985
  %ge32 = icmp uge i64 %32, %30, !dbg !1985
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1985
  br i1 %33, label %panic33, label %checkok43, !dbg !1985

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1985
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1985
  %eq45 = icmp eq i8 %34, 48, !dbg !1984
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1984

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1986
  %eq47 = icmp eq i32 %35, 10, !dbg !1986
  br label %and.phi48, !dbg !1986

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1986
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1986

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1987
  %add51 = add i64 %36, 1, !dbg !1987
  store i64 %add51, ptr %index, align 8, !dbg !1987
  %37 = load i64, ptr %index, align 8, !dbg !1989
  %38 = load i64, ptr %len, align 8, !dbg !1990
  %eq52 = icmp eq i64 %37, %38, !dbg !1989
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1989

if.then53:                                        ; preds = %if.then50
  store i32 0, ptr %blockret, align 4, !dbg !1991
  br label %expr_block.exit150, !dbg !1991

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1992
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1992
  %40 = load ptr, ptr %string, align 8, !dbg !1992
  %41 = load i64, ptr %index, align 8, !dbg !1994
  %ge56 = icmp uge i64 %41, %39, !dbg !1994
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1994
  br i1 %42, label %panic57, label %checkok67, !dbg !1994

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1994
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 16, ptr %base_used, align 4, !dbg !1995
  %45 = load i64, ptr %index, align 8, !dbg !1997
  %add72 = add i64 %45, 1, !dbg !1997
  store i64 %add72, ptr %index, align 8, !dbg !1997
  br label %switch.exit78, !dbg !1997

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 2, ptr %base_used, align 4, !dbg !1998
  %46 = load i64, ptr %index, align 8, !dbg !2000
  %add74 = add i64 %46, 1, !dbg !2000
  store i64 %add74, ptr %index, align 8, !dbg !2000
  br label %switch.exit78, !dbg !2000

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 8, ptr %base_used, align 4, !dbg !2001
  %47 = load i64, ptr %index, align 8, !dbg !2003
  %add76 = add i64 %47, 1, !dbg !2003
  store i64 %add76, ptr %index, align 8, !dbg !2003
  br label %switch.exit78, !dbg !2003

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !2004

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !2006
  %49 = load i64, ptr %index, align 8, !dbg !2007
  %eq79 = icmp eq i64 %48, %49, !dbg !2006
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !2006

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2008
  br label %err_retblock, !dbg !2008

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !2008

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2009, metadata !DIExpression()), !dbg !2010
  store i32 0, ptr %value, align 4, !dbg !2011
  br label %loop.cond83, !dbg !2012

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !2013
  %51 = load i64, ptr %len, align 8, !dbg !2015
  %neq = icmp ne i64 %50, %51, !dbg !2013
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !2013

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !2016, metadata !DIExpression()), !dbg !2018
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2019, metadata !DIExpression()), !dbg !2021
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2022
  %52 = load i64, ptr %ptradd87, align 8, !dbg !2022
  %53 = load ptr, ptr %string, align 8, !dbg !2022
  %54 = load i64, ptr %index, align 8, !dbg !2023
  %add88 = add i64 %54, 1, !dbg !2023
  store i64 %add88, ptr %index, align 8, !dbg !2023
  %ge89 = icmp uge i64 %54, %52, !dbg !2023
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !2023
  br i1 %55, label %panic90, label %checkok100, !dbg !2023

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !2023
  %56 = load i8, ptr %ptradd101, align 1, !dbg !2023
  store i8 %56, ptr %ch, align 1, !dbg !2023
  %57 = load i32, ptr %base_used, align 4, !dbg !2024
  %neq102 = icmp ne i32 16, %57, !dbg !2024
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !2024

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !2025
  %lt104 = icmp ult i8 %58, 65, !dbg !2025
  br label %or.phi105, !dbg !2025

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !2025
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !2025

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !2026
  %zext = zext i8 %59 to i32, !dbg !2026
  %sub = sub i32 %zext, 48, !dbg !2027
  %trunc = trunc i32 %sub to i8, !dbg !2027
  store i8 %trunc, ptr %blockret86, align 1, !dbg !2027
  br label %expr_block.exit, !dbg !2027

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !2028
  %le109 = icmp ule i8 %60, 70, !dbg !2028
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !2028

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !2029
  %zext111 = zext i8 %61 to i32, !dbg !2029
  %sub112 = sub i32 %zext111, 65, !dbg !2029
  %add113 = add i32 %sub112, 10, !dbg !2030
  %trunc114 = trunc i32 %add113 to i8, !dbg !2030
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !2030
  br label %expr_block.exit, !dbg !2030

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !2031
  %lt116 = icmp ult i8 %62, 97, !dbg !2031
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !2031

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2032
  br label %guard_block, !dbg !2032

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !2033
  %gt119 = icmp ugt i8 %63, 102, !dbg !2033
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !2033

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2034
  br label %guard_block, !dbg !2034

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !2035
  %zext122 = zext i8 %64 to i32, !dbg !2035
  %sub123 = sub i32 %zext122, 97, !dbg !2035
  %add124 = add i32 %sub123, 10, !dbg !2036
  %trunc125 = trunc i32 %add124 to i8, !dbg !2036
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !2036
  br label %expr_block.exit, !dbg !2036

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !2036

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !2036
  store i64 %65, ptr %reterr, align 8, !dbg !2036
  br label %err_retblock, !dbg !2036

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !2036
  store i8 %66, ptr %c85, align 1, !dbg !2036
  %67 = load i8, ptr %c85, align 1, !dbg !2037
  %zext126 = zext i8 %67 to i32, !dbg !2037
  %68 = load i32, ptr %base_used, align 4, !dbg !2038
  %ge127 = icmp uge i32 %zext126, %68, !dbg !2037
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !2037

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2039
  br label %err_retblock, !dbg !2039

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !2040
  %70 = trunc i8 %69 to i1, !dbg !2040
  br i1 %70, label %if.then132, label %if.exit138, !dbg !2040

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2042, metadata !DIExpression()), !dbg !2044
  %71 = load i32, ptr %value, align 4, !dbg !2045
  %72 = load i32, ptr %base_used, align 4, !dbg !2046
  %mul = mul i32 %71, %72, !dbg !2045
  %73 = load i8, ptr %c85, align 1, !dbg !2047
  %zext133 = zext i8 %73 to i32, !dbg !2047
  %sub134 = sub i32 %mul, %zext133, !dbg !2045
  store i32 %sub134, ptr %new_value, align 4, !dbg !2045
  %74 = load i32, ptr %new_value, align 4, !dbg !2048
  %75 = load i32, ptr %value, align 4, !dbg !2049
  %gt135 = icmp ugt i32 %74, %75, !dbg !2048
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !2048

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !2050
  br label %guard_block147, !dbg !2050

if.exit137:                                       ; preds = %if.then132
  %76 = load i32, ptr %new_value, align 4, !dbg !2051
  store i32 %76, ptr %blockret131, align 4, !dbg !2051
  br label %expr_block.exit146, !dbg !2051

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !2052, metadata !DIExpression()), !dbg !2053
  %77 = load i32, ptr %value, align 4, !dbg !2054
  %78 = load i32, ptr %base_used, align 4, !dbg !2055
  %mul140 = mul i32 %77, %78, !dbg !2054
  %79 = load i8, ptr %c85, align 1, !dbg !2056
  %zext141 = zext i8 %79 to i32, !dbg !2056
  %add142 = add i32 %mul140, %zext141, !dbg !2054
  store i32 %add142, ptr %new_value139, align 4, !dbg !2054
  %80 = load i32, ptr %new_value139, align 4, !dbg !2057
  %81 = load i32, ptr %value, align 4, !dbg !2058
  %lt143 = icmp ult i32 %80, %81, !dbg !2057
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !2057

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !2059
  br label %guard_block147, !dbg !2059

if.exit145:                                       ; preds = %if.exit138
  %82 = load i32, ptr %new_value139, align 4, !dbg !2060
  store i32 %82, ptr %blockret131, align 4, !dbg !2060
  br label %expr_block.exit146, !dbg !2060

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !2060

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !2060
  store i64 %83, ptr %reterr, align 8, !dbg !2060
  br label %err_retblock, !dbg !2060

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i32, ptr %blockret131, align 4, !dbg !2060
  store i32 %84, ptr %value, align 4, !dbg !2060
  br label %loop.cond83, !dbg !2060

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i32, ptr %value, align 4, !dbg !2061
  store i32 %85, ptr %blockret, align 4, !dbg !2061
  br label %expr_block.exit150, !dbg !2061

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i32, ptr %blockret, align 4, !dbg !2061
  store i32 %86, ptr %0, align 4, !dbg !2061
  ret i64 0, !dbg !2061

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !2061
  ret i64 %87, !dbg !2061

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.70, i64 7 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !1970
  unreachable, !dbg !1970

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.70, i64 7 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 654, ptr align 8 %indirectarg42), !dbg !1985
  unreachable, !dbg !1985

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.70, i64 7 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 658, ptr align 8 %indirectarg66), !dbg !1994
  unreachable, !dbg !1994

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.70, i64 7 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 681, ptr align 8 %indirectarg99), !dbg !2023
  unreachable, !dbg !2023
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ushort(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !2062 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i16, align 2
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var132 = alloca i64, align 8
  %blockret133 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value144 = alloca i16, align 2
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2065, metadata !DIExpression()), !dbg !2066
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2067, metadata !DIExpression()), !dbg !2068
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !2069
  %le = icmp sle i32 %4, 10, !dbg !2069
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2069

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !2073
  %gt = icmp sgt i32 %5, 1, !dbg !2073
  br label %and.phi, !dbg !2073

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2073
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2073

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !2074
  %eq = icmp eq i32 %6, 16, !dbg !2074
  br label %or.phi, !dbg !2074

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2074
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2074

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.71, i64 9 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !2069
  unreachable, !dbg !2069

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2075, metadata !DIExpression()), !dbg !2076
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2077
  %8 = load i64, ptr %ptradd, align 8, !dbg !2077
  store i64 %8, ptr %len, align 8, !dbg !2077
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2078, metadata !DIExpression()), !dbg !2079
  store i64 0, ptr %index, align 8, !dbg !2080
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2081, metadata !DIExpression()), !dbg !2082
  %9 = load ptr, ptr %string, align 8, !dbg !2083
  store ptr %9, ptr %ptr, align 8, !dbg !2083
  br label %loop.cond, !dbg !2084

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2085
  %11 = load i64, ptr %len, align 8, !dbg !2087
  %lt = icmp ult i64 %10, %11, !dbg !2085
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !2085

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2088
  %13 = load i64, ptr %index, align 8, !dbg !2089
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2089
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !2090
  %eq7 = icmp eq i8 %15, 32, !dbg !2090
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !2090

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !2093
  %eq9 = icmp eq i8 %16, 9, !dbg !2093
  br label %or.phi10, !dbg !2093

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !2093
  br label %and.phi12, !dbg !2093

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !2093
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !2093

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !2094
  %add = add i64 %17, 1, !dbg !2094
  store i64 %add, ptr %index, align 8, !dbg !2094
  br label %loop.cond, !dbg !2094

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !2095
  %19 = load i64, ptr %index, align 8, !dbg !2096
  %eq14 = icmp eq i64 %18, %19, !dbg !2095
  br i1 %eq14, label %if.then, label %if.exit, !dbg !2095

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2097
  br label %err_retblock, !dbg !2097

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2098, metadata !DIExpression()), !dbg !2099
  store i8 0, ptr %is_negative, align 1, !dbg !2099
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2100
  %20 = load i64, ptr %ptradd15, align 8, !dbg !2100
  %21 = load ptr, ptr %string, align 8, !dbg !2100
  %22 = load i64, ptr %index, align 8, !dbg !2102
  %ge = icmp uge i64 %22, %20, !dbg !2102
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2102
  br i1 %23, label %panic, label %checkok, !dbg !2102

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !2102
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !2103

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2105
  br label %err_retblock, !dbg !2105

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !2106
  %add27 = add i64 %26, 1, !dbg !2106
  store i64 %add27, ptr %index, align 8, !dbg !2106
  br label %switch.exit, !dbg !2106

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2108

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !2110
  %28 = load i64, ptr %index, align 8, !dbg !2111
  %eq28 = icmp eq i64 %27, %28, !dbg !2110
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !2110

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2112
  br label %err_retblock, !dbg !2112

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2113, metadata !DIExpression()), !dbg !2114
  %29 = load i32, ptr %base1, align 4, !dbg !2115
  %trunc = trunc i32 %29 to i16, !dbg !2115
  store i16 %trunc, ptr %base_used, align 2, !dbg !2115
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2116
  %30 = load i64, ptr %ptradd31, align 8, !dbg !2116
  %31 = load ptr, ptr %string, align 8, !dbg !2116
  %32 = load i64, ptr %index, align 8, !dbg !2117
  %ge32 = icmp uge i64 %32, %30, !dbg !2117
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !2117
  br i1 %33, label %panic33, label %checkok43, !dbg !2117

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !2117
  %34 = load i8, ptr %ptradd44, align 1, !dbg !2117
  %eq45 = icmp eq i8 %34, 48, !dbg !2116
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !2116

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !2118
  %eq47 = icmp eq i32 %35, 10, !dbg !2118
  br label %and.phi48, !dbg !2118

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !2118
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !2118

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !2119
  %add51 = add i64 %36, 1, !dbg !2119
  store i64 %add51, ptr %index, align 8, !dbg !2119
  %37 = load i64, ptr %index, align 8, !dbg !2121
  %38 = load i64, ptr %len, align 8, !dbg !2122
  %eq52 = icmp eq i64 %37, %38, !dbg !2121
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !2121

if.then53:                                        ; preds = %if.then50
  store i16 0, ptr %blockret, align 2, !dbg !2123
  br label %expr_block.exit158, !dbg !2123

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2124
  %39 = load i64, ptr %ptradd55, align 8, !dbg !2124
  %40 = load ptr, ptr %string, align 8, !dbg !2124
  %41 = load i64, ptr %index, align 8, !dbg !2126
  %ge56 = icmp uge i64 %41, %39, !dbg !2126
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !2126
  br i1 %42, label %panic57, label %checkok67, !dbg !2126

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !2126
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 16, ptr %base_used, align 2, !dbg !2127
  %45 = load i64, ptr %index, align 8, !dbg !2129
  %add72 = add i64 %45, 1, !dbg !2129
  store i64 %add72, ptr %index, align 8, !dbg !2129
  br label %switch.exit78, !dbg !2129

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 2, ptr %base_used, align 2, !dbg !2130
  %46 = load i64, ptr %index, align 8, !dbg !2132
  %add74 = add i64 %46, 1, !dbg !2132
  store i64 %add74, ptr %index, align 8, !dbg !2132
  br label %switch.exit78, !dbg !2132

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 8, ptr %base_used, align 2, !dbg !2133
  %47 = load i64, ptr %index, align 8, !dbg !2135
  %add76 = add i64 %47, 1, !dbg !2135
  store i64 %add76, ptr %index, align 8, !dbg !2135
  br label %switch.exit78, !dbg !2135

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !2136

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !2138
  %49 = load i64, ptr %index, align 8, !dbg !2139
  %eq79 = icmp eq i64 %48, %49, !dbg !2138
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !2138

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2140
  br label %err_retblock, !dbg !2140

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !2140

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2141, metadata !DIExpression()), !dbg !2142
  store i16 0, ptr %value, align 2, !dbg !2143
  br label %loop.cond83, !dbg !2144

loop.cond83:                                      ; preds = %noerr_block156, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !2145
  %51 = load i64, ptr %len, align 8, !dbg !2147
  %neq = icmp ne i64 %50, %51, !dbg !2145
  br i1 %neq, label %loop.body84, label %loop.exit157, !dbg !2145

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !2148, metadata !DIExpression()), !dbg !2150
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2151, metadata !DIExpression()), !dbg !2153
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2154
  %52 = load i64, ptr %ptradd87, align 8, !dbg !2154
  %53 = load ptr, ptr %string, align 8, !dbg !2154
  %54 = load i64, ptr %index, align 8, !dbg !2155
  %add88 = add i64 %54, 1, !dbg !2155
  store i64 %add88, ptr %index, align 8, !dbg !2155
  %ge89 = icmp uge i64 %54, %52, !dbg !2155
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !2155
  br i1 %55, label %panic90, label %checkok100, !dbg !2155

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !2155
  %56 = load i8, ptr %ptradd101, align 1, !dbg !2155
  store i8 %56, ptr %ch, align 1, !dbg !2155
  %57 = load i16, ptr %base_used, align 2, !dbg !2156
  %zext = zext i16 %57 to i32, !dbg !2156
  %neq102 = icmp ne i32 16, %zext, !dbg !2156
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !2156

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !2157
  %lt104 = icmp ult i8 %58, 65, !dbg !2157
  br label %or.phi105, !dbg !2157

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !2157
  br i1 %val106, label %if.then107, label %if.exit110, !dbg !2157

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !2158
  %zext108 = zext i8 %59 to i32, !dbg !2158
  %sub = sub i32 %zext108, 48, !dbg !2159
  %trunc109 = trunc i32 %sub to i8, !dbg !2159
  store i8 %trunc109, ptr %blockret86, align 1, !dbg !2159
  br label %expr_block.exit, !dbg !2159

if.exit110:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !2160
  %le111 = icmp ule i8 %60, 70, !dbg !2160
  br i1 %le111, label %if.then112, label %if.exit117, !dbg !2160

if.then112:                                       ; preds = %if.exit110
  %61 = load i8, ptr %ch, align 1, !dbg !2161
  %zext113 = zext i8 %61 to i32, !dbg !2161
  %sub114 = sub i32 %zext113, 65, !dbg !2161
  %add115 = add i32 %sub114, 10, !dbg !2162
  %trunc116 = trunc i32 %add115 to i8, !dbg !2162
  store i8 %trunc116, ptr %blockret86, align 1, !dbg !2162
  br label %expr_block.exit, !dbg !2162

if.exit117:                                       ; preds = %if.exit110
  %62 = load i8, ptr %ch, align 1, !dbg !2163
  %lt118 = icmp ult i8 %62, 97, !dbg !2163
  br i1 %lt118, label %if.then119, label %if.exit120, !dbg !2163

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2164
  br label %guard_block, !dbg !2164

if.exit120:                                       ; preds = %if.exit117
  %63 = load i8, ptr %ch, align 1, !dbg !2165
  %gt121 = icmp ugt i8 %63, 102, !dbg !2165
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !2165

if.then122:                                       ; preds = %if.exit120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2166
  br label %guard_block, !dbg !2166

if.exit123:                                       ; preds = %if.exit120
  %64 = load i8, ptr %ch, align 1, !dbg !2167
  %zext124 = zext i8 %64 to i32, !dbg !2167
  %sub125 = sub i32 %zext124, 97, !dbg !2167
  %add126 = add i32 %sub125, 10, !dbg !2168
  %trunc127 = trunc i32 %add126 to i8, !dbg !2168
  store i8 %trunc127, ptr %blockret86, align 1, !dbg !2168
  br label %expr_block.exit, !dbg !2168

expr_block.exit:                                  ; preds = %if.exit123, %if.then112, %if.then107
  br label %noerr_block, !dbg !2168

guard_block:                                      ; preds = %if.then122, %if.then119
  %65 = load i64, ptr %error_var, align 8, !dbg !2168
  store i64 %65, ptr %reterr, align 8, !dbg !2168
  br label %err_retblock, !dbg !2168

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !2168
  store i8 %66, ptr %c85, align 1, !dbg !2168
  %67 = load i8, ptr %c85, align 1, !dbg !2169
  %zext128 = zext i8 %67 to i16, !dbg !2169
  %68 = load i16, ptr %base_used, align 2, !dbg !2170
  %ge129 = icmp uge i16 %zext128, %68, !dbg !2169
  br i1 %ge129, label %if.then130, label %if.exit131, !dbg !2169

if.then130:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2171
  br label %err_retblock, !dbg !2171

if.exit131:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !2172
  %70 = trunc i8 %69 to i1, !dbg !2172
  br i1 %70, label %if.then134, label %if.exit143, !dbg !2172

if.then134:                                       ; preds = %if.exit131
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2174, metadata !DIExpression()), !dbg !2176
  %71 = load i16, ptr %value, align 2, !dbg !2177
  %zext135 = zext i16 %71 to i32, !dbg !2177
  %72 = load i16, ptr %base_used, align 2, !dbg !2178
  %zext136 = zext i16 %72 to i32, !dbg !2178
  %mul = mul i32 %zext135, %zext136, !dbg !2177
  %73 = load i8, ptr %c85, align 1, !dbg !2179
  %zext137 = zext i8 %73 to i32, !dbg !2179
  %sub138 = sub i32 %mul, %zext137, !dbg !2177
  %trunc139 = trunc i32 %sub138 to i16, !dbg !2177
  store i16 %trunc139, ptr %new_value, align 2, !dbg !2177
  %74 = load i16, ptr %new_value, align 2, !dbg !2180
  %75 = load i16, ptr %value, align 2, !dbg !2181
  %gt140 = icmp ugt i16 %74, %75, !dbg !2180
  br i1 %gt140, label %if.then141, label %if.exit142, !dbg !2180

if.then141:                                       ; preds = %if.then134
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !2182
  br label %guard_block155, !dbg !2182

if.exit142:                                       ; preds = %if.then134
  %76 = load i16, ptr %new_value, align 2, !dbg !2183
  store i16 %76, ptr %blockret133, align 2, !dbg !2183
  br label %expr_block.exit154, !dbg !2183

if.exit143:                                       ; preds = %if.exit131
  call void @llvm.dbg.declare(metadata ptr %new_value144, metadata !2184, metadata !DIExpression()), !dbg !2185
  %77 = load i16, ptr %value, align 2, !dbg !2186
  %zext145 = zext i16 %77 to i32, !dbg !2186
  %78 = load i16, ptr %base_used, align 2, !dbg !2187
  %zext146 = zext i16 %78 to i32, !dbg !2187
  %mul147 = mul i32 %zext145, %zext146, !dbg !2186
  %79 = load i8, ptr %c85, align 1, !dbg !2188
  %zext148 = zext i8 %79 to i32, !dbg !2188
  %add149 = add i32 %mul147, %zext148, !dbg !2186
  %trunc150 = trunc i32 %add149 to i16, !dbg !2186
  store i16 %trunc150, ptr %new_value144, align 2, !dbg !2186
  %80 = load i16, ptr %new_value144, align 2, !dbg !2189
  %81 = load i16, ptr %value, align 2, !dbg !2190
  %lt151 = icmp ult i16 %80, %81, !dbg !2189
  br i1 %lt151, label %if.then152, label %if.exit153, !dbg !2189

if.then152:                                       ; preds = %if.exit143
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !2191
  br label %guard_block155, !dbg !2191

if.exit153:                                       ; preds = %if.exit143
  %82 = load i16, ptr %new_value144, align 2, !dbg !2192
  store i16 %82, ptr %blockret133, align 2, !dbg !2192
  br label %expr_block.exit154, !dbg !2192

expr_block.exit154:                               ; preds = %if.exit153, %if.exit142
  br label %noerr_block156, !dbg !2192

guard_block155:                                   ; preds = %if.then152, %if.then141
  %83 = load i64, ptr %error_var132, align 8, !dbg !2192
  store i64 %83, ptr %reterr, align 8, !dbg !2192
  br label %err_retblock, !dbg !2192

noerr_block156:                                   ; preds = %expr_block.exit154
  %84 = load i16, ptr %blockret133, align 2, !dbg !2192
  store i16 %84, ptr %value, align 2, !dbg !2192
  br label %loop.cond83, !dbg !2192

loop.exit157:                                     ; preds = %loop.cond83
  %85 = load i16, ptr %value, align 2, !dbg !2193
  store i16 %85, ptr %blockret, align 2, !dbg !2193
  br label %expr_block.exit158, !dbg !2193

expr_block.exit158:                               ; preds = %loop.exit157, %if.then53
  %86 = load i16, ptr %blockret, align 2, !dbg !2193
  store i16 %86, ptr %0, align 2, !dbg !2193
  ret i64 0, !dbg !2193

err_retblock:                                     ; preds = %guard_block155, %if.then130, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !2193
  ret i64 %87, !dbg !2193

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.71, i64 9 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !2102
  unreachable, !dbg !2102

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.71, i64 9 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 654, ptr align 8 %indirectarg42), !dbg !2117
  unreachable, !dbg !2117

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.71, i64 9 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 658, ptr align 8 %indirectarg66), !dbg !2126
  unreachable, !dbg !2126

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.71, i64 9 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 681, ptr align 8 %indirectarg99), !dbg !2155
  unreachable, !dbg !2155
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uchar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !2194 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i8, align 1
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value143 = alloca i8, align 1
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2197, metadata !DIExpression()), !dbg !2198
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2199, metadata !DIExpression()), !dbg !2200
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !2201
  %le = icmp sle i32 %4, 10, !dbg !2201
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2201

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !2205
  %gt = icmp sgt i32 %5, 1, !dbg !2205
  br label %and.phi, !dbg !2205

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2205
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2205

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !2206
  %eq = icmp eq i32 %6, 16, !dbg !2206
  br label %or.phi, !dbg !2206

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2206
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2206

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.62, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.72, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 631), !dbg !2201
  unreachable, !dbg !2201

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2207, metadata !DIExpression()), !dbg !2208
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2209
  %8 = load i64, ptr %ptradd, align 8, !dbg !2209
  store i64 %8, ptr %len, align 8, !dbg !2209
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2210, metadata !DIExpression()), !dbg !2211
  store i64 0, ptr %index, align 8, !dbg !2212
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2213, metadata !DIExpression()), !dbg !2214
  %9 = load ptr, ptr %string, align 8, !dbg !2215
  store ptr %9, ptr %ptr, align 8, !dbg !2215
  br label %loop.cond, !dbg !2216

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2217
  %11 = load i64, ptr %len, align 8, !dbg !2219
  %lt = icmp ult i64 %10, %11, !dbg !2217
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !2217

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2220
  %13 = load i64, ptr %index, align 8, !dbg !2221
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2221
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !2222
  %eq7 = icmp eq i8 %15, 32, !dbg !2222
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !2222

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !2225
  %eq9 = icmp eq i8 %16, 9, !dbg !2225
  br label %or.phi10, !dbg !2225

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !2225
  br label %and.phi12, !dbg !2225

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !2225
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !2225

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !2226
  %add = add i64 %17, 1, !dbg !2226
  store i64 %add, ptr %index, align 8, !dbg !2226
  br label %loop.cond, !dbg !2226

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !2227
  %19 = load i64, ptr %index, align 8, !dbg !2228
  %eq14 = icmp eq i64 %18, %19, !dbg !2227
  br i1 %eq14, label %if.then, label %if.exit, !dbg !2227

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2229
  br label %err_retblock, !dbg !2229

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2230, metadata !DIExpression()), !dbg !2231
  store i8 0, ptr %is_negative, align 1, !dbg !2231
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2232
  %20 = load i64, ptr %ptradd15, align 8, !dbg !2232
  %21 = load ptr, ptr %string, align 8, !dbg !2232
  %22 = load i64, ptr %index, align 8, !dbg !2234
  %ge = icmp uge i64 %22, %20, !dbg !2234
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2234
  br i1 %23, label %panic, label %checkok, !dbg !2234

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !2234
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !2235

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2237
  br label %err_retblock, !dbg !2237

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !2238
  %add27 = add i64 %26, 1, !dbg !2238
  store i64 %add27, ptr %index, align 8, !dbg !2238
  br label %switch.exit, !dbg !2238

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2240

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !2242
  %28 = load i64, ptr %index, align 8, !dbg !2243
  %eq28 = icmp eq i64 %27, %28, !dbg !2242
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !2242

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2244
  br label %err_retblock, !dbg !2244

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2245, metadata !DIExpression()), !dbg !2246
  %29 = load i32, ptr %base1, align 4, !dbg !2247
  %trunc = trunc i32 %29 to i8, !dbg !2247
  store i8 %trunc, ptr %base_used, align 1, !dbg !2247
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2248
  %30 = load i64, ptr %ptradd31, align 8, !dbg !2248
  %31 = load ptr, ptr %string, align 8, !dbg !2248
  %32 = load i64, ptr %index, align 8, !dbg !2249
  %ge32 = icmp uge i64 %32, %30, !dbg !2249
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !2249
  br i1 %33, label %panic33, label %checkok43, !dbg !2249

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !2249
  %34 = load i8, ptr %ptradd44, align 1, !dbg !2249
  %eq45 = icmp eq i8 %34, 48, !dbg !2248
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !2248

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !2250
  %eq47 = icmp eq i32 %35, 10, !dbg !2250
  br label %and.phi48, !dbg !2250

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !2250
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !2250

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !2251
  %add51 = add i64 %36, 1, !dbg !2251
  store i64 %add51, ptr %index, align 8, !dbg !2251
  %37 = load i64, ptr %index, align 8, !dbg !2253
  %38 = load i64, ptr %len, align 8, !dbg !2254
  %eq52 = icmp eq i64 %37, %38, !dbg !2253
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !2253

if.then53:                                        ; preds = %if.then50
  store i8 0, ptr %blockret, align 1, !dbg !2255
  br label %expr_block.exit157, !dbg !2255

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2256
  %39 = load i64, ptr %ptradd55, align 8, !dbg !2256
  %40 = load ptr, ptr %string, align 8, !dbg !2256
  %41 = load i64, ptr %index, align 8, !dbg !2258
  %ge56 = icmp uge i64 %41, %39, !dbg !2258
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !2258
  br i1 %42, label %panic57, label %checkok67, !dbg !2258

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !2258
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 16, ptr %base_used, align 1, !dbg !2259
  %45 = load i64, ptr %index, align 8, !dbg !2261
  %add72 = add i64 %45, 1, !dbg !2261
  store i64 %add72, ptr %index, align 8, !dbg !2261
  br label %switch.exit78, !dbg !2261

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 2, ptr %base_used, align 1, !dbg !2262
  %46 = load i64, ptr %index, align 8, !dbg !2264
  %add74 = add i64 %46, 1, !dbg !2264
  store i64 %add74, ptr %index, align 8, !dbg !2264
  br label %switch.exit78, !dbg !2264

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 8, ptr %base_used, align 1, !dbg !2265
  %47 = load i64, ptr %index, align 8, !dbg !2267
  %add76 = add i64 %47, 1, !dbg !2267
  store i64 %add76, ptr %index, align 8, !dbg !2267
  br label %switch.exit78, !dbg !2267

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !2268

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !2270
  %49 = load i64, ptr %index, align 8, !dbg !2271
  %eq79 = icmp eq i64 %48, %49, !dbg !2270
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !2270

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2272
  br label %err_retblock, !dbg !2272

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !2272

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2273, metadata !DIExpression()), !dbg !2274
  store i8 0, ptr %value, align 1, !dbg !2275
  br label %loop.cond83, !dbg !2276

loop.cond83:                                      ; preds = %noerr_block155, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !2277
  %51 = load i64, ptr %len, align 8, !dbg !2279
  %neq = icmp ne i64 %50, %51, !dbg !2277
  br i1 %neq, label %loop.body84, label %loop.exit156, !dbg !2277

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !2280, metadata !DIExpression()), !dbg !2282
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2283, metadata !DIExpression()), !dbg !2285
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2286
  %52 = load i64, ptr %ptradd87, align 8, !dbg !2286
  %53 = load ptr, ptr %string, align 8, !dbg !2286
  %54 = load i64, ptr %index, align 8, !dbg !2287
  %add88 = add i64 %54, 1, !dbg !2287
  store i64 %add88, ptr %index, align 8, !dbg !2287
  %ge89 = icmp uge i64 %54, %52, !dbg !2287
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !2287
  br i1 %55, label %panic90, label %checkok100, !dbg !2287

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !2287
  %56 = load i8, ptr %ptradd101, align 1, !dbg !2287
  store i8 %56, ptr %ch, align 1, !dbg !2287
  %57 = load i8, ptr %base_used, align 1, !dbg !2288
  %zext = zext i8 %57 to i32, !dbg !2288
  %neq102 = icmp ne i32 16, %zext, !dbg !2288
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !2288

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !2289
  %lt104 = icmp ult i8 %58, 65, !dbg !2289
  br label %or.phi105, !dbg !2289

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !2289
  br i1 %val106, label %if.then107, label %if.exit110, !dbg !2289

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !2290
  %zext108 = zext i8 %59 to i32, !dbg !2290
  %sub = sub i32 %zext108, 48, !dbg !2291
  %trunc109 = trunc i32 %sub to i8, !dbg !2291
  store i8 %trunc109, ptr %blockret86, align 1, !dbg !2291
  br label %expr_block.exit, !dbg !2291

if.exit110:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !2292
  %le111 = icmp ule i8 %60, 70, !dbg !2292
  br i1 %le111, label %if.then112, label %if.exit117, !dbg !2292

if.then112:                                       ; preds = %if.exit110
  %61 = load i8, ptr %ch, align 1, !dbg !2293
  %zext113 = zext i8 %61 to i32, !dbg !2293
  %sub114 = sub i32 %zext113, 65, !dbg !2293
  %add115 = add i32 %sub114, 10, !dbg !2294
  %trunc116 = trunc i32 %add115 to i8, !dbg !2294
  store i8 %trunc116, ptr %blockret86, align 1, !dbg !2294
  br label %expr_block.exit, !dbg !2294

if.exit117:                                       ; preds = %if.exit110
  %62 = load i8, ptr %ch, align 1, !dbg !2295
  %lt118 = icmp ult i8 %62, 97, !dbg !2295
  br i1 %lt118, label %if.then119, label %if.exit120, !dbg !2295

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2296
  br label %guard_block, !dbg !2296

if.exit120:                                       ; preds = %if.exit117
  %63 = load i8, ptr %ch, align 1, !dbg !2297
  %gt121 = icmp ugt i8 %63, 102, !dbg !2297
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !2297

if.then122:                                       ; preds = %if.exit120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2298
  br label %guard_block, !dbg !2298

if.exit123:                                       ; preds = %if.exit120
  %64 = load i8, ptr %ch, align 1, !dbg !2299
  %zext124 = zext i8 %64 to i32, !dbg !2299
  %sub125 = sub i32 %zext124, 97, !dbg !2299
  %add126 = add i32 %sub125, 10, !dbg !2300
  %trunc127 = trunc i32 %add126 to i8, !dbg !2300
  store i8 %trunc127, ptr %blockret86, align 1, !dbg !2300
  br label %expr_block.exit, !dbg !2300

expr_block.exit:                                  ; preds = %if.exit123, %if.then112, %if.then107
  br label %noerr_block, !dbg !2300

guard_block:                                      ; preds = %if.then122, %if.then119
  %65 = load i64, ptr %error_var, align 8, !dbg !2300
  store i64 %65, ptr %reterr, align 8, !dbg !2300
  br label %err_retblock, !dbg !2300

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !2300
  store i8 %66, ptr %c85, align 1, !dbg !2300
  %67 = load i8, ptr %c85, align 1, !dbg !2301
  %68 = load i8, ptr %base_used, align 1, !dbg !2302
  %ge128 = icmp uge i8 %67, %68, !dbg !2301
  br i1 %ge128, label %if.then129, label %if.exit130, !dbg !2301

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2303
  br label %err_retblock, !dbg !2303

if.exit130:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !2304
  %70 = trunc i8 %69 to i1, !dbg !2304
  br i1 %70, label %if.then133, label %if.exit142, !dbg !2304

if.then133:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2306, metadata !DIExpression()), !dbg !2308
  %71 = load i8, ptr %value, align 1, !dbg !2309
  %zext134 = zext i8 %71 to i32, !dbg !2309
  %72 = load i8, ptr %base_used, align 1, !dbg !2310
  %zext135 = zext i8 %72 to i32, !dbg !2310
  %mul = mul i32 %zext134, %zext135, !dbg !2309
  %73 = load i8, ptr %c85, align 1, !dbg !2311
  %zext136 = zext i8 %73 to i32, !dbg !2311
  %sub137 = sub i32 %mul, %zext136, !dbg !2309
  %trunc138 = trunc i32 %sub137 to i8, !dbg !2309
  store i8 %trunc138, ptr %new_value, align 1, !dbg !2309
  %74 = load i8, ptr %new_value, align 1, !dbg !2312
  %75 = load i8, ptr %value, align 1, !dbg !2313
  %gt139 = icmp ugt i8 %74, %75, !dbg !2312
  br i1 %gt139, label %if.then140, label %if.exit141, !dbg !2312

if.then140:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2314
  br label %guard_block154, !dbg !2314

if.exit141:                                       ; preds = %if.then133
  %76 = load i8, ptr %new_value, align 1, !dbg !2315
  store i8 %76, ptr %blockret132, align 1, !dbg !2315
  br label %expr_block.exit153, !dbg !2315

if.exit142:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value143, metadata !2316, metadata !DIExpression()), !dbg !2317
  %77 = load i8, ptr %value, align 1, !dbg !2318
  %zext144 = zext i8 %77 to i32, !dbg !2318
  %78 = load i8, ptr %base_used, align 1, !dbg !2319
  %zext145 = zext i8 %78 to i32, !dbg !2319
  %mul146 = mul i32 %zext144, %zext145, !dbg !2318
  %79 = load i8, ptr %c85, align 1, !dbg !2320
  %zext147 = zext i8 %79 to i32, !dbg !2320
  %add148 = add i32 %mul146, %zext147, !dbg !2318
  %trunc149 = trunc i32 %add148 to i8, !dbg !2318
  store i8 %trunc149, ptr %new_value143, align 1, !dbg !2318
  %80 = load i8, ptr %new_value143, align 1, !dbg !2321
  %81 = load i8, ptr %value, align 1, !dbg !2322
  %lt150 = icmp ult i8 %80, %81, !dbg !2321
  br i1 %lt150, label %if.then151, label %if.exit152, !dbg !2321

if.then151:                                       ; preds = %if.exit142
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2323
  br label %guard_block154, !dbg !2323

if.exit152:                                       ; preds = %if.exit142
  %82 = load i8, ptr %new_value143, align 1, !dbg !2324
  store i8 %82, ptr %blockret132, align 1, !dbg !2324
  br label %expr_block.exit153, !dbg !2324

expr_block.exit153:                               ; preds = %if.exit152, %if.exit141
  br label %noerr_block155, !dbg !2324

guard_block154:                                   ; preds = %if.then151, %if.then140
  %83 = load i64, ptr %error_var131, align 8, !dbg !2324
  store i64 %83, ptr %reterr, align 8, !dbg !2324
  br label %err_retblock, !dbg !2324

noerr_block155:                                   ; preds = %expr_block.exit153
  %84 = load i8, ptr %blockret132, align 1, !dbg !2324
  store i8 %84, ptr %value, align 1, !dbg !2324
  br label %loop.cond83, !dbg !2324

loop.exit156:                                     ; preds = %loop.cond83
  %85 = load i8, ptr %value, align 1, !dbg !2325
  store i8 %85, ptr %blockret, align 1, !dbg !2325
  br label %expr_block.exit157, !dbg !2325

expr_block.exit157:                               ; preds = %loop.exit156, %if.then53
  %86 = load i8, ptr %blockret, align 1, !dbg !2325
  store i8 %86, ptr %0, align 1, !dbg !2325
  ret i64 0, !dbg !2325

err_retblock:                                     ; preds = %guard_block154, %if.then129, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !2325
  ret i64 %87, !dbg !2325

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.72, i64 8 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 641, ptr align 8 %indirectarg21), !dbg !2234
  unreachable, !dbg !2234

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.72, i64 8 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 654, ptr align 8 %indirectarg42), !dbg !2249
  unreachable, !dbg !2249

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.72, i64 8 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 658, ptr align 8 %indirectarg66), !dbg !2258
  unreachable, !dbg !2258

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.72, i64 8 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 681, ptr align 8 %indirectarg99), !dbg !2287
  unreachable, !dbg !2287
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_double(ptr %0, ptr align 8 %1) #0 comdat !dbg !2326 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx54 = alloca i64, align 8
  %cmp.idx68 = alloca i64, align 8
  %cmp.idx80 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %chars145 = alloca %"char[]", align 8
  %sign146 = alloca i32, align 4
  %blockret147 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %varargslots158 = alloca [2 x %any], align 16
  %indirectarg161 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr208 = alloca i64, align 8
  %taddr209 = alloca i64, align 8
  %indirectarg210 = alloca %"char[]", align 8
  %indirectarg211 = alloca %"char[]", align 8
  %indirectarg212 = alloca %"char[]", align 8
  %varargslots213 = alloca [2 x %any], align 16
  %indirectarg216 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret247 = alloca i32, align 4
  %switch257 = alloca i8, align 1
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %indirectarg291 = alloca %"char[]", align 8
  %indirectarg292 = alloca %"char[]", align 8
  %indirectarg293 = alloca %"char[]", align 8
  %varargslots294 = alloca [2 x %any], align 16
  %indirectarg297 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %taddr323 = alloca i64, align 8
  %indirectarg324 = alloca %"char[]", align 8
  %indirectarg325 = alloca %"char[]", align 8
  %indirectarg326 = alloca %"char[]", align 8
  %varargslots327 = alloca [2 x %any], align 16
  %indirectarg330 = alloca %"any[]", align 8
  %taddr333 = alloca i64, align 8
  %indirectarg334 = alloca %"char[]", align 8
  %indirectarg335 = alloca %"char[]", align 8
  %indirectarg336 = alloca %"char[]", align 8
  %varargslots337 = alloca [1 x %any], align 16
  %indirectarg339 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg343 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x385 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x389 = alloca double, align 8
  %y390 = alloca double, align 8
  %x413 = alloca double, align 8
  %n415 = alloca i32, align 4
  %chars419 = alloca %"char[]", align 8
  %sign420 = alloca i32, align 4
  %blockret421 = alloca double, align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %indirectarg426 = alloca %"char[]", align 8
  %x427 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index428 = alloca i64, align 8
  %got_digit429 = alloca i8, align 1
  %taddr433 = alloca i64, align 8
  %taddr434 = alloca i64, align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %indirectarg437 = alloca %"char[]", align 8
  %varargslots438 = alloca [2 x %any], align 16
  %indirectarg441 = alloca %"any[]", align 8
  %got_rad444 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc445 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len446 = alloca i64, align 8
  %last_char448 = alloca i64, align 8
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %c456 = alloca i8, align 1
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %indirectarg463 = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %varargslots466 = alloca [2 x %any], align 16
  %indirectarg469 = alloca %"any[]", align 8
  %taddr497 = alloca i64, align 8
  %taddr498 = alloca i64, align 8
  %indirectarg499 = alloca %"char[]", align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %varargslots502 = alloca [2 x %any], align 16
  %indirectarg505 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %indirectarg522 = alloca %"char[]", align 8
  %indirectarg523 = alloca %"char[]", align 8
  %indirectarg524 = alloca %"char[]", align 8
  %varargslots525 = alloca [2 x %any], align 16
  %indirectarg528 = alloca %"any[]", align 8
  %switch548 = alloca i8, align 1
  %taddr568 = alloca i64, align 8
  %indirectarg569 = alloca %"char[]", align 8
  %indirectarg570 = alloca %"char[]", align 8
  %indirectarg571 = alloca %"char[]", align 8
  %varargslots572 = alloca [1 x %any], align 16
  %indirectarg574 = alloca %"any[]", align 8
  %taddr578 = alloca i64, align 8
  %taddr579 = alloca i64, align 8
  %indirectarg580 = alloca %"char[]", align 8
  %indirectarg581 = alloca %"char[]", align 8
  %indirectarg582 = alloca %"char[]", align 8
  %varargslots583 = alloca [2 x %any], align 16
  %indirectarg586 = alloca %"any[]", align 8
  %taddr591 = alloca i64, align 8
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %varargslots595 = alloca [1 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %taddr601 = alloca i64, align 8
  %taddr602 = alloca i64, align 8
  %indirectarg603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %varargslots606 = alloca [2 x %any], align 16
  %indirectarg609 = alloca %"any[]", align 8
  %taddr620 = alloca i64, align 8
  %indirectarg621 = alloca %"char[]", align 8
  %indirectarg622 = alloca %"char[]", align 8
  %indirectarg623 = alloca %"char[]", align 8
  %varargslots624 = alloca [1 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %taddr631 = alloca i64, align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %varargslots635 = alloca [2 x %any], align 16
  %indirectarg638 = alloca %"any[]", align 8
  %indirectarg662 = alloca %"char[]", align 8
  %indirectarg663 = alloca %"char[]", align 8
  %indirectarg664 = alloca %"char[]", align 8
  %taddr670 = alloca i64, align 8
  %taddr671 = alloca i64, align 8
  %indirectarg672 = alloca %"char[]", align 8
  %indirectarg673 = alloca %"char[]", align 8
  %indirectarg674 = alloca %"char[]", align 8
  %varargslots675 = alloca [2 x %any], align 16
  %indirectarg678 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr700 = alloca i64, align 8
  %taddr701 = alloca i64, align 8
  %indirectarg702 = alloca %"char[]", align 8
  %indirectarg703 = alloca %"char[]", align 8
  %indirectarg704 = alloca %"char[]", align 8
  %varargslots705 = alloca [2 x %any], align 16
  %indirectarg708 = alloca %"any[]", align 8
  %taddr712 = alloca i64, align 8
  %indirectarg713 = alloca %"char[]", align 8
  %indirectarg714 = alloca %"char[]", align 8
  %indirectarg715 = alloca %"char[]", align 8
  %varargslots716 = alloca [1 x %any], align 16
  %indirectarg718 = alloca %"any[]", align 8
  %retparam722 = alloca i64, align 8
  %indirectarg723 = alloca %"char[]", align 8
  %error_var727 = alloca i64, align 8
  %taddr773 = alloca i64, align 8
  %indirectarg774 = alloca %"char[]", align 8
  %indirectarg775 = alloca %"char[]", align 8
  %indirectarg776 = alloca %"char[]", align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %indirectarg785 = alloca %"char[]", align 8
  %indirectarg786 = alloca %"char[]", align 8
  %indirectarg787 = alloca %"char[]", align 8
  %varargslots788 = alloca [2 x %any], align 16
  %indirectarg791 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2799 = alloca i32, align 4
  %rp800 = alloca i64, align 8
  %taddr825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %indirectarg827 = alloca %"char[]", align 8
  %indirectarg828 = alloca %"char[]", align 8
  %varargslots829 = alloca [1 x %any], align 16
  %indirectarg831 = alloca %"any[]", align 8
  %taddr835 = alloca i64, align 8
  %taddr836 = alloca i64, align 8
  %indirectarg837 = alloca %"char[]", align 8
  %indirectarg838 = alloca %"char[]", align 8
  %indirectarg839 = alloca %"char[]", align 8
  %varargslots840 = alloca [2 x %any], align 16
  %indirectarg843 = alloca %"any[]", align 8
  %indirectarg848 = alloca %"char[]", align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr861 = alloca i32, align 4
  %indirectarg862 = alloca %"char[]", align 8
  %indirectarg863 = alloca %"char[]", align 8
  %indirectarg864 = alloca %"char[]", align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr880 = alloca i64, align 8
  %indirectarg881 = alloca %"char[]", align 8
  %indirectarg882 = alloca %"char[]", align 8
  %indirectarg883 = alloca %"char[]", align 8
  %varargslots884 = alloca [1 x %any], align 16
  %indirectarg886 = alloca %"any[]", align 8
  %taddr890 = alloca i64, align 8
  %taddr891 = alloca i64, align 8
  %indirectarg892 = alloca %"char[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %varargslots895 = alloca [2 x %any], align 16
  %indirectarg898 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr915 = alloca i64, align 8
  %indirectarg916 = alloca %"char[]", align 8
  %indirectarg917 = alloca %"char[]", align 8
  %indirectarg918 = alloca %"char[]", align 8
  %varargslots919 = alloca [1 x %any], align 16
  %indirectarg921 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %taddr926 = alloca i64, align 8
  %indirectarg927 = alloca %"char[]", align 8
  %indirectarg928 = alloca %"char[]", align 8
  %indirectarg929 = alloca %"char[]", align 8
  %varargslots930 = alloca [2 x %any], align 16
  %indirectarg933 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr942 = alloca i64, align 8
  %indirectarg943 = alloca %"char[]", align 8
  %indirectarg944 = alloca %"char[]", align 8
  %indirectarg945 = alloca %"char[]", align 8
  %varargslots946 = alloca [1 x %any], align 16
  %indirectarg948 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %taddr953 = alloca i64, align 8
  %indirectarg954 = alloca %"char[]", align 8
  %indirectarg955 = alloca %"char[]", align 8
  %indirectarg956 = alloca %"char[]", align 8
  %varargslots957 = alloca [2 x %any], align 16
  %indirectarg960 = alloca %"any[]", align 8
  %indirectarg965 = alloca %"char[]", align 8
  %indirectarg966 = alloca %"char[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %taddr973 = alloca i64, align 8
  %indirectarg974 = alloca %"char[]", align 8
  %indirectarg975 = alloca %"char[]", align 8
  %indirectarg976 = alloca %"char[]", align 8
  %varargslots977 = alloca [1 x %any], align 16
  %indirectarg979 = alloca %"any[]", align 8
  %taddr983 = alloca i64, align 8
  %taddr984 = alloca i64, align 8
  %indirectarg985 = alloca %"char[]", align 8
  %indirectarg986 = alloca %"char[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %varargslots988 = alloca [2 x %any], align 16
  %indirectarg991 = alloca %"any[]", align 8
  %taddr997 = alloca i64, align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %varargslots1001 = alloca [1 x %any], align 16
  %indirectarg1003 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %taddr1008 = alloca i64, align 8
  %indirectarg1009 = alloca %"char[]", align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %varargslots1012 = alloca [2 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %indirectarg1020 = alloca %"char[]", align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1027 = alloca %"char[]", align 8
  %indirectarg1028 = alloca %"char[]", align 8
  %indirectarg1029 = alloca %"char[]", align 8
  %taddr1038 = alloca i64, align 8
  %indirectarg1039 = alloca %"char[]", align 8
  %indirectarg1040 = alloca %"char[]", align 8
  %indirectarg1041 = alloca %"char[]", align 8
  %varargslots1042 = alloca [1 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1048 = alloca i64, align 8
  %taddr1049 = alloca i64, align 8
  %indirectarg1050 = alloca %"char[]", align 8
  %indirectarg1051 = alloca %"char[]", align 8
  %indirectarg1052 = alloca %"char[]", align 8
  %varargslots1053 = alloca [2 x %any], align 16
  %indirectarg1056 = alloca %"any[]", align 8
  %taddr1075 = alloca i64, align 8
  %indirectarg1076 = alloca %"char[]", align 8
  %indirectarg1077 = alloca %"char[]", align 8
  %indirectarg1078 = alloca %"char[]", align 8
  %varargslots1079 = alloca [1 x %any], align 16
  %indirectarg1081 = alloca %"any[]", align 8
  %taddr1085 = alloca i64, align 8
  %taddr1086 = alloca i64, align 8
  %indirectarg1087 = alloca %"char[]", align 8
  %indirectarg1088 = alloca %"char[]", align 8
  %indirectarg1089 = alloca %"char[]", align 8
  %varargslots1090 = alloca [2 x %any], align 16
  %indirectarg1093 = alloca %"any[]", align 8
  %taddr1108 = alloca i64, align 8
  %indirectarg1109 = alloca %"char[]", align 8
  %indirectarg1110 = alloca %"char[]", align 8
  %indirectarg1111 = alloca %"char[]", align 8
  %varargslots1112 = alloca [1 x %any], align 16
  %indirectarg1114 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %taddr1119 = alloca i64, align 8
  %indirectarg1120 = alloca %"char[]", align 8
  %indirectarg1121 = alloca %"char[]", align 8
  %indirectarg1122 = alloca %"char[]", align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %carry1135 = alloca i32, align 4
  %tmp1140 = alloca i64, align 8
  %taddr1144 = alloca i64, align 8
  %indirectarg1145 = alloca %"char[]", align 8
  %indirectarg1146 = alloca %"char[]", align 8
  %indirectarg1147 = alloca %"char[]", align 8
  %varargslots1148 = alloca [1 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %taddr1154 = alloca i64, align 8
  %taddr1155 = alloca i64, align 8
  %indirectarg1156 = alloca %"char[]", align 8
  %indirectarg1157 = alloca %"char[]", align 8
  %indirectarg1158 = alloca %"char[]", align 8
  %varargslots1159 = alloca [2 x %any], align 16
  %indirectarg1162 = alloca %"any[]", align 8
  %taddr1175 = alloca i64, align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %indirectarg1178 = alloca %"char[]", align 8
  %varargslots1179 = alloca [1 x %any], align 16
  %indirectarg1181 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %taddr1186 = alloca i64, align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %indirectarg1189 = alloca %"char[]", align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1202 = alloca i64, align 8
  %indirectarg1203 = alloca %"char[]", align 8
  %indirectarg1204 = alloca %"char[]", align 8
  %indirectarg1205 = alloca %"char[]", align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %indirectarg1214 = alloca %"char[]", align 8
  %indirectarg1215 = alloca %"char[]", align 8
  %indirectarg1216 = alloca %"char[]", align 8
  %varargslots1217 = alloca [2 x %any], align 16
  %indirectarg1220 = alloca %"any[]", align 8
  %taddr1236 = alloca i64, align 8
  %indirectarg1237 = alloca %"char[]", align 8
  %indirectarg1238 = alloca %"char[]", align 8
  %indirectarg1239 = alloca %"char[]", align 8
  %varargslots1240 = alloca [1 x %any], align 16
  %indirectarg1242 = alloca %"any[]", align 8
  %taddr1246 = alloca i64, align 8
  %taddr1247 = alloca i64, align 8
  %indirectarg1248 = alloca %"char[]", align 8
  %indirectarg1249 = alloca %"char[]", align 8
  %indirectarg1250 = alloca %"char[]", align 8
  %varargslots1251 = alloca [2 x %any], align 16
  %indirectarg1254 = alloca %"any[]", align 8
  %taddr1282 = alloca i64, align 8
  %indirectarg1283 = alloca %"char[]", align 8
  %indirectarg1284 = alloca %"char[]", align 8
  %indirectarg1285 = alloca %"char[]", align 8
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1292 = alloca i64, align 8
  %taddr1293 = alloca i64, align 8
  %indirectarg1294 = alloca %"char[]", align 8
  %indirectarg1295 = alloca %"char[]", align 8
  %indirectarg1296 = alloca %"char[]", align 8
  %varargslots1297 = alloca [2 x %any], align 16
  %indirectarg1300 = alloca %"any[]", align 8
  %taddr1306 = alloca i64, align 8
  %indirectarg1307 = alloca %"char[]", align 8
  %indirectarg1308 = alloca %"char[]", align 8
  %indirectarg1309 = alloca %"char[]", align 8
  %varargslots1310 = alloca [1 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1316 = alloca i64, align 8
  %taddr1317 = alloca i64, align 8
  %indirectarg1318 = alloca %"char[]", align 8
  %indirectarg1319 = alloca %"char[]", align 8
  %indirectarg1320 = alloca %"char[]", align 8
  %varargslots1321 = alloca [2 x %any], align 16
  %indirectarg1324 = alloca %"any[]", align 8
  %taddr1332 = alloca i64, align 8
  %indirectarg1333 = alloca %"char[]", align 8
  %indirectarg1334 = alloca %"char[]", align 8
  %indirectarg1335 = alloca %"char[]", align 8
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1342 = alloca i64, align 8
  %taddr1343 = alloca i64, align 8
  %indirectarg1344 = alloca %"char[]", align 8
  %indirectarg1345 = alloca %"char[]", align 8
  %indirectarg1346 = alloca %"char[]", align 8
  %varargslots1347 = alloca [2 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %carry1356 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1367 = alloca i64, align 8
  %indirectarg1368 = alloca %"char[]", align 8
  %indirectarg1369 = alloca %"char[]", align 8
  %indirectarg1370 = alloca %"char[]", align 8
  %varargslots1371 = alloca [1 x %any], align 16
  %indirectarg1373 = alloca %"any[]", align 8
  %taddr1377 = alloca i64, align 8
  %taddr1378 = alloca i64, align 8
  %indirectarg1379 = alloca %"char[]", align 8
  %indirectarg1380 = alloca %"char[]", align 8
  %indirectarg1381 = alloca %"char[]", align 8
  %varargslots1382 = alloca [2 x %any], align 16
  %indirectarg1385 = alloca %"any[]", align 8
  %taddr1391 = alloca i64, align 8
  %indirectarg1392 = alloca %"char[]", align 8
  %indirectarg1393 = alloca %"char[]", align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %indirectarg1403 = alloca %"char[]", align 8
  %indirectarg1404 = alloca %"char[]", align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %varargslots1406 = alloca [2 x %any], align 16
  %indirectarg1409 = alloca %"any[]", align 8
  %taddr1422 = alloca i64, align 8
  %indirectarg1423 = alloca %"char[]", align 8
  %indirectarg1424 = alloca %"char[]", align 8
  %indirectarg1425 = alloca %"char[]", align 8
  %varargslots1426 = alloca [1 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %taddr1432 = alloca i64, align 8
  %taddr1433 = alloca i64, align 8
  %indirectarg1434 = alloca %"char[]", align 8
  %indirectarg1435 = alloca %"char[]", align 8
  %indirectarg1436 = alloca %"char[]", align 8
  %varargslots1437 = alloca [2 x %any], align 16
  %indirectarg1440 = alloca %"any[]", align 8
  %taddr1446 = alloca i64, align 8
  %indirectarg1447 = alloca %"char[]", align 8
  %indirectarg1448 = alloca %"char[]", align 8
  %indirectarg1449 = alloca %"char[]", align 8
  %varargslots1450 = alloca [1 x %any], align 16
  %indirectarg1452 = alloca %"any[]", align 8
  %taddr1456 = alloca i64, align 8
  %taddr1457 = alloca i64, align 8
  %indirectarg1458 = alloca %"char[]", align 8
  %indirectarg1459 = alloca %"char[]", align 8
  %indirectarg1460 = alloca %"char[]", align 8
  %varargslots1461 = alloca [2 x %any], align 16
  %indirectarg1464 = alloca %"any[]", align 8
  %tmp1486 = alloca i32, align 4
  %taddr1490 = alloca i64, align 8
  %indirectarg1491 = alloca %"char[]", align 8
  %indirectarg1492 = alloca %"char[]", align 8
  %indirectarg1493 = alloca %"char[]", align 8
  %varargslots1494 = alloca [1 x %any], align 16
  %indirectarg1496 = alloca %"any[]", align 8
  %taddr1500 = alloca i64, align 8
  %taddr1501 = alloca i64, align 8
  %indirectarg1502 = alloca %"char[]", align 8
  %indirectarg1503 = alloca %"char[]", align 8
  %indirectarg1504 = alloca %"char[]", align 8
  %varargslots1505 = alloca [2 x %any], align 16
  %indirectarg1508 = alloca %"any[]", align 8
  %taddr1512 = alloca i32, align 4
  %indirectarg1513 = alloca %"char[]", align 8
  %indirectarg1514 = alloca %"char[]", align 8
  %indirectarg1515 = alloca %"char[]", align 8
  %varargslots1516 = alloca [1 x %any], align 16
  %indirectarg1518 = alloca %"any[]", align 8
  %taddr1522 = alloca i32, align 4
  %indirectarg1523 = alloca %"char[]", align 8
  %indirectarg1524 = alloca %"char[]", align 8
  %indirectarg1525 = alloca %"char[]", align 8
  %varargslots1526 = alloca [1 x %any], align 16
  %indirectarg1528 = alloca %"any[]", align 8
  %taddr1536 = alloca i64, align 8
  %indirectarg1537 = alloca %"char[]", align 8
  %indirectarg1538 = alloca %"char[]", align 8
  %indirectarg1539 = alloca %"char[]", align 8
  %varargslots1540 = alloca [1 x %any], align 16
  %indirectarg1542 = alloca %"any[]", align 8
  %taddr1546 = alloca i64, align 8
  %taddr1547 = alloca i64, align 8
  %indirectarg1548 = alloca %"char[]", align 8
  %indirectarg1549 = alloca %"char[]", align 8
  %indirectarg1550 = alloca %"char[]", align 8
  %varargslots1551 = alloca [2 x %any], align 16
  %indirectarg1554 = alloca %"any[]", align 8
  %taddr1560 = alloca i64, align 8
  %indirectarg1561 = alloca %"char[]", align 8
  %indirectarg1562 = alloca %"char[]", align 8
  %indirectarg1563 = alloca %"char[]", align 8
  %varargslots1564 = alloca [1 x %any], align 16
  %indirectarg1566 = alloca %"any[]", align 8
  %taddr1570 = alloca i64, align 8
  %taddr1571 = alloca i64, align 8
  %indirectarg1572 = alloca %"char[]", align 8
  %indirectarg1573 = alloca %"char[]", align 8
  %indirectarg1574 = alloca %"char[]", align 8
  %varargslots1575 = alloca [2 x %any], align 16
  %indirectarg1578 = alloca %"any[]", align 8
  %taddr1583 = alloca i32, align 4
  %indirectarg1584 = alloca %"char[]", align 8
  %indirectarg1585 = alloca %"char[]", align 8
  %indirectarg1586 = alloca %"char[]", align 8
  %varargslots1587 = alloca [1 x %any], align 16
  %indirectarg1589 = alloca %"any[]", align 8
  %taddr1595 = alloca i32, align 4
  %indirectarg1596 = alloca %"char[]", align 8
  %indirectarg1597 = alloca %"char[]", align 8
  %indirectarg1598 = alloca %"char[]", align 8
  %varargslots1599 = alloca [1 x %any], align 16
  %indirectarg1601 = alloca %"any[]", align 8
  %taddr1605 = alloca i32, align 4
  %indirectarg1606 = alloca %"char[]", align 8
  %indirectarg1607 = alloca %"char[]", align 8
  %indirectarg1608 = alloca %"char[]", align 8
  %varargslots1609 = alloca [1 x %any], align 16
  %indirectarg1611 = alloca %"any[]", align 8
  %taddr1619 = alloca i64, align 8
  %indirectarg1620 = alloca %"char[]", align 8
  %indirectarg1621 = alloca %"char[]", align 8
  %indirectarg1622 = alloca %"char[]", align 8
  %varargslots1623 = alloca [1 x %any], align 16
  %indirectarg1625 = alloca %"any[]", align 8
  %taddr1629 = alloca i64, align 8
  %taddr1630 = alloca i64, align 8
  %indirectarg1631 = alloca %"char[]", align 8
  %indirectarg1632 = alloca %"char[]", align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %varargslots1634 = alloca [2 x %any], align 16
  %indirectarg1637 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %taddr1690 = alloca i64, align 8
  %indirectarg1691 = alloca %"char[]", align 8
  %indirectarg1692 = alloca %"char[]", align 8
  %indirectarg1693 = alloca %"char[]", align 8
  %varargslots1694 = alloca [1 x %any], align 16
  %indirectarg1696 = alloca %"any[]", align 8
  %taddr1700 = alloca i64, align 8
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [2 x %any], align 16
  %indirectarg1708 = alloca %"any[]", align 8
  %y1715 = alloca double, align 8
  %i1716 = alloca i32, align 4
  %taddr1730 = alloca i64, align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %indirectarg1733 = alloca %"char[]", align 8
  %varargslots1734 = alloca [1 x %any], align 16
  %indirectarg1736 = alloca %"any[]", align 8
  %taddr1740 = alloca i64, align 8
  %taddr1741 = alloca i64, align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %indirectarg1744 = alloca %"char[]", align 8
  %varargslots1745 = alloca [2 x %any], align 16
  %indirectarg1748 = alloca %"any[]", align 8
  %taddr1758 = alloca i64, align 8
  %indirectarg1759 = alloca %"char[]", align 8
  %indirectarg1760 = alloca %"char[]", align 8
  %indirectarg1761 = alloca %"char[]", align 8
  %varargslots1762 = alloca [1 x %any], align 16
  %indirectarg1764 = alloca %"any[]", align 8
  %taddr1768 = alloca i64, align 8
  %taddr1769 = alloca i64, align 8
  %indirectarg1770 = alloca %"char[]", align 8
  %indirectarg1771 = alloca %"char[]", align 8
  %indirectarg1772 = alloca %"char[]", align 8
  %varargslots1773 = alloca [2 x %any], align 16
  %indirectarg1776 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1785 = alloca i32, align 4
  %bias1798 = alloca double, align 8
  %frac = alloca double, align 8
  %x1801 = alloca double, align 8
  %n1804 = alloca i32, align 4
  %mag1805 = alloca double, align 8
  %sgn1806 = alloca double, align 8
  %x1807 = alloca double, align 8
  %y1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %n1811 = alloca i32, align 4
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1830 = alloca i64, align 8
  %indirectarg1831 = alloca %"char[]", align 8
  %indirectarg1832 = alloca %"char[]", align 8
  %indirectarg1833 = alloca %"char[]", align 8
  %varargslots1834 = alloca [1 x %any], align 16
  %indirectarg1836 = alloca %"any[]", align 8
  %taddr1840 = alloca i64, align 8
  %taddr1841 = alloca i64, align 8
  %indirectarg1842 = alloca %"char[]", align 8
  %indirectarg1843 = alloca %"char[]", align 8
  %indirectarg1844 = alloca %"char[]", align 8
  %varargslots1845 = alloca [2 x %any], align 16
  %indirectarg1848 = alloca %"any[]", align 8
  %switch1851 = alloca i8, align 1
  %x1913 = alloca double, align 8
  %x1941 = alloca double, align 8
  %n1942 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %1, metadata !2331, metadata !DIExpression()), !dbg !2332
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !2333, metadata !DIExpression()), !dbg !2335
  store i32 1, ptr %sign, align 4, !dbg !2337
  br label %loop.cond, !dbg !2338

loop.cond:                                        ; preds = %checkok17, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2339
  %2 = load i64, ptr %ptradd, align 8, !dbg !2339
  %intbool = icmp ne i64 %2, 0, !dbg !2339
  br i1 %intbool, label %and.rhs, label %and.phi, !dbg !2339

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2341
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2341
  %4 = load ptr, ptr %chars, align 8, !dbg !2341
  %ge = icmp sge i64 0, %3, !dbg !2342
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2342
  br i1 %5, label %panic, label %checkok, !dbg !2342

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !2342
  %eq = icmp eq i8 %6, 32, !dbg !2341
  br label %and.phi, !dbg !2341

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2341
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2341

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !2343
  %8 = extractvalue %"char[]" %7, 0, !dbg !2343
  %9 = extractvalue %"char[]" %7, 1, !dbg !2344
  %gt = icmp sgt i64 1, %9, !dbg !2344
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2344
  br i1 %10, label %panic7, label %checkok17, !dbg !2344

checkok17:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !2343
  %ptradd18 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !2343
  %11 = insertvalue %"char[]" undef, ptr %ptradd18, 0, !dbg !2343
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2343
  store %"char[]" %12, ptr %chars, align 8, !dbg !2343
  br label %loop.cond, !dbg !2343

loop.exit:                                        ; preds = %and.phi
  %ptradd19 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2345
  %13 = load i64, ptr %ptradd19, align 8, !dbg !2345
  %not = icmp eq i64 %13, 0, !dbg !2345
  br i1 %not, label %if.then, label %if.exit, !dbg !2345

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2346
  br label %err_retblock, !dbg !2346

if.exit:                                          ; preds = %loop.exit
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2347
  %14 = load i64, ptr %ptradd20, align 8, !dbg !2347
  %15 = load ptr, ptr %chars, align 8, !dbg !2347
  %ge21 = icmp sge i64 0, %14, !dbg !2349
  %16 = call i1 @llvm.expect.i1(i1 %ge21, i1 false), !dbg !2349
  br i1 %16, label %panic22, label %checkok32, !dbg !2349

checkok32:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok32
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case33
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2350
  br label %switch.case33, !dbg !2352

switch.case33:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !2353
  %20 = extractvalue %"char[]" %19, 0, !dbg !2353
  %21 = extractvalue %"char[]" %19, 1, !dbg !2355
  %gt34 = icmp sgt i64 1, %21, !dbg !2355
  %22 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2355
  br i1 %22, label %panic35, label %checkok45, !dbg !2355

checkok45:                                        ; preds = %switch.case33
  %size46 = sub i64 %21, 1, !dbg !2353
  %ptradd47 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !2353
  %23 = insertvalue %"char[]" undef, ptr %ptradd47, 0, !dbg !2353
  %24 = insertvalue %"char[]" %23, i64 %size46, 1, !dbg !2353
  store %"char[]" %24, ptr %chars, align 8, !dbg !2353
  br label %switch.exit, !dbg !2353

switch.exit:                                      ; preds = %checkok45, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !2356
  %26 = extractvalue %"char[]" %25, 1, !dbg !2356
  %27 = extractvalue %"char[]" %25, 0, !dbg !2356
  %eq48 = icmp eq i64 %26, 8, !dbg !2356
  br i1 %eq48, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2356

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd49 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd50 = getelementptr inbounds i8, ptr @.str, i64 %28
  %29 = load i8, ptr %ptradd49, align 1
  %30 = load i8, ptr %ptradd50, align 1
  %eq51 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq51, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !2357
  %33 = extractvalue %"char[]" %32, 1, !dbg !2357
  %34 = extractvalue %"char[]" %32, 0, !dbg !2357
  %eq52 = icmp eq i64 %33, 8, !dbg !2357
  br i1 %eq52, label %slice_cmp_values53, label %slice_cmp_exit61, !dbg !2357

slice_cmp_values53:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx54, align 8
  br label %slice_loop_start55

slice_loop_start55:                               ; preds = %slice_loop_comparison57, %slice_cmp_values53
  %35 = load i64, ptr %cmp.idx54, align 8
  %lt56 = icmp slt i64 %35, %33
  br i1 %lt56, label %slice_loop_comparison57, label %slice_cmp_exit61

slice_loop_comparison57:                          ; preds = %slice_loop_start55
  %ptradd58 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd59 = getelementptr inbounds i8, ptr @.str.75, i64 %35
  %36 = load i8, ptr %ptradd58, align 1
  %37 = load i8, ptr %ptradd59, align 1
  %eq60 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx54, align 8
  br i1 %eq60, label %slice_loop_start55, label %slice_cmp_exit61

slice_cmp_exit61:                                 ; preds = %slice_loop_comparison57, %slice_loop_start55, %or.rhs
  %slice_cmp_phi62 = phi i1 [ true, %slice_loop_start55 ], [ false, %or.rhs ], [ false, %slice_loop_comparison57 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit61, %slice_cmp_exit
  %val63 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi62, %slice_cmp_exit61 ]
  br i1 %val63, label %if.then64, label %if.exit65

if.then64:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !2358
  %sifp = sitofp i32 %39 to double, !dbg !2358
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !2358
  store double %fmul, ptr %blockret, align 8, !dbg !2358
  br label %expr_block.exit1945, !dbg !2358

if.exit65:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !2359
  %41 = extractvalue %"char[]" %40, 1, !dbg !2359
  %42 = extractvalue %"char[]" %40, 0, !dbg !2359
  %eq66 = icmp eq i64 %41, 3, !dbg !2359
  br i1 %eq66, label %slice_cmp_values67, label %slice_cmp_exit75, !dbg !2359

slice_cmp_values67:                               ; preds = %if.exit65
  store i64 0, ptr %cmp.idx68, align 8
  br label %slice_loop_start69

slice_loop_start69:                               ; preds = %slice_loop_comparison71, %slice_cmp_values67
  %43 = load i64, ptr %cmp.idx68, align 8
  %lt70 = icmp slt i64 %43, %41
  br i1 %lt70, label %slice_loop_comparison71, label %slice_cmp_exit75

slice_loop_comparison71:                          ; preds = %slice_loop_start69
  %ptradd72 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd73 = getelementptr inbounds i8, ptr @.str.76, i64 %43
  %44 = load i8, ptr %ptradd72, align 1
  %45 = load i8, ptr %ptradd73, align 1
  %eq74 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx68, align 8
  br i1 %eq74, label %slice_loop_start69, label %slice_cmp_exit75

slice_cmp_exit75:                                 ; preds = %slice_loop_comparison71, %slice_loop_start69, %if.exit65
  %slice_cmp_phi76 = phi i1 [ true, %slice_loop_start69 ], [ false, %if.exit65 ], [ false, %slice_loop_comparison71 ]
  br i1 %slice_cmp_phi76, label %or.phi89, label %or.rhs77

or.rhs77:                                         ; preds = %slice_cmp_exit75
  %47 = load %"char[]", ptr %chars, align 8, !dbg !2360
  %48 = extractvalue %"char[]" %47, 1, !dbg !2360
  %49 = extractvalue %"char[]" %47, 0, !dbg !2360
  %eq78 = icmp eq i64 %48, 3, !dbg !2360
  br i1 %eq78, label %slice_cmp_values79, label %slice_cmp_exit87, !dbg !2360

slice_cmp_values79:                               ; preds = %or.rhs77
  store i64 0, ptr %cmp.idx80, align 8
  br label %slice_loop_start81

slice_loop_start81:                               ; preds = %slice_loop_comparison83, %slice_cmp_values79
  %50 = load i64, ptr %cmp.idx80, align 8
  %lt82 = icmp slt i64 %50, %48
  br i1 %lt82, label %slice_loop_comparison83, label %slice_cmp_exit87

slice_loop_comparison83:                          ; preds = %slice_loop_start81
  %ptradd84 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd85 = getelementptr inbounds i8, ptr @.str.77, i64 %50
  %51 = load i8, ptr %ptradd84, align 1
  %52 = load i8, ptr %ptradd85, align 1
  %eq86 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx80, align 8
  br i1 %eq86, label %slice_loop_start81, label %slice_cmp_exit87

slice_cmp_exit87:                                 ; preds = %slice_loop_comparison83, %slice_loop_start81, %or.rhs77
  %slice_cmp_phi88 = phi i1 [ true, %slice_loop_start81 ], [ false, %or.rhs77 ], [ false, %slice_loop_comparison83 ]
  br label %or.phi89

or.phi89:                                         ; preds = %slice_cmp_exit87, %slice_cmp_exit75
  %val90 = phi i1 [ true, %slice_cmp_exit75 ], [ %slice_cmp_phi88, %slice_cmp_exit87 ]
  br i1 %val90, label %if.then91, label %if.exit92

if.then91:                                        ; preds = %or.phi89
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !2361
  br label %expr_block.exit1945, !dbg !2361

if.exit92:                                        ; preds = %or.phi89
  %ptradd93 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2362
  %54 = load i64, ptr %ptradd93, align 8, !dbg !2362
  %lt94 = icmp ult i64 2, %54, !dbg !2362
  br i1 %lt94, label %and.rhs95, label %and.phi110, !dbg !2362

and.rhs95:                                        ; preds = %if.exit92
  %ptradd96 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2363
  %55 = load i64, ptr %ptradd96, align 8, !dbg !2363
  %56 = load ptr, ptr %chars, align 8, !dbg !2363
  %ge97 = icmp sge i64 0, %55, !dbg !2364
  %57 = call i1 @llvm.expect.i1(i1 %ge97, i1 false), !dbg !2364
  br i1 %57, label %panic98, label %checkok108, !dbg !2364

checkok108:                                       ; preds = %and.rhs95
  %58 = load i8, ptr %56, align 1, !dbg !2364
  %eq109 = icmp eq i8 %58, 48, !dbg !2363
  br label %and.phi110, !dbg !2363

and.phi110:                                       ; preds = %checkok108, %if.exit92
  %val111 = phi i1 [ false, %if.exit92 ], [ %eq109, %checkok108 ], !dbg !2363
  br i1 %val111, label %and.rhs112, label %and.phi128, !dbg !2363

and.rhs112:                                       ; preds = %and.phi110
  %ptradd113 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2365
  %59 = load i64, ptr %ptradd113, align 8, !dbg !2365
  %60 = load ptr, ptr %chars, align 8, !dbg !2365
  %ge114 = icmp sge i64 1, %59, !dbg !2366
  %61 = call i1 @llvm.expect.i1(i1 %ge114, i1 false), !dbg !2366
  br i1 %61, label %panic115, label %checkok125, !dbg !2366

checkok125:                                       ; preds = %and.rhs112
  %ptradd126 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !2366
  %62 = load i8, ptr %ptradd126, align 1, !dbg !2366
  %zext = zext i8 %62 to i32, !dbg !2366
  %or = or i32 %zext, 32, !dbg !2365
  %eq127 = icmp eq i32 %or, 120, !dbg !2365
  %check = icmp sge i32 %or, 0, !dbg !2365
  %siui-eq = and i1 %check, %eq127, !dbg !2365
  br label %and.phi128, !dbg !2365

and.phi128:                                       ; preds = %checkok125, %and.phi110
  %val129 = phi i1 [ false, %and.phi110 ], [ %siui-eq, %checkok125 ], !dbg !2365
  br i1 %val129, label %if.then130, label %if.exit418, !dbg !2365

if.then130:                                       ; preds = %and.phi128
  %63 = load %"char[]", ptr %chars, align 8, !dbg !2367
  %64 = extractvalue %"char[]" %63, 0, !dbg !2367
  %65 = extractvalue %"char[]" %63, 1, !dbg !2369
  %gt131 = icmp sgt i64 2, %65, !dbg !2369
  %66 = call i1 @llvm.expect.i1(i1 %gt131, i1 false), !dbg !2369
  br i1 %66, label %panic132, label %checkok142, !dbg !2369

checkok142:                                       ; preds = %if.then130
  %size143 = sub i64 %65, 2, !dbg !2370
  %ptradd144 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !2370
  %67 = insertvalue %"char[]" undef, ptr %ptradd144, 0, !dbg !2370
  %68 = insertvalue %"char[]" %67, i64 %size143, 1, !dbg !2370
  store %"char[]" %68, ptr %chars145, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign146, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !2371, metadata !DIExpression()), !dbg !2373
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2375
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2376, metadata !DIExpression()), !dbg !2377
  store i32 0, ptr %x, align 4, !dbg !2377
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !2378, metadata !DIExpression()), !dbg !2379
  store i64 0, ptr %rp, align 8, !dbg !2379
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !2380, metadata !DIExpression()), !dbg !2381
  store i64 0, ptr %dc, align 8, !dbg !2381
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2382, metadata !DIExpression()), !dbg !2383
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !2384, metadata !DIExpression()), !dbg !2385
  store i8 0, ptr %got_rad, align 1, !dbg !2385
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !2386, metadata !DIExpression()), !dbg !2387
  store i8 0, ptr %got_digit, align 1, !dbg !2387
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !2388, metadata !DIExpression()), !dbg !2389
  store i8 0, ptr %got_tail, align 1, !dbg !2389
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2390, metadata !DIExpression()), !dbg !2391
  %ptradd148 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2392
  %70 = load i64, ptr %ptradd148, align 8, !dbg !2392
  store i64 %70, ptr %len, align 8, !dbg !2392
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !2393, metadata !DIExpression()), !dbg !2394
  %71 = load i64, ptr %len, align 8, !dbg !2395
  %sub = sub i64 %71, 1, !dbg !2395
  store i64 %sub, ptr %last_char, align 8, !dbg !2395
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2396, metadata !DIExpression()), !dbg !2397
  store i64 0, ptr %index, align 8, !dbg !2397
  call void @llvm.dbg.declare(metadata ptr %y, metadata !2398, metadata !DIExpression()), !dbg !2399
  store double 0.000000e+00, ptr %y, align 8, !dbg !2399
  br label %loop.cond149, !dbg !2400

loop.cond149:                                     ; preds = %if.exit168, %checkok142
  %ptradd150 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2401
  %72 = load i64, ptr %ptradd150, align 8, !dbg !2401
  %73 = load ptr, ptr %chars145, align 8, !dbg !2401
  %74 = load i64, ptr %index, align 8, !dbg !2403
  %ge151 = icmp uge i64 %74, %72, !dbg !2403
  %75 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !2403
  br i1 %75, label %panic152, label %checkok162, !dbg !2403

checkok162:                                       ; preds = %loop.cond149
  %ptradd163 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !2403
  %76 = load i8, ptr %ptradd163, align 1, !dbg !2403
  store i8 %76, ptr %c, align 1, !dbg !2403
  %eq164 = icmp eq i8 %76, 48, !dbg !2404
  br i1 %eq164, label %loop.body165, label %loop.exit169, !dbg !2404

loop.body165:                                     ; preds = %checkok162
  %77 = load i64, ptr %index, align 8, !dbg !2405
  %78 = load i64, ptr %last_char, align 8, !dbg !2407
  %eq166 = icmp eq i64 %77, %78, !dbg !2405
  br i1 %eq166, label %if.then167, label %if.exit168, !dbg !2405

if.then167:                                       ; preds = %loop.body165
  store double 0.000000e+00, ptr %blockret147, align 8, !dbg !2408
  br label %expr_block.exit417, !dbg !2408

if.exit168:                                       ; preds = %loop.body165
  %79 = load i64, ptr %index, align 8, !dbg !2409
  %add = add i64 %79, 1, !dbg !2409
  store i64 %add, ptr %index, align 8, !dbg !2409
  br label %loop.cond149, !dbg !2409

loop.exit169:                                     ; preds = %checkok162
  %80 = load i8, ptr %c, align 1, !dbg !2410
  %eq170 = icmp eq i8 %80, 46, !dbg !2410
  br i1 %eq170, label %if.then171, label %if.exit226, !dbg !2410

if.then171:                                       ; preds = %loop.exit169
  store i8 1, ptr %got_rad, align 1, !dbg !2411
  %81 = load i64, ptr %index, align 8, !dbg !2413
  %82 = load i64, ptr %last_char, align 8, !dbg !2414
  %eq172 = icmp eq i64 %81, %82, !dbg !2413
  br i1 %eq172, label %if.then173, label %if.exit179, !dbg !2413

if.then173:                                       ; preds = %if.then171
  %83 = load i8, ptr %got_digit, align 1, !dbg !2415
  %84 = trunc i8 %83 to i1, !dbg !2415
  %not174 = xor i1 %84, true, !dbg !2415
  br i1 %not174, label %if.then175, label %if.exit176, !dbg !2415

if.then175:                                       ; preds = %if.then173
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2417
  br label %err_retblock, !dbg !2417

if.exit176:                                       ; preds = %if.then173
  %85 = load i32, ptr %sign146, align 4, !dbg !2418
  %sifp177 = sitofp i32 %85 to double, !dbg !2418
  %fmul178 = fmul double %sifp177, 0.000000e+00, !dbg !2418
  store double %fmul178, ptr %blockret147, align 8, !dbg !2418
  br label %expr_block.exit417, !dbg !2418

if.exit179:                                       ; preds = %if.then171
  %86 = load i64, ptr %index, align 8, !dbg !2419
  %87 = load i64, ptr %last_char, align 8, !dbg !2420
  %neq = icmp ne i64 %86, %87, !dbg !2419
  br i1 %neq, label %and.rhs180, label %and.phi197, !dbg !2419

and.rhs180:                                       ; preds = %if.exit179
  %ptradd181 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2421
  %88 = load i64, ptr %ptradd181, align 8, !dbg !2421
  %89 = load ptr, ptr %chars145, align 8, !dbg !2421
  %90 = load i64, ptr %index, align 8, !dbg !2422
  %add182 = add i64 %90, 1, !dbg !2422
  store i64 %add182, ptr %index, align 8, !dbg !2422
  %ge183 = icmp uge i64 %add182, %88, !dbg !2422
  %91 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !2422
  br i1 %91, label %panic184, label %checkok194, !dbg !2422

checkok194:                                       ; preds = %and.rhs180
  %ptradd195 = getelementptr inbounds i8, ptr %89, i64 %add182, !dbg !2423
  %92 = load i8, ptr %ptradd195, align 1, !dbg !2423
  store i8 %92, ptr %c, align 1, !dbg !2423
  %eq196 = icmp eq i8 %92, 48, !dbg !2424
  br label %and.phi197, !dbg !2424

and.phi197:                                       ; preds = %checkok194, %if.exit179
  %val198 = phi i1 [ false, %if.exit179 ], [ %eq196, %checkok194 ], !dbg !2424
  br i1 %val198, label %if.then199, label %if.exit225, !dbg !2424

if.then199:                                       ; preds = %and.phi197
  %93 = load i64, ptr %rp, align 8, !dbg !2425
  %sub200 = sub i64 %93, 1, !dbg !2425
  store i64 %sub200, ptr %rp, align 8, !dbg !2425
  store i8 1, ptr %got_digit, align 1, !dbg !2427
  br label %loop.cond201, !dbg !2428

loop.cond201:                                     ; preds = %loop.body222, %if.then199
  %94 = load i64, ptr %last_char, align 8, !dbg !2429
  %95 = load i64, ptr %index, align 8, !dbg !2431
  %neq202 = icmp ne i64 %94, %95, !dbg !2429
  br i1 %neq202, label %and.rhs203, label %and.phi220, !dbg !2429

and.rhs203:                                       ; preds = %loop.cond201
  %ptradd204 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2432
  %96 = load i64, ptr %ptradd204, align 8, !dbg !2432
  %97 = load ptr, ptr %chars145, align 8, !dbg !2432
  %98 = load i64, ptr %index, align 8, !dbg !2433
  %add205 = add i64 %98, 1, !dbg !2433
  store i64 %add205, ptr %index, align 8, !dbg !2433
  %ge206 = icmp uge i64 %add205, %96, !dbg !2433
  %99 = call i1 @llvm.expect.i1(i1 %ge206, i1 false), !dbg !2433
  br i1 %99, label %panic207, label %checkok217, !dbg !2433

checkok217:                                       ; preds = %and.rhs203
  %ptradd218 = getelementptr inbounds i8, ptr %97, i64 %add205, !dbg !2434
  %100 = load i8, ptr %ptradd218, align 1, !dbg !2434
  store i8 %100, ptr %c, align 1, !dbg !2434
  %eq219 = icmp eq i8 %100, 48, !dbg !2435
  br label %and.phi220, !dbg !2435

and.phi220:                                       ; preds = %checkok217, %loop.cond201
  %val221 = phi i1 [ false, %loop.cond201 ], [ %eq219, %checkok217 ], !dbg !2435
  br i1 %val221, label %loop.body222, label %loop.exit224, !dbg !2435

loop.body222:                                     ; preds = %and.phi220
  %101 = load i64, ptr %rp, align 8, !dbg !2436
  %sub223 = sub i64 %101, 1, !dbg !2436
  store i64 %sub223, ptr %rp, align 8, !dbg !2436
  br label %loop.cond201, !dbg !2436

loop.exit224:                                     ; preds = %and.phi220
  br label %if.exit225, !dbg !2436

if.exit225:                                       ; preds = %loop.exit224, %and.phi197
  br label %if.exit226, !dbg !2436

if.exit226:                                       ; preds = %if.exit225, %loop.exit169
  br label %loop.cond227, !dbg !2438

loop.cond227:                                     ; preds = %checkok298, %if.exit226
  %102 = load i8, ptr %c, align 1, !dbg !2439
  %zext228 = zext i8 %102 to i32, !dbg !2439
  %sub229 = sub i32 %zext228, 48, !dbg !2439
  %lt230 = icmp ult i32 %sub229, 10, !dbg !2439
  br i1 %lt230, label %or.phi236, label %or.rhs231, !dbg !2439

or.rhs231:                                        ; preds = %loop.cond227
  %103 = load i8, ptr %c, align 1, !dbg !2441
  %zext232 = zext i8 %103 to i32, !dbg !2441
  %or233 = or i32 %zext232, 32, !dbg !2441
  %sub234 = sub i32 %or233, 97, !dbg !2441
  %lt235 = icmp slt i32 %sub234, 6, !dbg !2441
  %siui-lt = or i1 false, %lt235, !dbg !2441
  br label %or.phi236, !dbg !2441

or.phi236:                                        ; preds = %or.rhs231, %loop.cond227
  %val237 = phi i1 [ true, %loop.cond227 ], [ %siui-lt, %or.rhs231 ], !dbg !2441
  br i1 %val237, label %or.phi240, label %or.rhs238, !dbg !2441

or.rhs238:                                        ; preds = %or.phi236
  %104 = load i8, ptr %c, align 1, !dbg !2442
  %eq239 = icmp eq i8 %104, 46, !dbg !2442
  br label %or.phi240, !dbg !2442

or.phi240:                                        ; preds = %or.rhs238, %or.phi236
  %val241 = phi i1 [ true, %or.phi236 ], [ %eq239, %or.rhs238 ], !dbg !2442
  br i1 %val241, label %loop.body242, label %loop.exit300, !dbg !2442

loop.body242:                                     ; preds = %or.phi240
  %105 = load i8, ptr %c, align 1, !dbg !2443
  %eq243 = icmp eq i8 %105, 46, !dbg !2443
  br i1 %eq243, label %if.then244, label %if.else, !dbg !2443

if.then244:                                       ; preds = %loop.body242
  %106 = load i8, ptr %got_rad, align 1, !dbg !2445
  %107 = trunc i8 %106 to i1, !dbg !2445
  br i1 %107, label %if.then245, label %if.exit246, !dbg !2445

if.then245:                                       ; preds = %if.then244
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2447
  br label %err_retblock, !dbg !2447

if.exit246:                                       ; preds = %if.then244
  store i8 1, ptr %got_rad, align 1, !dbg !2448
  %108 = load i64, ptr %dc, align 8, !dbg !2449
  store i64 %108, ptr %rp, align 8, !dbg !2449
  br label %if.exit281, !dbg !2449

if.else:                                          ; preds = %loop.body242
  store i8 1, ptr %got_digit, align 1, !dbg !2450
  call void @llvm.dbg.declare(metadata ptr %d, metadata !2452, metadata !DIExpression()), !dbg !2453
  %109 = load i8, ptr %c, align 1, !dbg !2454
  %gt248 = icmp ugt i8 %109, 57, !dbg !2454
  br i1 %gt248, label %if.then249, label %if.exit254, !dbg !2454

if.then249:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !2456
  %zext250 = zext i8 %110 to i32, !dbg !2456
  %or251 = or i32 %zext250, 32, !dbg !2456
  %add252 = add i32 %or251, 10, !dbg !2456
  %sub253 = sub i32 %add252, 97, !dbg !2456
  store i32 %sub253, ptr %blockret247, align 4, !dbg !2456
  br label %expr_block.exit, !dbg !2456

if.exit254:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !2457
  %zext255 = zext i8 %111 to i32, !dbg !2457
  %sub256 = sub i32 %zext255, 48, !dbg !2457
  store i32 %sub256, ptr %blockret247, align 4, !dbg !2457
  br label %expr_block.exit, !dbg !2457

expr_block.exit:                                  ; preds = %if.exit254, %if.then249
  %112 = load i32, ptr %blockret247, align 4, !dbg !2457
  store i32 %112, ptr %d, align 4, !dbg !2457
  store i8 1, ptr %switch257, align 1
  br label %switch.entry258

switch.entry258:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch257, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !2458
  %lt259 = icmp slt i64 %115, 8, !dbg !2458
  %eq260 = icmp eq i1 %lt259, %114, !dbg !2458
  br i1 %eq260, label %switch.case261, label %next_if, !dbg !2458

switch.case261:                                   ; preds = %switch.entry258
  %116 = load i32, ptr %x, align 4, !dbg !2460
  %mul = mul i32 %116, 16, !dbg !2460
  %117 = load i32, ptr %d, align 4, !dbg !2462
  %add262 = add i32 %mul, %117, !dbg !2460
  store i32 %add262, ptr %x, align 4, !dbg !2460
  br label %switch.exit279, !dbg !2460

next_if:                                          ; preds = %switch.entry258
  %118 = load i64, ptr %dc, align 8, !dbg !2463
  %lt263 = icmp slt i64 %118, 14, !dbg !2463
  %eq264 = icmp eq i1 %lt263, %114, !dbg !2463
  br i1 %eq264, label %switch.case265, label %next_if268, !dbg !2463

switch.case265:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !2464
  %120 = load i32, ptr %d, align 4, !dbg !2466
  %sifp266 = sitofp i32 %120 to double, !dbg !2466
  %121 = load double, ptr %scale, align 8, !dbg !2467
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !2467
  store double %fdiv, ptr %scale, align 8, !dbg !2467
  %fmul267 = fmul double %sifp266, %fdiv, !dbg !2466
  %fadd = fadd double %119, %fmul267, !dbg !2464
  store double %fadd, ptr %y, align 8, !dbg !2464
  store i8 1, ptr %got_tail, align 1, !dbg !2468
  br label %switch.exit279, !dbg !2468

next_if268:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !2469
  %intbool269 = icmp ne i32 %122, 0, !dbg !2469
  br i1 %intbool269, label %and.rhs270, label %and.phi272, !dbg !2469

and.rhs270:                                       ; preds = %next_if268
  %123 = load i8, ptr %got_tail, align 1, !dbg !2470
  %124 = trunc i8 %123 to i1, !dbg !2470
  %not271 = xor i1 %124, true, !dbg !2470
  br label %and.phi272, !dbg !2470

and.phi272:                                       ; preds = %and.rhs270, %next_if268
  %val273 = phi i1 [ false, %next_if268 ], [ %not271, %and.rhs270 ], !dbg !2470
  %eq274 = icmp eq i1 %val273, %114, !dbg !2470
  br i1 %eq274, label %switch.case275, label %next_if278, !dbg !2470

switch.case275:                                   ; preds = %and.phi272
  %125 = load double, ptr %y, align 8, !dbg !2471
  %126 = load double, ptr %scale, align 8, !dbg !2473
  %fmul276 = fmul double 5.000000e-01, %126, !dbg !2474
  %fadd277 = fadd double %125, %fmul276, !dbg !2471
  store double %fadd277, ptr %y, align 8, !dbg !2471
  store i8 1, ptr %got_tail, align 1, !dbg !2475
  br label %switch.exit279, !dbg !2475

next_if278:                                       ; preds = %and.phi272
  br label %switch.exit279, !dbg !2475

switch.exit279:                                   ; preds = %next_if278, %switch.case275, %switch.case265, %switch.case261
  %127 = load i64, ptr %dc, align 8, !dbg !2476
  %add280 = add i64 %127, 1, !dbg !2476
  store i64 %add280, ptr %dc, align 8, !dbg !2476
  br label %if.exit281, !dbg !2476

if.exit281:                                       ; preds = %switch.exit279, %if.exit246
  %128 = load i64, ptr %index, align 8, !dbg !2477
  %129 = load i64, ptr %last_char, align 8, !dbg !2478
  %eq282 = icmp eq i64 %128, %129, !dbg !2477
  br i1 %eq282, label %if.then283, label %if.exit284, !dbg !2477

if.then283:                                       ; preds = %if.exit281
  br label %loop.exit300, !dbg !2479

if.exit284:                                       ; preds = %if.exit281
  %ptradd285 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2480
  %130 = load i64, ptr %ptradd285, align 8, !dbg !2480
  %131 = load ptr, ptr %chars145, align 8, !dbg !2480
  %132 = load i64, ptr %index, align 8, !dbg !2481
  %add286 = add i64 %132, 1, !dbg !2481
  store i64 %add286, ptr %index, align 8, !dbg !2481
  %ge287 = icmp uge i64 %add286, %130, !dbg !2481
  %133 = call i1 @llvm.expect.i1(i1 %ge287, i1 false), !dbg !2481
  br i1 %133, label %panic288, label %checkok298, !dbg !2481

checkok298:                                       ; preds = %if.exit284
  %ptradd299 = getelementptr inbounds i8, ptr %131, i64 %add286, !dbg !2482
  %134 = load i8, ptr %ptradd299, align 1, !dbg !2482
  store i8 %134, ptr %c, align 1, !dbg !2482
  br label %loop.cond227, !dbg !2482

loop.exit300:                                     ; preds = %if.then283, %or.phi240
  %135 = load i8, ptr %got_digit, align 1, !dbg !2483
  %136 = trunc i8 %135 to i1, !dbg !2483
  %not301 = xor i1 %136, true, !dbg !2483
  br i1 %not301, label %if.then302, label %if.exit303, !dbg !2483

if.then302:                                       ; preds = %loop.exit300
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2484
  br label %err_retblock, !dbg !2484

if.exit303:                                       ; preds = %loop.exit300
  %137 = load i8, ptr %got_rad, align 1, !dbg !2485
  %138 = trunc i8 %137 to i1, !dbg !2485
  %not304 = xor i1 %138, true, !dbg !2485
  br i1 %not304, label %if.then305, label %if.exit306, !dbg !2485

if.then305:                                       ; preds = %if.exit303
  %139 = load i64, ptr %dc, align 8, !dbg !2486
  store i64 %139, ptr %rp, align 8, !dbg !2486
  br label %if.exit306, !dbg !2486

if.exit306:                                       ; preds = %if.then305, %if.exit303
  br label %loop.cond307, !dbg !2487

loop.cond307:                                     ; preds = %loop.body309, %if.exit306
  %140 = load i64, ptr %dc, align 8, !dbg !2488
  %lt308 = icmp slt i64 %140, 8, !dbg !2488
  br i1 %lt308, label %loop.body309, label %loop.exit312, !dbg !2488

loop.body309:                                     ; preds = %loop.cond307
  %141 = load i32, ptr %x, align 4, !dbg !2490
  %mul310 = mul i32 %141, 16, !dbg !2490
  store i32 %mul310, ptr %x, align 4, !dbg !2490
  %142 = load i64, ptr %dc, align 8, !dbg !2491
  %add311 = add i64 %142, 1, !dbg !2491
  store i64 %add311, ptr %dc, align 8, !dbg !2491
  br label %loop.cond307, !dbg !2491

loop.exit312:                                     ; preds = %loop.cond307
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !2492, metadata !DIExpression()), !dbg !2493
  store i64 0, ptr %e2, align 8, !dbg !2493
  %143 = load i8, ptr %c, align 1, !dbg !2494
  %zext313 = zext i8 %143 to i32, !dbg !2494
  %or314 = or i32 %zext313, 32, !dbg !2494
  %eq315 = icmp eq i32 %or314, 112, !dbg !2494
  %check316 = icmp sge i32 %or314, 0, !dbg !2494
  %siui-eq317 = and i1 %check316, %eq315, !dbg !2494
  br i1 %siui-eq317, label %if.then318, label %if.exit344, !dbg !2494

if.then318:                                       ; preds = %loop.exit312
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !2495, metadata !DIExpression()), !dbg !2497
  %144 = load %"char[]", ptr %chars145, align 8, !dbg !2498
  %145 = extractvalue %"char[]" %144, 0, !dbg !2498
  %146 = load i64, ptr %index, align 8, !dbg !2499
  %add319 = add i64 %146, 1, !dbg !2499
  %147 = extractvalue %"char[]" %144, 1, !dbg !2499
  %gt320 = icmp sgt i64 %add319, %147, !dbg !2499
  %148 = call i1 @llvm.expect.i1(i1 %gt320, i1 false), !dbg !2499
  br i1 %148, label %panic321, label %checkok331, !dbg !2499

checkok331:                                       ; preds = %if.then318
  %underflow = icmp slt i64 %add319, 0, !dbg !2500
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2500
  br i1 %149, label %panic332, label %checkok340, !dbg !2500

checkok340:                                       ; preds = %checkok331
  %size341 = sub i64 %147, %add319, !dbg !2499
  %ptradd342 = getelementptr inbounds i8, ptr %145, i64 %add319, !dbg !2499
  %150 = insertvalue %"char[]" undef, ptr %ptradd342, 0, !dbg !2499
  %151 = insertvalue %"char[]" %150, i64 %size341, 1, !dbg !2499
  store %"char[]" %151, ptr %indirectarg343, align 8
  %152 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg343, i32 10), !dbg !2501
  %not_err = icmp eq i64 %152, 0, !dbg !2501
  %153 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2501
  br i1 %153, label %after_check, label %else_block, !dbg !2501

after_check:                                      ; preds = %checkok340
  %154 = load i64, ptr %retparam, align 8, !dbg !2501
  br label %phi_block, !dbg !2501

else_block:                                       ; preds = %checkok340
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !2502
  br label %guard_block, !dbg !2502

guard_block:                                      ; preds = %else_block
  %155 = load i64, ptr %error_var, align 8, !dbg !2502
  store i64 %155, ptr %reterr, align 8, !dbg !2502
  br label %err_retblock, !dbg !2502

phi_block:                                        ; preds = %after_check
  store i64 %154, ptr %e2val, align 8, !dbg !2502
  %156 = load i64, ptr %e2val, align 8, !dbg !2503
  store i64 %156, ptr %e2, align 8, !dbg !2503
  br label %if.exit344, !dbg !2503

if.exit344:                                       ; preds = %phi_block, %loop.exit312
  %157 = load i64, ptr %e2, align 8, !dbg !2504
  %158 = load i64, ptr %rp, align 8, !dbg !2505
  %mul345 = mul i64 4, %158, !dbg !2506
  %sub346 = sub i64 %mul345, 32, !dbg !2506
  %add347 = add i64 %157, %sub346, !dbg !2504
  store i64 %add347, ptr %e2, align 8, !dbg !2504
  %159 = load i32, ptr %x, align 4, !dbg !2507
  %not348 = icmp eq i32 %159, 0, !dbg !2507
  br i1 %not348, label %if.then349, label %if.exit352, !dbg !2507

if.then349:                                       ; preds = %if.exit344
  %160 = load i32, ptr %sign146, align 4, !dbg !2508
  %sifp350 = sitofp i32 %160 to double, !dbg !2508
  %fmul351 = fmul double %sifp350, 0.000000e+00, !dbg !2508
  store double %fmul351, ptr %blockret147, align 8, !dbg !2508
  br label %expr_block.exit417, !dbg !2508

if.exit352:                                       ; preds = %if.exit344
  %161 = load i64, ptr %e2, align 8, !dbg !2509
  %gt353 = icmp sgt i64 %161, 1074, !dbg !2509
  br i1 %gt353, label %if.then354, label %if.exit355, !dbg !2509

if.then354:                                       ; preds = %if.exit352
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2510
  br label %err_retblock, !dbg !2510

if.exit355:                                       ; preds = %if.exit352
  %162 = load i64, ptr %e2, align 8, !dbg !2511
  %lt356 = icmp slt i64 %162, -1180, !dbg !2511
  br i1 %lt356, label %if.then357, label %if.exit358, !dbg !2511

if.then357:                                       ; preds = %if.exit355
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2512
  br label %err_retblock, !dbg !2512

if.exit358:                                       ; preds = %if.exit355
  br label %loop.cond359, !dbg !2513

loop.cond359:                                     ; preds = %if.exit370, %if.exit358
  %163 = load i32, ptr %x, align 4, !dbg !2514
  %lt360 = icmp ult i32 %163, -2147483648, !dbg !2514
  br i1 %lt360, label %loop.body361, label %loop.exit372, !dbg !2514

loop.body361:                                     ; preds = %loop.cond359
  %164 = load double, ptr %y, align 8, !dbg !2516
  %ge362 = fcmp oge double %164, 5.000000e-01, !dbg !2516
  br i1 %ge362, label %if.then363, label %if.else367, !dbg !2516

if.then363:                                       ; preds = %loop.body361
  %165 = load i32, ptr %x, align 4, !dbg !2518
  %166 = load i32, ptr %x, align 4, !dbg !2520
  %add364 = add i32 %166, 1, !dbg !2520
  %add365 = add i32 %165, %add364, !dbg !2518
  store i32 %add365, ptr %x, align 4, !dbg !2518
  %167 = load double, ptr %y, align 8, !dbg !2521
  %168 = load double, ptr %y, align 8, !dbg !2522
  %fsub = fsub double %168, 1.000000e+00, !dbg !2522
  %fadd366 = fadd double %167, %fsub, !dbg !2521
  store double %fadd366, ptr %y, align 8, !dbg !2521
  br label %if.exit370, !dbg !2521

if.else367:                                       ; preds = %loop.body361
  %169 = load i32, ptr %x, align 4, !dbg !2523
  %170 = load i32, ptr %x, align 4, !dbg !2525
  %add368 = add i32 %169, %170, !dbg !2523
  store i32 %add368, ptr %x, align 4, !dbg !2523
  %171 = load double, ptr %y, align 8, !dbg !2526
  %172 = load double, ptr %y, align 8, !dbg !2527
  %fadd369 = fadd double %171, %172, !dbg !2526
  store double %fadd369, ptr %y, align 8, !dbg !2526
  br label %if.exit370, !dbg !2526

if.exit370:                                       ; preds = %if.else367, %if.then363
  %173 = load i64, ptr %e2, align 8, !dbg !2528
  %sub371 = sub i64 %173, 1, !dbg !2528
  store i64 %sub371, ptr %e2, align 8, !dbg !2528
  br label %loop.cond359, !dbg !2528

loop.exit372:                                     ; preds = %loop.cond359
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !2529, metadata !DIExpression()), !dbg !2530
  store i32 53, ptr %bits, align 4, !dbg !2531
  %174 = load i64, ptr %e2, align 8, !dbg !2532
  %add373 = add i64 32, %174, !dbg !2533
  %sub374 = sub i64 %add373, -1074, !dbg !2533
  %gt375 = icmp sgt i64 53, %sub374, !dbg !2534
  br i1 %gt375, label %if.then376, label %if.exit382, !dbg !2534

if.then376:                                       ; preds = %loop.exit372
  %175 = load i64, ptr %e2, align 8, !dbg !2535
  %add377 = add i64 32, %175, !dbg !2537
  %sub378 = sub i64 %add377, -1074, !dbg !2538
  %trunc = trunc i64 %sub378 to i32, !dbg !2538
  store i32 %trunc, ptr %bits, align 4, !dbg !2538
  %176 = load i32, ptr %bits, align 4, !dbg !2539
  %lt379 = icmp slt i32 %176, 0, !dbg !2539
  br i1 %lt379, label %if.then380, label %if.exit381, !dbg !2539

if.then380:                                       ; preds = %if.then376
  store i32 0, ptr %bits, align 4, !dbg !2540
  br label %if.exit381, !dbg !2540

if.exit381:                                       ; preds = %if.then380, %if.then376
  br label %if.exit382, !dbg !2540

if.exit382:                                       ; preds = %if.exit381, %loop.exit372
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !2541, metadata !DIExpression()), !dbg !2542
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2542
  %177 = load i32, ptr %bits, align 4, !dbg !2543
  %lt383 = icmp slt i32 %177, 53, !dbg !2543
  br i1 %lt383, label %if.then384, label %if.exit391, !dbg !2543

if.then384:                                       ; preds = %if.exit382
  store double 1.000000e+00, ptr %x385, align 8
  %178 = load i32, ptr %bits, align 4, !dbg !2544
  %sub386 = sub i32 85, %178, !dbg !2546
  %sub387 = sub i32 %sub386, 1, !dbg !2546
  store i32 %sub387, ptr %n, align 4
  %179 = load double, ptr %x385, align 8, !dbg !2547
  %180 = load i32, ptr %n, align 4, !dbg !2547
  %181 = call double @scalbn(double %179, i32 %180), !dbg !2551
  store double %181, ptr %mag, align 8
  %182 = load i32, ptr %sign146, align 4, !dbg !2552
  %sifp388 = sitofp i32 %182 to double, !dbg !2552
  store double %sifp388, ptr %sgn, align 8
  %183 = load double, ptr %mag, align 8
  store double %183, ptr %x389, align 8
  %184 = load double, ptr %sgn, align 8
  store double %184, ptr %y390, align 8
  %185 = load double, ptr %x389, align 8, !dbg !2553
  %186 = load double, ptr %sgn, align 8, !dbg !2559
  %187 = call double @llvm.copysign.f64(double %185, double %186), !dbg !2559
  store double %187, ptr %bias, align 8, !dbg !2559
  br label %if.exit391, !dbg !2559

if.exit391:                                       ; preds = %if.then384, %if.exit382
  %188 = load i32, ptr %bits, align 4, !dbg !2560
  %lt392 = icmp slt i32 %188, 32, !dbg !2560
  br i1 %lt392, label %and.rhs393, label %and.phi394, !dbg !2560

and.rhs393:                                       ; preds = %if.exit391
  %189 = load double, ptr %y, align 8, !dbg !2561
  %fpbool = fcmp une double %189, 0.000000e+00, !dbg !2561
  br label %and.phi394, !dbg !2561

and.phi394:                                       ; preds = %and.rhs393, %if.exit391
  %val395 = phi i1 [ false, %if.exit391 ], [ %fpbool, %and.rhs393 ], !dbg !2561
  br i1 %val395, label %and.rhs396, label %and.phi398, !dbg !2561

and.rhs396:                                       ; preds = %and.phi394
  %190 = load i32, ptr %x, align 4, !dbg !2562
  %and = and i32 %190, 1, !dbg !2562
  %not397 = icmp eq i32 %and, 0, !dbg !2562
  br label %and.phi398, !dbg !2562

and.phi398:                                       ; preds = %and.rhs396, %and.phi394
  %val399 = phi i1 [ false, %and.phi394 ], [ %not397, %and.rhs396 ], !dbg !2562
  br i1 %val399, label %if.then400, label %if.exit402, !dbg !2562

if.then400:                                       ; preds = %and.phi398
  %191 = load i32, ptr %x, align 4, !dbg !2563
  %add401 = add i32 %191, 1, !dbg !2563
  store i32 %add401, ptr %x, align 4, !dbg !2563
  store double 0.000000e+00, ptr %y, align 8, !dbg !2565
  br label %if.exit402, !dbg !2565

if.exit402:                                       ; preds = %if.then400, %and.phi398
  %192 = load double, ptr %bias, align 8, !dbg !2566
  %193 = load i32, ptr %sign146, align 4, !dbg !2567
  %sifp403 = sitofp i32 %193 to double, !dbg !2567
  %194 = load i32, ptr %x, align 4, !dbg !2568
  %uifp = uitofp i32 %194 to double, !dbg !2568
  %fmul404 = fmul double %sifp403, %uifp, !dbg !2567
  %fadd405 = fadd double %192, %fmul404, !dbg !2566
  %195 = load i32, ptr %sign146, align 4, !dbg !2569
  %sifp406 = sitofp i32 %195 to double, !dbg !2569
  %196 = load double, ptr %y, align 8, !dbg !2570
  %fmul407 = fmul double %sifp406, %196, !dbg !2569
  %fadd408 = fadd double %fadd405, %fmul407, !dbg !2566
  store double %fadd408, ptr %y, align 8, !dbg !2566
  %197 = load double, ptr %y, align 8, !dbg !2571
  %198 = load double, ptr %bias, align 8, !dbg !2572
  %fsub409 = fsub double %197, %198, !dbg !2571
  store double %fsub409, ptr %y, align 8, !dbg !2571
  %199 = load double, ptr %y, align 8, !dbg !2573
  %not410 = fcmp ueq double %199, 0.000000e+00, !dbg !2573
  br i1 %not410, label %if.then411, label %if.exit412, !dbg !2573

if.then411:                                       ; preds = %if.exit402
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2574
  br label %err_retblock, !dbg !2574

if.exit412:                                       ; preds = %if.exit402
  %200 = load double, ptr %y, align 8
  store double %200, ptr %x413, align 8
  %201 = load i64, ptr %e2, align 8, !dbg !2575
  %trunc414 = trunc i64 %201 to i32, !dbg !2575
  store i32 %trunc414, ptr %n415, align 4
  %202 = load double, ptr %x413, align 8, !dbg !2576
  %203 = load i32, ptr %n415, align 4, !dbg !2576
  %204 = call double @scalbn(double %202, i32 %203), !dbg !2579
  store double %204, ptr %blockret147, align 8, !dbg !2579
  br label %expr_block.exit417, !dbg !2579

expr_block.exit417:                               ; preds = %if.exit412, %if.then349, %if.exit176, %if.then167
  %205 = load double, ptr %blockret147, align 8, !dbg !2579
  store double %205, ptr %blockret, align 8, !dbg !2579
  br label %expr_block.exit1945, !dbg !2579

if.exit418:                                       ; preds = %and.phi128
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars419, ptr align 8 %chars, i32 16, i1 false)
  %206 = load i32, ptr %sign, align 4
  store i32 %206, ptr %sign420, align 4
  %ptradd422 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2580
  %207 = load i64, ptr %ptradd422, align 8, !dbg !2580
  %lt423 = icmp ult i64 0, %207, !dbg !2580
  br i1 %lt423, label %assert_ok, label %assert_fail, !dbg !2580

assert_fail:                                      ; preds = %if.exit418
  store %"char[]" { ptr @.panic_msg.79, i64 34 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg425, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg426, align 8
  %208 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %208(ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, ptr align 8 %indirectarg426, i32 35), !dbg !2580
  unreachable, !dbg !2580

assert_ok:                                        ; preds = %if.exit418
  call void @llvm.dbg.declare(metadata ptr %x427, metadata !2584, metadata !DIExpression()), !dbg !2588
  call void @llvm.memset.p0.i64(ptr align 16 %x427, i8 0, i64 512, i1 false), !dbg !2588
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !2589, metadata !DIExpression()), !dbg !2590
  store i32 1024, ptr %emax, align 4, !dbg !2591
  call void @llvm.dbg.declare(metadata ptr %index428, metadata !2592, metadata !DIExpression()), !dbg !2593
  store i64 0, ptr %index428, align 8, !dbg !2593
  call void @llvm.dbg.declare(metadata ptr %got_digit429, metadata !2594, metadata !DIExpression()), !dbg !2595
  %ptradd430 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2596
  %209 = load i64, ptr %ptradd430, align 8, !dbg !2596
  %210 = load ptr, ptr %chars419, align 8, !dbg !2596
  %ge431 = icmp sge i64 0, %209, !dbg !2597
  %211 = call i1 @llvm.expect.i1(i1 %ge431, i1 false), !dbg !2597
  br i1 %211, label %panic432, label %checkok442, !dbg !2597

checkok442:                                       ; preds = %assert_ok
  %212 = load i8, ptr %210, align 1, !dbg !2597
  %eq443 = icmp eq i8 %212, 48, !dbg !2596
  %213 = zext i1 %eq443 to i8, !dbg !2596
  store i8 %213, ptr %got_digit429, align 1, !dbg !2596
  call void @llvm.dbg.declare(metadata ptr %got_rad444, metadata !2598, metadata !DIExpression()), !dbg !2599
  store i8 0, ptr %got_rad444, align 1, !dbg !2599
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !2600, metadata !DIExpression()), !dbg !2601
  store i64 0, ptr %lrp, align 8, !dbg !2601
  call void @llvm.dbg.declare(metadata ptr %dc445, metadata !2602, metadata !DIExpression()), !dbg !2603
  store i64 0, ptr %dc445, align 8, !dbg !2603
  call void @llvm.dbg.declare(metadata ptr %k, metadata !2604, metadata !DIExpression()), !dbg !2605
  store i32 0, ptr %k, align 4, !dbg !2605
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2606, metadata !DIExpression()), !dbg !2607
  store i32 0, ptr %j, align 4, !dbg !2607
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !2608, metadata !DIExpression()), !dbg !2609
  store i32 0, ptr %lnz, align 4, !dbg !2609
  call void @llvm.dbg.declare(metadata ptr %len446, metadata !2610, metadata !DIExpression()), !dbg !2611
  %ptradd447 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2612
  %214 = load i64, ptr %ptradd447, align 8, !dbg !2612
  store i64 %214, ptr %len446, align 8, !dbg !2612
  call void @llvm.dbg.declare(metadata ptr %last_char448, metadata !2613, metadata !DIExpression()), !dbg !2614
  %215 = load i64, ptr %len446, align 8, !dbg !2615
  %sub449 = sub i64 %215, 1, !dbg !2615
  store i64 %sub449, ptr %last_char448, align 8, !dbg !2615
  %216 = load i64, ptr %len446, align 8, !dbg !2616
  %intbool450 = icmp ne i64 %216, 0, !dbg !2616
  br i1 %intbool450, label %assert_ok455, label %assert_fail451, !dbg !2616

assert_fail451:                                   ; preds = %checkok442
  store %"char[]" { ptr @.panic_msg.80, i64 16 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg454, align 8
  %217 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %217(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 52), !dbg !2616
  unreachable, !dbg !2616

assert_ok455:                                     ; preds = %checkok442
  call void @llvm.dbg.declare(metadata ptr %c456, metadata !2617, metadata !DIExpression()), !dbg !2618
  br label %loop.cond457, !dbg !2619

loop.cond457:                                     ; preds = %if.exit478, %assert_ok455
  %ptradd458 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2620
  %218 = load i64, ptr %ptradd458, align 8, !dbg !2620
  %219 = load ptr, ptr %chars419, align 8, !dbg !2620
  %220 = load i64, ptr %index428, align 8, !dbg !2622
  %ge459 = icmp uge i64 %220, %218, !dbg !2622
  %221 = call i1 @llvm.expect.i1(i1 %ge459, i1 false), !dbg !2622
  br i1 %221, label %panic460, label %checkok470, !dbg !2622

checkok470:                                       ; preds = %loop.cond457
  %ptradd471 = getelementptr inbounds i8, ptr %219, i64 %220, !dbg !2622
  %222 = load i8, ptr %ptradd471, align 1, !dbg !2622
  store i8 %222, ptr %c456, align 1, !dbg !2622
  %eq472 = icmp eq i8 %222, 48, !dbg !2623
  br i1 %eq472, label %loop.body473, label %loop.exit480, !dbg !2623

loop.body473:                                     ; preds = %checkok470
  %223 = load i64, ptr %index428, align 8, !dbg !2624
  %224 = load i64, ptr %last_char448, align 8, !dbg !2626
  %eq474 = icmp eq i64 %223, %224, !dbg !2624
  br i1 %eq474, label %if.then475, label %if.exit478, !dbg !2624

if.then475:                                       ; preds = %loop.body473
  %225 = load i32, ptr %sign420, align 4, !dbg !2627
  %sifp476 = sitofp i32 %225 to double, !dbg !2627
  %fmul477 = fmul double %sifp476, 0.000000e+00, !dbg !2627
  store double %fmul477, ptr %blockret421, align 8, !dbg !2627
  br label %expr_block.exit1944, !dbg !2627

if.exit478:                                       ; preds = %loop.body473
  %226 = load i64, ptr %index428, align 8, !dbg !2628
  %add479 = add i64 %226, 1, !dbg !2628
  store i64 %add479, ptr %index428, align 8, !dbg !2628
  br label %loop.cond457, !dbg !2628

loop.exit480:                                     ; preds = %checkok470
  %227 = load i8, ptr %c456, align 1, !dbg !2629
  %eq481 = icmp eq i8 %227, 46, !dbg !2629
  br i1 %eq481, label %if.then482, label %if.exit538, !dbg !2629

if.then482:                                       ; preds = %loop.exit480
  store i8 1, ptr %got_rad444, align 1, !dbg !2630
  %228 = load i64, ptr %index428, align 8, !dbg !2632
  %229 = load i64, ptr %last_char448, align 8, !dbg !2633
  %eq483 = icmp eq i64 %228, %229, !dbg !2632
  br i1 %eq483, label %if.then484, label %if.exit490, !dbg !2632

if.then484:                                       ; preds = %if.then482
  %230 = load i8, ptr %got_digit429, align 1, !dbg !2634
  %231 = trunc i8 %230 to i1, !dbg !2634
  %not485 = xor i1 %231, true, !dbg !2634
  br i1 %not485, label %if.then486, label %if.exit487, !dbg !2634

if.then486:                                       ; preds = %if.then484
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2636
  br label %err_retblock, !dbg !2636

if.exit487:                                       ; preds = %if.then484
  %232 = load i32, ptr %sign420, align 4, !dbg !2637
  %sifp488 = sitofp i32 %232 to double, !dbg !2637
  %fmul489 = fmul double %sifp488, 0.000000e+00, !dbg !2637
  store double %fmul489, ptr %blockret421, align 8, !dbg !2637
  br label %expr_block.exit1944, !dbg !2637

if.exit490:                                       ; preds = %if.then482
  %233 = load i64, ptr %index428, align 8, !dbg !2638
  %234 = load i64, ptr %last_char448, align 8, !dbg !2639
  %neq491 = icmp ne i64 %233, %234, !dbg !2638
  br i1 %neq491, label %and.rhs492, label %and.phi509, !dbg !2638

and.rhs492:                                       ; preds = %if.exit490
  %ptradd493 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2640
  %235 = load i64, ptr %ptradd493, align 8, !dbg !2640
  %236 = load ptr, ptr %chars419, align 8, !dbg !2640
  %237 = load i64, ptr %index428, align 8, !dbg !2641
  %add494 = add i64 %237, 1, !dbg !2641
  store i64 %add494, ptr %index428, align 8, !dbg !2641
  %ge495 = icmp uge i64 %add494, %235, !dbg !2641
  %238 = call i1 @llvm.expect.i1(i1 %ge495, i1 false), !dbg !2641
  br i1 %238, label %panic496, label %checkok506, !dbg !2641

checkok506:                                       ; preds = %and.rhs492
  %ptradd507 = getelementptr inbounds i8, ptr %236, i64 %add494, !dbg !2642
  %239 = load i8, ptr %ptradd507, align 1, !dbg !2642
  store i8 %239, ptr %c456, align 1, !dbg !2642
  %eq508 = icmp eq i8 %239, 48, !dbg !2643
  br label %and.phi509, !dbg !2643

and.phi509:                                       ; preds = %checkok506, %if.exit490
  %val510 = phi i1 [ false, %if.exit490 ], [ %eq508, %checkok506 ], !dbg !2643
  br i1 %val510, label %if.then511, label %if.exit537, !dbg !2643

if.then511:                                       ; preds = %and.phi509
  %240 = load i64, ptr %lrp, align 8, !dbg !2644
  %sub512 = sub i64 %240, 1, !dbg !2644
  store i64 %sub512, ptr %lrp, align 8, !dbg !2644
  store i8 1, ptr %got_digit429, align 1, !dbg !2646
  br label %loop.cond513, !dbg !2647

loop.cond513:                                     ; preds = %loop.body534, %if.then511
  %241 = load i64, ptr %last_char448, align 8, !dbg !2648
  %242 = load i64, ptr %index428, align 8, !dbg !2650
  %neq514 = icmp ne i64 %241, %242, !dbg !2648
  br i1 %neq514, label %and.rhs515, label %and.phi532, !dbg !2648

and.rhs515:                                       ; preds = %loop.cond513
  %ptradd516 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2651
  %243 = load i64, ptr %ptradd516, align 8, !dbg !2651
  %244 = load ptr, ptr %chars419, align 8, !dbg !2651
  %245 = load i64, ptr %index428, align 8, !dbg !2652
  %add517 = add i64 %245, 1, !dbg !2652
  store i64 %add517, ptr %index428, align 8, !dbg !2652
  %ge518 = icmp uge i64 %add517, %243, !dbg !2652
  %246 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !2652
  br i1 %246, label %panic519, label %checkok529, !dbg !2652

checkok529:                                       ; preds = %and.rhs515
  %ptradd530 = getelementptr inbounds i8, ptr %244, i64 %add517, !dbg !2653
  %247 = load i8, ptr %ptradd530, align 1, !dbg !2653
  store i8 %247, ptr %c456, align 1, !dbg !2653
  %eq531 = icmp eq i8 %247, 48, !dbg !2654
  br label %and.phi532, !dbg !2654

and.phi532:                                       ; preds = %checkok529, %loop.cond513
  %val533 = phi i1 [ false, %loop.cond513 ], [ %eq531, %checkok529 ], !dbg !2654
  br i1 %val533, label %loop.body534, label %loop.exit536, !dbg !2654

loop.body534:                                     ; preds = %and.phi532
  %248 = load i64, ptr %lrp, align 8, !dbg !2655
  %sub535 = sub i64 %248, 1, !dbg !2655
  store i64 %sub535, ptr %lrp, align 8, !dbg !2655
  br label %loop.cond513, !dbg !2655

loop.exit536:                                     ; preds = %and.phi532
  br label %if.exit537, !dbg !2655

if.exit537:                                       ; preds = %loop.exit536, %and.phi509
  br label %if.exit538, !dbg !2655

if.exit538:                                       ; preds = %if.exit537, %loop.exit480
  br label %loop.cond539, !dbg !2657

loop.cond539:                                     ; preds = %checkok679, %if.exit538
  %249 = load i8, ptr %c456, align 1, !dbg !2658
  %zext540 = zext i8 %249 to i32, !dbg !2658
  %sub541 = sub i32 %zext540, 48, !dbg !2658
  %lt542 = icmp ult i32 %sub541, 10, !dbg !2658
  br i1 %lt542, label %or.phi545, label %or.rhs543, !dbg !2658

or.rhs543:                                        ; preds = %loop.cond539
  %250 = load i8, ptr %c456, align 1, !dbg !2660
  %eq544 = icmp eq i8 %250, 46, !dbg !2660
  br label %or.phi545, !dbg !2660

or.phi545:                                        ; preds = %or.rhs543, %loop.cond539
  %val546 = phi i1 [ true, %loop.cond539 ], [ %eq544, %or.rhs543 ], !dbg !2660
  br i1 %val546, label %loop.body547, label %loop.exit681, !dbg !2660

loop.body547:                                     ; preds = %or.phi545
  store i8 1, ptr %switch548, align 1
  br label %switch.entry549

switch.entry549:                                  ; preds = %loop.body547
  %251 = load i8, ptr %switch548, align 1
  %252 = trunc i8 %251 to i1
  %253 = load i8, ptr %c456, align 1, !dbg !2661
  %eq550 = icmp eq i8 %253, 46, !dbg !2661
  %eq551 = icmp eq i1 %eq550, %252, !dbg !2661
  br i1 %eq551, label %switch.case552, label %next_if555, !dbg !2661

switch.case552:                                   ; preds = %switch.entry549
  %254 = load i8, ptr %got_rad444, align 1, !dbg !2664
  %255 = trunc i8 %254 to i1, !dbg !2664
  br i1 %255, label %if.then553, label %if.exit554, !dbg !2664

if.then553:                                       ; preds = %switch.case552
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2666
  br label %err_retblock, !dbg !2666

if.exit554:                                       ; preds = %switch.case552
  store i8 1, ptr %got_rad444, align 1, !dbg !2667
  %256 = load i64, ptr %dc445, align 8, !dbg !2668
  store i64 %256, ptr %lrp, align 8, !dbg !2668
  br label %switch.exit656, !dbg !2668

next_if555:                                       ; preds = %switch.entry549
  %257 = load i32, ptr %k, align 4, !dbg !2669
  %lt556 = icmp slt i32 %257, 125, !dbg !2669
  %eq557 = icmp eq i1 %lt556, %252, !dbg !2669
  br i1 %eq557, label %switch.case558, label %next_if649, !dbg !2669

switch.case558:                                   ; preds = %next_if555
  %258 = load i64, ptr %dc445, align 8, !dbg !2670
  %add559 = add i64 %258, 1, !dbg !2670
  store i64 %add559, ptr %dc445, align 8, !dbg !2670
  %259 = load i8, ptr %c456, align 1, !dbg !2672
  %neq560 = icmp ne i8 %259, 48, !dbg !2672
  br i1 %neq560, label %if.then561, label %if.exit563, !dbg !2672

if.then561:                                       ; preds = %switch.case558
  %260 = load i64, ptr %dc445, align 8, !dbg !2673
  %trunc562 = trunc i64 %260 to i32, !dbg !2673
  store i32 %trunc562, ptr %lnz, align 4, !dbg !2673
  br label %if.exit563, !dbg !2673

if.exit563:                                       ; preds = %if.then561, %switch.case558
  %261 = load i32, ptr %j, align 4, !dbg !2674
  %intbool564 = icmp ne i32 %261, 0, !dbg !2674
  br i1 %intbool564, label %if.then565, label %if.else616, !dbg !2674

if.then565:                                       ; preds = %if.exit563
  %262 = load i32, ptr %k, align 4, !dbg !2675
  %sext = sext i32 %262 to i64, !dbg !2675
  %lt566 = icmp slt i64 %sext, 0, !dbg !2675
  %263 = call i1 @llvm.expect.i1(i1 %lt566, i1 false), !dbg !2675
  br i1 %263, label %panic567, label %checkok575, !dbg !2675

checkok575:                                       ; preds = %if.then565
  %ge576 = icmp sge i64 %sext, 128, !dbg !2675
  %264 = call i1 @llvm.expect.i1(i1 %ge576, i1 false), !dbg !2675
  br i1 %264, label %panic577, label %checkok587, !dbg !2675

checkok587:                                       ; preds = %checkok575
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext, !dbg !2675
  %265 = load i32, ptr %k, align 4, !dbg !2677
  %sext588 = sext i32 %265 to i64, !dbg !2677
  %lt589 = icmp slt i64 %sext588, 0, !dbg !2677
  %266 = call i1 @llvm.expect.i1(i1 %lt589, i1 false), !dbg !2677
  br i1 %266, label %panic590, label %checkok598, !dbg !2677

checkok598:                                       ; preds = %checkok587
  %ge599 = icmp sge i64 %sext588, 128, !dbg !2677
  %267 = call i1 @llvm.expect.i1(i1 %ge599, i1 false), !dbg !2677
  br i1 %267, label %panic600, label %checkok610, !dbg !2677

checkok610:                                       ; preds = %checkok598
  %ptroffset611 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext588, !dbg !2677
  %268 = load i32, ptr %ptroffset611, align 4, !dbg !2677
  %mul612 = mul i32 %268, 10, !dbg !2678
  %269 = load i8, ptr %c456, align 1, !dbg !2679
  %zext613 = zext i8 %269 to i32, !dbg !2679
  %add614 = add i32 %mul612, %zext613, !dbg !2678
  %sub615 = sub i32 %add614, 48, !dbg !2678
  store i32 %sub615, ptr %ptroffset, align 4, !dbg !2678
  br label %if.exit643, !dbg !2678

if.else616:                                       ; preds = %if.exit563
  %270 = load i32, ptr %k, align 4, !dbg !2680
  %sext617 = sext i32 %270 to i64, !dbg !2680
  %lt618 = icmp slt i64 %sext617, 0, !dbg !2680
  %271 = call i1 @llvm.expect.i1(i1 %lt618, i1 false), !dbg !2680
  br i1 %271, label %panic619, label %checkok627, !dbg !2680

checkok627:                                       ; preds = %if.else616
  %ge628 = icmp sge i64 %sext617, 128, !dbg !2680
  %272 = call i1 @llvm.expect.i1(i1 %ge628, i1 false), !dbg !2680
  br i1 %272, label %panic629, label %checkok639, !dbg !2680

checkok639:                                       ; preds = %checkok627
  %ptroffset640 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext617, !dbg !2680
  %273 = load i8, ptr %c456, align 1, !dbg !2682
  %zext641 = zext i8 %273 to i32, !dbg !2682
  %sub642 = sub i32 %zext641, 48, !dbg !2682
  store i32 %sub642, ptr %ptroffset640, align 4, !dbg !2682
  br label %if.exit643, !dbg !2682

if.exit643:                                       ; preds = %checkok639, %checkok610
  %274 = load i32, ptr %j, align 4, !dbg !2683
  %add644 = add i32 %274, 1, !dbg !2683
  store i32 %add644, ptr %j, align 4, !dbg !2683
  %eq645 = icmp eq i32 %add644, 9, !dbg !2684
  br i1 %eq645, label %if.then646, label %if.exit648, !dbg !2684

if.then646:                                       ; preds = %if.exit643
  %275 = load i32, ptr %k, align 4, !dbg !2685
  %add647 = add i32 %275, 1, !dbg !2685
  store i32 %add647, ptr %k, align 4, !dbg !2685
  store i32 0, ptr %j, align 4, !dbg !2687
  br label %if.exit648, !dbg !2687

if.exit648:                                       ; preds = %if.then646, %if.exit643
  store i8 1, ptr %got_digit429, align 1, !dbg !2688
  br label %switch.exit656, !dbg !2688

next_if649:                                       ; preds = %next_if555
  br label %switch.default, !dbg !2688

switch.default:                                   ; preds = %next_if649
  %276 = load i64, ptr %dc445, align 8, !dbg !2689
  %add650 = add i64 %276, 1, !dbg !2689
  store i64 %add650, ptr %dc445, align 8, !dbg !2689
  %277 = load i8, ptr %c456, align 1, !dbg !2691
  %neq651 = icmp ne i8 %277, 48, !dbg !2691
  br i1 %neq651, label %if.then652, label %if.exit655, !dbg !2691

if.then652:                                       ; preds = %switch.default
  %ptradd653 = getelementptr inbounds i8, ptr %x427, i64 496, !dbg !2692
  %278 = load i32, ptr %ptradd653, align 4, !dbg !2692
  %or654 = or i32 %278, 1, !dbg !2693
  store i32 %or654, ptr %ptradd653, align 4, !dbg !2693
  br label %if.exit655, !dbg !2693

if.exit655:                                       ; preds = %if.then652, %switch.default
  br label %switch.exit656, !dbg !2693

switch.exit656:                                   ; preds = %if.exit655, %if.exit648, %if.exit554
  %279 = load i64, ptr %index428, align 8, !dbg !2694
  %280 = load i64, ptr %last_char448, align 8, !dbg !2695
  %eq657 = icmp eq i64 %279, %280, !dbg !2694
  br i1 %eq657, label %if.then658, label %if.exit659, !dbg !2694

if.then658:                                       ; preds = %switch.exit656
  br label %loop.exit681, !dbg !2696

if.exit659:                                       ; preds = %switch.exit656
  %281 = load i64, ptr %index428, align 8, !dbg !2697
  %282 = load i64, ptr %last_char448, align 8, !dbg !2698
  %lt660 = icmp ult i64 %281, %282, !dbg !2697
  br i1 %lt660, label %assert_ok665, label %assert_fail661, !dbg !2697

assert_fail661:                                   ; preds = %if.exit659
  store %"char[]" { ptr @.panic_msg.80, i64 16 }, ptr %indirectarg662, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg663, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg664, align 8
  %283 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %283(ptr align 8 %indirectarg662, ptr align 8 %indirectarg663, ptr align 8 %indirectarg664, i32 112), !dbg !2697
  unreachable, !dbg !2697

assert_ok665:                                     ; preds = %if.exit659
  %ptradd666 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2699
  %284 = load i64, ptr %ptradd666, align 8, !dbg !2699
  %285 = load ptr, ptr %chars419, align 8, !dbg !2699
  %286 = load i64, ptr %index428, align 8, !dbg !2700
  %add667 = add i64 %286, 1, !dbg !2700
  store i64 %add667, ptr %index428, align 8, !dbg !2700
  %ge668 = icmp uge i64 %add667, %284, !dbg !2700
  %287 = call i1 @llvm.expect.i1(i1 %ge668, i1 false), !dbg !2700
  br i1 %287, label %panic669, label %checkok679, !dbg !2700

checkok679:                                       ; preds = %assert_ok665
  %ptradd680 = getelementptr inbounds i8, ptr %285, i64 %add667, !dbg !2701
  %288 = load i8, ptr %ptradd680, align 1, !dbg !2701
  store i8 %288, ptr %c456, align 1, !dbg !2701
  br label %loop.cond539, !dbg !2701

loop.exit681:                                     ; preds = %if.then658, %or.phi545
  %289 = load i8, ptr %got_rad444, align 1, !dbg !2702
  %290 = trunc i8 %289 to i1, !dbg !2702
  %not682 = xor i1 %290, true, !dbg !2702
  br i1 %not682, label %if.then683, label %if.exit684, !dbg !2702

if.then683:                                       ; preds = %loop.exit681
  %291 = load i64, ptr %dc445, align 8, !dbg !2703
  store i64 %291, ptr %lrp, align 8, !dbg !2703
  br label %if.exit684, !dbg !2703

if.exit684:                                       ; preds = %if.then683, %loop.exit681
  %292 = load i8, ptr %got_digit429, align 1, !dbg !2704
  %293 = trunc i8 %292 to i1, !dbg !2704
  %not685 = xor i1 %293, true, !dbg !2704
  br i1 %not685, label %if.then686, label %if.exit687, !dbg !2704

if.then686:                                       ; preds = %if.exit684
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2705
  br label %err_retblock, !dbg !2705

if.exit687:                                       ; preds = %if.exit684
  %294 = load i8, ptr %c456, align 1, !dbg !2706
  %zext688 = zext i8 %294 to i32, !dbg !2706
  %or689 = or i32 %zext688, 32, !dbg !2706
  %eq690 = icmp eq i32 %or689, 101, !dbg !2706
  %check691 = icmp sge i32 %or689, 0, !dbg !2706
  %siui-eq692 = and i1 %check691, %eq690, !dbg !2706
  br i1 %siui-eq692, label %if.then693, label %if.else731, !dbg !2706

if.then693:                                       ; preds = %if.exit687
  %295 = load i64, ptr %last_char448, align 8, !dbg !2707
  %296 = load i64, ptr %index428, align 8, !dbg !2709
  %eq694 = icmp eq i64 %295, %296, !dbg !2707
  br i1 %eq694, label %if.then695, label %if.exit696, !dbg !2707

if.then695:                                       ; preds = %if.then693
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2710
  br label %err_retblock, !dbg !2710

if.exit696:                                       ; preds = %if.then693
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !2711, metadata !DIExpression()), !dbg !2712
  %297 = load %"char[]", ptr %chars419, align 8, !dbg !2713
  %298 = extractvalue %"char[]" %297, 0, !dbg !2713
  %299 = load i64, ptr %index428, align 8, !dbg !2714
  %add697 = add i64 %299, 1, !dbg !2714
  %300 = extractvalue %"char[]" %297, 1, !dbg !2714
  %gt698 = icmp sgt i64 %add697, %300, !dbg !2714
  %301 = call i1 @llvm.expect.i1(i1 %gt698, i1 false), !dbg !2714
  br i1 %301, label %panic699, label %checkok709, !dbg !2714

checkok709:                                       ; preds = %if.exit696
  %underflow710 = icmp slt i64 %add697, 0, !dbg !2715
  %302 = call i1 @llvm.expect.i1(i1 %underflow710, i1 false), !dbg !2715
  br i1 %302, label %panic711, label %checkok719, !dbg !2715

checkok719:                                       ; preds = %checkok709
  %size720 = sub i64 %300, %add697, !dbg !2714
  %ptradd721 = getelementptr inbounds i8, ptr %298, i64 %add697, !dbg !2714
  %303 = insertvalue %"char[]" undef, ptr %ptradd721, 0, !dbg !2714
  %304 = insertvalue %"char[]" %303, i64 %size720, 1, !dbg !2714
  store %"char[]" %304, ptr %indirectarg723, align 8
  %305 = call i64 @std.core.String.to_long(ptr %retparam722, ptr align 8 %indirectarg723, i32 10), !dbg !2716
  %not_err724 = icmp eq i64 %305, 0, !dbg !2716
  %306 = call i1 @llvm.expect.i1(i1 %not_err724, i1 true), !dbg !2716
  br i1 %306, label %after_check725, label %else_block726, !dbg !2716

after_check725:                                   ; preds = %checkok719
  %307 = load i64, ptr %retparam722, align 8, !dbg !2716
  br label %phi_block729, !dbg !2716

else_block726:                                    ; preds = %checkok719
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var727, align 8, !dbg !2717
  br label %guard_block728, !dbg !2717

guard_block728:                                   ; preds = %else_block726
  %308 = load i64, ptr %error_var727, align 8, !dbg !2717
  store i64 %308, ptr %reterr, align 8, !dbg !2717
  br label %err_retblock, !dbg !2717

phi_block729:                                     ; preds = %after_check725
  store i64 %307, ptr %e10, align 8, !dbg !2717
  %309 = load i64, ptr %lrp, align 8, !dbg !2718
  %310 = load i64, ptr %e10, align 8, !dbg !2719
  %add730 = add i64 %309, %310, !dbg !2718
  store i64 %add730, ptr %lrp, align 8, !dbg !2718
  br label %if.exit735, !dbg !2718

if.else731:                                       ; preds = %if.exit687
  %311 = load i64, ptr %index428, align 8, !dbg !2720
  %312 = load i64, ptr %last_char448, align 8, !dbg !2721
  %neq732 = icmp ne i64 %311, %312, !dbg !2720
  br i1 %neq732, label %if.then733, label %if.exit734, !dbg !2720

if.then733:                                       ; preds = %if.else731
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2722
  br label %err_retblock, !dbg !2722

if.exit734:                                       ; preds = %if.else731
  br label %if.exit735, !dbg !2722

if.exit735:                                       ; preds = %if.exit734, %phi_block729
  %313 = load i32, ptr %x427, align 4, !dbg !2724
  %not736 = icmp eq i32 %313, 0, !dbg !2724
  br i1 %not736, label %if.then737, label %if.exit740, !dbg !2724

if.then737:                                       ; preds = %if.exit735
  %314 = load i32, ptr %sign420, align 4, !dbg !2725
  %sifp738 = sitofp i32 %314 to double, !dbg !2725
  %fmul739 = fmul double %sifp738, 0.000000e+00, !dbg !2725
  store double %fmul739, ptr %blockret421, align 8, !dbg !2725
  br label %expr_block.exit1944, !dbg !2725

if.exit740:                                       ; preds = %if.exit735
  %315 = load i64, ptr %lrp, align 8, !dbg !2726
  %316 = load i64, ptr %dc445, align 8, !dbg !2727
  %eq741 = icmp eq i64 %315, %316, !dbg !2726
  br i1 %eq741, label %and.rhs742, label %and.phi744, !dbg !2726

and.rhs742:                                       ; preds = %if.exit740
  %317 = load i64, ptr %dc445, align 8, !dbg !2728
  %lt743 = icmp slt i64 %317, 10, !dbg !2728
  br label %and.phi744, !dbg !2728

and.phi744:                                       ; preds = %and.rhs742, %if.exit740
  %val745 = phi i1 [ false, %if.exit740 ], [ %lt743, %and.rhs742 ], !dbg !2728
  br i1 %val745, label %and.rhs746, label %and.phi752, !dbg !2728

and.rhs746:                                       ; preds = %and.phi744
  br i1 true, label %or.phi750, label %or.rhs747, !dbg !2729

or.rhs747:                                        ; preds = %and.rhs746
  %318 = load i32, ptr %x427, align 4, !dbg !2730
  %zext748 = zext i32 %318 to i64, !dbg !2730
  %lshr = lshr i64 %zext748, 53, !dbg !2731
  %319 = freeze i64 %lshr, !dbg !2731
  %eq749 = icmp eq i64 0, %319, !dbg !2731
  br label %or.phi750, !dbg !2731

or.phi750:                                        ; preds = %or.rhs747, %and.rhs746
  %val751 = phi i1 [ true, %and.rhs746 ], [ %eq749, %or.rhs747 ], !dbg !2731
  br label %and.phi752, !dbg !2731

and.phi752:                                       ; preds = %or.phi750, %and.phi744
  %val753 = phi i1 [ false, %and.phi744 ], [ %val751, %or.phi750 ], !dbg !2731
  br i1 %val753, label %if.then754, label %if.exit758, !dbg !2731

if.then754:                                       ; preds = %and.phi752
  %320 = load i32, ptr %sign420, align 4, !dbg !2732
  %sifp755 = sitofp i32 %320 to double, !dbg !2732
  %321 = load i32, ptr %x427, align 4, !dbg !2733
  %uifp756 = uitofp i32 %321 to double, !dbg !2733
  %fmul757 = fmul double %sifp755, %uifp756, !dbg !2732
  store double %fmul757, ptr %blockret421, align 8, !dbg !2732
  br label %expr_block.exit1944, !dbg !2732

if.exit758:                                       ; preds = %and.phi752
  %322 = load i64, ptr %lrp, align 8, !dbg !2734
  %gt759 = icmp sgt i64 %322, 537, !dbg !2734
  br i1 %gt759, label %if.then760, label %if.exit761, !dbg !2734

if.then760:                                       ; preds = %if.exit758
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2735
  br label %err_retblock, !dbg !2735

if.exit761:                                       ; preds = %if.exit758
  %323 = load i64, ptr %lrp, align 8, !dbg !2736
  %lt762 = icmp slt i64 %323, -1180, !dbg !2736
  br i1 %lt762, label %if.then763, label %if.exit764, !dbg !2736

if.then763:                                       ; preds = %if.exit761
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2737
  br label %err_retblock, !dbg !2737

if.exit764:                                       ; preds = %if.exit761
  %324 = load i32, ptr %j, align 4, !dbg !2738
  %intbool765 = icmp ne i32 %324, 0, !dbg !2738
  br i1 %intbool765, label %if.then766, label %if.exit798, !dbg !2738

if.then766:                                       ; preds = %if.exit764
  br label %loop.cond767, !dbg !2739

loop.cond767:                                     ; preds = %checkok792, %if.then766
  %325 = load i32, ptr %j, align 4, !dbg !2741
  %lt768 = icmp slt i32 %325, 9, !dbg !2741
  br i1 %lt768, label %loop.body769, label %loop.exit796, !dbg !2741

loop.body769:                                     ; preds = %loop.cond767
  %326 = load i32, ptr %k, align 4, !dbg !2743
  %sext770 = sext i32 %326 to i64, !dbg !2743
  %lt771 = icmp slt i64 %sext770, 0, !dbg !2743
  %327 = call i1 @llvm.expect.i1(i1 %lt771, i1 false), !dbg !2743
  br i1 %327, label %panic772, label %checkok780, !dbg !2743

checkok780:                                       ; preds = %loop.body769
  %ge781 = icmp sge i64 %sext770, 128, !dbg !2743
  %328 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !2743
  br i1 %328, label %panic782, label %checkok792, !dbg !2743

checkok792:                                       ; preds = %checkok780
  %ptroffset793 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext770, !dbg !2743
  %329 = load i32, ptr %ptroffset793, align 4, !dbg !2743
  %mul794 = mul i32 %329, 10, !dbg !2744
  store i32 %mul794, ptr %ptroffset793, align 4, !dbg !2744
  %330 = load i32, ptr %j, align 4, !dbg !2745
  %add795 = add i32 %330, 1, !dbg !2745
  store i32 %add795, ptr %j, align 4, !dbg !2745
  br label %loop.cond767, !dbg !2745

loop.exit796:                                     ; preds = %loop.cond767
  %331 = load i32, ptr %k, align 4, !dbg !2746
  %add797 = add i32 %331, 1, !dbg !2746
  store i32 %add797, ptr %k, align 4, !dbg !2746
  store i32 0, ptr %j, align 4, !dbg !2747
  br label %if.exit798, !dbg !2747

if.exit798:                                       ; preds = %loop.exit796, %if.exit764
  call void @llvm.dbg.declare(metadata ptr %a, metadata !2748, metadata !DIExpression()), !dbg !2749
  store i32 0, ptr %a, align 4, !dbg !2749
  call void @llvm.dbg.declare(metadata ptr %z, metadata !2750, metadata !DIExpression()), !dbg !2751
  %332 = load i32, ptr %k, align 4, !dbg !2752
  store i32 %332, ptr %z, align 4, !dbg !2752
  call void @llvm.dbg.declare(metadata ptr %e2799, metadata !2753, metadata !DIExpression()), !dbg !2754
  store i32 0, ptr %e2799, align 4, !dbg !2754
  call void @llvm.dbg.declare(metadata ptr %rp800, metadata !2755, metadata !DIExpression()), !dbg !2756
  %333 = load i64, ptr %lrp, align 8, !dbg !2757
  store i64 %333, ptr %rp800, align 8, !dbg !2757
  %334 = load i32, ptr %lnz, align 4, !dbg !2758
  %lt801 = icmp slt i32 %334, 9, !dbg !2758
  br i1 %lt801, label %and.rhs802, label %and.phi804, !dbg !2758

and.rhs802:                                       ; preds = %if.exit798
  %335 = load i32, ptr %lnz, align 4, !dbg !2759
  %sext803 = sext i32 %335 to i64, !dbg !2759
  %336 = load i64, ptr %rp800, align 8, !dbg !2760
  %le = icmp sle i64 %sext803, %336, !dbg !2759
  br label %and.phi804, !dbg !2759

and.phi804:                                       ; preds = %and.rhs802, %if.exit798
  %val805 = phi i1 [ false, %if.exit798 ], [ %le, %and.rhs802 ], !dbg !2759
  br i1 %val805, label %and.rhs806, label %and.phi808, !dbg !2759

and.rhs806:                                       ; preds = %and.phi804
  %337 = load i64, ptr %rp800, align 8, !dbg !2761
  %lt807 = icmp slt i64 %337, 18, !dbg !2761
  br label %and.phi808, !dbg !2761

and.phi808:                                       ; preds = %and.rhs806, %and.phi804
  %val809 = phi i1 [ false, %and.phi804 ], [ %lt807, %and.rhs806 ], !dbg !2761
  br i1 %val809, label %if.then810, label %if.exit904, !dbg !2761

if.then810:                                       ; preds = %and.phi808
  %338 = load i64, ptr %rp800, align 8, !dbg !2762
  %eq811 = icmp eq i64 %338, 9, !dbg !2762
  br i1 %eq811, label %if.then812, label %if.exit816, !dbg !2762

if.then812:                                       ; preds = %if.then810
  %339 = load i32, ptr %sign420, align 4, !dbg !2764
  %sifp813 = sitofp i32 %339 to double, !dbg !2764
  %340 = load i32, ptr %x427, align 4, !dbg !2765
  %uifp814 = uitofp i32 %340 to double, !dbg !2765
  %fmul815 = fmul double %sifp813, %uifp814, !dbg !2764
  store double %fmul815, ptr %blockret421, align 8, !dbg !2764
  br label %expr_block.exit1944, !dbg !2764

if.exit816:                                       ; preds = %if.then810
  %341 = load i64, ptr %rp800, align 8, !dbg !2766
  %lt817 = icmp slt i64 %341, 9, !dbg !2766
  br i1 %lt817, label %if.then818, label %if.exit853, !dbg !2766

if.then818:                                       ; preds = %if.exit816
  %342 = load i32, ptr %sign420, align 4, !dbg !2767
  %sifp819 = sitofp i32 %342 to double, !dbg !2767
  %343 = load i32, ptr %x427, align 4, !dbg !2768
  %uifp820 = uitofp i32 %343 to double, !dbg !2768
  %fmul821 = fmul double %sifp819, %uifp820, !dbg !2767
  %344 = load i64, ptr %rp800, align 8, !dbg !2769
  %sub822 = sub i64 8, %344, !dbg !2770
  %lt823 = icmp slt i64 %sub822, 0, !dbg !2770
  %345 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !2770
  br i1 %345, label %panic824, label %checkok832, !dbg !2770

checkok832:                                       ; preds = %if.then818
  %ge833 = icmp sge i64 %sub822, 8, !dbg !2770
  %346 = call i1 @llvm.expect.i1(i1 %ge833, i1 false), !dbg !2770
  br i1 %346, label %panic834, label %checkok844, !dbg !2770

checkok844:                                       ; preds = %checkok832
  %ptroffset845 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub822, !dbg !2770
  %347 = load i32, ptr %ptroffset845, align 4, !dbg !2770
  %sifp846 = sitofp i32 %347 to double, !dbg !2770
  %zero = fcmp ueq double %sifp846, 0.000000e+00, !dbg !2767
  %348 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2767
  br i1 %348, label %panic847, label %checkok851, !dbg !2767

checkok851:                                       ; preds = %checkok844
  %fdiv852 = fdiv double %fmul821, %sifp846, !dbg !2767
  store double %fdiv852, ptr %blockret421, align 8, !dbg !2767
  br label %expr_block.exit1944, !dbg !2767

if.exit853:                                       ; preds = %if.exit816
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !2771, metadata !DIExpression()), !dbg !2772
  %349 = load i64, ptr %rp800, align 8, !dbg !2773
  %sub854 = sub i64 %349, 9, !dbg !2774
  %trunc855 = trunc i64 %sub854 to i32, !dbg !2774
  %mul856 = mul i32 3, %trunc855, !dbg !2775
  %sub857 = sub i32 53, %mul856, !dbg !2776
  store i32 %sub857, ptr %bitlim, align 4, !dbg !2776
  %350 = load i32, ptr %bitlim, align 4, !dbg !2777
  %gt858 = icmp sgt i32 %350, 30, !dbg !2777
  br i1 %gt858, label %or.phi871, label %or.rhs859, !dbg !2777

or.rhs859:                                        ; preds = %if.exit853
  %351 = load i32, ptr %x427, align 4, !dbg !2778
  %352 = load i32, ptr %bitlim, align 4, !dbg !2779
  %shift_exceeds = icmp uge i32 %352, 32, !dbg !2780
  %353 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2780
  br i1 %353, label %panic860, label %checkok868, !dbg !2780

checkok868:                                       ; preds = %or.rhs859
  %lshr869 = lshr i32 %351, %352, !dbg !2780
  %354 = freeze i32 %lshr869, !dbg !2780
  %eq870 = icmp eq i32 0, %354, !dbg !2780
  br label %or.phi871, !dbg !2780

or.phi871:                                        ; preds = %checkok868, %if.exit853
  %val872 = phi i1 [ true, %if.exit853 ], [ %eq870, %checkok868 ], !dbg !2780
  br i1 %val872, label %if.then873, label %if.exit903, !dbg !2780

if.then873:                                       ; preds = %or.phi871
  %355 = load i32, ptr %sign420, align 4, !dbg !2781
  %sifp874 = sitofp i32 %355 to double, !dbg !2781
  %356 = load i32, ptr %x427, align 4, !dbg !2782
  %uifp875 = uitofp i32 %356 to double, !dbg !2782
  %fmul876 = fmul double %sifp874, %uifp875, !dbg !2781
  %357 = load i64, ptr %rp800, align 8, !dbg !2783
  %sub877 = sub i64 %357, 10, !dbg !2783
  %lt878 = icmp slt i64 %sub877, 0, !dbg !2783
  %358 = call i1 @llvm.expect.i1(i1 %lt878, i1 false), !dbg !2783
  br i1 %358, label %panic879, label %checkok887, !dbg !2783

checkok887:                                       ; preds = %if.then873
  %ge888 = icmp sge i64 %sub877, 8, !dbg !2783
  %359 = call i1 @llvm.expect.i1(i1 %ge888, i1 false), !dbg !2783
  br i1 %359, label %panic889, label %checkok899, !dbg !2783

checkok899:                                       ; preds = %checkok887
  %ptroffset900 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub877, !dbg !2783
  %360 = load i32, ptr %ptroffset900, align 4, !dbg !2783
  %sifp901 = sitofp i32 %360 to double, !dbg !2783
  %fmul902 = fmul double %fmul876, %sifp901, !dbg !2781
  store double %fmul902, ptr %blockret421, align 8, !dbg !2781
  br label %expr_block.exit1944, !dbg !2781

if.exit903:                                       ; preds = %or.phi871
  br label %if.exit904, !dbg !2781

if.exit904:                                       ; preds = %if.exit903, %and.phi808
  %361 = load i64, ptr %rp800, align 8, !dbg !2784
  %smod = srem i64 %361, 9, !dbg !2784
  %intbool905 = icmp ne i64 %smod, 0, !dbg !2784
  br i1 %intbool905, label %if.then906, label %if.exit1099, !dbg !2784

if.then906:                                       ; preds = %if.exit904
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !2785, metadata !DIExpression()), !dbg !2787
  %362 = load i64, ptr %rp800, align 8, !dbg !2788
  %ge907 = icmp sge i64 %362, 0, !dbg !2788
  br i1 %ge907, label %cond.lhs, label %cond.rhs, !dbg !2788

cond.lhs:                                         ; preds = %if.then906
  %363 = load i64, ptr %rp800, align 8, !dbg !2789
  %smod908 = srem i64 %363, 9, !dbg !2789
  br label %cond.phi, !dbg !2789

cond.rhs:                                         ; preds = %if.then906
  %364 = load i64, ptr %rp800, align 8, !dbg !2790
  %smod909 = srem i64 %364, 9, !dbg !2790
  %add910 = add i64 %smod909, 9, !dbg !2790
  br label %cond.phi, !dbg !2790

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val911 = phi i64 [ %smod908, %cond.lhs ], [ %add910, %cond.rhs ], !dbg !2790
  store i64 %val911, ptr %rpm9, align 8, !dbg !2790
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !2791, metadata !DIExpression()), !dbg !2792
  %365 = load i64, ptr %rpm9, align 8, !dbg !2793
  %sub912 = sub i64 8, %365, !dbg !2794
  %lt913 = icmp slt i64 %sub912, 0, !dbg !2794
  %366 = call i1 @llvm.expect.i1(i1 %lt913, i1 false), !dbg !2794
  br i1 %366, label %panic914, label %checkok922, !dbg !2794

checkok922:                                       ; preds = %cond.phi
  %ge923 = icmp sge i64 %sub912, 8, !dbg !2794
  %367 = call i1 @llvm.expect.i1(i1 %ge923, i1 false), !dbg !2794
  br i1 %367, label %panic924, label %checkok934, !dbg !2794

checkok934:                                       ; preds = %checkok922
  %ptroffset935 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub912, !dbg !2794
  %368 = load i32, ptr %ptroffset935, align 4, !dbg !2794
  store i32 %368, ptr %p10, align 4, !dbg !2794
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !2795, metadata !DIExpression()), !dbg !2796
  store i32 0, ptr %carry, align 4, !dbg !2797
  %369 = load i32, ptr %a, align 4, !dbg !2798
  store i32 %369, ptr %k, align 4, !dbg !2798
  br label %loop.cond936, !dbg !2798

loop.cond936:                                     ; preds = %if.exit1066, %checkok934
  %370 = load i32, ptr %k, align 4, !dbg !2800
  %371 = load i32, ptr %z, align 4, !dbg !2801
  %neq937 = icmp ne i32 %370, %371, !dbg !2800
  br i1 %neq937, label %loop.body938, label %loop.exit1068, !dbg !2800

loop.body938:                                     ; preds = %loop.cond936
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !2802, metadata !DIExpression()), !dbg !2804
  %372 = load i32, ptr %k, align 4, !dbg !2805
  %sext939 = sext i32 %372 to i64, !dbg !2805
  %lt940 = icmp slt i64 %sext939, 0, !dbg !2805
  %373 = call i1 @llvm.expect.i1(i1 %lt940, i1 false), !dbg !2805
  br i1 %373, label %panic941, label %checkok949, !dbg !2805

checkok949:                                       ; preds = %loop.body938
  %ge950 = icmp sge i64 %sext939, 128, !dbg !2805
  %374 = call i1 @llvm.expect.i1(i1 %ge950, i1 false), !dbg !2805
  br i1 %374, label %panic951, label %checkok961, !dbg !2805

checkok961:                                       ; preds = %checkok949
  %ptroffset962 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext939, !dbg !2805
  %375 = load i32, ptr %ptroffset962, align 4, !dbg !2805
  %376 = load i32, ptr %p10, align 4, !dbg !2806
  %zero963 = icmp eq i32 %376, 0, !dbg !2807
  %377 = call i1 @llvm.expect.i1(i1 %zero963, i1 false), !dbg !2807
  br i1 %377, label %panic964, label %checkok968, !dbg !2807

checkok968:                                       ; preds = %checkok961
  %smod969 = srem i32 %375, %376, !dbg !2807
  store i32 %smod969, ptr %tmp, align 4, !dbg !2807
  %378 = load i32, ptr %k, align 4, !dbg !2808
  %sext970 = sext i32 %378 to i64, !dbg !2808
  %lt971 = icmp slt i64 %sext970, 0, !dbg !2808
  %379 = call i1 @llvm.expect.i1(i1 %lt971, i1 false), !dbg !2808
  br i1 %379, label %panic972, label %checkok980, !dbg !2808

checkok980:                                       ; preds = %checkok968
  %ge981 = icmp sge i64 %sext970, 128, !dbg !2808
  %380 = call i1 @llvm.expect.i1(i1 %ge981, i1 false), !dbg !2808
  br i1 %380, label %panic982, label %checkok992, !dbg !2808

checkok992:                                       ; preds = %checkok980
  %ptroffset993 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext970, !dbg !2808
  %381 = load i32, ptr %k, align 4, !dbg !2809
  %sext994 = sext i32 %381 to i64, !dbg !2809
  %lt995 = icmp slt i64 %sext994, 0, !dbg !2809
  %382 = call i1 @llvm.expect.i1(i1 %lt995, i1 false), !dbg !2809
  br i1 %382, label %panic996, label %checkok1004, !dbg !2809

checkok1004:                                      ; preds = %checkok992
  %ge1005 = icmp sge i64 %sext994, 128, !dbg !2809
  %383 = call i1 @llvm.expect.i1(i1 %ge1005, i1 false), !dbg !2809
  br i1 %383, label %panic1006, label %checkok1016, !dbg !2809

checkok1016:                                      ; preds = %checkok1004
  %ptroffset1017 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext994, !dbg !2809
  %384 = load i32, ptr %ptroffset1017, align 4, !dbg !2809
  %385 = load i32, ptr %p10, align 4, !dbg !2810
  %zero1018 = icmp eq i32 %385, 0, !dbg !2811
  %386 = call i1 @llvm.expect.i1(i1 %zero1018, i1 false), !dbg !2811
  br i1 %386, label %panic1019, label %checkok1023, !dbg !2811

checkok1023:                                      ; preds = %checkok1016
  %sdiv = sdiv i32 %384, %385, !dbg !2811
  %387 = load i32, ptr %carry, align 4, !dbg !2812
  %add1024 = add i32 %sdiv, %387, !dbg !2811
  store i32 %add1024, ptr %ptroffset993, align 4, !dbg !2811
  %388 = load i32, ptr %p10, align 4, !dbg !2813
  %zero1025 = icmp eq i32 %388, 0, !dbg !2814
  %389 = call i1 @llvm.expect.i1(i1 %zero1025, i1 false), !dbg !2814
  br i1 %389, label %panic1026, label %checkok1030, !dbg !2814

checkok1030:                                      ; preds = %checkok1023
  %sdiv1031 = sdiv i32 1000000000, %388, !dbg !2814
  %390 = load i32, ptr %tmp, align 4, !dbg !2815
  %mul1032 = mul i32 %sdiv1031, %390, !dbg !2814
  store i32 %mul1032, ptr %carry, align 4, !dbg !2814
  %391 = load i32, ptr %k, align 4, !dbg !2816
  %392 = load i32, ptr %a, align 4, !dbg !2817
  %eq1033 = icmp eq i32 %391, %392, !dbg !2816
  br i1 %eq1033, label %and.rhs1034, label %and.phi1060, !dbg !2816

and.rhs1034:                                      ; preds = %checkok1030
  %393 = load i32, ptr %k, align 4, !dbg !2818
  %sext1035 = sext i32 %393 to i64, !dbg !2818
  %lt1036 = icmp slt i64 %sext1035, 0, !dbg !2818
  %394 = call i1 @llvm.expect.i1(i1 %lt1036, i1 false), !dbg !2818
  br i1 %394, label %panic1037, label %checkok1045, !dbg !2818

checkok1045:                                      ; preds = %and.rhs1034
  %ge1046 = icmp sge i64 %sext1035, 128, !dbg !2818
  %395 = call i1 @llvm.expect.i1(i1 %ge1046, i1 false), !dbg !2818
  br i1 %395, label %panic1047, label %checkok1057, !dbg !2818

checkok1057:                                      ; preds = %checkok1045
  %ptroffset1058 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1035, !dbg !2818
  %396 = load i32, ptr %ptroffset1058, align 4, !dbg !2818
  %not1059 = icmp eq i32 %396, 0, !dbg !2818
  br label %and.phi1060, !dbg !2818

and.phi1060:                                      ; preds = %checkok1057, %checkok1030
  %val1061 = phi i1 [ false, %checkok1030 ], [ %not1059, %checkok1057 ], !dbg !2818
  br i1 %val1061, label %if.then1062, label %if.exit1066, !dbg !2818

if.then1062:                                      ; preds = %and.phi1060
  %397 = load i32, ptr %a, align 4, !dbg !2819
  %add1063 = add i32 %397, 1, !dbg !2819
  %and1064 = and i32 %add1063, 127, !dbg !2819
  store i32 %and1064, ptr %a, align 4, !dbg !2819
  %398 = load i64, ptr %rp800, align 8, !dbg !2821
  %sub1065 = sub i64 %398, 9, !dbg !2821
  store i64 %sub1065, ptr %rp800, align 8, !dbg !2821
  br label %if.exit1066, !dbg !2821

if.exit1066:                                      ; preds = %if.then1062, %and.phi1060
  %399 = load i32, ptr %k, align 4, !dbg !2822
  %add1067 = add i32 %399, 1, !dbg !2822
  store i32 %add1067, ptr %k, align 4, !dbg !2822
  br label %loop.cond936, !dbg !2822

loop.exit1068:                                    ; preds = %loop.cond936
  %400 = load i32, ptr %carry, align 4, !dbg !2823
  %intbool1069 = icmp ne i32 %400, 0, !dbg !2823
  br i1 %intbool1069, label %if.then1070, label %if.exit1096, !dbg !2823

if.then1070:                                      ; preds = %loop.exit1068
  %401 = load i32, ptr %z, align 4, !dbg !2824
  %add1071 = add i32 %401, 1, !dbg !2824
  store i32 %add1071, ptr %z, align 4, !dbg !2824
  %sext1072 = sext i32 %401 to i64, !dbg !2824
  %lt1073 = icmp slt i64 %sext1072, 0, !dbg !2824
  %402 = call i1 @llvm.expect.i1(i1 %lt1073, i1 false), !dbg !2824
  br i1 %402, label %panic1074, label %checkok1082, !dbg !2824

checkok1082:                                      ; preds = %if.then1070
  %ge1083 = icmp sge i64 %sext1072, 128, !dbg !2824
  %403 = call i1 @llvm.expect.i1(i1 %ge1083, i1 false), !dbg !2824
  br i1 %403, label %panic1084, label %checkok1094, !dbg !2824

checkok1094:                                      ; preds = %checkok1082
  %ptroffset1095 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1072, !dbg !2824
  %404 = load i32, ptr %carry, align 4, !dbg !2825
  store i32 %404, ptr %ptroffset1095, align 4, !dbg !2825
  br label %if.exit1096, !dbg !2825

if.exit1096:                                      ; preds = %checkok1094, %loop.exit1068
  %405 = load i64, ptr %rp800, align 8, !dbg !2826
  %406 = load i64, ptr %rpm9, align 8, !dbg !2827
  %sub1097 = sub i64 9, %406, !dbg !2828
  %add1098 = add i64 %405, %sub1097, !dbg !2826
  store i64 %add1098, ptr %rp800, align 8, !dbg !2826
  br label %if.exit1099, !dbg !2826

if.exit1099:                                      ; preds = %if.exit1096, %if.exit904
  br label %loop.cond1100, !dbg !2829

loop.cond1100:                                    ; preds = %if.exit1353, %if.exit1099
  %407 = load i64, ptr %rp800, align 8, !dbg !2830
  %lt1101 = icmp slt i64 %407, 18, !dbg !2830
  br i1 %lt1101, label %or.phi1132, label %or.rhs1102, !dbg !2830

or.rhs1102:                                       ; preds = %loop.cond1100
  %408 = load i64, ptr %rp800, align 8, !dbg !2832
  %eq1103 = icmp eq i64 %408, 18, !dbg !2832
  br i1 %eq1103, label %and.rhs1104, label %and.phi1130, !dbg !2832

and.rhs1104:                                      ; preds = %or.rhs1102
  %409 = load i32, ptr %a, align 4, !dbg !2833
  %sext1105 = sext i32 %409 to i64, !dbg !2833
  %lt1106 = icmp slt i64 %sext1105, 0, !dbg !2833
  %410 = call i1 @llvm.expect.i1(i1 %lt1106, i1 false), !dbg !2833
  br i1 %410, label %panic1107, label %checkok1115, !dbg !2833

checkok1115:                                      ; preds = %and.rhs1104
  %ge1116 = icmp sge i64 %sext1105, 128, !dbg !2833
  %411 = call i1 @llvm.expect.i1(i1 %ge1116, i1 false), !dbg !2833
  br i1 %411, label %panic1117, label %checkok1127, !dbg !2833

checkok1127:                                      ; preds = %checkok1115
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1105, !dbg !2833
  %412 = load i32, ptr %ptroffset1128, align 4, !dbg !2833
  %lt1129 = icmp ult i32 %412, 9007199, !dbg !2834
  br label %and.phi1130, !dbg !2834

and.phi1130:                                      ; preds = %checkok1127, %or.rhs1102
  %val1131 = phi i1 [ false, %or.rhs1102 ], [ %lt1129, %checkok1127 ], !dbg !2834
  br label %or.phi1132, !dbg !2834

or.phi1132:                                       ; preds = %and.phi1130, %loop.cond1100
  %val1133 = phi i1 [ true, %loop.cond1100 ], [ %val1131, %and.phi1130 ], !dbg !2834
  br i1 %val1133, label %loop.body1134, label %loop.exit1354, !dbg !2834

loop.body1134:                                    ; preds = %or.phi1132
  call void @llvm.dbg.declare(metadata ptr %carry1135, metadata !2835, metadata !DIExpression()), !dbg !2837
  store i32 0, ptr %carry1135, align 4, !dbg !2838
  %413 = load i32, ptr %e2799, align 4, !dbg !2839
  %sub1136 = sub i32 %413, 29, !dbg !2839
  store i32 %sub1136, ptr %e2799, align 4, !dbg !2839
  %414 = load i32, ptr %z, align 4, !dbg !2840
  %sub1137 = sub i32 %414, 1, !dbg !2840
  %and1138 = and i32 %sub1137, 127, !dbg !2840
  store i32 %and1138, ptr %k, align 4, !dbg !2840
  br label %loop.body1139, !dbg !2840

loop.body1139:                                    ; preds = %if.exit1264, %loop.body1134
  call void @llvm.dbg.declare(metadata ptr %tmp1140, metadata !2842, metadata !DIExpression()), !dbg !2844
  %415 = load i32, ptr %k, align 4, !dbg !2845
  %sext1141 = sext i32 %415 to i64, !dbg !2845
  %lt1142 = icmp slt i64 %sext1141, 0, !dbg !2845
  %416 = call i1 @llvm.expect.i1(i1 %lt1142, i1 false), !dbg !2845
  br i1 %416, label %panic1143, label %checkok1151, !dbg !2845

checkok1151:                                      ; preds = %loop.body1139
  %ge1152 = icmp sge i64 %sext1141, 128, !dbg !2845
  %417 = call i1 @llvm.expect.i1(i1 %ge1152, i1 false), !dbg !2845
  br i1 %417, label %panic1153, label %checkok1163, !dbg !2845

checkok1163:                                      ; preds = %checkok1151
  %ptroffset1164 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1141, !dbg !2845
  %418 = load i32, ptr %ptroffset1164, align 4, !dbg !2845
  %zext1165 = zext i32 %418 to i64, !dbg !2845
  %shl = shl i64 %zext1165, 29, !dbg !2846
  %419 = freeze i64 %shl, !dbg !2846
  %420 = load i32, ptr %carry1135, align 4, !dbg !2847
  %zext1166 = zext i32 %420 to i64, !dbg !2847
  %add1167 = add i64 %419, %zext1166, !dbg !2846
  store i64 %add1167, ptr %tmp1140, align 8, !dbg !2846
  %421 = load i64, ptr %tmp1140, align 8, !dbg !2848
  %lt1168 = icmp ult i64 1000000000, %421, !dbg !2848
  br i1 %lt1168, label %if.then1169, label %if.else1198, !dbg !2848

if.then1169:                                      ; preds = %checkok1163
  %422 = load i64, ptr %tmp1140, align 8, !dbg !2849
  %sdiv1170 = sdiv i64 %422, 1000000000, !dbg !2851
  %trunc1171 = trunc i64 %sdiv1170 to i32, !dbg !2851
  store i32 %trunc1171, ptr %carry1135, align 4, !dbg !2851
  %423 = load i32, ptr %k, align 4, !dbg !2852
  %sext1172 = sext i32 %423 to i64, !dbg !2852
  %lt1173 = icmp slt i64 %sext1172, 0, !dbg !2852
  %424 = call i1 @llvm.expect.i1(i1 %lt1173, i1 false), !dbg !2852
  br i1 %424, label %panic1174, label %checkok1182, !dbg !2852

checkok1182:                                      ; preds = %if.then1169
  %ge1183 = icmp sge i64 %sext1172, 128, !dbg !2852
  %425 = call i1 @llvm.expect.i1(i1 %ge1183, i1 false), !dbg !2852
  br i1 %425, label %panic1184, label %checkok1194, !dbg !2852

checkok1194:                                      ; preds = %checkok1182
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1172, !dbg !2852
  %426 = load i64, ptr %tmp1140, align 8, !dbg !2853
  %smod1196 = srem i64 %426, 1000000000, !dbg !2854
  %trunc1197 = trunc i64 %smod1196 to i32, !dbg !2854
  store i32 %trunc1197, ptr %ptroffset1195, align 4, !dbg !2854
  br label %if.exit1224, !dbg !2854

if.else1198:                                      ; preds = %checkok1163
  store i32 0, ptr %carry1135, align 4, !dbg !2855
  %427 = load i32, ptr %k, align 4, !dbg !2857
  %sext1199 = sext i32 %427 to i64, !dbg !2857
  %lt1200 = icmp slt i64 %sext1199, 0, !dbg !2857
  %428 = call i1 @llvm.expect.i1(i1 %lt1200, i1 false), !dbg !2857
  br i1 %428, label %panic1201, label %checkok1209, !dbg !2857

checkok1209:                                      ; preds = %if.else1198
  %ge1210 = icmp sge i64 %sext1199, 128, !dbg !2857
  %429 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !2857
  br i1 %429, label %panic1211, label %checkok1221, !dbg !2857

checkok1221:                                      ; preds = %checkok1209
  %ptroffset1222 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1199, !dbg !2857
  %430 = load i64, ptr %tmp1140, align 8, !dbg !2858
  %trunc1223 = trunc i64 %430 to i32, !dbg !2858
  store i32 %trunc1223, ptr %ptroffset1222, align 4, !dbg !2858
  br label %if.exit1224, !dbg !2858

if.exit1224:                                      ; preds = %checkok1221, %checkok1194
  %431 = load i32, ptr %k, align 4, !dbg !2859
  %432 = load i32, ptr %z, align 4, !dbg !2860
  %sub1225 = sub i32 %432, 1, !dbg !2860
  %and1226 = and i32 %sub1225, 127, !dbg !2860
  %eq1227 = icmp eq i32 %431, %and1226, !dbg !2859
  br i1 %eq1227, label %and.rhs1228, label %and.phi1230, !dbg !2859

and.rhs1228:                                      ; preds = %if.exit1224
  %433 = load i32, ptr %k, align 4, !dbg !2861
  %434 = load i32, ptr %a, align 4, !dbg !2862
  %neq1229 = icmp ne i32 %433, %434, !dbg !2861
  br label %and.phi1230, !dbg !2861

and.phi1230:                                      ; preds = %and.rhs1228, %if.exit1224
  %val1231 = phi i1 [ false, %if.exit1224 ], [ %neq1229, %and.rhs1228 ], !dbg !2861
  br i1 %val1231, label %and.rhs1232, label %and.phi1258, !dbg !2861

and.rhs1232:                                      ; preds = %and.phi1230
  %435 = load i32, ptr %k, align 4, !dbg !2863
  %sext1233 = sext i32 %435 to i64, !dbg !2863
  %lt1234 = icmp slt i64 %sext1233, 0, !dbg !2863
  %436 = call i1 @llvm.expect.i1(i1 %lt1234, i1 false), !dbg !2863
  br i1 %436, label %panic1235, label %checkok1243, !dbg !2863

checkok1243:                                      ; preds = %and.rhs1232
  %ge1244 = icmp sge i64 %sext1233, 128, !dbg !2863
  %437 = call i1 @llvm.expect.i1(i1 %ge1244, i1 false), !dbg !2863
  br i1 %437, label %panic1245, label %checkok1255, !dbg !2863

checkok1255:                                      ; preds = %checkok1243
  %ptroffset1256 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1233, !dbg !2863
  %438 = load i32, ptr %ptroffset1256, align 4, !dbg !2863
  %not1257 = icmp eq i32 %438, 0, !dbg !2863
  br label %and.phi1258, !dbg !2863

and.phi1258:                                      ; preds = %checkok1255, %and.phi1230
  %val1259 = phi i1 [ false, %and.phi1230 ], [ %not1257, %checkok1255 ], !dbg !2863
  br i1 %val1259, label %if.then1260, label %if.exit1261, !dbg !2863

if.then1260:                                      ; preds = %and.phi1258
  %439 = load i32, ptr %k, align 4, !dbg !2864
  store i32 %439, ptr %z, align 4, !dbg !2864
  br label %if.exit1261, !dbg !2864

if.exit1261:                                      ; preds = %if.then1260, %and.phi1258
  %440 = load i32, ptr %k, align 4, !dbg !2865
  %441 = load i32, ptr %a, align 4, !dbg !2866
  %eq1262 = icmp eq i32 %440, %441, !dbg !2865
  br i1 %eq1262, label %if.then1263, label %if.exit1264, !dbg !2865

if.then1263:                                      ; preds = %if.exit1261
  br label %loop.exit1267, !dbg !2867

if.exit1264:                                      ; preds = %if.exit1261
  %442 = load i32, ptr %k, align 4, !dbg !2868
  %sub1265 = sub i32 %442, 1, !dbg !2868
  %and1266 = and i32 %sub1265, 127, !dbg !2868
  store i32 %and1266, ptr %k, align 4, !dbg !2868
  br label %loop.body1139, !dbg !2868

loop.exit1267:                                    ; preds = %if.then1263
  %443 = load i32, ptr %carry1135, align 4, !dbg !2869
  %intbool1268 = icmp ne i32 %443, 0, !dbg !2869
  br i1 %intbool1268, label %if.then1269, label %if.exit1353, !dbg !2869

if.then1269:                                      ; preds = %loop.exit1267
  %444 = load i64, ptr %rp800, align 8, !dbg !2870
  %add1270 = add i64 %444, 9, !dbg !2870
  store i64 %add1270, ptr %rp800, align 8, !dbg !2870
  %445 = load i32, ptr %a, align 4, !dbg !2872
  %sub1271 = sub i32 %445, 1, !dbg !2872
  %and1272 = and i32 %sub1271, 127, !dbg !2872
  store i32 %and1272, ptr %a, align 4, !dbg !2872
  %446 = load i32, ptr %a, align 4, !dbg !2873
  %447 = load i32, ptr %z, align 4, !dbg !2874
  %eq1273 = icmp eq i32 %446, %447, !dbg !2873
  br i1 %eq1273, label %if.then1274, label %if.exit1328, !dbg !2873

if.then1274:                                      ; preds = %if.then1269
  %448 = load i32, ptr %z, align 4, !dbg !2875
  %sub1275 = sub i32 %448, 1, !dbg !2875
  %and1276 = and i32 %sub1275, 127, !dbg !2875
  store i32 %and1276, ptr %z, align 4, !dbg !2875
  %449 = load i32, ptr %z, align 4, !dbg !2877
  %sub1277 = sub i32 %449, 1, !dbg !2877
  %and1278 = and i32 %sub1277, 127, !dbg !2877
  %sext1279 = sext i32 %and1278 to i64, !dbg !2877
  %lt1280 = icmp slt i64 %sext1279, 0, !dbg !2877
  %450 = call i1 @llvm.expect.i1(i1 %lt1280, i1 false), !dbg !2877
  br i1 %450, label %panic1281, label %checkok1289, !dbg !2877

checkok1289:                                      ; preds = %if.then1274
  %ge1290 = icmp sge i64 %sext1279, 128, !dbg !2877
  %451 = call i1 @llvm.expect.i1(i1 %ge1290, i1 false), !dbg !2877
  br i1 %451, label %panic1291, label %checkok1301, !dbg !2877

checkok1301:                                      ; preds = %checkok1289
  %ptroffset1302 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1279, !dbg !2877
  %452 = load i32, ptr %ptroffset1302, align 4, !dbg !2877
  %453 = load i32, ptr %z, align 4, !dbg !2878
  %sext1303 = sext i32 %453 to i64, !dbg !2878
  %lt1304 = icmp slt i64 %sext1303, 0, !dbg !2878
  %454 = call i1 @llvm.expect.i1(i1 %lt1304, i1 false), !dbg !2878
  br i1 %454, label %panic1305, label %checkok1313, !dbg !2878

checkok1313:                                      ; preds = %checkok1301
  %ge1314 = icmp sge i64 %sext1303, 128, !dbg !2878
  %455 = call i1 @llvm.expect.i1(i1 %ge1314, i1 false), !dbg !2878
  br i1 %455, label %panic1315, label %checkok1325, !dbg !2878

checkok1325:                                      ; preds = %checkok1313
  %ptroffset1326 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1303, !dbg !2878
  %456 = load i32, ptr %ptroffset1326, align 4, !dbg !2878
  %or1327 = or i32 %452, %456, !dbg !2879
  store i32 %or1327, ptr %ptroffset1302, align 4, !dbg !2879
  br label %if.exit1328, !dbg !2879

if.exit1328:                                      ; preds = %checkok1325, %if.then1269
  %457 = load i32, ptr %a, align 4, !dbg !2880
  %sext1329 = sext i32 %457 to i64, !dbg !2880
  %lt1330 = icmp slt i64 %sext1329, 0, !dbg !2880
  %458 = call i1 @llvm.expect.i1(i1 %lt1330, i1 false), !dbg !2880
  br i1 %458, label %panic1331, label %checkok1339, !dbg !2880

checkok1339:                                      ; preds = %if.exit1328
  %ge1340 = icmp sge i64 %sext1329, 128, !dbg !2880
  %459 = call i1 @llvm.expect.i1(i1 %ge1340, i1 false), !dbg !2880
  br i1 %459, label %panic1341, label %checkok1351, !dbg !2880

checkok1351:                                      ; preds = %checkok1339
  %ptroffset1352 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1329, !dbg !2880
  %460 = load i32, ptr %carry1135, align 4, !dbg !2881
  store i32 %460, ptr %ptroffset1352, align 4, !dbg !2881
  br label %if.exit1353, !dbg !2881

if.exit1353:                                      ; preds = %checkok1351, %loop.exit1267
  br label %loop.cond1100, !dbg !2881

loop.exit1354:                                    ; preds = %or.phi1132
  br label %loop.body1355, !dbg !2882

loop.body1355:                                    ; preds = %if.exit1713, %loop.exit1354
  call void @llvm.dbg.declare(metadata ptr %carry1356, metadata !2883, metadata !DIExpression()), !dbg !2886
  store i32 0, ptr %carry1356, align 4, !dbg !2887
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !2888, metadata !DIExpression()), !dbg !2889
  store i32 1, ptr %sh, align 4, !dbg !2890
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2891, metadata !DIExpression()), !dbg !2892
  store i32 0, ptr %i, align 4, !dbg !2892
  store i32 0, ptr %i, align 4, !dbg !2893
  br label %loop.cond1357, !dbg !2893

loop.cond1357:                                    ; preds = %if.exit1469, %loop.body1355
  %461 = load i32, ptr %i, align 4, !dbg !2895
  %lt1358 = icmp slt i32 %461, 2, !dbg !2895
  br i1 %lt1358, label %loop.body1359, label %loop.exit1471, !dbg !2895

loop.body1359:                                    ; preds = %loop.cond1357
  %462 = load i32, ptr %a, align 4, !dbg !2896
  %463 = load i32, ptr %i, align 4, !dbg !2898
  %add1360 = add i32 %462, %463, !dbg !2896
  %and1361 = and i32 %add1360, 127, !dbg !2896
  store i32 %and1361, ptr %k, align 4, !dbg !2896
  %464 = load i32, ptr %k, align 4, !dbg !2899
  %465 = load i32, ptr %z, align 4, !dbg !2900
  %eq1362 = icmp eq i32 %464, %465, !dbg !2899
  br i1 %eq1362, label %or.phi1413, label %or.rhs1363, !dbg !2899

or.rhs1363:                                       ; preds = %loop.body1359
  %466 = load i32, ptr %k, align 4, !dbg !2901
  %sext1364 = sext i32 %466 to i64, !dbg !2901
  %lt1365 = icmp slt i64 %sext1364, 0, !dbg !2901
  %467 = call i1 @llvm.expect.i1(i1 %lt1365, i1 false), !dbg !2901
  br i1 %467, label %panic1366, label %checkok1374, !dbg !2901

checkok1374:                                      ; preds = %or.rhs1363
  %ge1375 = icmp sge i64 %sext1364, 128, !dbg !2901
  %468 = call i1 @llvm.expect.i1(i1 %ge1375, i1 false), !dbg !2901
  br i1 %468, label %panic1376, label %checkok1386, !dbg !2901

checkok1386:                                      ; preds = %checkok1374
  %ptroffset1387 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1364, !dbg !2901
  %469 = load i32, ptr %ptroffset1387, align 4, !dbg !2901
  %470 = load i32, ptr %i, align 4, !dbg !2902
  %sext1388 = sext i32 %470 to i64, !dbg !2902
  %lt1389 = icmp slt i64 %sext1388, 0, !dbg !2902
  %471 = call i1 @llvm.expect.i1(i1 %lt1389, i1 false), !dbg !2902
  br i1 %471, label %panic1390, label %checkok1398, !dbg !2902

checkok1398:                                      ; preds = %checkok1386
  %ge1399 = icmp sge i64 %sext1388, 2, !dbg !2902
  %472 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !2902
  br i1 %472, label %panic1400, label %checkok1410, !dbg !2902

checkok1410:                                      ; preds = %checkok1398
  %ptroffset1411 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1388, !dbg !2902
  %473 = load i32, ptr %ptroffset1411, align 4, !dbg !2902
  %lt1412 = icmp ult i32 %469, %473, !dbg !2903
  br label %or.phi1413, !dbg !2903

or.phi1413:                                       ; preds = %checkok1410, %loop.body1359
  %val1414 = phi i1 [ true, %loop.body1359 ], [ %lt1412, %checkok1410 ], !dbg !2903
  br i1 %val1414, label %if.then1415, label %if.exit1416, !dbg !2903

if.then1415:                                      ; preds = %or.phi1413
  store i32 2, ptr %i, align 4, !dbg !2904
  br label %loop.exit1471, !dbg !2906

if.exit1416:                                      ; preds = %or.phi1413
  %474 = load i32, ptr %a, align 4, !dbg !2907
  %475 = load i32, ptr %i, align 4, !dbg !2908
  %add1417 = add i32 %474, %475, !dbg !2907
  %and1418 = and i32 %add1417, 127, !dbg !2907
  %sext1419 = sext i32 %and1418 to i64, !dbg !2907
  %lt1420 = icmp slt i64 %sext1419, 0, !dbg !2907
  %476 = call i1 @llvm.expect.i1(i1 %lt1420, i1 false), !dbg !2907
  br i1 %476, label %panic1421, label %checkok1429, !dbg !2907

checkok1429:                                      ; preds = %if.exit1416
  %ge1430 = icmp sge i64 %sext1419, 128, !dbg !2907
  %477 = call i1 @llvm.expect.i1(i1 %ge1430, i1 false), !dbg !2907
  br i1 %477, label %panic1431, label %checkok1441, !dbg !2907

checkok1441:                                      ; preds = %checkok1429
  %ptroffset1442 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1419, !dbg !2907
  %478 = load i32, ptr %ptroffset1442, align 4, !dbg !2907
  %479 = load i32, ptr %i, align 4, !dbg !2909
  %sext1443 = sext i32 %479 to i64, !dbg !2909
  %lt1444 = icmp slt i64 %sext1443, 0, !dbg !2909
  %480 = call i1 @llvm.expect.i1(i1 %lt1444, i1 false), !dbg !2909
  br i1 %480, label %panic1445, label %checkok1453, !dbg !2909

checkok1453:                                      ; preds = %checkok1441
  %ge1454 = icmp sge i64 %sext1443, 2, !dbg !2909
  %481 = call i1 @llvm.expect.i1(i1 %ge1454, i1 false), !dbg !2909
  br i1 %481, label %panic1455, label %checkok1465, !dbg !2909

checkok1465:                                      ; preds = %checkok1453
  %ptroffset1466 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1443, !dbg !2909
  %482 = load i32, ptr %ptroffset1466, align 4, !dbg !2909
  %gt1467 = icmp ugt i32 %478, %482, !dbg !2910
  br i1 %gt1467, label %if.then1468, label %if.exit1469, !dbg !2910

if.then1468:                                      ; preds = %checkok1465
  br label %loop.exit1471, !dbg !2911

if.exit1469:                                      ; preds = %checkok1465
  %483 = load i32, ptr %i, align 4, !dbg !2912
  %add1470 = add i32 %483, 1, !dbg !2912
  store i32 %add1470, ptr %i, align 4, !dbg !2912
  br label %loop.cond1357, !dbg !2912

loop.exit1471:                                    ; preds = %if.then1468, %if.then1415, %loop.cond1357
  %484 = load i32, ptr %i, align 4, !dbg !2913
  %eq1472 = icmp eq i32 %484, 2, !dbg !2913
  br i1 %eq1472, label %and.rhs1473, label %and.phi1475, !dbg !2913

and.rhs1473:                                      ; preds = %loop.exit1471
  %485 = load i64, ptr %rp800, align 8, !dbg !2914
  %eq1474 = icmp eq i64 %485, 18, !dbg !2914
  br label %and.phi1475, !dbg !2914

and.phi1475:                                      ; preds = %and.rhs1473, %loop.exit1471
  %val1476 = phi i1 [ false, %loop.exit1471 ], [ %eq1474, %and.rhs1473 ], !dbg !2914
  br i1 %val1476, label %if.then1477, label %if.exit1478, !dbg !2914

if.then1477:                                      ; preds = %and.phi1475
  br label %loop.exit1714, !dbg !2915

if.exit1478:                                      ; preds = %and.phi1475
  %486 = load i64, ptr %rp800, align 8, !dbg !2916
  %gt1479 = icmp sgt i64 %486, 27, !dbg !2916
  br i1 %gt1479, label %if.then1480, label %if.exit1481, !dbg !2916

if.then1480:                                      ; preds = %if.exit1478
  store i32 9, ptr %sh, align 4, !dbg !2917
  br label %if.exit1481, !dbg !2917

if.exit1481:                                      ; preds = %if.then1480, %if.exit1478
  %487 = load i32, ptr %e2799, align 4, !dbg !2918
  %488 = load i32, ptr %sh, align 4, !dbg !2919
  %add1482 = add i32 %487, %488, !dbg !2918
  store i32 %add1482, ptr %e2799, align 4, !dbg !2918
  %489 = load i32, ptr %a, align 4, !dbg !2920
  store i32 %489, ptr %k, align 4, !dbg !2920
  br label %loop.cond1483, !dbg !2920

loop.cond1483:                                    ; preds = %if.exit1648, %if.exit1481
  %490 = load i32, ptr %k, align 4, !dbg !2922
  %491 = load i32, ptr %z, align 4, !dbg !2923
  %neq1484 = icmp ne i32 %490, %491, !dbg !2922
  br i1 %neq1484, label %loop.body1485, label %loop.exit1651, !dbg !2922

loop.body1485:                                    ; preds = %loop.cond1483
  call void @llvm.dbg.declare(metadata ptr %tmp1486, metadata !2924, metadata !DIExpression()), !dbg !2926
  %492 = load i32, ptr %k, align 4, !dbg !2927
  %sext1487 = sext i32 %492 to i64, !dbg !2927
  %lt1488 = icmp slt i64 %sext1487, 0, !dbg !2927
  %493 = call i1 @llvm.expect.i1(i1 %lt1488, i1 false), !dbg !2927
  br i1 %493, label %panic1489, label %checkok1497, !dbg !2927

checkok1497:                                      ; preds = %loop.body1485
  %ge1498 = icmp sge i64 %sext1487, 128, !dbg !2927
  %494 = call i1 @llvm.expect.i1(i1 %ge1498, i1 false), !dbg !2927
  br i1 %494, label %panic1499, label %checkok1509, !dbg !2927

checkok1509:                                      ; preds = %checkok1497
  %ptroffset1510 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1487, !dbg !2927
  %495 = load i32, ptr %ptroffset1510, align 4, !dbg !2927
  %496 = load i32, ptr %sh, align 4, !dbg !2928
  %shift_underflow = icmp slt i32 %496, 0, !dbg !2929
  %497 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2929
  br i1 %497, label %panic1511, label %checkok1519, !dbg !2929

checkok1519:                                      ; preds = %checkok1509
  %shift_exceeds1520 = icmp sge i32 %496, 32, !dbg !2929
  %498 = call i1 @llvm.expect.i1(i1 %shift_exceeds1520, i1 false), !dbg !2929
  br i1 %498, label %panic1521, label %checkok1529, !dbg !2929

checkok1529:                                      ; preds = %checkok1519
  %shl1530 = shl i32 1, %496, !dbg !2929
  %499 = freeze i32 %shl1530, !dbg !2929
  %sub1531 = sub i32 %499, 1, !dbg !2929
  %and1532 = and i32 %495, %sub1531, !dbg !2930
  store i32 %and1532, ptr %tmp1486, align 4, !dbg !2930
  %500 = load i32, ptr %k, align 4, !dbg !2931
  %sext1533 = sext i32 %500 to i64, !dbg !2931
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !2931
  %501 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !2931
  br i1 %501, label %panic1535, label %checkok1543, !dbg !2931

checkok1543:                                      ; preds = %checkok1529
  %ge1544 = icmp sge i64 %sext1533, 128, !dbg !2931
  %502 = call i1 @llvm.expect.i1(i1 %ge1544, i1 false), !dbg !2931
  br i1 %502, label %panic1545, label %checkok1555, !dbg !2931

checkok1555:                                      ; preds = %checkok1543
  %ptroffset1556 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1533, !dbg !2931
  %503 = load i32, ptr %k, align 4, !dbg !2932
  %sext1557 = sext i32 %503 to i64, !dbg !2932
  %lt1558 = icmp slt i64 %sext1557, 0, !dbg !2932
  %504 = call i1 @llvm.expect.i1(i1 %lt1558, i1 false), !dbg !2932
  br i1 %504, label %panic1559, label %checkok1567, !dbg !2932

checkok1567:                                      ; preds = %checkok1555
  %ge1568 = icmp sge i64 %sext1557, 128, !dbg !2932
  %505 = call i1 @llvm.expect.i1(i1 %ge1568, i1 false), !dbg !2932
  br i1 %505, label %panic1569, label %checkok1579, !dbg !2932

checkok1579:                                      ; preds = %checkok1567
  %ptroffset1580 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1557, !dbg !2932
  %506 = load i32, ptr %ptroffset1580, align 4, !dbg !2932
  %507 = load i32, ptr %sh, align 4, !dbg !2933
  %shift_exceeds1581 = icmp uge i32 %507, 32, !dbg !2934
  %508 = call i1 @llvm.expect.i1(i1 %shift_exceeds1581, i1 false), !dbg !2934
  br i1 %508, label %panic1582, label %checkok1590, !dbg !2934

checkok1590:                                      ; preds = %checkok1579
  %lshr1591 = lshr i32 %506, %507, !dbg !2934
  %509 = freeze i32 %lshr1591, !dbg !2934
  %510 = load i32, ptr %carry1356, align 4, !dbg !2935
  %add1592 = add i32 %509, %510, !dbg !2934
  store i32 %add1592, ptr %ptroffset1556, align 4, !dbg !2934
  %511 = load i32, ptr %sh, align 4, !dbg !2936
  %shift_underflow1593 = icmp slt i32 %511, 0, !dbg !2937
  %512 = call i1 @llvm.expect.i1(i1 %shift_underflow1593, i1 false), !dbg !2937
  br i1 %512, label %panic1594, label %checkok1602, !dbg !2937

checkok1602:                                      ; preds = %checkok1590
  %shift_exceeds1603 = icmp sge i32 %511, 32, !dbg !2937
  %513 = call i1 @llvm.expect.i1(i1 %shift_exceeds1603, i1 false), !dbg !2937
  br i1 %513, label %panic1604, label %checkok1612, !dbg !2937

checkok1612:                                      ; preds = %checkok1602
  %ashr = ashr i32 1000000000, %511, !dbg !2937
  %514 = freeze i32 %ashr, !dbg !2937
  %515 = load i32, ptr %tmp1486, align 4, !dbg !2938
  %mul1613 = mul i32 %514, %515, !dbg !2937
  store i32 %mul1613, ptr %carry1356, align 4, !dbg !2937
  %516 = load i32, ptr %k, align 4, !dbg !2939
  %517 = load i32, ptr %a, align 4, !dbg !2940
  %eq1614 = icmp eq i32 %516, %517, !dbg !2939
  br i1 %eq1614, label %and.rhs1615, label %and.phi1641, !dbg !2939

and.rhs1615:                                      ; preds = %checkok1612
  %518 = load i32, ptr %k, align 4, !dbg !2941
  %sext1616 = sext i32 %518 to i64, !dbg !2941
  %lt1617 = icmp slt i64 %sext1616, 0, !dbg !2941
  %519 = call i1 @llvm.expect.i1(i1 %lt1617, i1 false), !dbg !2941
  br i1 %519, label %panic1618, label %checkok1626, !dbg !2941

checkok1626:                                      ; preds = %and.rhs1615
  %ge1627 = icmp sge i64 %sext1616, 128, !dbg !2941
  %520 = call i1 @llvm.expect.i1(i1 %ge1627, i1 false), !dbg !2941
  br i1 %520, label %panic1628, label %checkok1638, !dbg !2941

checkok1638:                                      ; preds = %checkok1626
  %ptroffset1639 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1616, !dbg !2941
  %521 = load i32, ptr %ptroffset1639, align 4, !dbg !2941
  %not1640 = icmp eq i32 %521, 0, !dbg !2941
  br label %and.phi1641, !dbg !2941

and.phi1641:                                      ; preds = %checkok1638, %checkok1612
  %val1642 = phi i1 [ false, %checkok1612 ], [ %not1640, %checkok1638 ], !dbg !2941
  br i1 %val1642, label %if.then1643, label %if.exit1648, !dbg !2941

if.then1643:                                      ; preds = %and.phi1641
  %522 = load i32, ptr %a, align 4, !dbg !2942
  %add1644 = add i32 %522, 1, !dbg !2942
  %and1645 = and i32 %add1644, 127, !dbg !2942
  store i32 %and1645, ptr %a, align 4, !dbg !2942
  %523 = load i32, ptr %i, align 4, !dbg !2944
  %sub1646 = sub i32 %523, 1, !dbg !2944
  store i32 %sub1646, ptr %i, align 4, !dbg !2944
  %524 = load i64, ptr %rp800, align 8, !dbg !2945
  %sub1647 = sub i64 %524, 9, !dbg !2945
  store i64 %sub1647, ptr %rp800, align 8, !dbg !2945
  br label %if.exit1648, !dbg !2945

if.exit1648:                                      ; preds = %if.then1643, %and.phi1641
  %525 = load i32, ptr %k, align 4, !dbg !2946
  %add1649 = add i32 %525, 1, !dbg !2946
  %and1650 = and i32 %add1649, 127, !dbg !2946
  store i32 %and1650, ptr %k, align 4, !dbg !2946
  br label %loop.cond1483, !dbg !2946

loop.exit1651:                                    ; preds = %loop.cond1483
  %526 = load i32, ptr %carry1356, align 4, !dbg !2947
  %intbool1652 = icmp ne i32 %526, 0, !dbg !2947
  br i1 %intbool1652, label %if.then1653, label %if.exit1713, !dbg !2947

if.then1653:                                      ; preds = %loop.exit1651
  %527 = load i32, ptr %z, align 4, !dbg !2948
  %add1654 = add i32 %527, 1, !dbg !2948
  %and1655 = and i32 %add1654, 127, !dbg !2948
  %528 = load i32, ptr %a, align 4, !dbg !2950
  %neq1656 = icmp ne i32 %and1655, %528, !dbg !2948
  br i1 %neq1656, label %if.then1657, label %if.else1684, !dbg !2948

if.then1657:                                      ; preds = %if.then1653
  %529 = load i32, ptr %z, align 4, !dbg !2951
  %sext1658 = sext i32 %529 to i64, !dbg !2951
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !2951
  %530 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !2951
  br i1 %530, label %panic1660, label %checkok1668, !dbg !2951

checkok1668:                                      ; preds = %if.then1657
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !2951
  %531 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !2951
  br i1 %531, label %panic1670, label %checkok1680, !dbg !2951

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1658, !dbg !2951
  %532 = load i32, ptr %carry1356, align 4, !dbg !2953
  store i32 %532, ptr %ptroffset1681, align 4, !dbg !2953
  %533 = load i32, ptr %z, align 4, !dbg !2954
  %add1682 = add i32 %533, 1, !dbg !2954
  %and1683 = and i32 %add1682, 127, !dbg !2954
  store i32 %and1683, ptr %z, align 4, !dbg !2954
  br label %if.exit1712, !dbg !2954

if.else1684:                                      ; preds = %if.then1653
  %534 = load i32, ptr %z, align 4, !dbg !2955
  %sub1685 = sub i32 %534, 1, !dbg !2955
  %and1686 = and i32 %sub1685, 127, !dbg !2955
  %sext1687 = sext i32 %and1686 to i64, !dbg !2955
  %lt1688 = icmp slt i64 %sext1687, 0, !dbg !2955
  %535 = call i1 @llvm.expect.i1(i1 %lt1688, i1 false), !dbg !2955
  br i1 %535, label %panic1689, label %checkok1697, !dbg !2955

checkok1697:                                      ; preds = %if.else1684
  %ge1698 = icmp sge i64 %sext1687, 128, !dbg !2955
  %536 = call i1 @llvm.expect.i1(i1 %ge1698, i1 false), !dbg !2955
  br i1 %536, label %panic1699, label %checkok1709, !dbg !2955

checkok1709:                                      ; preds = %checkok1697
  %ptroffset1710 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1687, !dbg !2955
  %537 = load i32, ptr %ptroffset1710, align 4, !dbg !2955
  %or1711 = or i32 %537, 1, !dbg !2957
  store i32 %or1711, ptr %ptroffset1710, align 4, !dbg !2957
  br label %if.exit1712, !dbg !2957

if.exit1712:                                      ; preds = %checkok1709, %checkok1680
  br label %if.exit1713, !dbg !2957

if.exit1713:                                      ; preds = %if.exit1712, %loop.exit1651
  br label %loop.body1355, !dbg !2957

loop.exit1714:                                    ; preds = %if.then1477
  call void @llvm.dbg.declare(metadata ptr %y1715, metadata !2958, metadata !DIExpression()), !dbg !2959
  store double 0.000000e+00, ptr %y1715, align 8, !dbg !2959
  call void @llvm.dbg.declare(metadata ptr %i1716, metadata !2960, metadata !DIExpression()), !dbg !2961
  store i32 0, ptr %i1716, align 4, !dbg !2961
  store i32 0, ptr %i1716, align 4, !dbg !2962
  br label %loop.cond1717, !dbg !2962

loop.cond1717:                                    ; preds = %checkok1777, %loop.exit1714
  %538 = load i32, ptr %i1716, align 4, !dbg !2964
  %lt1718 = icmp slt i32 %538, 2, !dbg !2964
  br i1 %lt1718, label %loop.body1719, label %loop.exit1782, !dbg !2964

loop.body1719:                                    ; preds = %loop.cond1717
  %539 = load i32, ptr %a, align 4, !dbg !2965
  %540 = load i32, ptr %i1716, align 4, !dbg !2967
  %add1720 = add i32 %539, %540, !dbg !2965
  %and1721 = and i32 %add1720, 127, !dbg !2965
  %541 = load i32, ptr %z, align 4, !dbg !2968
  %eq1722 = icmp eq i32 %and1721, %541, !dbg !2965
  br i1 %eq1722, label %if.then1723, label %if.exit1751, !dbg !2965

if.then1723:                                      ; preds = %loop.body1719
  %542 = load i32, ptr %z, align 4, !dbg !2969
  %add1724 = add i32 %542, 1, !dbg !2969
  %and1725 = and i32 %add1724, 127, !dbg !2969
  store i32 %and1725, ptr %z, align 4, !dbg !2969
  %sub1726 = sub i32 %and1725, 1, !dbg !2970
  %sext1727 = sext i32 %sub1726 to i64, !dbg !2970
  %lt1728 = icmp slt i64 %sext1727, 0, !dbg !2970
  %543 = call i1 @llvm.expect.i1(i1 %lt1728, i1 false), !dbg !2970
  br i1 %543, label %panic1729, label %checkok1737, !dbg !2970

checkok1737:                                      ; preds = %if.then1723
  %ge1738 = icmp sge i64 %sext1727, 128, !dbg !2970
  %544 = call i1 @llvm.expect.i1(i1 %ge1738, i1 false), !dbg !2970
  br i1 %544, label %panic1739, label %checkok1749, !dbg !2970

checkok1749:                                      ; preds = %checkok1737
  %ptroffset1750 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1727, !dbg !2970
  store i32 0, ptr %ptroffset1750, align 4, !dbg !2971
  br label %if.exit1751, !dbg !2971

if.exit1751:                                      ; preds = %checkok1749, %loop.body1719
  %545 = load double, ptr %y1715, align 8, !dbg !2972
  %fmul1752 = fmul double 1.000000e+09, %545, !dbg !2973
  %546 = load i32, ptr %a, align 4, !dbg !2974
  %547 = load i32, ptr %i1716, align 4, !dbg !2975
  %add1753 = add i32 %546, %547, !dbg !2974
  %and1754 = and i32 %add1753, 127, !dbg !2974
  %sext1755 = sext i32 %and1754 to i64, !dbg !2974
  %lt1756 = icmp slt i64 %sext1755, 0, !dbg !2974
  %548 = call i1 @llvm.expect.i1(i1 %lt1756, i1 false), !dbg !2974
  br i1 %548, label %panic1757, label %checkok1765, !dbg !2974

checkok1765:                                      ; preds = %if.exit1751
  %ge1766 = icmp sge i64 %sext1755, 128, !dbg !2974
  %549 = call i1 @llvm.expect.i1(i1 %ge1766, i1 false), !dbg !2974
  br i1 %549, label %panic1767, label %checkok1777, !dbg !2974

checkok1777:                                      ; preds = %checkok1765
  %ptroffset1778 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1755, !dbg !2974
  %550 = load i32, ptr %ptroffset1778, align 4, !dbg !2974
  %uifp1779 = uitofp i32 %550 to double, !dbg !2974
  %fadd1780 = fadd double %fmul1752, %uifp1779, !dbg !2973
  store double %fadd1780, ptr %y1715, align 8, !dbg !2973
  %551 = load i32, ptr %i1716, align 4, !dbg !2976
  %add1781 = add i32 %551, 1, !dbg !2976
  store i32 %add1781, ptr %i1716, align 4, !dbg !2976
  br label %loop.cond1717, !dbg !2976

loop.exit1782:                                    ; preds = %loop.cond1717
  %552 = load double, ptr %y1715, align 8, !dbg !2977
  %553 = load i32, ptr %sign420, align 4, !dbg !2978
  %sifp1783 = sitofp i32 %553 to double, !dbg !2978
  %fmul1784 = fmul double %552, %sifp1783, !dbg !2977
  store double %fmul1784, ptr %y1715, align 8, !dbg !2977
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !2979, metadata !DIExpression()), !dbg !2980
  store i8 0, ptr %denormal, align 1, !dbg !2980
  call void @llvm.dbg.declare(metadata ptr %bits1785, metadata !2981, metadata !DIExpression()), !dbg !2982
  store i32 53, ptr %bits1785, align 4, !dbg !2983
  %554 = load i32, ptr %bits1785, align 4, !dbg !2984
  %555 = load i32, ptr %e2799, align 4, !dbg !2985
  %add1786 = add i32 53, %555, !dbg !2986
  %sub1787 = sub i32 %add1786, -1074, !dbg !2986
  %lt1788 = icmp slt i32 %sub1787, %554, !dbg !2984
  %check1789 = icmp slt i32 %554, 0, !dbg !2984
  %siui-lt1790 = or i1 %check1789, %lt1788, !dbg !2984
  br i1 %siui-lt1790, label %if.then1791, label %if.exit1797, !dbg !2984

if.then1791:                                      ; preds = %loop.exit1782
  %556 = load i32, ptr %e2799, align 4, !dbg !2987
  %add1792 = add i32 53, %556, !dbg !2989
  %sub1793 = sub i32 %add1792, -1074, !dbg !2989
  store i32 %sub1793, ptr %bits1785, align 4, !dbg !2989
  %557 = load i32, ptr %bits1785, align 4, !dbg !2990
  %gt1794 = icmp ugt i32 0, %557, !dbg !2990
  br i1 %gt1794, label %if.then1795, label %if.exit1796, !dbg !2990

if.then1795:                                      ; preds = %if.then1791
  store i32 0, ptr %bits1785, align 4, !dbg !2991
  br label %if.exit1796, !dbg !2991

if.exit1796:                                      ; preds = %if.then1795, %if.then1791
  store i8 1, ptr %denormal, align 1, !dbg !2992
  br label %if.exit1797, !dbg !2992

if.exit1797:                                      ; preds = %if.exit1796, %loop.exit1782
  call void @llvm.dbg.declare(metadata ptr %bias1798, metadata !2993, metadata !DIExpression()), !dbg !2994
  store double 0.000000e+00, ptr %bias1798, align 8, !dbg !2994
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !2995, metadata !DIExpression()), !dbg !2996
  store double 0.000000e+00, ptr %frac, align 8, !dbg !2996
  %558 = load i32, ptr %bits1785, align 4, !dbg !2997
  %gt1799 = icmp ugt i32 53, %558, !dbg !2997
  br i1 %gt1799, label %if.then1800, label %if.exit1820, !dbg !2997

if.then1800:                                      ; preds = %if.exit1797
  store double 1.000000e+00, ptr %x1801, align 8
  %559 = load i32, ptr %bits1785, align 4, !dbg !2998
  %sub1802 = sub i32 106, %559, !dbg !3000
  %sub1803 = sub i32 %sub1802, 1, !dbg !3000
  store i32 %sub1803, ptr %n1804, align 4
  %560 = load double, ptr %x1801, align 8, !dbg !3001
  %561 = load i32, ptr %n1804, align 4, !dbg !3001
  %562 = call double @scalbn(double %560, i32 %561), !dbg !3004
  store double %562, ptr %mag1805, align 8
  %563 = load double, ptr %y1715, align 8
  store double %563, ptr %sgn1806, align 8
  %564 = load double, ptr %mag1805, align 8
  store double %564, ptr %x1807, align 8
  %565 = load double, ptr %sgn1806, align 8
  store double %565, ptr %y1808, align 8
  %566 = load double, ptr %x1807, align 8, !dbg !3005
  %567 = load double, ptr %sgn1806, align 8, !dbg !3010
  %568 = call double @llvm.copysign.f64(double %566, double %567), !dbg !3010
  store double %568, ptr %bias1798, align 8, !dbg !3010
  %569 = load double, ptr %y1715, align 8, !dbg !3011
  store double 1.000000e+00, ptr %x1809, align 8
  %570 = load i32, ptr %bits1785, align 4, !dbg !3012
  %sub1810 = sub i32 53, %570, !dbg !3013
  store i32 %sub1810, ptr %n1811, align 4
  %571 = load double, ptr %x1809, align 8, !dbg !3014
  %572 = load i32, ptr %n1811, align 4, !dbg !3014
  %573 = call double @scalbn(double %571, i32 %572), !dbg !3017
  %zero1812 = fcmp ueq double %573, 0.000000e+00, !dbg !3011
  %574 = call i1 @llvm.expect.i1(i1 %zero1812, i1 false), !dbg !3011
  br i1 %574, label %panic1813, label %checkok1817, !dbg !3011

checkok1817:                                      ; preds = %if.then1800
  %fmod = frem double %569, %573, !dbg !3011
  store double %fmod, ptr %frac, align 8, !dbg !3011
  %575 = load double, ptr %y1715, align 8, !dbg !3018
  %576 = load double, ptr %frac, align 8, !dbg !3019
  %fsub1818 = fsub double %575, %576, !dbg !3018
  store double %fsub1818, ptr %y1715, align 8, !dbg !3018
  %577 = load double, ptr %y1715, align 8, !dbg !3020
  %578 = load double, ptr %bias1798, align 8, !dbg !3021
  %fadd1819 = fadd double %577, %578, !dbg !3020
  store double %fadd1819, ptr %y1715, align 8, !dbg !3020
  br label %if.exit1820, !dbg !3020

if.exit1820:                                      ; preds = %checkok1817, %if.exit1797
  %579 = load i32, ptr %a, align 4, !dbg !3022
  %580 = load i32, ptr %i1716, align 4, !dbg !3023
  %add1821 = add i32 %579, %580, !dbg !3022
  %and1822 = and i32 %add1821, 127, !dbg !3022
  %581 = load i32, ptr %z, align 4, !dbg !3024
  %neq1823 = icmp ne i32 %and1822, %581, !dbg !3022
  br i1 %neq1823, label %if.then1824, label %if.exit1905, !dbg !3022

if.then1824:                                      ; preds = %if.exit1820
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3025, metadata !DIExpression()), !dbg !3027
  %582 = load i32, ptr %a, align 4, !dbg !3028
  %583 = load i32, ptr %i1716, align 4, !dbg !3029
  %add1825 = add i32 %582, %583, !dbg !3028
  %and1826 = and i32 %add1825, 127, !dbg !3028
  %sext1827 = sext i32 %and1826 to i64, !dbg !3028
  %lt1828 = icmp slt i64 %sext1827, 0, !dbg !3028
  %584 = call i1 @llvm.expect.i1(i1 %lt1828, i1 false), !dbg !3028
  br i1 %584, label %panic1829, label %checkok1837, !dbg !3028

checkok1837:                                      ; preds = %if.then1824
  %ge1838 = icmp sge i64 %sext1827, 128, !dbg !3028
  %585 = call i1 @llvm.expect.i1(i1 %ge1838, i1 false), !dbg !3028
  br i1 %585, label %panic1839, label %checkok1849, !dbg !3028

checkok1849:                                      ; preds = %checkok1837
  %ptroffset1850 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1827, !dbg !3028
  %586 = load i32, ptr %ptroffset1850, align 4, !dbg !3028
  store i32 %586, ptr %t, align 4, !dbg !3028
  store i8 1, ptr %switch1851, align 1
  br label %switch.entry1852

switch.entry1852:                                 ; preds = %checkok1849
  %587 = load i8, ptr %switch1851, align 1
  %588 = trunc i8 %587 to i1
  %589 = load i32, ptr %t, align 4, !dbg !3030
  %gt1853 = icmp ugt i32 500000000, %589, !dbg !3030
  br i1 %gt1853, label %and.rhs1854, label %and.phi1863, !dbg !3030

and.rhs1854:                                      ; preds = %switch.entry1852
  %590 = load i32, ptr %t, align 4, !dbg !3032
  %intbool1855 = icmp ne i32 %590, 0, !dbg !3032
  br i1 %intbool1855, label %or.phi1861, label %or.rhs1856, !dbg !3032

or.rhs1856:                                       ; preds = %and.rhs1854
  %591 = load i32, ptr %a, align 4, !dbg !3033
  %592 = load i32, ptr %i1716, align 4, !dbg !3034
  %add1857 = add i32 %591, %592, !dbg !3033
  %add1858 = add i32 %add1857, 1, !dbg !3033
  %and1859 = and i32 %add1858, 127, !dbg !3033
  %593 = load i32, ptr %z, align 4, !dbg !3035
  %neq1860 = icmp ne i32 %and1859, %593, !dbg !3033
  br label %or.phi1861, !dbg !3033

or.phi1861:                                       ; preds = %or.rhs1856, %and.rhs1854
  %val1862 = phi i1 [ true, %and.rhs1854 ], [ %neq1860, %or.rhs1856 ], !dbg !3033
  br label %and.phi1863, !dbg !3033

and.phi1863:                                      ; preds = %or.phi1861, %switch.entry1852
  %val1864 = phi i1 [ false, %switch.entry1852 ], [ %val1862, %or.phi1861 ], !dbg !3033
  %eq1865 = icmp eq i1 %val1864, %588, !dbg !3033
  br i1 %eq1865, label %switch.case1866, label %next_if1870, !dbg !3033

switch.case1866:                                  ; preds = %and.phi1863
  %594 = load double, ptr %frac, align 8, !dbg !3036
  %595 = load i32, ptr %sign420, align 4, !dbg !3038
  %sifp1867 = sitofp i32 %595 to double, !dbg !3038
  %fmul1868 = fmul double 2.500000e-01, %sifp1867, !dbg !3039
  %fadd1869 = fadd double %594, %fmul1868, !dbg !3036
  store double %fadd1869, ptr %frac, align 8, !dbg !3036
  br label %switch.exit1895, !dbg !3036

next_if1870:                                      ; preds = %and.phi1863
  %596 = load i32, ptr %t, align 4, !dbg !3040
  %lt1871 = icmp ult i32 500000000, %596, !dbg !3040
  %eq1872 = icmp eq i1 %lt1871, %588, !dbg !3040
  br i1 %eq1872, label %switch.case1873, label %next_if1877, !dbg !3040

switch.case1873:                                  ; preds = %next_if1870
  %597 = load double, ptr %frac, align 8, !dbg !3041
  %598 = load i32, ptr %sign420, align 4, !dbg !3043
  %sifp1874 = sitofp i32 %598 to double, !dbg !3043
  %fmul1875 = fmul double 7.500000e-01, %sifp1874, !dbg !3044
  %fadd1876 = fadd double %597, %fmul1875, !dbg !3041
  store double %fadd1876, ptr %frac, align 8, !dbg !3041
  br label %switch.exit1895, !dbg !3041

next_if1877:                                      ; preds = %next_if1870
  %599 = load i32, ptr %t, align 4, !dbg !3045
  %eq1878 = icmp eq i32 500000000, %599, !dbg !3045
  %eq1879 = icmp eq i1 %eq1878, %588, !dbg !3045
  br i1 %eq1879, label %switch.case1880, label %next_if1894, !dbg !3045

switch.case1880:                                  ; preds = %next_if1877
  %600 = load i32, ptr %a, align 4, !dbg !3046
  %601 = load i32, ptr %i1716, align 4, !dbg !3048
  %add1881 = add i32 %600, %601, !dbg !3046
  %add1882 = add i32 %add1881, 1, !dbg !3046
  %and1883 = and i32 %add1882, 127, !dbg !3046
  %602 = load i32, ptr %z, align 4, !dbg !3049
  %eq1884 = icmp eq i32 %and1883, %602, !dbg !3046
  br i1 %eq1884, label %if.then1885, label %if.else1889, !dbg !3046

if.then1885:                                      ; preds = %switch.case1880
  %603 = load double, ptr %frac, align 8, !dbg !3050
  %604 = load i32, ptr %sign420, align 4, !dbg !3052
  %sifp1886 = sitofp i32 %604 to double, !dbg !3052
  %fmul1887 = fmul double 5.000000e-01, %sifp1886, !dbg !3053
  %fadd1888 = fadd double %603, %fmul1887, !dbg !3050
  store double %fadd1888, ptr %frac, align 8, !dbg !3050
  br label %if.exit1893, !dbg !3050

if.else1889:                                      ; preds = %switch.case1880
  %605 = load double, ptr %frac, align 8, !dbg !3054
  %606 = load i32, ptr %sign420, align 4, !dbg !3056
  %sifp1890 = sitofp i32 %606 to double, !dbg !3056
  %fmul1891 = fmul double 7.500000e-01, %sifp1890, !dbg !3057
  %fadd1892 = fadd double %605, %fmul1891, !dbg !3054
  store double %fadd1892, ptr %frac, align 8, !dbg !3054
  br label %if.exit1893, !dbg !3054

if.exit1893:                                      ; preds = %if.else1889, %if.then1885
  br label %switch.exit1895, !dbg !3054

next_if1894:                                      ; preds = %next_if1877
  br label %switch.exit1895, !dbg !3054

switch.exit1895:                                  ; preds = %next_if1894, %if.exit1893, %switch.case1873, %switch.case1866
  %607 = load i32, ptr %bits1785, align 4, !dbg !3058
  %sub1896 = sub i32 53, %607, !dbg !3059
  %ge1897 = icmp sge i32 %sub1896, 2, !dbg !3059
  br i1 %ge1897, label %and.rhs1898, label %and.phi1901, !dbg !3059

and.rhs1898:                                      ; preds = %switch.exit1895
  %608 = load double, ptr %frac, align 8, !dbg !3060
  %fmod1899 = frem double %608, 1.000000e+00, !dbg !3060
  %not1900 = fcmp ueq double %fmod1899, 0.000000e+00, !dbg !3060
  br label %and.phi1901, !dbg !3060

and.phi1901:                                      ; preds = %and.rhs1898, %switch.exit1895
  %val1902 = phi i1 [ false, %switch.exit1895 ], [ %not1900, %and.rhs1898 ], !dbg !3060
  br i1 %val1902, label %if.then1903, label %if.exit1904, !dbg !3060

if.then1903:                                      ; preds = %and.phi1901
  %609 = load double, ptr %frac, align 8, !dbg !3061
  %fincdec = fadd double %609, 1.000000e+00, !dbg !3061
  store double %fincdec, ptr %frac, align 8, !dbg !3061
  br label %if.exit1904, !dbg !3061

if.exit1904:                                      ; preds = %if.then1903, %and.phi1901
  br label %if.exit1905, !dbg !3061

if.exit1905:                                      ; preds = %if.exit1904, %if.exit1820
  %610 = load double, ptr %y1715, align 8, !dbg !3062
  %611 = load double, ptr %frac, align 8, !dbg !3063
  %fadd1906 = fadd double %610, %611, !dbg !3062
  store double %fadd1906, ptr %y1715, align 8, !dbg !3062
  %612 = load double, ptr %y1715, align 8, !dbg !3064
  %613 = load double, ptr %bias1798, align 8, !dbg !3065
  %fsub1907 = fsub double %612, %613, !dbg !3064
  store double %fsub1907, ptr %y1715, align 8, !dbg !3064
  %614 = load i32, ptr %e2799, align 4, !dbg !3066
  %add1908 = add i32 %614, 53, !dbg !3066
  %and1909 = and i32 %add1908, 2147483647, !dbg !3066
  %615 = load i32, ptr %emax, align 4, !dbg !3067
  %sub1910 = sub i32 %615, 5, !dbg !3067
  %gt1911 = icmp sgt i32 %and1909, %sub1910, !dbg !3066
  br i1 %gt1911, label %if.then1912, label %if.exit1940, !dbg !3066

if.then1912:                                      ; preds = %if.exit1905
  %616 = load double, ptr %y1715, align 8
  store double %616, ptr %x1913, align 8
  %617 = load double, ptr %x1913, align 8, !dbg !3068
  %618 = call double @llvm.fabs.f64(double %617), !dbg !3068
  %ge1914 = fcmp oge double %618, 0x4340000000000000, !dbg !3070
  br i1 %ge1914, label %if.then1915, label %if.exit1928, !dbg !3070

if.then1915:                                      ; preds = %if.then1912
  %619 = load i8, ptr %denormal, align 1, !dbg !3072
  %620 = trunc i8 %619 to i1, !dbg !3072
  br i1 %620, label %and.rhs1916, label %and.phi1922, !dbg !3072

and.rhs1916:                                      ; preds = %if.then1915
  %621 = load i32, ptr %bits1785, align 4, !dbg !3074
  %622 = load i32, ptr %e2799, align 4, !dbg !3075
  %add1917 = add i32 53, %622, !dbg !3076
  %sub1918 = sub i32 %add1917, -1074, !dbg !3076
  %eq1919 = icmp eq i32 %sub1918, %621, !dbg !3074
  %check1920 = icmp sge i32 %sub1918, 0, !dbg !3074
  %siui-eq1921 = and i1 %check1920, %eq1919, !dbg !3074
  br label %and.phi1922, !dbg !3074

and.phi1922:                                      ; preds = %and.rhs1916, %if.then1915
  %val1923 = phi i1 [ false, %if.then1915 ], [ %siui-eq1921, %and.rhs1916 ], !dbg !3074
  br i1 %val1923, label %if.then1924, label %if.exit1925, !dbg !3074

if.then1924:                                      ; preds = %and.phi1922
  store i8 0, ptr %denormal, align 1, !dbg !3077
  br label %if.exit1925, !dbg !3077

if.exit1925:                                      ; preds = %if.then1924, %and.phi1922
  %623 = load double, ptr %y1715, align 8, !dbg !3078
  %fmul1926 = fmul double %623, 5.000000e-01, !dbg !3078
  store double %fmul1926, ptr %y1715, align 8, !dbg !3078
  %624 = load i32, ptr %e2799, align 4, !dbg !3079
  %add1927 = add i32 %624, 1, !dbg !3079
  store i32 %add1927, ptr %e2799, align 4, !dbg !3079
  br label %if.exit1928, !dbg !3079

if.exit1928:                                      ; preds = %if.exit1925, %if.then1912
  %625 = load i32, ptr %e2799, align 4, !dbg !3080
  %add1929 = add i32 %625, 53, !dbg !3080
  %626 = load i32, ptr %emax, align 4, !dbg !3081
  %gt1930 = icmp sgt i32 %add1929, %626, !dbg !3080
  br i1 %gt1930, label %or.phi1936, label %or.rhs1931, !dbg !3080

or.rhs1931:                                       ; preds = %if.exit1928
  %627 = load i8, ptr %denormal, align 1, !dbg !3082
  %628 = trunc i8 %627 to i1, !dbg !3082
  br i1 %628, label %and.rhs1932, label %and.phi1934, !dbg !3082

and.rhs1932:                                      ; preds = %or.rhs1931
  %629 = load double, ptr %frac, align 8, !dbg !3083
  %fpbool1933 = fcmp une double %629, 0.000000e+00, !dbg !3083
  br label %and.phi1934, !dbg !3083

and.phi1934:                                      ; preds = %and.rhs1932, %or.rhs1931
  %val1935 = phi i1 [ false, %or.rhs1931 ], [ %fpbool1933, %and.rhs1932 ], !dbg !3083
  br label %or.phi1936, !dbg !3083

or.phi1936:                                       ; preds = %and.phi1934, %if.exit1928
  %val1937 = phi i1 [ true, %if.exit1928 ], [ %val1935, %and.phi1934 ], !dbg !3083
  br i1 %val1937, label %if.then1938, label %if.exit1939, !dbg !3083

if.then1938:                                      ; preds = %or.phi1936
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3084
  br label %err_retblock, !dbg !3084

if.exit1939:                                      ; preds = %or.phi1936
  br label %if.exit1940, !dbg !3084

if.exit1940:                                      ; preds = %if.exit1939, %if.exit1905
  %630 = load double, ptr %y1715, align 8
  store double %630, ptr %x1941, align 8
  %631 = load i32, ptr %e2799, align 4
  store i32 %631, ptr %n1942, align 4
  %632 = load double, ptr %x1941, align 8, !dbg !3085
  %633 = load i32, ptr %n1942, align 4, !dbg !3085
  %634 = call double @scalbn(double %632, i32 %633), !dbg !3088
  store double %634, ptr %blockret421, align 8, !dbg !3088
  br label %expr_block.exit1944, !dbg !3088

expr_block.exit1944:                              ; preds = %if.exit1940, %checkok899, %checkok851, %if.then812, %if.then754, %if.then737, %if.exit487, %if.then475
  %635 = load double, ptr %blockret421, align 8, !dbg !3088
  store double %635, ptr %blockret, align 8, !dbg !3088
  br label %expr_block.exit1945, !dbg !3088

expr_block.exit1945:                              ; preds = %expr_block.exit1944, %expr_block.exit417, %if.then91, %if.then64
  %636 = load double, ptr %blockret, align 8, !dbg !3088
  store double %636, ptr %0, align 8, !dbg !3088
  ret i64 0, !dbg !3088

err_retblock:                                     ; preds = %if.then1938, %if.then763, %if.then760, %if.then733, %guard_block728, %if.then695, %if.then686, %if.then553, %if.then486, %if.then411, %if.then357, %if.then354, %guard_block, %if.then302, %if.then245, %if.then175, %if.then
  %637 = load i64, ptr %reterr, align 8, !dbg !3088
  ret i64 %637, !dbg !3088

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %638 = insertvalue %any undef, ptr %taddr, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %640 = insertvalue %any undef, ptr %taddr2, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg4, align 8
  store %any %639, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %641, ptr %ptradd5, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 468, ptr align 8 %indirectarg6), !dbg !2342
  unreachable, !dbg !2342

panic7:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr8, align 8
  %643 = insertvalue %any undef, ptr %taddr8, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr9, align 8
  %645 = insertvalue %any undef, ptr %taddr9, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg12, align 8
  store %any %644, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %646, ptr %ptradd14, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 468, ptr align 8 %indirectarg16), !dbg !2343
  unreachable, !dbg !2343

panic22:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr23, align 8
  %648 = insertvalue %any undef, ptr %taddr23, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %650 = insertvalue %any undef, ptr %taddr24, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg27, align 8
  store %any %649, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %651, ptr %ptradd29, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 470, ptr align 8 %indirectarg31), !dbg !2349
  unreachable, !dbg !2349

panic35:                                          ; preds = %switch.case33
  store i64 %21, ptr %taddr36, align 8
  %653 = insertvalue %any undef, ptr %taddr36, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr37, align 8
  %655 = insertvalue %any undef, ptr %taddr37, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg40, align 8
  store %any %654, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %656, ptr %ptradd42, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 476, ptr align 8 %indirectarg44), !dbg !2353
  unreachable, !dbg !2353

panic98:                                          ; preds = %and.rhs95
  store i64 %55, ptr %taddr99, align 8
  %658 = insertvalue %any undef, ptr %taddr99, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr100, align 8
  %660 = insertvalue %any undef, ptr %taddr100, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg103, align 8
  store %any %659, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %661, ptr %ptradd105, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 481, ptr align 8 %indirectarg107), !dbg !2364
  unreachable, !dbg !2364

panic115:                                         ; preds = %and.rhs112
  store i64 %59, ptr %taddr116, align 8
  %663 = insertvalue %any undef, ptr %taddr116, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr117, align 8
  %665 = insertvalue %any undef, ptr %taddr117, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg120, align 8
  store %any %664, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %666, ptr %ptradd122, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, i32 481, ptr align 8 %indirectarg124), !dbg !2366
  unreachable, !dbg !2366

panic132:                                         ; preds = %if.then130
  store i64 %65, ptr %taddr133, align 8
  %668 = insertvalue %any undef, ptr %taddr133, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr134, align 8
  %670 = insertvalue %any undef, ptr %taddr134, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg137, align 8
  store %any %669, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %671, ptr %ptradd139, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, i32 483, ptr align 8 %indirectarg141), !dbg !2370
  unreachable, !dbg !2370

panic152:                                         ; preds = %loop.cond149
  store i64 %72, ptr %taddr153, align 8
  %673 = insertvalue %any undef, ptr %taddr153, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr154, align 8
  %675 = insertvalue %any undef, ptr %taddr154, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg157, align 8
  store %any %674, ptr %varargslots158, align 16
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %676, ptr %ptradd159, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp160", ptr %indirectarg161, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, i32 344, ptr align 8 %indirectarg161), !dbg !2403
  unreachable, !dbg !2403

panic184:                                         ; preds = %and.rhs180
  store i64 %88, ptr %taddr185, align 8
  %678 = insertvalue %any undef, ptr %taddr185, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %680 = insertvalue %any undef, ptr %taddr186, 0
  %681 = insertvalue %any %680, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg189, align 8
  store %any %679, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %681, ptr %ptradd191, align 16
  %682 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %682, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 357, ptr align 8 %indirectarg193), !dbg !2423
  unreachable, !dbg !2423

panic207:                                         ; preds = %and.rhs203
  store i64 %96, ptr %taddr208, align 8
  %683 = insertvalue %any undef, ptr %taddr208, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add205, ptr %taddr209, align 8
  %685 = insertvalue %any undef, ptr %taddr209, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg210, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg211, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg212, align 8
  store %any %684, ptr %varargslots213, align 16
  %ptradd214 = getelementptr inbounds i8, ptr %varargslots213, i64 16
  store %any %686, ptr %ptradd214, align 16
  %687 = insertvalue %"any[]" undef, ptr %varargslots213, 0
  %"$$temp215" = insertvalue %"any[]" %687, i64 2, 1
  store %"any[]" %"$$temp215", ptr %indirectarg216, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg210, ptr align 8 %indirectarg211, ptr align 8 %indirectarg212, i32 361, ptr align 8 %indirectarg216), !dbg !2434
  unreachable, !dbg !2434

panic288:                                         ; preds = %if.exit284
  store i64 %130, ptr %taddr289, align 8
  %688 = insertvalue %any undef, ptr %taddr289, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %690 = insertvalue %any undef, ptr %taddr290, 0
  %691 = insertvalue %any %690, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg291, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg292, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg293, align 8
  store %any %689, ptr %varargslots294, align 16
  %ptradd295 = getelementptr inbounds i8, ptr %varargslots294, i64 16
  store %any %691, ptr %ptradd295, align 16
  %692 = insertvalue %"any[]" undef, ptr %varargslots294, 0
  %"$$temp296" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp296", ptr %indirectarg297, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg291, ptr align 8 %indirectarg292, ptr align 8 %indirectarg293, i32 397, ptr align 8 %indirectarg297), !dbg !2482
  unreachable, !dbg !2482

panic321:                                         ; preds = %if.then318
  store i64 %147, ptr %taddr322, align 8
  %693 = insertvalue %any undef, ptr %taddr322, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add319, ptr %taddr323, align 8
  %695 = insertvalue %any undef, ptr %taddr323, 0
  %696 = insertvalue %any %695, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg324, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg325, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg326, align 8
  store %any %694, ptr %varargslots327, align 16
  %ptradd328 = getelementptr inbounds i8, ptr %varargslots327, i64 16
  store %any %696, ptr %ptradd328, align 16
  %697 = insertvalue %"any[]" undef, ptr %varargslots327, 0
  %"$$temp329" = insertvalue %"any[]" %697, i64 2, 1
  store %"any[]" %"$$temp329", ptr %indirectarg330, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg324, ptr align 8 %indirectarg325, ptr align 8 %indirectarg326, i32 406, ptr align 8 %indirectarg330), !dbg !2500
  unreachable, !dbg !2500

panic332:                                         ; preds = %checkok331
  store i64 %add319, ptr %taddr333, align 8
  %698 = insertvalue %any undef, ptr %taddr333, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 22 }, ptr %indirectarg334, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg335, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg336, align 8
  store %any %699, ptr %varargslots337, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots337, 0
  %"$$temp338" = insertvalue %"any[]" %700, i64 1, 1
  store %"any[]" %"$$temp338", ptr %indirectarg339, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg334, ptr align 8 %indirectarg335, ptr align 8 %indirectarg336, i32 406, ptr align 8 %indirectarg339), !dbg !2499
  unreachable, !dbg !2499

panic432:                                         ; preds = %assert_ok
  store i64 %209, ptr %taddr433, align 8
  %701 = insertvalue %any undef, ptr %taddr433, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr434, align 8
  %703 = insertvalue %any undef, ptr %taddr434, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg436, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg437, align 8
  store %any %702, ptr %varargslots438, align 16
  %ptradd439 = getelementptr inbounds i8, ptr %varargslots438, i64 16
  store %any %704, ptr %ptradd439, align 16
  %705 = insertvalue %"any[]" undef, ptr %varargslots438, 0
  %"$$temp440" = insertvalue %"any[]" %705, i64 2, 1
  store %"any[]" %"$$temp440", ptr %indirectarg441, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, ptr align 8 %indirectarg437, i32 45, ptr align 8 %indirectarg441), !dbg !2597
  unreachable, !dbg !2597

panic460:                                         ; preds = %loop.cond457
  store i64 %218, ptr %taddr461, align 8
  %706 = insertvalue %any undef, ptr %taddr461, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %220, ptr %taddr462, align 8
  %708 = insertvalue %any undef, ptr %taddr462, 0
  %709 = insertvalue %any %708, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg463, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg465, align 8
  store %any %707, ptr %varargslots466, align 16
  %ptradd467 = getelementptr inbounds i8, ptr %varargslots466, i64 16
  store %any %709, ptr %ptradd467, align 16
  %710 = insertvalue %"any[]" undef, ptr %varargslots466, 0
  %"$$temp468" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp468", ptr %indirectarg469, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg463, ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, i32 56, ptr align 8 %indirectarg469), !dbg !2622
  unreachable, !dbg !2622

panic496:                                         ; preds = %and.rhs492
  store i64 %235, ptr %taddr497, align 8
  %711 = insertvalue %any undef, ptr %taddr497, 0
  %712 = insertvalue %any %711, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add494, ptr %taddr498, align 8
  %713 = insertvalue %any undef, ptr %taddr498, 0
  %714 = insertvalue %any %713, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg499, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg501, align 8
  store %any %712, ptr %varargslots502, align 16
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots502, i64 16
  store %any %714, ptr %ptradd503, align 16
  %715 = insertvalue %"any[]" undef, ptr %varargslots502, 0
  %"$$temp504" = insertvalue %"any[]" %715, i64 2, 1
  store %"any[]" %"$$temp504", ptr %indirectarg505, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg499, ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, i32 70, ptr align 8 %indirectarg505), !dbg !2642
  unreachable, !dbg !2642

panic519:                                         ; preds = %and.rhs515
  store i64 %243, ptr %taddr520, align 8
  %716 = insertvalue %any undef, ptr %taddr520, 0
  %717 = insertvalue %any %716, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add517, ptr %taddr521, align 8
  %718 = insertvalue %any undef, ptr %taddr521, 0
  %719 = insertvalue %any %718, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg522, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg523, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg524, align 8
  store %any %717, ptr %varargslots525, align 16
  %ptradd526 = getelementptr inbounds i8, ptr %varargslots525, i64 16
  store %any %719, ptr %ptradd526, align 16
  %720 = insertvalue %"any[]" undef, ptr %varargslots525, 0
  %"$$temp527" = insertvalue %"any[]" %720, i64 2, 1
  store %"any[]" %"$$temp527", ptr %indirectarg528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg522, ptr align 8 %indirectarg523, ptr align 8 %indirectarg524, i32 74, ptr align 8 %indirectarg528), !dbg !2653
  unreachable, !dbg !2653

panic567:                                         ; preds = %if.then565
  store i64 %sext, ptr %taddr568, align 8
  %721 = insertvalue %any undef, ptr %taddr568, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg569, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg570, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg571, align 8
  store %any %722, ptr %varargslots572, align 16
  %723 = insertvalue %"any[]" undef, ptr %varargslots572, 0
  %"$$temp573" = insertvalue %"any[]" %723, i64 1, 1
  store %"any[]" %"$$temp573", ptr %indirectarg574, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg569, ptr align 8 %indirectarg570, ptr align 8 %indirectarg571, i32 94, ptr align 8 %indirectarg574), !dbg !2675
  unreachable, !dbg !2675

panic577:                                         ; preds = %checkok575
  store i64 128, ptr %taddr578, align 8
  %724 = insertvalue %any undef, ptr %taddr578, 0
  %725 = insertvalue %any %724, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr579, align 8
  %726 = insertvalue %any undef, ptr %taddr579, 0
  %727 = insertvalue %any %726, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg580, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg581, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg582, align 8
  store %any %725, ptr %varargslots583, align 16
  %ptradd584 = getelementptr inbounds i8, ptr %varargslots583, i64 16
  store %any %727, ptr %ptradd584, align 16
  %728 = insertvalue %"any[]" undef, ptr %varargslots583, 0
  %"$$temp585" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp585", ptr %indirectarg586, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg580, ptr align 8 %indirectarg581, ptr align 8 %indirectarg582, i32 94, ptr align 8 %indirectarg586), !dbg !2675
  unreachable, !dbg !2675

panic590:                                         ; preds = %checkok587
  store i64 %sext588, ptr %taddr591, align 8
  %729 = insertvalue %any undef, ptr %taddr591, 0
  %730 = insertvalue %any %729, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg594, align 8
  store %any %730, ptr %varargslots595, align 16
  %731 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp596" = insertvalue %"any[]" %731, i64 1, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, i32 94, ptr align 8 %indirectarg597), !dbg !2677
  unreachable, !dbg !2677

panic600:                                         ; preds = %checkok598
  store i64 128, ptr %taddr601, align 8
  %732 = insertvalue %any undef, ptr %taddr601, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext588, ptr %taddr602, align 8
  %734 = insertvalue %any undef, ptr %taddr602, 0
  %735 = insertvalue %any %734, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg603, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg605, align 8
  store %any %733, ptr %varargslots606, align 16
  %ptradd607 = getelementptr inbounds i8, ptr %varargslots606, i64 16
  store %any %735, ptr %ptradd607, align 16
  %736 = insertvalue %"any[]" undef, ptr %varargslots606, 0
  %"$$temp608" = insertvalue %"any[]" %736, i64 2, 1
  store %"any[]" %"$$temp608", ptr %indirectarg609, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg603, ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, i32 94, ptr align 8 %indirectarg609), !dbg !2677
  unreachable, !dbg !2677

panic619:                                         ; preds = %if.else616
  store i64 %sext617, ptr %taddr620, align 8
  %737 = insertvalue %any undef, ptr %taddr620, 0
  %738 = insertvalue %any %737, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg621, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg622, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg623, align 8
  store %any %738, ptr %varargslots624, align 16
  %739 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp625" = insertvalue %"any[]" %739, i64 1, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg621, ptr align 8 %indirectarg622, ptr align 8 %indirectarg623, i32 98, ptr align 8 %indirectarg626), !dbg !2680
  unreachable, !dbg !2680

panic629:                                         ; preds = %checkok627
  store i64 128, ptr %taddr630, align 8
  %740 = insertvalue %any undef, ptr %taddr630, 0
  %741 = insertvalue %any %740, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext617, ptr %taddr631, align 8
  %742 = insertvalue %any undef, ptr %taddr631, 0
  %743 = insertvalue %any %742, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg634, align 8
  store %any %741, ptr %varargslots635, align 16
  %ptradd636 = getelementptr inbounds i8, ptr %varargslots635, i64 16
  store %any %743, ptr %ptradd636, align 16
  %744 = insertvalue %"any[]" undef, ptr %varargslots635, 0
  %"$$temp637" = insertvalue %"any[]" %744, i64 2, 1
  store %"any[]" %"$$temp637", ptr %indirectarg638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 98, ptr align 8 %indirectarg638), !dbg !2680
  unreachable, !dbg !2680

panic669:                                         ; preds = %assert_ok665
  store i64 %284, ptr %taddr670, align 8
  %745 = insertvalue %any undef, ptr %taddr670, 0
  %746 = insertvalue %any %745, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add667, ptr %taddr671, align 8
  %747 = insertvalue %any undef, ptr %taddr671, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg672, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg673, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg674, align 8
  store %any %746, ptr %varargslots675, align 16
  %ptradd676 = getelementptr inbounds i8, ptr %varargslots675, i64 16
  store %any %748, ptr %ptradd676, align 16
  %749 = insertvalue %"any[]" undef, ptr %varargslots675, 0
  %"$$temp677" = insertvalue %"any[]" %749, i64 2, 1
  store %"any[]" %"$$temp677", ptr %indirectarg678, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg672, ptr align 8 %indirectarg673, ptr align 8 %indirectarg674, i32 113, ptr align 8 %indirectarg678), !dbg !2701
  unreachable, !dbg !2701

panic699:                                         ; preds = %if.exit696
  store i64 %300, ptr %taddr700, align 8
  %750 = insertvalue %any undef, ptr %taddr700, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add697, ptr %taddr701, align 8
  %752 = insertvalue %any undef, ptr %taddr701, 0
  %753 = insertvalue %any %752, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg702, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg703, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg704, align 8
  store %any %751, ptr %varargslots705, align 16
  %ptradd706 = getelementptr inbounds i8, ptr %varargslots705, i64 16
  store %any %753, ptr %ptradd706, align 16
  %754 = insertvalue %"any[]" undef, ptr %varargslots705, 0
  %"$$temp707" = insertvalue %"any[]" %754, i64 2, 1
  store %"any[]" %"$$temp707", ptr %indirectarg708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg702, ptr align 8 %indirectarg703, ptr align 8 %indirectarg704, i32 120, ptr align 8 %indirectarg708), !dbg !2715
  unreachable, !dbg !2715

panic711:                                         ; preds = %checkok709
  store i64 %add697, ptr %taddr712, align 8
  %755 = insertvalue %any undef, ptr %taddr712, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 22 }, ptr %indirectarg713, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg714, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg715, align 8
  store %any %756, ptr %varargslots716, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots716, 0
  %"$$temp717" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp717", ptr %indirectarg718, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg713, ptr align 8 %indirectarg714, ptr align 8 %indirectarg715, i32 120, ptr align 8 %indirectarg718), !dbg !2714
  unreachable, !dbg !2714

panic772:                                         ; preds = %loop.body769
  store i64 %sext770, ptr %taddr773, align 8
  %758 = insertvalue %any undef, ptr %taddr773, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg774, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg775, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg776, align 8
  store %any %759, ptr %varargslots777, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg774, ptr align 8 %indirectarg775, ptr align 8 %indirectarg776, i32 138, ptr align 8 %indirectarg779), !dbg !2743
  unreachable, !dbg !2743

panic782:                                         ; preds = %checkok780
  store i64 128, ptr %taddr783, align 8
  %761 = insertvalue %any undef, ptr %taddr783, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext770, ptr %taddr784, align 8
  %763 = insertvalue %any undef, ptr %taddr784, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg785, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg786, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg787, align 8
  store %any %762, ptr %varargslots788, align 16
  %ptradd789 = getelementptr inbounds i8, ptr %varargslots788, i64 16
  store %any %764, ptr %ptradd789, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots788, 0
  %"$$temp790" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp790", ptr %indirectarg791, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg785, ptr align 8 %indirectarg786, ptr align 8 %indirectarg787, i32 138, ptr align 8 %indirectarg791), !dbg !2743
  unreachable, !dbg !2743

panic824:                                         ; preds = %if.then818
  store i64 %sub822, ptr %taddr825, align 8
  %766 = insertvalue %any undef, ptr %taddr825, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg826, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg827, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg828, align 8
  store %any %767, ptr %varargslots829, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots829, 0
  %"$$temp830" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp830", ptr %indirectarg831, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg826, ptr align 8 %indirectarg827, ptr align 8 %indirectarg828, i32 152, ptr align 8 %indirectarg831), !dbg !2770
  unreachable, !dbg !2770

panic834:                                         ; preds = %checkok832
  store i64 8, ptr %taddr835, align 8
  %769 = insertvalue %any undef, ptr %taddr835, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub822, ptr %taddr836, align 8
  %771 = insertvalue %any undef, ptr %taddr836, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg837, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg838, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg839, align 8
  store %any %770, ptr %varargslots840, align 16
  %ptradd841 = getelementptr inbounds i8, ptr %varargslots840, i64 16
  store %any %772, ptr %ptradd841, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots840, 0
  %"$$temp842" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp842", ptr %indirectarg843, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg837, ptr align 8 %indirectarg838, ptr align 8 %indirectarg839, i32 152, ptr align 8 %indirectarg843), !dbg !2770
  unreachable, !dbg !2770

panic847:                                         ; preds = %checkok844
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg848, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg850, align 8
  %774 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %774(ptr align 8 %indirectarg848, ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, i32 152), !dbg !2767
  unreachable, !dbg !2767

panic860:                                         ; preds = %or.rhs859
  store i32 %352, ptr %taddr861, align 4
  %775 = insertvalue %any undef, ptr %taddr861, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg862, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg863, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg864, align 8
  store %any %776, ptr %varargslots865, align 16
  %777 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %777, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg862, ptr align 8 %indirectarg863, ptr align 8 %indirectarg864, i32 154, ptr align 8 %indirectarg867), !dbg !2780
  unreachable, !dbg !2780

panic879:                                         ; preds = %if.then873
  store i64 %sub877, ptr %taddr880, align 8
  %778 = insertvalue %any undef, ptr %taddr880, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg881, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg882, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg883, align 8
  store %any %779, ptr %varargslots884, align 16
  %780 = insertvalue %"any[]" undef, ptr %varargslots884, 0
  %"$$temp885" = insertvalue %"any[]" %780, i64 1, 1
  store %"any[]" %"$$temp885", ptr %indirectarg886, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg881, ptr align 8 %indirectarg882, ptr align 8 %indirectarg883, i32 154, ptr align 8 %indirectarg886), !dbg !2783
  unreachable, !dbg !2783

panic889:                                         ; preds = %checkok887
  store i64 8, ptr %taddr890, align 8
  %781 = insertvalue %any undef, ptr %taddr890, 0
  %782 = insertvalue %any %781, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub877, ptr %taddr891, align 8
  %783 = insertvalue %any undef, ptr %taddr891, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg892, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg894, align 8
  store %any %782, ptr %varargslots895, align 16
  %ptradd896 = getelementptr inbounds i8, ptr %varargslots895, i64 16
  store %any %784, ptr %ptradd896, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp897" = insertvalue %"any[]" %785, i64 2, 1
  store %"any[]" %"$$temp897", ptr %indirectarg898, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg892, ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, i32 154, ptr align 8 %indirectarg898), !dbg !2783
  unreachable, !dbg !2783

panic914:                                         ; preds = %cond.phi
  store i64 %sub912, ptr %taddr915, align 8
  %786 = insertvalue %any undef, ptr %taddr915, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg916, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg917, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg918, align 8
  store %any %787, ptr %varargslots919, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots919, 0
  %"$$temp920" = insertvalue %"any[]" %788, i64 1, 1
  store %"any[]" %"$$temp920", ptr %indirectarg921, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg916, ptr align 8 %indirectarg917, ptr align 8 %indirectarg918, i32 161, ptr align 8 %indirectarg921), !dbg !2794
  unreachable, !dbg !2794

panic924:                                         ; preds = %checkok922
  store i64 8, ptr %taddr925, align 8
  %789 = insertvalue %any undef, ptr %taddr925, 0
  %790 = insertvalue %any %789, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub912, ptr %taddr926, align 8
  %791 = insertvalue %any undef, ptr %taddr926, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg927, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg928, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg929, align 8
  store %any %790, ptr %varargslots930, align 16
  %ptradd931 = getelementptr inbounds i8, ptr %varargslots930, i64 16
  store %any %792, ptr %ptradd931, align 16
  %793 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp932" = insertvalue %"any[]" %793, i64 2, 1
  store %"any[]" %"$$temp932", ptr %indirectarg933, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg927, ptr align 8 %indirectarg928, ptr align 8 %indirectarg929, i32 161, ptr align 8 %indirectarg933), !dbg !2794
  unreachable, !dbg !2794

panic941:                                         ; preds = %loop.body938
  store i64 %sext939, ptr %taddr942, align 8
  %794 = insertvalue %any undef, ptr %taddr942, 0
  %795 = insertvalue %any %794, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg943, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg944, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg945, align 8
  store %any %795, ptr %varargslots946, align 16
  %796 = insertvalue %"any[]" undef, ptr %varargslots946, 0
  %"$$temp947" = insertvalue %"any[]" %796, i64 1, 1
  store %"any[]" %"$$temp947", ptr %indirectarg948, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg943, ptr align 8 %indirectarg944, ptr align 8 %indirectarg945, i32 165, ptr align 8 %indirectarg948), !dbg !2805
  unreachable, !dbg !2805

panic951:                                         ; preds = %checkok949
  store i64 128, ptr %taddr952, align 8
  %797 = insertvalue %any undef, ptr %taddr952, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext939, ptr %taddr953, align 8
  %799 = insertvalue %any undef, ptr %taddr953, 0
  %800 = insertvalue %any %799, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg954, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg955, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg956, align 8
  store %any %798, ptr %varargslots957, align 16
  %ptradd958 = getelementptr inbounds i8, ptr %varargslots957, i64 16
  store %any %800, ptr %ptradd958, align 16
  %801 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp959" = insertvalue %"any[]" %801, i64 2, 1
  store %"any[]" %"$$temp959", ptr %indirectarg960, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg954, ptr align 8 %indirectarg955, ptr align 8 %indirectarg956, i32 165, ptr align 8 %indirectarg960), !dbg !2805
  unreachable, !dbg !2805

panic964:                                         ; preds = %checkok961
  store %"char[]" { ptr @.panic_msg.84, i64 10 }, ptr %indirectarg965, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg966, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg967, align 8
  %802 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %802(ptr align 8 %indirectarg965, ptr align 8 %indirectarg966, ptr align 8 %indirectarg967, i32 165), !dbg !2807
  unreachable, !dbg !2807

panic972:                                         ; preds = %checkok968
  store i64 %sext970, ptr %taddr973, align 8
  %803 = insertvalue %any undef, ptr %taddr973, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg974, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg975, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg976, align 8
  store %any %804, ptr %varargslots977, align 16
  %805 = insertvalue %"any[]" undef, ptr %varargslots977, 0
  %"$$temp978" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp978", ptr %indirectarg979, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg974, ptr align 8 %indirectarg975, ptr align 8 %indirectarg976, i32 166, ptr align 8 %indirectarg979), !dbg !2808
  unreachable, !dbg !2808

panic982:                                         ; preds = %checkok980
  store i64 128, ptr %taddr983, align 8
  %806 = insertvalue %any undef, ptr %taddr983, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext970, ptr %taddr984, align 8
  %808 = insertvalue %any undef, ptr %taddr984, 0
  %809 = insertvalue %any %808, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg985, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg986, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg987, align 8
  store %any %807, ptr %varargslots988, align 16
  %ptradd989 = getelementptr inbounds i8, ptr %varargslots988, i64 16
  store %any %809, ptr %ptradd989, align 16
  %810 = insertvalue %"any[]" undef, ptr %varargslots988, 0
  %"$$temp990" = insertvalue %"any[]" %810, i64 2, 1
  store %"any[]" %"$$temp990", ptr %indirectarg991, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg985, ptr align 8 %indirectarg986, ptr align 8 %indirectarg987, i32 166, ptr align 8 %indirectarg991), !dbg !2808
  unreachable, !dbg !2808

panic996:                                         ; preds = %checkok992
  store i64 %sext994, ptr %taddr997, align 8
  %811 = insertvalue %any undef, ptr %taddr997, 0
  %812 = insertvalue %any %811, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1000, align 8
  store %any %812, ptr %varargslots1001, align 16
  %813 = insertvalue %"any[]" undef, ptr %varargslots1001, 0
  %"$$temp1002" = insertvalue %"any[]" %813, i64 1, 1
  store %"any[]" %"$$temp1002", ptr %indirectarg1003, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 166, ptr align 8 %indirectarg1003), !dbg !2809
  unreachable, !dbg !2809

panic1006:                                        ; preds = %checkok1004
  store i64 128, ptr %taddr1007, align 8
  %814 = insertvalue %any undef, ptr %taddr1007, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext994, ptr %taddr1008, align 8
  %816 = insertvalue %any undef, ptr %taddr1008, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1009, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1011, align 8
  store %any %815, ptr %varargslots1012, align 16
  %ptradd1013 = getelementptr inbounds i8, ptr %varargslots1012, i64 16
  store %any %817, ptr %ptradd1013, align 16
  %818 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1014" = insertvalue %"any[]" %818, i64 2, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1009, ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, i32 166, ptr align 8 %indirectarg1015), !dbg !2809
  unreachable, !dbg !2809

panic1019:                                        ; preds = %checkok1016
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg1020, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1022, align 8
  %819 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %819(ptr align 8 %indirectarg1020, ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, i32 166), !dbg !2811
  unreachable, !dbg !2811

panic1026:                                        ; preds = %checkok1023
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg1027, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1028, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1029, align 8
  %820 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %820(ptr align 8 %indirectarg1027, ptr align 8 %indirectarg1028, ptr align 8 %indirectarg1029, i32 167), !dbg !2814
  unreachable, !dbg !2814

panic1037:                                        ; preds = %and.rhs1034
  store i64 %sext1035, ptr %taddr1038, align 8
  %821 = insertvalue %any undef, ptr %taddr1038, 0
  %822 = insertvalue %any %821, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1039, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1040, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1041, align 8
  store %any %822, ptr %varargslots1042, align 16
  %823 = insertvalue %"any[]" undef, ptr %varargslots1042, 0
  %"$$temp1043" = insertvalue %"any[]" %823, i64 1, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1039, ptr align 8 %indirectarg1040, ptr align 8 %indirectarg1041, i32 168, ptr align 8 %indirectarg1044), !dbg !2818
  unreachable, !dbg !2818

panic1047:                                        ; preds = %checkok1045
  store i64 128, ptr %taddr1048, align 8
  %824 = insertvalue %any undef, ptr %taddr1048, 0
  %825 = insertvalue %any %824, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1035, ptr %taddr1049, align 8
  %826 = insertvalue %any undef, ptr %taddr1049, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1050, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1051, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1052, align 8
  store %any %825, ptr %varargslots1053, align 16
  %ptradd1054 = getelementptr inbounds i8, ptr %varargslots1053, i64 16
  store %any %827, ptr %ptradd1054, align 16
  %828 = insertvalue %"any[]" undef, ptr %varargslots1053, 0
  %"$$temp1055" = insertvalue %"any[]" %828, i64 2, 1
  store %"any[]" %"$$temp1055", ptr %indirectarg1056, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1050, ptr align 8 %indirectarg1051, ptr align 8 %indirectarg1052, i32 168, ptr align 8 %indirectarg1056), !dbg !2818
  unreachable, !dbg !2818

panic1074:                                        ; preds = %if.then1070
  store i64 %sext1072, ptr %taddr1075, align 8
  %829 = insertvalue %any undef, ptr %taddr1075, 0
  %830 = insertvalue %any %829, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1076, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1077, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1078, align 8
  store %any %830, ptr %varargslots1079, align 16
  %831 = insertvalue %"any[]" undef, ptr %varargslots1079, 0
  %"$$temp1080" = insertvalue %"any[]" %831, i64 1, 1
  store %"any[]" %"$$temp1080", ptr %indirectarg1081, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1076, ptr align 8 %indirectarg1077, ptr align 8 %indirectarg1078, i32 174, ptr align 8 %indirectarg1081), !dbg !2824
  unreachable, !dbg !2824

panic1084:                                        ; preds = %checkok1082
  store i64 128, ptr %taddr1085, align 8
  %832 = insertvalue %any undef, ptr %taddr1085, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1072, ptr %taddr1086, align 8
  %834 = insertvalue %any undef, ptr %taddr1086, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1087, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1088, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1089, align 8
  store %any %833, ptr %varargslots1090, align 16
  %ptradd1091 = getelementptr inbounds i8, ptr %varargslots1090, i64 16
  store %any %835, ptr %ptradd1091, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots1090, 0
  %"$$temp1092" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp1092", ptr %indirectarg1093, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1087, ptr align 8 %indirectarg1088, ptr align 8 %indirectarg1089, i32 174, ptr align 8 %indirectarg1093), !dbg !2824
  unreachable, !dbg !2824

panic1107:                                        ; preds = %and.rhs1104
  store i64 %sext1105, ptr %taddr1108, align 8
  %837 = insertvalue %any undef, ptr %taddr1108, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1109, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1110, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1111, align 8
  store %any %838, ptr %varargslots1112, align 16
  %839 = insertvalue %"any[]" undef, ptr %varargslots1112, 0
  %"$$temp1113" = insertvalue %"any[]" %839, i64 1, 1
  store %"any[]" %"$$temp1113", ptr %indirectarg1114, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1109, ptr align 8 %indirectarg1110, ptr align 8 %indirectarg1111, i32 179, ptr align 8 %indirectarg1114), !dbg !2833
  unreachable, !dbg !2833

panic1117:                                        ; preds = %checkok1115
  store i64 128, ptr %taddr1118, align 8
  %840 = insertvalue %any undef, ptr %taddr1118, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1105, ptr %taddr1119, align 8
  %842 = insertvalue %any undef, ptr %taddr1119, 0
  %843 = insertvalue %any %842, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1120, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1121, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1122, align 8
  store %any %841, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %843, ptr %ptradd1124, align 16
  %844 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %844, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1120, ptr align 8 %indirectarg1121, ptr align 8 %indirectarg1122, i32 179, ptr align 8 %indirectarg1126), !dbg !2833
  unreachable, !dbg !2833

panic1143:                                        ; preds = %loop.body1139
  store i64 %sext1141, ptr %taddr1144, align 8
  %845 = insertvalue %any undef, ptr %taddr1144, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1145, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1146, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1147, align 8
  store %any %846, ptr %varargslots1148, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots1148, 0
  %"$$temp1149" = insertvalue %"any[]" %847, i64 1, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1145, ptr align 8 %indirectarg1146, ptr align 8 %indirectarg1147, i32 185, ptr align 8 %indirectarg1150), !dbg !2845
  unreachable, !dbg !2845

panic1153:                                        ; preds = %checkok1151
  store i64 128, ptr %taddr1154, align 8
  %848 = insertvalue %any undef, ptr %taddr1154, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1141, ptr %taddr1155, align 8
  %850 = insertvalue %any undef, ptr %taddr1155, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1156, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1157, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1158, align 8
  store %any %849, ptr %varargslots1159, align 16
  %ptradd1160 = getelementptr inbounds i8, ptr %varargslots1159, i64 16
  store %any %851, ptr %ptradd1160, align 16
  %852 = insertvalue %"any[]" undef, ptr %varargslots1159, 0
  %"$$temp1161" = insertvalue %"any[]" %852, i64 2, 1
  store %"any[]" %"$$temp1161", ptr %indirectarg1162, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1156, ptr align 8 %indirectarg1157, ptr align 8 %indirectarg1158, i32 185, ptr align 8 %indirectarg1162), !dbg !2845
  unreachable, !dbg !2845

panic1174:                                        ; preds = %if.then1169
  store i64 %sext1172, ptr %taddr1175, align 8
  %853 = insertvalue %any undef, ptr %taddr1175, 0
  %854 = insertvalue %any %853, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1177, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1178, align 8
  store %any %854, ptr %varargslots1179, align 16
  %855 = insertvalue %"any[]" undef, ptr %varargslots1179, 0
  %"$$temp1180" = insertvalue %"any[]" %855, i64 1, 1
  store %"any[]" %"$$temp1180", ptr %indirectarg1181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, ptr align 8 %indirectarg1178, i32 189, ptr align 8 %indirectarg1181), !dbg !2852
  unreachable, !dbg !2852

panic1184:                                        ; preds = %checkok1182
  store i64 128, ptr %taddr1185, align 8
  %856 = insertvalue %any undef, ptr %taddr1185, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1172, ptr %taddr1186, align 8
  %858 = insertvalue %any undef, ptr %taddr1186, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1188, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1189, align 8
  store %any %857, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %859, ptr %ptradd1191, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, ptr align 8 %indirectarg1189, i32 189, ptr align 8 %indirectarg1193), !dbg !2852
  unreachable, !dbg !2852

panic1201:                                        ; preds = %if.else1198
  store i64 %sext1199, ptr %taddr1202, align 8
  %861 = insertvalue %any undef, ptr %taddr1202, 0
  %862 = insertvalue %any %861, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1203, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1204, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1205, align 8
  store %any %862, ptr %varargslots1206, align 16
  %863 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %863, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1203, ptr align 8 %indirectarg1204, ptr align 8 %indirectarg1205, i32 194, ptr align 8 %indirectarg1208), !dbg !2857
  unreachable, !dbg !2857

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %864 = insertvalue %any undef, ptr %taddr1212, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1199, ptr %taddr1213, align 8
  %866 = insertvalue %any undef, ptr %taddr1213, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1214, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1215, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1216, align 8
  store %any %865, ptr %varargslots1217, align 16
  %ptradd1218 = getelementptr inbounds i8, ptr %varargslots1217, i64 16
  store %any %867, ptr %ptradd1218, align 16
  %868 = insertvalue %"any[]" undef, ptr %varargslots1217, 0
  %"$$temp1219" = insertvalue %"any[]" %868, i64 2, 1
  store %"any[]" %"$$temp1219", ptr %indirectarg1220, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1214, ptr align 8 %indirectarg1215, ptr align 8 %indirectarg1216, i32 194, ptr align 8 %indirectarg1220), !dbg !2857
  unreachable, !dbg !2857

panic1235:                                        ; preds = %and.rhs1232
  store i64 %sext1233, ptr %taddr1236, align 8
  %869 = insertvalue %any undef, ptr %taddr1236, 0
  %870 = insertvalue %any %869, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1237, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1238, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1239, align 8
  store %any %870, ptr %varargslots1240, align 16
  %871 = insertvalue %"any[]" undef, ptr %varargslots1240, 0
  %"$$temp1241" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp1241", ptr %indirectarg1242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1237, ptr align 8 %indirectarg1238, ptr align 8 %indirectarg1239, i32 196, ptr align 8 %indirectarg1242), !dbg !2863
  unreachable, !dbg !2863

panic1245:                                        ; preds = %checkok1243
  store i64 128, ptr %taddr1246, align 8
  %872 = insertvalue %any undef, ptr %taddr1246, 0
  %873 = insertvalue %any %872, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1233, ptr %taddr1247, align 8
  %874 = insertvalue %any undef, ptr %taddr1247, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1248, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1249, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1250, align 8
  store %any %873, ptr %varargslots1251, align 16
  %ptradd1252 = getelementptr inbounds i8, ptr %varargslots1251, i64 16
  store %any %875, ptr %ptradd1252, align 16
  %876 = insertvalue %"any[]" undef, ptr %varargslots1251, 0
  %"$$temp1253" = insertvalue %"any[]" %876, i64 2, 1
  store %"any[]" %"$$temp1253", ptr %indirectarg1254, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1248, ptr align 8 %indirectarg1249, ptr align 8 %indirectarg1250, i32 196, ptr align 8 %indirectarg1254), !dbg !2863
  unreachable, !dbg !2863

panic1281:                                        ; preds = %if.then1274
  store i64 %sext1279, ptr %taddr1282, align 8
  %877 = insertvalue %any undef, ptr %taddr1282, 0
  %878 = insertvalue %any %877, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1283, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1284, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1285, align 8
  store %any %878, ptr %varargslots1286, align 16
  %879 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %879, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1283, ptr align 8 %indirectarg1284, ptr align 8 %indirectarg1285, i32 206, ptr align 8 %indirectarg1288), !dbg !2877
  unreachable, !dbg !2877

panic1291:                                        ; preds = %checkok1289
  store i64 128, ptr %taddr1292, align 8
  %880 = insertvalue %any undef, ptr %taddr1292, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1279, ptr %taddr1293, align 8
  %882 = insertvalue %any undef, ptr %taddr1293, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1294, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1295, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1296, align 8
  store %any %881, ptr %varargslots1297, align 16
  %ptradd1298 = getelementptr inbounds i8, ptr %varargslots1297, i64 16
  store %any %883, ptr %ptradd1298, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1299" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1299", ptr %indirectarg1300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1294, ptr align 8 %indirectarg1295, ptr align 8 %indirectarg1296, i32 206, ptr align 8 %indirectarg1300), !dbg !2877
  unreachable, !dbg !2877

panic1305:                                        ; preds = %checkok1301
  store i64 %sext1303, ptr %taddr1306, align 8
  %885 = insertvalue %any undef, ptr %taddr1306, 0
  %886 = insertvalue %any %885, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1307, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1308, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1309, align 8
  store %any %886, ptr %varargslots1310, align 16
  %887 = insertvalue %"any[]" undef, ptr %varargslots1310, 0
  %"$$temp1311" = insertvalue %"any[]" %887, i64 1, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1307, ptr align 8 %indirectarg1308, ptr align 8 %indirectarg1309, i32 206, ptr align 8 %indirectarg1312), !dbg !2878
  unreachable, !dbg !2878

panic1315:                                        ; preds = %checkok1313
  store i64 128, ptr %taddr1316, align 8
  %888 = insertvalue %any undef, ptr %taddr1316, 0
  %889 = insertvalue %any %888, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1303, ptr %taddr1317, align 8
  %890 = insertvalue %any undef, ptr %taddr1317, 0
  %891 = insertvalue %any %890, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1318, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1319, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1320, align 8
  store %any %889, ptr %varargslots1321, align 16
  %ptradd1322 = getelementptr inbounds i8, ptr %varargslots1321, i64 16
  store %any %891, ptr %ptradd1322, align 16
  %892 = insertvalue %"any[]" undef, ptr %varargslots1321, 0
  %"$$temp1323" = insertvalue %"any[]" %892, i64 2, 1
  store %"any[]" %"$$temp1323", ptr %indirectarg1324, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1318, ptr align 8 %indirectarg1319, ptr align 8 %indirectarg1320, i32 206, ptr align 8 %indirectarg1324), !dbg !2878
  unreachable, !dbg !2878

panic1331:                                        ; preds = %if.exit1328
  store i64 %sext1329, ptr %taddr1332, align 8
  %893 = insertvalue %any undef, ptr %taddr1332, 0
  %894 = insertvalue %any %893, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1333, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1334, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1335, align 8
  store %any %894, ptr %varargslots1336, align 16
  %895 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %895, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1333, ptr align 8 %indirectarg1334, ptr align 8 %indirectarg1335, i32 208, ptr align 8 %indirectarg1338), !dbg !2880
  unreachable, !dbg !2880

panic1341:                                        ; preds = %checkok1339
  store i64 128, ptr %taddr1342, align 8
  %896 = insertvalue %any undef, ptr %taddr1342, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1329, ptr %taddr1343, align 8
  %898 = insertvalue %any undef, ptr %taddr1343, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1344, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1345, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1346, align 8
  store %any %897, ptr %varargslots1347, align 16
  %ptradd1348 = getelementptr inbounds i8, ptr %varargslots1347, i64 16
  store %any %899, ptr %ptradd1348, align 16
  %900 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1349" = insertvalue %"any[]" %900, i64 2, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1344, ptr align 8 %indirectarg1345, ptr align 8 %indirectarg1346, i32 208, ptr align 8 %indirectarg1350), !dbg !2880
  unreachable, !dbg !2880

panic1366:                                        ; preds = %or.rhs1363
  store i64 %sext1364, ptr %taddr1367, align 8
  %901 = insertvalue %any undef, ptr %taddr1367, 0
  %902 = insertvalue %any %901, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1368, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1369, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1370, align 8
  store %any %902, ptr %varargslots1371, align 16
  %903 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1372" = insertvalue %"any[]" %903, i64 1, 1
  store %"any[]" %"$$temp1372", ptr %indirectarg1373, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1368, ptr align 8 %indirectarg1369, ptr align 8 %indirectarg1370, i32 221, ptr align 8 %indirectarg1373), !dbg !2901
  unreachable, !dbg !2901

panic1376:                                        ; preds = %checkok1374
  store i64 128, ptr %taddr1377, align 8
  %904 = insertvalue %any undef, ptr %taddr1377, 0
  %905 = insertvalue %any %904, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1364, ptr %taddr1378, align 8
  %906 = insertvalue %any undef, ptr %taddr1378, 0
  %907 = insertvalue %any %906, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1379, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1380, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1381, align 8
  store %any %905, ptr %varargslots1382, align 16
  %ptradd1383 = getelementptr inbounds i8, ptr %varargslots1382, i64 16
  store %any %907, ptr %ptradd1383, align 16
  %908 = insertvalue %"any[]" undef, ptr %varargslots1382, 0
  %"$$temp1384" = insertvalue %"any[]" %908, i64 2, 1
  store %"any[]" %"$$temp1384", ptr %indirectarg1385, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1379, ptr align 8 %indirectarg1380, ptr align 8 %indirectarg1381, i32 221, ptr align 8 %indirectarg1385), !dbg !2901
  unreachable, !dbg !2901

panic1390:                                        ; preds = %checkok1386
  store i64 %sext1388, ptr %taddr1391, align 8
  %909 = insertvalue %any undef, ptr %taddr1391, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1392, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1393, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1394, align 8
  store %any %910, ptr %varargslots1395, align 16
  %911 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %911, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1392, ptr align 8 %indirectarg1393, ptr align 8 %indirectarg1394, i32 221, ptr align 8 %indirectarg1397), !dbg !2902
  unreachable, !dbg !2902

panic1400:                                        ; preds = %checkok1398
  store i64 2, ptr %taddr1401, align 8
  %912 = insertvalue %any undef, ptr %taddr1401, 0
  %913 = insertvalue %any %912, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1388, ptr %taddr1402, align 8
  %914 = insertvalue %any undef, ptr %taddr1402, 0
  %915 = insertvalue %any %914, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1403, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1404, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1405, align 8
  store %any %913, ptr %varargslots1406, align 16
  %ptradd1407 = getelementptr inbounds i8, ptr %varargslots1406, i64 16
  store %any %915, ptr %ptradd1407, align 16
  %916 = insertvalue %"any[]" undef, ptr %varargslots1406, 0
  %"$$temp1408" = insertvalue %"any[]" %916, i64 2, 1
  store %"any[]" %"$$temp1408", ptr %indirectarg1409, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1403, ptr align 8 %indirectarg1404, ptr align 8 %indirectarg1405, i32 221, ptr align 8 %indirectarg1409), !dbg !2902
  unreachable, !dbg !2902

panic1421:                                        ; preds = %if.exit1416
  store i64 %sext1419, ptr %taddr1422, align 8
  %917 = insertvalue %any undef, ptr %taddr1422, 0
  %918 = insertvalue %any %917, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1423, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1424, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1425, align 8
  store %any %918, ptr %varargslots1426, align 16
  %919 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1427" = insertvalue %"any[]" %919, i64 1, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1423, ptr align 8 %indirectarg1424, ptr align 8 %indirectarg1425, i32 226, ptr align 8 %indirectarg1428), !dbg !2907
  unreachable, !dbg !2907

panic1431:                                        ; preds = %checkok1429
  store i64 128, ptr %taddr1432, align 8
  %920 = insertvalue %any undef, ptr %taddr1432, 0
  %921 = insertvalue %any %920, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1419, ptr %taddr1433, align 8
  %922 = insertvalue %any undef, ptr %taddr1433, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1434, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1435, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1436, align 8
  store %any %921, ptr %varargslots1437, align 16
  %ptradd1438 = getelementptr inbounds i8, ptr %varargslots1437, i64 16
  store %any %923, ptr %ptradd1438, align 16
  %924 = insertvalue %"any[]" undef, ptr %varargslots1437, 0
  %"$$temp1439" = insertvalue %"any[]" %924, i64 2, 1
  store %"any[]" %"$$temp1439", ptr %indirectarg1440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1434, ptr align 8 %indirectarg1435, ptr align 8 %indirectarg1436, i32 226, ptr align 8 %indirectarg1440), !dbg !2907
  unreachable, !dbg !2907

panic1445:                                        ; preds = %checkok1441
  store i64 %sext1443, ptr %taddr1446, align 8
  %925 = insertvalue %any undef, ptr %taddr1446, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1447, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1448, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1449, align 8
  store %any %926, ptr %varargslots1450, align 16
  %927 = insertvalue %"any[]" undef, ptr %varargslots1450, 0
  %"$$temp1451" = insertvalue %"any[]" %927, i64 1, 1
  store %"any[]" %"$$temp1451", ptr %indirectarg1452, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1447, ptr align 8 %indirectarg1448, ptr align 8 %indirectarg1449, i32 226, ptr align 8 %indirectarg1452), !dbg !2909
  unreachable, !dbg !2909

panic1455:                                        ; preds = %checkok1453
  store i64 2, ptr %taddr1456, align 8
  %928 = insertvalue %any undef, ptr %taddr1456, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1443, ptr %taddr1457, align 8
  %930 = insertvalue %any undef, ptr %taddr1457, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1458, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1459, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1460, align 8
  store %any %929, ptr %varargslots1461, align 16
  %ptradd1462 = getelementptr inbounds i8, ptr %varargslots1461, i64 16
  store %any %931, ptr %ptradd1462, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots1461, 0
  %"$$temp1463" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp1463", ptr %indirectarg1464, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1458, ptr align 8 %indirectarg1459, ptr align 8 %indirectarg1460, i32 226, ptr align 8 %indirectarg1464), !dbg !2909
  unreachable, !dbg !2909

panic1489:                                        ; preds = %loop.body1485
  store i64 %sext1487, ptr %taddr1490, align 8
  %933 = insertvalue %any undef, ptr %taddr1490, 0
  %934 = insertvalue %any %933, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1491, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1492, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1493, align 8
  store %any %934, ptr %varargslots1494, align 16
  %935 = insertvalue %"any[]" undef, ptr %varargslots1494, 0
  %"$$temp1495" = insertvalue %"any[]" %935, i64 1, 1
  store %"any[]" %"$$temp1495", ptr %indirectarg1496, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1491, ptr align 8 %indirectarg1492, ptr align 8 %indirectarg1493, i32 233, ptr align 8 %indirectarg1496), !dbg !2927
  unreachable, !dbg !2927

panic1499:                                        ; preds = %checkok1497
  store i64 128, ptr %taddr1500, align 8
  %936 = insertvalue %any undef, ptr %taddr1500, 0
  %937 = insertvalue %any %936, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1487, ptr %taddr1501, align 8
  %938 = insertvalue %any undef, ptr %taddr1501, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1502, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1503, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1504, align 8
  store %any %937, ptr %varargslots1505, align 16
  %ptradd1506 = getelementptr inbounds i8, ptr %varargslots1505, i64 16
  store %any %939, ptr %ptradd1506, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1505, 0
  %"$$temp1507" = insertvalue %"any[]" %940, i64 2, 1
  store %"any[]" %"$$temp1507", ptr %indirectarg1508, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1502, ptr align 8 %indirectarg1503, ptr align 8 %indirectarg1504, i32 233, ptr align 8 %indirectarg1508), !dbg !2927
  unreachable, !dbg !2927

panic1511:                                        ; preds = %checkok1509
  store i32 %496, ptr %taddr1512, align 4
  %941 = insertvalue %any undef, ptr %taddr1512, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1513, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1514, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1515, align 8
  store %any %942, ptr %varargslots1516, align 16
  %943 = insertvalue %"any[]" undef, ptr %varargslots1516, 0
  %"$$temp1517" = insertvalue %"any[]" %943, i64 1, 1
  store %"any[]" %"$$temp1517", ptr %indirectarg1518, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1513, ptr align 8 %indirectarg1514, ptr align 8 %indirectarg1515, i32 233, ptr align 8 %indirectarg1518), !dbg !2929
  unreachable, !dbg !2929

panic1521:                                        ; preds = %checkok1519
  store i32 %496, ptr %taddr1522, align 4
  %944 = insertvalue %any undef, ptr %taddr1522, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1523, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1524, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1525, align 8
  store %any %945, ptr %varargslots1526, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots1526, 0
  %"$$temp1527" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp1527", ptr %indirectarg1528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1523, ptr align 8 %indirectarg1524, ptr align 8 %indirectarg1525, i32 233, ptr align 8 %indirectarg1528), !dbg !2929
  unreachable, !dbg !2929

panic1535:                                        ; preds = %checkok1529
  store i64 %sext1533, ptr %taddr1536, align 8
  %947 = insertvalue %any undef, ptr %taddr1536, 0
  %948 = insertvalue %any %947, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1537, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1538, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1539, align 8
  store %any %948, ptr %varargslots1540, align 16
  %949 = insertvalue %"any[]" undef, ptr %varargslots1540, 0
  %"$$temp1541" = insertvalue %"any[]" %949, i64 1, 1
  store %"any[]" %"$$temp1541", ptr %indirectarg1542, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1537, ptr align 8 %indirectarg1538, ptr align 8 %indirectarg1539, i32 234, ptr align 8 %indirectarg1542), !dbg !2931
  unreachable, !dbg !2931

panic1545:                                        ; preds = %checkok1543
  store i64 128, ptr %taddr1546, align 8
  %950 = insertvalue %any undef, ptr %taddr1546, 0
  %951 = insertvalue %any %950, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1547, align 8
  %952 = insertvalue %any undef, ptr %taddr1547, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1548, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1549, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1550, align 8
  store %any %951, ptr %varargslots1551, align 16
  %ptradd1552 = getelementptr inbounds i8, ptr %varargslots1551, i64 16
  store %any %953, ptr %ptradd1552, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1551, 0
  %"$$temp1553" = insertvalue %"any[]" %954, i64 2, 1
  store %"any[]" %"$$temp1553", ptr %indirectarg1554, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1548, ptr align 8 %indirectarg1549, ptr align 8 %indirectarg1550, i32 234, ptr align 8 %indirectarg1554), !dbg !2931
  unreachable, !dbg !2931

panic1559:                                        ; preds = %checkok1555
  store i64 %sext1557, ptr %taddr1560, align 8
  %955 = insertvalue %any undef, ptr %taddr1560, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1561, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1562, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1563, align 8
  store %any %956, ptr %varargslots1564, align 16
  %957 = insertvalue %"any[]" undef, ptr %varargslots1564, 0
  %"$$temp1565" = insertvalue %"any[]" %957, i64 1, 1
  store %"any[]" %"$$temp1565", ptr %indirectarg1566, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1561, ptr align 8 %indirectarg1562, ptr align 8 %indirectarg1563, i32 234, ptr align 8 %indirectarg1566), !dbg !2932
  unreachable, !dbg !2932

panic1569:                                        ; preds = %checkok1567
  store i64 128, ptr %taddr1570, align 8
  %958 = insertvalue %any undef, ptr %taddr1570, 0
  %959 = insertvalue %any %958, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1557, ptr %taddr1571, align 8
  %960 = insertvalue %any undef, ptr %taddr1571, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1572, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1573, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1574, align 8
  store %any %959, ptr %varargslots1575, align 16
  %ptradd1576 = getelementptr inbounds i8, ptr %varargslots1575, i64 16
  store %any %961, ptr %ptradd1576, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1575, 0
  %"$$temp1577" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp1577", ptr %indirectarg1578, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1572, ptr align 8 %indirectarg1573, ptr align 8 %indirectarg1574, i32 234, ptr align 8 %indirectarg1578), !dbg !2932
  unreachable, !dbg !2932

panic1582:                                        ; preds = %checkok1579
  store i32 %507, ptr %taddr1583, align 4
  %963 = insertvalue %any undef, ptr %taddr1583, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1584, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1585, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1586, align 8
  store %any %964, ptr %varargslots1587, align 16
  %965 = insertvalue %"any[]" undef, ptr %varargslots1587, 0
  %"$$temp1588" = insertvalue %"any[]" %965, i64 1, 1
  store %"any[]" %"$$temp1588", ptr %indirectarg1589, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1584, ptr align 8 %indirectarg1585, ptr align 8 %indirectarg1586, i32 234, ptr align 8 %indirectarg1589), !dbg !2934
  unreachable, !dbg !2934

panic1594:                                        ; preds = %checkok1590
  store i32 %511, ptr %taddr1595, align 4
  %966 = insertvalue %any undef, ptr %taddr1595, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1596, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1597, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1598, align 8
  store %any %967, ptr %varargslots1599, align 16
  %968 = insertvalue %"any[]" undef, ptr %varargslots1599, 0
  %"$$temp1600" = insertvalue %"any[]" %968, i64 1, 1
  store %"any[]" %"$$temp1600", ptr %indirectarg1601, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1596, ptr align 8 %indirectarg1597, ptr align 8 %indirectarg1598, i32 235, ptr align 8 %indirectarg1601), !dbg !2937
  unreachable, !dbg !2937

panic1604:                                        ; preds = %checkok1602
  store i32 %511, ptr %taddr1605, align 4
  %969 = insertvalue %any undef, ptr %taddr1605, 0
  %970 = insertvalue %any %969, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1606, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1607, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1608, align 8
  store %any %970, ptr %varargslots1609, align 16
  %971 = insertvalue %"any[]" undef, ptr %varargslots1609, 0
  %"$$temp1610" = insertvalue %"any[]" %971, i64 1, 1
  store %"any[]" %"$$temp1610", ptr %indirectarg1611, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1606, ptr align 8 %indirectarg1607, ptr align 8 %indirectarg1608, i32 235, ptr align 8 %indirectarg1611), !dbg !2937
  unreachable, !dbg !2937

panic1618:                                        ; preds = %and.rhs1615
  store i64 %sext1616, ptr %taddr1619, align 8
  %972 = insertvalue %any undef, ptr %taddr1619, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1620, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1621, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1622, align 8
  store %any %973, ptr %varargslots1623, align 16
  %974 = insertvalue %"any[]" undef, ptr %varargslots1623, 0
  %"$$temp1624" = insertvalue %"any[]" %974, i64 1, 1
  store %"any[]" %"$$temp1624", ptr %indirectarg1625, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1620, ptr align 8 %indirectarg1621, ptr align 8 %indirectarg1622, i32 236, ptr align 8 %indirectarg1625), !dbg !2941
  unreachable, !dbg !2941

panic1628:                                        ; preds = %checkok1626
  store i64 128, ptr %taddr1629, align 8
  %975 = insertvalue %any undef, ptr %taddr1629, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1616, ptr %taddr1630, align 8
  %977 = insertvalue %any undef, ptr %taddr1630, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1631, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1632, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1633, align 8
  store %any %976, ptr %varargslots1634, align 16
  %ptradd1635 = getelementptr inbounds i8, ptr %varargslots1634, i64 16
  store %any %978, ptr %ptradd1635, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots1634, 0
  %"$$temp1636" = insertvalue %"any[]" %979, i64 2, 1
  store %"any[]" %"$$temp1636", ptr %indirectarg1637, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1631, ptr align 8 %indirectarg1632, ptr align 8 %indirectarg1633, i32 236, ptr align 8 %indirectarg1637), !dbg !2941
  unreachable, !dbg !2941

panic1660:                                        ; preds = %if.then1657
  store i64 %sext1658, ptr %taddr1661, align 8
  %980 = insertvalue %any undef, ptr %taddr1661, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1664, align 8
  store %any %981, ptr %varargslots1665, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %982, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 247, ptr align 8 %indirectarg1667), !dbg !2951
  unreachable, !dbg !2951

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %983 = insertvalue %any undef, ptr %taddr1671, 0
  %984 = insertvalue %any %983, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %985 = insertvalue %any undef, ptr %taddr1672, 0
  %986 = insertvalue %any %985, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1675, align 8
  store %any %984, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %986, ptr %ptradd1677, align 16
  %987 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %987, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 247, ptr align 8 %indirectarg1679), !dbg !2951
  unreachable, !dbg !2951

panic1689:                                        ; preds = %if.else1684
  store i64 %sext1687, ptr %taddr1690, align 8
  %988 = insertvalue %any undef, ptr %taddr1690, 0
  %989 = insertvalue %any %988, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1691, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1692, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1693, align 8
  store %any %989, ptr %varargslots1694, align 16
  %990 = insertvalue %"any[]" undef, ptr %varargslots1694, 0
  %"$$temp1695" = insertvalue %"any[]" %990, i64 1, 1
  store %"any[]" %"$$temp1695", ptr %indirectarg1696, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1691, ptr align 8 %indirectarg1692, ptr align 8 %indirectarg1693, i32 252, ptr align 8 %indirectarg1696), !dbg !2955
  unreachable, !dbg !2955

panic1699:                                        ; preds = %checkok1697
  store i64 128, ptr %taddr1700, align 8
  %991 = insertvalue %any undef, ptr %taddr1700, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1687, ptr %taddr1701, align 8
  %993 = insertvalue %any undef, ptr %taddr1701, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1704, align 8
  store %any %992, ptr %varargslots1705, align 16
  %ptradd1706 = getelementptr inbounds i8, ptr %varargslots1705, i64 16
  store %any %994, ptr %ptradd1706, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1707" = insertvalue %"any[]" %995, i64 2, 1
  store %"any[]" %"$$temp1707", ptr %indirectarg1708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 252, ptr align 8 %indirectarg1708), !dbg !2955
  unreachable, !dbg !2955

panic1729:                                        ; preds = %if.then1723
  store i64 %sext1727, ptr %taddr1730, align 8
  %996 = insertvalue %any undef, ptr %taddr1730, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1732, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1733, align 8
  store %any %997, ptr %varargslots1734, align 16
  %998 = insertvalue %"any[]" undef, ptr %varargslots1734, 0
  %"$$temp1735" = insertvalue %"any[]" %998, i64 1, 1
  store %"any[]" %"$$temp1735", ptr %indirectarg1736, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, ptr align 8 %indirectarg1733, i32 262, ptr align 8 %indirectarg1736), !dbg !2970
  unreachable, !dbg !2970

panic1739:                                        ; preds = %checkok1737
  store i64 128, ptr %taddr1740, align 8
  %999 = insertvalue %any undef, ptr %taddr1740, 0
  %1000 = insertvalue %any %999, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1727, ptr %taddr1741, align 8
  %1001 = insertvalue %any undef, ptr %taddr1741, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1743, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1744, align 8
  store %any %1000, ptr %varargslots1745, align 16
  %ptradd1746 = getelementptr inbounds i8, ptr %varargslots1745, i64 16
  store %any %1002, ptr %ptradd1746, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots1745, 0
  %"$$temp1747" = insertvalue %"any[]" %1003, i64 2, 1
  store %"any[]" %"$$temp1747", ptr %indirectarg1748, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, ptr align 8 %indirectarg1744, i32 262, ptr align 8 %indirectarg1748), !dbg !2970
  unreachable, !dbg !2970

panic1757:                                        ; preds = %if.exit1751
  store i64 %sext1755, ptr %taddr1758, align 8
  %1004 = insertvalue %any undef, ptr %taddr1758, 0
  %1005 = insertvalue %any %1004, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1759, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1760, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1761, align 8
  store %any %1005, ptr %varargslots1762, align 16
  %1006 = insertvalue %"any[]" undef, ptr %varargslots1762, 0
  %"$$temp1763" = insertvalue %"any[]" %1006, i64 1, 1
  store %"any[]" %"$$temp1763", ptr %indirectarg1764, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1759, ptr align 8 %indirectarg1760, ptr align 8 %indirectarg1761, i32 263, ptr align 8 %indirectarg1764), !dbg !2974
  unreachable, !dbg !2974

panic1767:                                        ; preds = %checkok1765
  store i64 128, ptr %taddr1768, align 8
  %1007 = insertvalue %any undef, ptr %taddr1768, 0
  %1008 = insertvalue %any %1007, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1755, ptr %taddr1769, align 8
  %1009 = insertvalue %any undef, ptr %taddr1769, 0
  %1010 = insertvalue %any %1009, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1770, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1771, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1772, align 8
  store %any %1008, ptr %varargslots1773, align 16
  %ptradd1774 = getelementptr inbounds i8, ptr %varargslots1773, i64 16
  store %any %1010, ptr %ptradd1774, align 16
  %1011 = insertvalue %"any[]" undef, ptr %varargslots1773, 0
  %"$$temp1775" = insertvalue %"any[]" %1011, i64 2, 1
  store %"any[]" %"$$temp1775", ptr %indirectarg1776, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1770, ptr align 8 %indirectarg1771, ptr align 8 %indirectarg1772, i32 263, ptr align 8 %indirectarg1776), !dbg !2974
  unreachable, !dbg !2974

panic1813:                                        ; preds = %if.then1800
  store %"char[]" { ptr @.panic_msg.84, i64 10 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1816, align 8
  %1012 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1012(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 284), !dbg !3011
  unreachable, !dbg !3011

panic1829:                                        ; preds = %if.then1824
  store i64 %sext1827, ptr %taddr1830, align 8
  %1013 = insertvalue %any undef, ptr %taddr1830, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1831, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1832, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1833, align 8
  store %any %1014, ptr %varargslots1834, align 16
  %1015 = insertvalue %"any[]" undef, ptr %varargslots1834, 0
  %"$$temp1835" = insertvalue %"any[]" %1015, i64 1, 1
  store %"any[]" %"$$temp1835", ptr %indirectarg1836, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1831, ptr align 8 %indirectarg1832, ptr align 8 %indirectarg1833, i32 292, ptr align 8 %indirectarg1836), !dbg !3028
  unreachable, !dbg !3028

panic1839:                                        ; preds = %checkok1837
  store i64 128, ptr %taddr1840, align 8
  %1016 = insertvalue %any undef, ptr %taddr1840, 0
  %1017 = insertvalue %any %1016, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1827, ptr %taddr1841, align 8
  %1018 = insertvalue %any undef, ptr %taddr1841, 0
  %1019 = insertvalue %any %1018, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1842, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1843, align 8
  store %"char[]" { ptr @.func.74, i64 9 }, ptr %indirectarg1844, align 8
  store %any %1017, ptr %varargslots1845, align 16
  %ptradd1846 = getelementptr inbounds i8, ptr %varargslots1845, i64 16
  store %any %1019, ptr %ptradd1846, align 16
  %1020 = insertvalue %"any[]" undef, ptr %varargslots1845, 0
  %"$$temp1847" = insertvalue %"any[]" %1020, i64 2, 1
  store %"any[]" %"$$temp1847", ptr %indirectarg1848, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1842, ptr align 8 %indirectarg1843, ptr align 8 %indirectarg1844, i32 292, ptr align 8 %indirectarg1848), !dbg !3028
  unreachable, !dbg !3028
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_float(ptr %0, ptr align 8 %1) #0 comdat !dbg !3089 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx54 = alloca i64, align 8
  %cmp.idx68 = alloca i64, align 8
  %cmp.idx80 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %chars145 = alloca %"char[]", align 8
  %sign146 = alloca i32, align 4
  %blockret147 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %varargslots158 = alloca [2 x %any], align 16
  %indirectarg161 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr208 = alloca i64, align 8
  %taddr209 = alloca i64, align 8
  %indirectarg210 = alloca %"char[]", align 8
  %indirectarg211 = alloca %"char[]", align 8
  %indirectarg212 = alloca %"char[]", align 8
  %varargslots213 = alloca [2 x %any], align 16
  %indirectarg216 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret247 = alloca i32, align 4
  %switch257 = alloca i8, align 1
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %indirectarg291 = alloca %"char[]", align 8
  %indirectarg292 = alloca %"char[]", align 8
  %indirectarg293 = alloca %"char[]", align 8
  %varargslots294 = alloca [2 x %any], align 16
  %indirectarg297 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %taddr323 = alloca i64, align 8
  %indirectarg324 = alloca %"char[]", align 8
  %indirectarg325 = alloca %"char[]", align 8
  %indirectarg326 = alloca %"char[]", align 8
  %varargslots327 = alloca [2 x %any], align 16
  %indirectarg330 = alloca %"any[]", align 8
  %taddr333 = alloca i64, align 8
  %indirectarg334 = alloca %"char[]", align 8
  %indirectarg335 = alloca %"char[]", align 8
  %indirectarg336 = alloca %"char[]", align 8
  %varargslots337 = alloca [1 x %any], align 16
  %indirectarg339 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg343 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x385 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x389 = alloca double, align 8
  %y390 = alloca double, align 8
  %x413 = alloca double, align 8
  %n415 = alloca i32, align 4
  %chars419 = alloca %"char[]", align 8
  %sign420 = alloca i32, align 4
  %blockret421 = alloca double, align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %indirectarg426 = alloca %"char[]", align 8
  %x427 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index428 = alloca i64, align 8
  %got_digit429 = alloca i8, align 1
  %taddr433 = alloca i64, align 8
  %taddr434 = alloca i64, align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %indirectarg437 = alloca %"char[]", align 8
  %varargslots438 = alloca [2 x %any], align 16
  %indirectarg441 = alloca %"any[]", align 8
  %got_rad444 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc445 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len446 = alloca i64, align 8
  %last_char448 = alloca i64, align 8
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %c456 = alloca i8, align 1
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %indirectarg463 = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %varargslots466 = alloca [2 x %any], align 16
  %indirectarg469 = alloca %"any[]", align 8
  %taddr497 = alloca i64, align 8
  %taddr498 = alloca i64, align 8
  %indirectarg499 = alloca %"char[]", align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %varargslots502 = alloca [2 x %any], align 16
  %indirectarg505 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %indirectarg522 = alloca %"char[]", align 8
  %indirectarg523 = alloca %"char[]", align 8
  %indirectarg524 = alloca %"char[]", align 8
  %varargslots525 = alloca [2 x %any], align 16
  %indirectarg528 = alloca %"any[]", align 8
  %switch548 = alloca i8, align 1
  %taddr568 = alloca i64, align 8
  %indirectarg569 = alloca %"char[]", align 8
  %indirectarg570 = alloca %"char[]", align 8
  %indirectarg571 = alloca %"char[]", align 8
  %varargslots572 = alloca [1 x %any], align 16
  %indirectarg574 = alloca %"any[]", align 8
  %taddr578 = alloca i64, align 8
  %taddr579 = alloca i64, align 8
  %indirectarg580 = alloca %"char[]", align 8
  %indirectarg581 = alloca %"char[]", align 8
  %indirectarg582 = alloca %"char[]", align 8
  %varargslots583 = alloca [2 x %any], align 16
  %indirectarg586 = alloca %"any[]", align 8
  %taddr591 = alloca i64, align 8
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %varargslots595 = alloca [1 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %taddr601 = alloca i64, align 8
  %taddr602 = alloca i64, align 8
  %indirectarg603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %varargslots606 = alloca [2 x %any], align 16
  %indirectarg609 = alloca %"any[]", align 8
  %taddr620 = alloca i64, align 8
  %indirectarg621 = alloca %"char[]", align 8
  %indirectarg622 = alloca %"char[]", align 8
  %indirectarg623 = alloca %"char[]", align 8
  %varargslots624 = alloca [1 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %taddr631 = alloca i64, align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %varargslots635 = alloca [2 x %any], align 16
  %indirectarg638 = alloca %"any[]", align 8
  %indirectarg662 = alloca %"char[]", align 8
  %indirectarg663 = alloca %"char[]", align 8
  %indirectarg664 = alloca %"char[]", align 8
  %taddr670 = alloca i64, align 8
  %taddr671 = alloca i64, align 8
  %indirectarg672 = alloca %"char[]", align 8
  %indirectarg673 = alloca %"char[]", align 8
  %indirectarg674 = alloca %"char[]", align 8
  %varargslots675 = alloca [2 x %any], align 16
  %indirectarg678 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr700 = alloca i64, align 8
  %taddr701 = alloca i64, align 8
  %indirectarg702 = alloca %"char[]", align 8
  %indirectarg703 = alloca %"char[]", align 8
  %indirectarg704 = alloca %"char[]", align 8
  %varargslots705 = alloca [2 x %any], align 16
  %indirectarg708 = alloca %"any[]", align 8
  %taddr712 = alloca i64, align 8
  %indirectarg713 = alloca %"char[]", align 8
  %indirectarg714 = alloca %"char[]", align 8
  %indirectarg715 = alloca %"char[]", align 8
  %varargslots716 = alloca [1 x %any], align 16
  %indirectarg718 = alloca %"any[]", align 8
  %retparam722 = alloca i64, align 8
  %indirectarg723 = alloca %"char[]", align 8
  %error_var727 = alloca i64, align 8
  %taddr773 = alloca i64, align 8
  %indirectarg774 = alloca %"char[]", align 8
  %indirectarg775 = alloca %"char[]", align 8
  %indirectarg776 = alloca %"char[]", align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %indirectarg785 = alloca %"char[]", align 8
  %indirectarg786 = alloca %"char[]", align 8
  %indirectarg787 = alloca %"char[]", align 8
  %varargslots788 = alloca [2 x %any], align 16
  %indirectarg791 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2799 = alloca i32, align 4
  %rp800 = alloca i64, align 8
  %taddr825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %indirectarg827 = alloca %"char[]", align 8
  %indirectarg828 = alloca %"char[]", align 8
  %varargslots829 = alloca [1 x %any], align 16
  %indirectarg831 = alloca %"any[]", align 8
  %taddr835 = alloca i64, align 8
  %taddr836 = alloca i64, align 8
  %indirectarg837 = alloca %"char[]", align 8
  %indirectarg838 = alloca %"char[]", align 8
  %indirectarg839 = alloca %"char[]", align 8
  %varargslots840 = alloca [2 x %any], align 16
  %indirectarg843 = alloca %"any[]", align 8
  %indirectarg848 = alloca %"char[]", align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr861 = alloca i32, align 4
  %indirectarg862 = alloca %"char[]", align 8
  %indirectarg863 = alloca %"char[]", align 8
  %indirectarg864 = alloca %"char[]", align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr880 = alloca i64, align 8
  %indirectarg881 = alloca %"char[]", align 8
  %indirectarg882 = alloca %"char[]", align 8
  %indirectarg883 = alloca %"char[]", align 8
  %varargslots884 = alloca [1 x %any], align 16
  %indirectarg886 = alloca %"any[]", align 8
  %taddr890 = alloca i64, align 8
  %taddr891 = alloca i64, align 8
  %indirectarg892 = alloca %"char[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %varargslots895 = alloca [2 x %any], align 16
  %indirectarg898 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr915 = alloca i64, align 8
  %indirectarg916 = alloca %"char[]", align 8
  %indirectarg917 = alloca %"char[]", align 8
  %indirectarg918 = alloca %"char[]", align 8
  %varargslots919 = alloca [1 x %any], align 16
  %indirectarg921 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %taddr926 = alloca i64, align 8
  %indirectarg927 = alloca %"char[]", align 8
  %indirectarg928 = alloca %"char[]", align 8
  %indirectarg929 = alloca %"char[]", align 8
  %varargslots930 = alloca [2 x %any], align 16
  %indirectarg933 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr942 = alloca i64, align 8
  %indirectarg943 = alloca %"char[]", align 8
  %indirectarg944 = alloca %"char[]", align 8
  %indirectarg945 = alloca %"char[]", align 8
  %varargslots946 = alloca [1 x %any], align 16
  %indirectarg948 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %taddr953 = alloca i64, align 8
  %indirectarg954 = alloca %"char[]", align 8
  %indirectarg955 = alloca %"char[]", align 8
  %indirectarg956 = alloca %"char[]", align 8
  %varargslots957 = alloca [2 x %any], align 16
  %indirectarg960 = alloca %"any[]", align 8
  %indirectarg965 = alloca %"char[]", align 8
  %indirectarg966 = alloca %"char[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %taddr973 = alloca i64, align 8
  %indirectarg974 = alloca %"char[]", align 8
  %indirectarg975 = alloca %"char[]", align 8
  %indirectarg976 = alloca %"char[]", align 8
  %varargslots977 = alloca [1 x %any], align 16
  %indirectarg979 = alloca %"any[]", align 8
  %taddr983 = alloca i64, align 8
  %taddr984 = alloca i64, align 8
  %indirectarg985 = alloca %"char[]", align 8
  %indirectarg986 = alloca %"char[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %varargslots988 = alloca [2 x %any], align 16
  %indirectarg991 = alloca %"any[]", align 8
  %taddr997 = alloca i64, align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %varargslots1001 = alloca [1 x %any], align 16
  %indirectarg1003 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %taddr1008 = alloca i64, align 8
  %indirectarg1009 = alloca %"char[]", align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %varargslots1012 = alloca [2 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %indirectarg1020 = alloca %"char[]", align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1027 = alloca %"char[]", align 8
  %indirectarg1028 = alloca %"char[]", align 8
  %indirectarg1029 = alloca %"char[]", align 8
  %taddr1038 = alloca i64, align 8
  %indirectarg1039 = alloca %"char[]", align 8
  %indirectarg1040 = alloca %"char[]", align 8
  %indirectarg1041 = alloca %"char[]", align 8
  %varargslots1042 = alloca [1 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1048 = alloca i64, align 8
  %taddr1049 = alloca i64, align 8
  %indirectarg1050 = alloca %"char[]", align 8
  %indirectarg1051 = alloca %"char[]", align 8
  %indirectarg1052 = alloca %"char[]", align 8
  %varargslots1053 = alloca [2 x %any], align 16
  %indirectarg1056 = alloca %"any[]", align 8
  %taddr1075 = alloca i64, align 8
  %indirectarg1076 = alloca %"char[]", align 8
  %indirectarg1077 = alloca %"char[]", align 8
  %indirectarg1078 = alloca %"char[]", align 8
  %varargslots1079 = alloca [1 x %any], align 16
  %indirectarg1081 = alloca %"any[]", align 8
  %taddr1085 = alloca i64, align 8
  %taddr1086 = alloca i64, align 8
  %indirectarg1087 = alloca %"char[]", align 8
  %indirectarg1088 = alloca %"char[]", align 8
  %indirectarg1089 = alloca %"char[]", align 8
  %varargslots1090 = alloca [2 x %any], align 16
  %indirectarg1093 = alloca %"any[]", align 8
  %taddr1108 = alloca i64, align 8
  %indirectarg1109 = alloca %"char[]", align 8
  %indirectarg1110 = alloca %"char[]", align 8
  %indirectarg1111 = alloca %"char[]", align 8
  %varargslots1112 = alloca [1 x %any], align 16
  %indirectarg1114 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %taddr1119 = alloca i64, align 8
  %indirectarg1120 = alloca %"char[]", align 8
  %indirectarg1121 = alloca %"char[]", align 8
  %indirectarg1122 = alloca %"char[]", align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %carry1135 = alloca i32, align 4
  %tmp1140 = alloca i64, align 8
  %taddr1144 = alloca i64, align 8
  %indirectarg1145 = alloca %"char[]", align 8
  %indirectarg1146 = alloca %"char[]", align 8
  %indirectarg1147 = alloca %"char[]", align 8
  %varargslots1148 = alloca [1 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %taddr1154 = alloca i64, align 8
  %taddr1155 = alloca i64, align 8
  %indirectarg1156 = alloca %"char[]", align 8
  %indirectarg1157 = alloca %"char[]", align 8
  %indirectarg1158 = alloca %"char[]", align 8
  %varargslots1159 = alloca [2 x %any], align 16
  %indirectarg1162 = alloca %"any[]", align 8
  %taddr1175 = alloca i64, align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %indirectarg1178 = alloca %"char[]", align 8
  %varargslots1179 = alloca [1 x %any], align 16
  %indirectarg1181 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %taddr1186 = alloca i64, align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %indirectarg1189 = alloca %"char[]", align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1202 = alloca i64, align 8
  %indirectarg1203 = alloca %"char[]", align 8
  %indirectarg1204 = alloca %"char[]", align 8
  %indirectarg1205 = alloca %"char[]", align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %indirectarg1214 = alloca %"char[]", align 8
  %indirectarg1215 = alloca %"char[]", align 8
  %indirectarg1216 = alloca %"char[]", align 8
  %varargslots1217 = alloca [2 x %any], align 16
  %indirectarg1220 = alloca %"any[]", align 8
  %taddr1236 = alloca i64, align 8
  %indirectarg1237 = alloca %"char[]", align 8
  %indirectarg1238 = alloca %"char[]", align 8
  %indirectarg1239 = alloca %"char[]", align 8
  %varargslots1240 = alloca [1 x %any], align 16
  %indirectarg1242 = alloca %"any[]", align 8
  %taddr1246 = alloca i64, align 8
  %taddr1247 = alloca i64, align 8
  %indirectarg1248 = alloca %"char[]", align 8
  %indirectarg1249 = alloca %"char[]", align 8
  %indirectarg1250 = alloca %"char[]", align 8
  %varargslots1251 = alloca [2 x %any], align 16
  %indirectarg1254 = alloca %"any[]", align 8
  %taddr1282 = alloca i64, align 8
  %indirectarg1283 = alloca %"char[]", align 8
  %indirectarg1284 = alloca %"char[]", align 8
  %indirectarg1285 = alloca %"char[]", align 8
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1292 = alloca i64, align 8
  %taddr1293 = alloca i64, align 8
  %indirectarg1294 = alloca %"char[]", align 8
  %indirectarg1295 = alloca %"char[]", align 8
  %indirectarg1296 = alloca %"char[]", align 8
  %varargslots1297 = alloca [2 x %any], align 16
  %indirectarg1300 = alloca %"any[]", align 8
  %taddr1306 = alloca i64, align 8
  %indirectarg1307 = alloca %"char[]", align 8
  %indirectarg1308 = alloca %"char[]", align 8
  %indirectarg1309 = alloca %"char[]", align 8
  %varargslots1310 = alloca [1 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1316 = alloca i64, align 8
  %taddr1317 = alloca i64, align 8
  %indirectarg1318 = alloca %"char[]", align 8
  %indirectarg1319 = alloca %"char[]", align 8
  %indirectarg1320 = alloca %"char[]", align 8
  %varargslots1321 = alloca [2 x %any], align 16
  %indirectarg1324 = alloca %"any[]", align 8
  %taddr1332 = alloca i64, align 8
  %indirectarg1333 = alloca %"char[]", align 8
  %indirectarg1334 = alloca %"char[]", align 8
  %indirectarg1335 = alloca %"char[]", align 8
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1342 = alloca i64, align 8
  %taddr1343 = alloca i64, align 8
  %indirectarg1344 = alloca %"char[]", align 8
  %indirectarg1345 = alloca %"char[]", align 8
  %indirectarg1346 = alloca %"char[]", align 8
  %varargslots1347 = alloca [2 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %carry1356 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1367 = alloca i64, align 8
  %indirectarg1368 = alloca %"char[]", align 8
  %indirectarg1369 = alloca %"char[]", align 8
  %indirectarg1370 = alloca %"char[]", align 8
  %varargslots1371 = alloca [1 x %any], align 16
  %indirectarg1373 = alloca %"any[]", align 8
  %taddr1377 = alloca i64, align 8
  %taddr1378 = alloca i64, align 8
  %indirectarg1379 = alloca %"char[]", align 8
  %indirectarg1380 = alloca %"char[]", align 8
  %indirectarg1381 = alloca %"char[]", align 8
  %varargslots1382 = alloca [2 x %any], align 16
  %indirectarg1385 = alloca %"any[]", align 8
  %taddr1391 = alloca i64, align 8
  %indirectarg1392 = alloca %"char[]", align 8
  %indirectarg1393 = alloca %"char[]", align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %indirectarg1403 = alloca %"char[]", align 8
  %indirectarg1404 = alloca %"char[]", align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %varargslots1406 = alloca [2 x %any], align 16
  %indirectarg1409 = alloca %"any[]", align 8
  %taddr1422 = alloca i64, align 8
  %indirectarg1423 = alloca %"char[]", align 8
  %indirectarg1424 = alloca %"char[]", align 8
  %indirectarg1425 = alloca %"char[]", align 8
  %varargslots1426 = alloca [1 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %taddr1432 = alloca i64, align 8
  %taddr1433 = alloca i64, align 8
  %indirectarg1434 = alloca %"char[]", align 8
  %indirectarg1435 = alloca %"char[]", align 8
  %indirectarg1436 = alloca %"char[]", align 8
  %varargslots1437 = alloca [2 x %any], align 16
  %indirectarg1440 = alloca %"any[]", align 8
  %taddr1446 = alloca i64, align 8
  %indirectarg1447 = alloca %"char[]", align 8
  %indirectarg1448 = alloca %"char[]", align 8
  %indirectarg1449 = alloca %"char[]", align 8
  %varargslots1450 = alloca [1 x %any], align 16
  %indirectarg1452 = alloca %"any[]", align 8
  %taddr1456 = alloca i64, align 8
  %taddr1457 = alloca i64, align 8
  %indirectarg1458 = alloca %"char[]", align 8
  %indirectarg1459 = alloca %"char[]", align 8
  %indirectarg1460 = alloca %"char[]", align 8
  %varargslots1461 = alloca [2 x %any], align 16
  %indirectarg1464 = alloca %"any[]", align 8
  %tmp1486 = alloca i32, align 4
  %taddr1490 = alloca i64, align 8
  %indirectarg1491 = alloca %"char[]", align 8
  %indirectarg1492 = alloca %"char[]", align 8
  %indirectarg1493 = alloca %"char[]", align 8
  %varargslots1494 = alloca [1 x %any], align 16
  %indirectarg1496 = alloca %"any[]", align 8
  %taddr1500 = alloca i64, align 8
  %taddr1501 = alloca i64, align 8
  %indirectarg1502 = alloca %"char[]", align 8
  %indirectarg1503 = alloca %"char[]", align 8
  %indirectarg1504 = alloca %"char[]", align 8
  %varargslots1505 = alloca [2 x %any], align 16
  %indirectarg1508 = alloca %"any[]", align 8
  %taddr1512 = alloca i32, align 4
  %indirectarg1513 = alloca %"char[]", align 8
  %indirectarg1514 = alloca %"char[]", align 8
  %indirectarg1515 = alloca %"char[]", align 8
  %varargslots1516 = alloca [1 x %any], align 16
  %indirectarg1518 = alloca %"any[]", align 8
  %taddr1522 = alloca i32, align 4
  %indirectarg1523 = alloca %"char[]", align 8
  %indirectarg1524 = alloca %"char[]", align 8
  %indirectarg1525 = alloca %"char[]", align 8
  %varargslots1526 = alloca [1 x %any], align 16
  %indirectarg1528 = alloca %"any[]", align 8
  %taddr1536 = alloca i64, align 8
  %indirectarg1537 = alloca %"char[]", align 8
  %indirectarg1538 = alloca %"char[]", align 8
  %indirectarg1539 = alloca %"char[]", align 8
  %varargslots1540 = alloca [1 x %any], align 16
  %indirectarg1542 = alloca %"any[]", align 8
  %taddr1546 = alloca i64, align 8
  %taddr1547 = alloca i64, align 8
  %indirectarg1548 = alloca %"char[]", align 8
  %indirectarg1549 = alloca %"char[]", align 8
  %indirectarg1550 = alloca %"char[]", align 8
  %varargslots1551 = alloca [2 x %any], align 16
  %indirectarg1554 = alloca %"any[]", align 8
  %taddr1560 = alloca i64, align 8
  %indirectarg1561 = alloca %"char[]", align 8
  %indirectarg1562 = alloca %"char[]", align 8
  %indirectarg1563 = alloca %"char[]", align 8
  %varargslots1564 = alloca [1 x %any], align 16
  %indirectarg1566 = alloca %"any[]", align 8
  %taddr1570 = alloca i64, align 8
  %taddr1571 = alloca i64, align 8
  %indirectarg1572 = alloca %"char[]", align 8
  %indirectarg1573 = alloca %"char[]", align 8
  %indirectarg1574 = alloca %"char[]", align 8
  %varargslots1575 = alloca [2 x %any], align 16
  %indirectarg1578 = alloca %"any[]", align 8
  %taddr1583 = alloca i32, align 4
  %indirectarg1584 = alloca %"char[]", align 8
  %indirectarg1585 = alloca %"char[]", align 8
  %indirectarg1586 = alloca %"char[]", align 8
  %varargslots1587 = alloca [1 x %any], align 16
  %indirectarg1589 = alloca %"any[]", align 8
  %taddr1595 = alloca i32, align 4
  %indirectarg1596 = alloca %"char[]", align 8
  %indirectarg1597 = alloca %"char[]", align 8
  %indirectarg1598 = alloca %"char[]", align 8
  %varargslots1599 = alloca [1 x %any], align 16
  %indirectarg1601 = alloca %"any[]", align 8
  %taddr1605 = alloca i32, align 4
  %indirectarg1606 = alloca %"char[]", align 8
  %indirectarg1607 = alloca %"char[]", align 8
  %indirectarg1608 = alloca %"char[]", align 8
  %varargslots1609 = alloca [1 x %any], align 16
  %indirectarg1611 = alloca %"any[]", align 8
  %taddr1619 = alloca i64, align 8
  %indirectarg1620 = alloca %"char[]", align 8
  %indirectarg1621 = alloca %"char[]", align 8
  %indirectarg1622 = alloca %"char[]", align 8
  %varargslots1623 = alloca [1 x %any], align 16
  %indirectarg1625 = alloca %"any[]", align 8
  %taddr1629 = alloca i64, align 8
  %taddr1630 = alloca i64, align 8
  %indirectarg1631 = alloca %"char[]", align 8
  %indirectarg1632 = alloca %"char[]", align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %varargslots1634 = alloca [2 x %any], align 16
  %indirectarg1637 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %taddr1690 = alloca i64, align 8
  %indirectarg1691 = alloca %"char[]", align 8
  %indirectarg1692 = alloca %"char[]", align 8
  %indirectarg1693 = alloca %"char[]", align 8
  %varargslots1694 = alloca [1 x %any], align 16
  %indirectarg1696 = alloca %"any[]", align 8
  %taddr1700 = alloca i64, align 8
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [2 x %any], align 16
  %indirectarg1708 = alloca %"any[]", align 8
  %y1715 = alloca double, align 8
  %i1716 = alloca i32, align 4
  %taddr1730 = alloca i64, align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %indirectarg1733 = alloca %"char[]", align 8
  %varargslots1734 = alloca [1 x %any], align 16
  %indirectarg1736 = alloca %"any[]", align 8
  %taddr1740 = alloca i64, align 8
  %taddr1741 = alloca i64, align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %indirectarg1744 = alloca %"char[]", align 8
  %varargslots1745 = alloca [2 x %any], align 16
  %indirectarg1748 = alloca %"any[]", align 8
  %taddr1758 = alloca i64, align 8
  %indirectarg1759 = alloca %"char[]", align 8
  %indirectarg1760 = alloca %"char[]", align 8
  %indirectarg1761 = alloca %"char[]", align 8
  %varargslots1762 = alloca [1 x %any], align 16
  %indirectarg1764 = alloca %"any[]", align 8
  %taddr1768 = alloca i64, align 8
  %taddr1769 = alloca i64, align 8
  %indirectarg1770 = alloca %"char[]", align 8
  %indirectarg1771 = alloca %"char[]", align 8
  %indirectarg1772 = alloca %"char[]", align 8
  %varargslots1773 = alloca [2 x %any], align 16
  %indirectarg1776 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1785 = alloca i32, align 4
  %bias1798 = alloca double, align 8
  %frac = alloca double, align 8
  %x1801 = alloca double, align 8
  %n1804 = alloca i32, align 4
  %mag1805 = alloca double, align 8
  %sgn1806 = alloca double, align 8
  %x1807 = alloca double, align 8
  %y1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %n1811 = alloca i32, align 4
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1830 = alloca i64, align 8
  %indirectarg1831 = alloca %"char[]", align 8
  %indirectarg1832 = alloca %"char[]", align 8
  %indirectarg1833 = alloca %"char[]", align 8
  %varargslots1834 = alloca [1 x %any], align 16
  %indirectarg1836 = alloca %"any[]", align 8
  %taddr1840 = alloca i64, align 8
  %taddr1841 = alloca i64, align 8
  %indirectarg1842 = alloca %"char[]", align 8
  %indirectarg1843 = alloca %"char[]", align 8
  %indirectarg1844 = alloca %"char[]", align 8
  %varargslots1845 = alloca [2 x %any], align 16
  %indirectarg1848 = alloca %"any[]", align 8
  %switch1851 = alloca i8, align 1
  %x1913 = alloca double, align 8
  %x1941 = alloca double, align 8
  %n1942 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3094, metadata !DIExpression()), !dbg !3095
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !3096, metadata !DIExpression()), !dbg !3098
  store i32 1, ptr %sign, align 4, !dbg !3100
  br label %loop.cond, !dbg !3101

loop.cond:                                        ; preds = %checkok17, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3102
  %2 = load i64, ptr %ptradd, align 8, !dbg !3102
  %intbool = icmp ne i64 %2, 0, !dbg !3102
  br i1 %intbool, label %and.rhs, label %and.phi, !dbg !3102

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3104
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3104
  %4 = load ptr, ptr %chars, align 8, !dbg !3104
  %ge = icmp sge i64 0, %3, !dbg !3105
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3105
  br i1 %5, label %panic, label %checkok, !dbg !3105

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !3105
  %eq = icmp eq i8 %6, 32, !dbg !3104
  br label %and.phi, !dbg !3104

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !3104
  br i1 %val, label %loop.body, label %loop.exit, !dbg !3104

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !3106
  %8 = extractvalue %"char[]" %7, 0, !dbg !3106
  %9 = extractvalue %"char[]" %7, 1, !dbg !3107
  %gt = icmp sgt i64 1, %9, !dbg !3107
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3107
  br i1 %10, label %panic7, label %checkok17, !dbg !3107

checkok17:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !3106
  %ptradd18 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !3106
  %11 = insertvalue %"char[]" undef, ptr %ptradd18, 0, !dbg !3106
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !3106
  store %"char[]" %12, ptr %chars, align 8, !dbg !3106
  br label %loop.cond, !dbg !3106

loop.exit:                                        ; preds = %and.phi
  %ptradd19 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3108
  %13 = load i64, ptr %ptradd19, align 8, !dbg !3108
  %not = icmp eq i64 %13, 0, !dbg !3108
  br i1 %not, label %if.then, label %if.exit, !dbg !3108

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3109
  br label %err_retblock, !dbg !3109

if.exit:                                          ; preds = %loop.exit
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3110
  %14 = load i64, ptr %ptradd20, align 8, !dbg !3110
  %15 = load ptr, ptr %chars, align 8, !dbg !3110
  %ge21 = icmp sge i64 0, %14, !dbg !3112
  %16 = call i1 @llvm.expect.i1(i1 %ge21, i1 false), !dbg !3112
  br i1 %16, label %panic22, label %checkok32, !dbg !3112

checkok32:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok32
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case33
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !3113
  br label %switch.case33, !dbg !3115

switch.case33:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !3116
  %20 = extractvalue %"char[]" %19, 0, !dbg !3116
  %21 = extractvalue %"char[]" %19, 1, !dbg !3118
  %gt34 = icmp sgt i64 1, %21, !dbg !3118
  %22 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !3118
  br i1 %22, label %panic35, label %checkok45, !dbg !3118

checkok45:                                        ; preds = %switch.case33
  %size46 = sub i64 %21, 1, !dbg !3116
  %ptradd47 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !3116
  %23 = insertvalue %"char[]" undef, ptr %ptradd47, 0, !dbg !3116
  %24 = insertvalue %"char[]" %23, i64 %size46, 1, !dbg !3116
  store %"char[]" %24, ptr %chars, align 8, !dbg !3116
  br label %switch.exit, !dbg !3116

switch.exit:                                      ; preds = %checkok45, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !3119
  %26 = extractvalue %"char[]" %25, 1, !dbg !3119
  %27 = extractvalue %"char[]" %25, 0, !dbg !3119
  %eq48 = icmp eq i64 %26, 8, !dbg !3119
  br i1 %eq48, label %slice_cmp_values, label %slice_cmp_exit, !dbg !3119

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd49 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd50 = getelementptr inbounds i8, ptr @.str.86, i64 %28
  %29 = load i8, ptr %ptradd49, align 1
  %30 = load i8, ptr %ptradd50, align 1
  %eq51 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq51, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !3120
  %33 = extractvalue %"char[]" %32, 1, !dbg !3120
  %34 = extractvalue %"char[]" %32, 0, !dbg !3120
  %eq52 = icmp eq i64 %33, 8, !dbg !3120
  br i1 %eq52, label %slice_cmp_values53, label %slice_cmp_exit61, !dbg !3120

slice_cmp_values53:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx54, align 8
  br label %slice_loop_start55

slice_loop_start55:                               ; preds = %slice_loop_comparison57, %slice_cmp_values53
  %35 = load i64, ptr %cmp.idx54, align 8
  %lt56 = icmp slt i64 %35, %33
  br i1 %lt56, label %slice_loop_comparison57, label %slice_cmp_exit61

slice_loop_comparison57:                          ; preds = %slice_loop_start55
  %ptradd58 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd59 = getelementptr inbounds i8, ptr @.str.87, i64 %35
  %36 = load i8, ptr %ptradd58, align 1
  %37 = load i8, ptr %ptradd59, align 1
  %eq60 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx54, align 8
  br i1 %eq60, label %slice_loop_start55, label %slice_cmp_exit61

slice_cmp_exit61:                                 ; preds = %slice_loop_comparison57, %slice_loop_start55, %or.rhs
  %slice_cmp_phi62 = phi i1 [ true, %slice_loop_start55 ], [ false, %or.rhs ], [ false, %slice_loop_comparison57 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit61, %slice_cmp_exit
  %val63 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi62, %slice_cmp_exit61 ]
  br i1 %val63, label %if.then64, label %if.exit65

if.then64:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !3121
  %sifp = sitofp i32 %39 to float, !dbg !3121
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !3121
  store float %fmul, ptr %blockret, align 4, !dbg !3121
  br label %expr_block.exit1946, !dbg !3121

if.exit65:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !3122
  %41 = extractvalue %"char[]" %40, 1, !dbg !3122
  %42 = extractvalue %"char[]" %40, 0, !dbg !3122
  %eq66 = icmp eq i64 %41, 3, !dbg !3122
  br i1 %eq66, label %slice_cmp_values67, label %slice_cmp_exit75, !dbg !3122

slice_cmp_values67:                               ; preds = %if.exit65
  store i64 0, ptr %cmp.idx68, align 8
  br label %slice_loop_start69

slice_loop_start69:                               ; preds = %slice_loop_comparison71, %slice_cmp_values67
  %43 = load i64, ptr %cmp.idx68, align 8
  %lt70 = icmp slt i64 %43, %41
  br i1 %lt70, label %slice_loop_comparison71, label %slice_cmp_exit75

slice_loop_comparison71:                          ; preds = %slice_loop_start69
  %ptradd72 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd73 = getelementptr inbounds i8, ptr @.str.88, i64 %43
  %44 = load i8, ptr %ptradd72, align 1
  %45 = load i8, ptr %ptradd73, align 1
  %eq74 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx68, align 8
  br i1 %eq74, label %slice_loop_start69, label %slice_cmp_exit75

slice_cmp_exit75:                                 ; preds = %slice_loop_comparison71, %slice_loop_start69, %if.exit65
  %slice_cmp_phi76 = phi i1 [ true, %slice_loop_start69 ], [ false, %if.exit65 ], [ false, %slice_loop_comparison71 ]
  br i1 %slice_cmp_phi76, label %or.phi89, label %or.rhs77

or.rhs77:                                         ; preds = %slice_cmp_exit75
  %47 = load %"char[]", ptr %chars, align 8, !dbg !3123
  %48 = extractvalue %"char[]" %47, 1, !dbg !3123
  %49 = extractvalue %"char[]" %47, 0, !dbg !3123
  %eq78 = icmp eq i64 %48, 3, !dbg !3123
  br i1 %eq78, label %slice_cmp_values79, label %slice_cmp_exit87, !dbg !3123

slice_cmp_values79:                               ; preds = %or.rhs77
  store i64 0, ptr %cmp.idx80, align 8
  br label %slice_loop_start81

slice_loop_start81:                               ; preds = %slice_loop_comparison83, %slice_cmp_values79
  %50 = load i64, ptr %cmp.idx80, align 8
  %lt82 = icmp slt i64 %50, %48
  br i1 %lt82, label %slice_loop_comparison83, label %slice_cmp_exit87

slice_loop_comparison83:                          ; preds = %slice_loop_start81
  %ptradd84 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd85 = getelementptr inbounds i8, ptr @.str.89, i64 %50
  %51 = load i8, ptr %ptradd84, align 1
  %52 = load i8, ptr %ptradd85, align 1
  %eq86 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx80, align 8
  br i1 %eq86, label %slice_loop_start81, label %slice_cmp_exit87

slice_cmp_exit87:                                 ; preds = %slice_loop_comparison83, %slice_loop_start81, %or.rhs77
  %slice_cmp_phi88 = phi i1 [ true, %slice_loop_start81 ], [ false, %or.rhs77 ], [ false, %slice_loop_comparison83 ]
  br label %or.phi89

or.phi89:                                         ; preds = %slice_cmp_exit87, %slice_cmp_exit75
  %val90 = phi i1 [ true, %slice_cmp_exit75 ], [ %slice_cmp_phi88, %slice_cmp_exit87 ]
  br i1 %val90, label %if.then91, label %if.exit92

if.then91:                                        ; preds = %or.phi89
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !3124
  br label %expr_block.exit1946, !dbg !3124

if.exit92:                                        ; preds = %or.phi89
  %ptradd93 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3125
  %54 = load i64, ptr %ptradd93, align 8, !dbg !3125
  %lt94 = icmp ult i64 2, %54, !dbg !3125
  br i1 %lt94, label %and.rhs95, label %and.phi110, !dbg !3125

and.rhs95:                                        ; preds = %if.exit92
  %ptradd96 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3126
  %55 = load i64, ptr %ptradd96, align 8, !dbg !3126
  %56 = load ptr, ptr %chars, align 8, !dbg !3126
  %ge97 = icmp sge i64 0, %55, !dbg !3127
  %57 = call i1 @llvm.expect.i1(i1 %ge97, i1 false), !dbg !3127
  br i1 %57, label %panic98, label %checkok108, !dbg !3127

checkok108:                                       ; preds = %and.rhs95
  %58 = load i8, ptr %56, align 1, !dbg !3127
  %eq109 = icmp eq i8 %58, 48, !dbg !3126
  br label %and.phi110, !dbg !3126

and.phi110:                                       ; preds = %checkok108, %if.exit92
  %val111 = phi i1 [ false, %if.exit92 ], [ %eq109, %checkok108 ], !dbg !3126
  br i1 %val111, label %and.rhs112, label %and.phi128, !dbg !3126

and.rhs112:                                       ; preds = %and.phi110
  %ptradd113 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3128
  %59 = load i64, ptr %ptradd113, align 8, !dbg !3128
  %60 = load ptr, ptr %chars, align 8, !dbg !3128
  %ge114 = icmp sge i64 1, %59, !dbg !3129
  %61 = call i1 @llvm.expect.i1(i1 %ge114, i1 false), !dbg !3129
  br i1 %61, label %panic115, label %checkok125, !dbg !3129

checkok125:                                       ; preds = %and.rhs112
  %ptradd126 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !3129
  %62 = load i8, ptr %ptradd126, align 1, !dbg !3129
  %zext = zext i8 %62 to i32, !dbg !3129
  %or = or i32 %zext, 32, !dbg !3128
  %eq127 = icmp eq i32 %or, 120, !dbg !3128
  %check = icmp sge i32 %or, 0, !dbg !3128
  %siui-eq = and i1 %check, %eq127, !dbg !3128
  br label %and.phi128, !dbg !3128

and.phi128:                                       ; preds = %checkok125, %and.phi110
  %val129 = phi i1 [ false, %and.phi110 ], [ %siui-eq, %checkok125 ], !dbg !3128
  br i1 %val129, label %if.then130, label %if.exit418, !dbg !3128

if.then130:                                       ; preds = %and.phi128
  %63 = load %"char[]", ptr %chars, align 8, !dbg !3130
  %64 = extractvalue %"char[]" %63, 0, !dbg !3130
  %65 = extractvalue %"char[]" %63, 1, !dbg !3132
  %gt131 = icmp sgt i64 2, %65, !dbg !3132
  %66 = call i1 @llvm.expect.i1(i1 %gt131, i1 false), !dbg !3132
  br i1 %66, label %panic132, label %checkok142, !dbg !3132

checkok142:                                       ; preds = %if.then130
  %size143 = sub i64 %65, 2, !dbg !3133
  %ptradd144 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !3133
  %67 = insertvalue %"char[]" undef, ptr %ptradd144, 0, !dbg !3133
  %68 = insertvalue %"char[]" %67, i64 %size143, 1, !dbg !3133
  store %"char[]" %68, ptr %chars145, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign146, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !3134, metadata !DIExpression()), !dbg !3136
  store double 1.000000e+00, ptr %scale, align 8, !dbg !3138
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3139, metadata !DIExpression()), !dbg !3140
  store i32 0, ptr %x, align 4, !dbg !3140
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !3141, metadata !DIExpression()), !dbg !3142
  store i64 0, ptr %rp, align 8, !dbg !3142
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !3143, metadata !DIExpression()), !dbg !3144
  store i64 0, ptr %dc, align 8, !dbg !3144
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3145, metadata !DIExpression()), !dbg !3146
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !3147, metadata !DIExpression()), !dbg !3148
  store i8 0, ptr %got_rad, align 1, !dbg !3148
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !3149, metadata !DIExpression()), !dbg !3150
  store i8 0, ptr %got_digit, align 1, !dbg !3150
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !3151, metadata !DIExpression()), !dbg !3152
  store i8 0, ptr %got_tail, align 1, !dbg !3152
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3153, metadata !DIExpression()), !dbg !3154
  %ptradd148 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !3155
  %70 = load i64, ptr %ptradd148, align 8, !dbg !3155
  store i64 %70, ptr %len, align 8, !dbg !3155
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !3156, metadata !DIExpression()), !dbg !3157
  %71 = load i64, ptr %len, align 8, !dbg !3158
  %sub = sub i64 %71, 1, !dbg !3158
  store i64 %sub, ptr %last_char, align 8, !dbg !3158
  call void @llvm.dbg.declare(metadata ptr %index, metadata !3159, metadata !DIExpression()), !dbg !3160
  store i64 0, ptr %index, align 8, !dbg !3160
  call void @llvm.dbg.declare(metadata ptr %y, metadata !3161, metadata !DIExpression()), !dbg !3162
  store double 0.000000e+00, ptr %y, align 8, !dbg !3162
  br label %loop.cond149, !dbg !3163

loop.cond149:                                     ; preds = %if.exit168, %checkok142
  %ptradd150 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !3164
  %72 = load i64, ptr %ptradd150, align 8, !dbg !3164
  %73 = load ptr, ptr %chars145, align 8, !dbg !3164
  %74 = load i64, ptr %index, align 8, !dbg !3166
  %ge151 = icmp uge i64 %74, %72, !dbg !3166
  %75 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !3166
  br i1 %75, label %panic152, label %checkok162, !dbg !3166

checkok162:                                       ; preds = %loop.cond149
  %ptradd163 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !3166
  %76 = load i8, ptr %ptradd163, align 1, !dbg !3166
  store i8 %76, ptr %c, align 1, !dbg !3166
  %eq164 = icmp eq i8 %76, 48, !dbg !3167
  br i1 %eq164, label %loop.body165, label %loop.exit169, !dbg !3167

loop.body165:                                     ; preds = %checkok162
  %77 = load i64, ptr %index, align 8, !dbg !3168
  %78 = load i64, ptr %last_char, align 8, !dbg !3170
  %eq166 = icmp eq i64 %77, %78, !dbg !3168
  br i1 %eq166, label %if.then167, label %if.exit168, !dbg !3168

if.then167:                                       ; preds = %loop.body165
  store double 0.000000e+00, ptr %blockret147, align 8, !dbg !3171
  br label %expr_block.exit417, !dbg !3171

if.exit168:                                       ; preds = %loop.body165
  %79 = load i64, ptr %index, align 8, !dbg !3172
  %add = add i64 %79, 1, !dbg !3172
  store i64 %add, ptr %index, align 8, !dbg !3172
  br label %loop.cond149, !dbg !3172

loop.exit169:                                     ; preds = %checkok162
  %80 = load i8, ptr %c, align 1, !dbg !3173
  %eq170 = icmp eq i8 %80, 46, !dbg !3173
  br i1 %eq170, label %if.then171, label %if.exit226, !dbg !3173

if.then171:                                       ; preds = %loop.exit169
  store i8 1, ptr %got_rad, align 1, !dbg !3174
  %81 = load i64, ptr %index, align 8, !dbg !3176
  %82 = load i64, ptr %last_char, align 8, !dbg !3177
  %eq172 = icmp eq i64 %81, %82, !dbg !3176
  br i1 %eq172, label %if.then173, label %if.exit179, !dbg !3176

if.then173:                                       ; preds = %if.then171
  %83 = load i8, ptr %got_digit, align 1, !dbg !3178
  %84 = trunc i8 %83 to i1, !dbg !3178
  %not174 = xor i1 %84, true, !dbg !3178
  br i1 %not174, label %if.then175, label %if.exit176, !dbg !3178

if.then175:                                       ; preds = %if.then173
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3180
  br label %err_retblock, !dbg !3180

if.exit176:                                       ; preds = %if.then173
  %85 = load i32, ptr %sign146, align 4, !dbg !3181
  %sifp177 = sitofp i32 %85 to double, !dbg !3181
  %fmul178 = fmul double %sifp177, 0.000000e+00, !dbg !3181
  store double %fmul178, ptr %blockret147, align 8, !dbg !3181
  br label %expr_block.exit417, !dbg !3181

if.exit179:                                       ; preds = %if.then171
  %86 = load i64, ptr %index, align 8, !dbg !3182
  %87 = load i64, ptr %last_char, align 8, !dbg !3183
  %neq = icmp ne i64 %86, %87, !dbg !3182
  br i1 %neq, label %and.rhs180, label %and.phi197, !dbg !3182

and.rhs180:                                       ; preds = %if.exit179
  %ptradd181 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !3184
  %88 = load i64, ptr %ptradd181, align 8, !dbg !3184
  %89 = load ptr, ptr %chars145, align 8, !dbg !3184
  %90 = load i64, ptr %index, align 8, !dbg !3185
  %add182 = add i64 %90, 1, !dbg !3185
  store i64 %add182, ptr %index, align 8, !dbg !3185
  %ge183 = icmp uge i64 %add182, %88, !dbg !3185
  %91 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !3185
  br i1 %91, label %panic184, label %checkok194, !dbg !3185

checkok194:                                       ; preds = %and.rhs180
  %ptradd195 = getelementptr inbounds i8, ptr %89, i64 %add182, !dbg !3186
  %92 = load i8, ptr %ptradd195, align 1, !dbg !3186
  store i8 %92, ptr %c, align 1, !dbg !3186
  %eq196 = icmp eq i8 %92, 48, !dbg !3187
  br label %and.phi197, !dbg !3187

and.phi197:                                       ; preds = %checkok194, %if.exit179
  %val198 = phi i1 [ false, %if.exit179 ], [ %eq196, %checkok194 ], !dbg !3187
  br i1 %val198, label %if.then199, label %if.exit225, !dbg !3187

if.then199:                                       ; preds = %and.phi197
  %93 = load i64, ptr %rp, align 8, !dbg !3188
  %sub200 = sub i64 %93, 1, !dbg !3188
  store i64 %sub200, ptr %rp, align 8, !dbg !3188
  store i8 1, ptr %got_digit, align 1, !dbg !3190
  br label %loop.cond201, !dbg !3191

loop.cond201:                                     ; preds = %loop.body222, %if.then199
  %94 = load i64, ptr %last_char, align 8, !dbg !3192
  %95 = load i64, ptr %index, align 8, !dbg !3194
  %neq202 = icmp ne i64 %94, %95, !dbg !3192
  br i1 %neq202, label %and.rhs203, label %and.phi220, !dbg !3192

and.rhs203:                                       ; preds = %loop.cond201
  %ptradd204 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !3195
  %96 = load i64, ptr %ptradd204, align 8, !dbg !3195
  %97 = load ptr, ptr %chars145, align 8, !dbg !3195
  %98 = load i64, ptr %index, align 8, !dbg !3196
  %add205 = add i64 %98, 1, !dbg !3196
  store i64 %add205, ptr %index, align 8, !dbg !3196
  %ge206 = icmp uge i64 %add205, %96, !dbg !3196
  %99 = call i1 @llvm.expect.i1(i1 %ge206, i1 false), !dbg !3196
  br i1 %99, label %panic207, label %checkok217, !dbg !3196

checkok217:                                       ; preds = %and.rhs203
  %ptradd218 = getelementptr inbounds i8, ptr %97, i64 %add205, !dbg !3197
  %100 = load i8, ptr %ptradd218, align 1, !dbg !3197
  store i8 %100, ptr %c, align 1, !dbg !3197
  %eq219 = icmp eq i8 %100, 48, !dbg !3198
  br label %and.phi220, !dbg !3198

and.phi220:                                       ; preds = %checkok217, %loop.cond201
  %val221 = phi i1 [ false, %loop.cond201 ], [ %eq219, %checkok217 ], !dbg !3198
  br i1 %val221, label %loop.body222, label %loop.exit224, !dbg !3198

loop.body222:                                     ; preds = %and.phi220
  %101 = load i64, ptr %rp, align 8, !dbg !3199
  %sub223 = sub i64 %101, 1, !dbg !3199
  store i64 %sub223, ptr %rp, align 8, !dbg !3199
  br label %loop.cond201, !dbg !3199

loop.exit224:                                     ; preds = %and.phi220
  br label %if.exit225, !dbg !3199

if.exit225:                                       ; preds = %loop.exit224, %and.phi197
  br label %if.exit226, !dbg !3199

if.exit226:                                       ; preds = %if.exit225, %loop.exit169
  br label %loop.cond227, !dbg !3201

loop.cond227:                                     ; preds = %checkok298, %if.exit226
  %102 = load i8, ptr %c, align 1, !dbg !3202
  %zext228 = zext i8 %102 to i32, !dbg !3202
  %sub229 = sub i32 %zext228, 48, !dbg !3202
  %lt230 = icmp ult i32 %sub229, 10, !dbg !3202
  br i1 %lt230, label %or.phi236, label %or.rhs231, !dbg !3202

or.rhs231:                                        ; preds = %loop.cond227
  %103 = load i8, ptr %c, align 1, !dbg !3204
  %zext232 = zext i8 %103 to i32, !dbg !3204
  %or233 = or i32 %zext232, 32, !dbg !3204
  %sub234 = sub i32 %or233, 97, !dbg !3204
  %lt235 = icmp slt i32 %sub234, 6, !dbg !3204
  %siui-lt = or i1 false, %lt235, !dbg !3204
  br label %or.phi236, !dbg !3204

or.phi236:                                        ; preds = %or.rhs231, %loop.cond227
  %val237 = phi i1 [ true, %loop.cond227 ], [ %siui-lt, %or.rhs231 ], !dbg !3204
  br i1 %val237, label %or.phi240, label %or.rhs238, !dbg !3204

or.rhs238:                                        ; preds = %or.phi236
  %104 = load i8, ptr %c, align 1, !dbg !3205
  %eq239 = icmp eq i8 %104, 46, !dbg !3205
  br label %or.phi240, !dbg !3205

or.phi240:                                        ; preds = %or.rhs238, %or.phi236
  %val241 = phi i1 [ true, %or.phi236 ], [ %eq239, %or.rhs238 ], !dbg !3205
  br i1 %val241, label %loop.body242, label %loop.exit300, !dbg !3205

loop.body242:                                     ; preds = %or.phi240
  %105 = load i8, ptr %c, align 1, !dbg !3206
  %eq243 = icmp eq i8 %105, 46, !dbg !3206
  br i1 %eq243, label %if.then244, label %if.else, !dbg !3206

if.then244:                                       ; preds = %loop.body242
  %106 = load i8, ptr %got_rad, align 1, !dbg !3208
  %107 = trunc i8 %106 to i1, !dbg !3208
  br i1 %107, label %if.then245, label %if.exit246, !dbg !3208

if.then245:                                       ; preds = %if.then244
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3210
  br label %err_retblock, !dbg !3210

if.exit246:                                       ; preds = %if.then244
  store i8 1, ptr %got_rad, align 1, !dbg !3211
  %108 = load i64, ptr %dc, align 8, !dbg !3212
  store i64 %108, ptr %rp, align 8, !dbg !3212
  br label %if.exit281, !dbg !3212

if.else:                                          ; preds = %loop.body242
  store i8 1, ptr %got_digit, align 1, !dbg !3213
  call void @llvm.dbg.declare(metadata ptr %d, metadata !3215, metadata !DIExpression()), !dbg !3216
  %109 = load i8, ptr %c, align 1, !dbg !3217
  %gt248 = icmp ugt i8 %109, 57, !dbg !3217
  br i1 %gt248, label %if.then249, label %if.exit254, !dbg !3217

if.then249:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !3219
  %zext250 = zext i8 %110 to i32, !dbg !3219
  %or251 = or i32 %zext250, 32, !dbg !3219
  %add252 = add i32 %or251, 10, !dbg !3219
  %sub253 = sub i32 %add252, 97, !dbg !3219
  store i32 %sub253, ptr %blockret247, align 4, !dbg !3219
  br label %expr_block.exit, !dbg !3219

if.exit254:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !3220
  %zext255 = zext i8 %111 to i32, !dbg !3220
  %sub256 = sub i32 %zext255, 48, !dbg !3220
  store i32 %sub256, ptr %blockret247, align 4, !dbg !3220
  br label %expr_block.exit, !dbg !3220

expr_block.exit:                                  ; preds = %if.exit254, %if.then249
  %112 = load i32, ptr %blockret247, align 4, !dbg !3220
  store i32 %112, ptr %d, align 4, !dbg !3220
  store i8 1, ptr %switch257, align 1
  br label %switch.entry258

switch.entry258:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch257, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !3221
  %lt259 = icmp slt i64 %115, 8, !dbg !3221
  %eq260 = icmp eq i1 %lt259, %114, !dbg !3221
  br i1 %eq260, label %switch.case261, label %next_if, !dbg !3221

switch.case261:                                   ; preds = %switch.entry258
  %116 = load i32, ptr %x, align 4, !dbg !3223
  %mul = mul i32 %116, 16, !dbg !3223
  %117 = load i32, ptr %d, align 4, !dbg !3225
  %add262 = add i32 %mul, %117, !dbg !3223
  store i32 %add262, ptr %x, align 4, !dbg !3223
  br label %switch.exit279, !dbg !3223

next_if:                                          ; preds = %switch.entry258
  %118 = load i64, ptr %dc, align 8, !dbg !3226
  %lt263 = icmp slt i64 %118, 14, !dbg !3226
  %eq264 = icmp eq i1 %lt263, %114, !dbg !3226
  br i1 %eq264, label %switch.case265, label %next_if268, !dbg !3226

switch.case265:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !3227
  %120 = load i32, ptr %d, align 4, !dbg !3229
  %sifp266 = sitofp i32 %120 to double, !dbg !3229
  %121 = load double, ptr %scale, align 8, !dbg !3230
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !3230
  store double %fdiv, ptr %scale, align 8, !dbg !3230
  %fmul267 = fmul double %sifp266, %fdiv, !dbg !3229
  %fadd = fadd double %119, %fmul267, !dbg !3227
  store double %fadd, ptr %y, align 8, !dbg !3227
  store i8 1, ptr %got_tail, align 1, !dbg !3231
  br label %switch.exit279, !dbg !3231

next_if268:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !3232
  %intbool269 = icmp ne i32 %122, 0, !dbg !3232
  br i1 %intbool269, label %and.rhs270, label %and.phi272, !dbg !3232

and.rhs270:                                       ; preds = %next_if268
  %123 = load i8, ptr %got_tail, align 1, !dbg !3233
  %124 = trunc i8 %123 to i1, !dbg !3233
  %not271 = xor i1 %124, true, !dbg !3233
  br label %and.phi272, !dbg !3233

and.phi272:                                       ; preds = %and.rhs270, %next_if268
  %val273 = phi i1 [ false, %next_if268 ], [ %not271, %and.rhs270 ], !dbg !3233
  %eq274 = icmp eq i1 %val273, %114, !dbg !3233
  br i1 %eq274, label %switch.case275, label %next_if278, !dbg !3233

switch.case275:                                   ; preds = %and.phi272
  %125 = load double, ptr %y, align 8, !dbg !3234
  %126 = load double, ptr %scale, align 8, !dbg !3236
  %fmul276 = fmul double 5.000000e-01, %126, !dbg !3237
  %fadd277 = fadd double %125, %fmul276, !dbg !3234
  store double %fadd277, ptr %y, align 8, !dbg !3234
  store i8 1, ptr %got_tail, align 1, !dbg !3238
  br label %switch.exit279, !dbg !3238

next_if278:                                       ; preds = %and.phi272
  br label %switch.exit279, !dbg !3238

switch.exit279:                                   ; preds = %next_if278, %switch.case275, %switch.case265, %switch.case261
  %127 = load i64, ptr %dc, align 8, !dbg !3239
  %add280 = add i64 %127, 1, !dbg !3239
  store i64 %add280, ptr %dc, align 8, !dbg !3239
  br label %if.exit281, !dbg !3239

if.exit281:                                       ; preds = %switch.exit279, %if.exit246
  %128 = load i64, ptr %index, align 8, !dbg !3240
  %129 = load i64, ptr %last_char, align 8, !dbg !3241
  %eq282 = icmp eq i64 %128, %129, !dbg !3240
  br i1 %eq282, label %if.then283, label %if.exit284, !dbg !3240

if.then283:                                       ; preds = %if.exit281
  br label %loop.exit300, !dbg !3242

if.exit284:                                       ; preds = %if.exit281
  %ptradd285 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !3243
  %130 = load i64, ptr %ptradd285, align 8, !dbg !3243
  %131 = load ptr, ptr %chars145, align 8, !dbg !3243
  %132 = load i64, ptr %index, align 8, !dbg !3244
  %add286 = add i64 %132, 1, !dbg !3244
  store i64 %add286, ptr %index, align 8, !dbg !3244
  %ge287 = icmp uge i64 %add286, %130, !dbg !3244
  %133 = call i1 @llvm.expect.i1(i1 %ge287, i1 false), !dbg !3244
  br i1 %133, label %panic288, label %checkok298, !dbg !3244

checkok298:                                       ; preds = %if.exit284
  %ptradd299 = getelementptr inbounds i8, ptr %131, i64 %add286, !dbg !3245
  %134 = load i8, ptr %ptradd299, align 1, !dbg !3245
  store i8 %134, ptr %c, align 1, !dbg !3245
  br label %loop.cond227, !dbg !3245

loop.exit300:                                     ; preds = %if.then283, %or.phi240
  %135 = load i8, ptr %got_digit, align 1, !dbg !3246
  %136 = trunc i8 %135 to i1, !dbg !3246
  %not301 = xor i1 %136, true, !dbg !3246
  br i1 %not301, label %if.then302, label %if.exit303, !dbg !3246

if.then302:                                       ; preds = %loop.exit300
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3247
  br label %err_retblock, !dbg !3247

if.exit303:                                       ; preds = %loop.exit300
  %137 = load i8, ptr %got_rad, align 1, !dbg !3248
  %138 = trunc i8 %137 to i1, !dbg !3248
  %not304 = xor i1 %138, true, !dbg !3248
  br i1 %not304, label %if.then305, label %if.exit306, !dbg !3248

if.then305:                                       ; preds = %if.exit303
  %139 = load i64, ptr %dc, align 8, !dbg !3249
  store i64 %139, ptr %rp, align 8, !dbg !3249
  br label %if.exit306, !dbg !3249

if.exit306:                                       ; preds = %if.then305, %if.exit303
  br label %loop.cond307, !dbg !3250

loop.cond307:                                     ; preds = %loop.body309, %if.exit306
  %140 = load i64, ptr %dc, align 8, !dbg !3251
  %lt308 = icmp slt i64 %140, 8, !dbg !3251
  br i1 %lt308, label %loop.body309, label %loop.exit312, !dbg !3251

loop.body309:                                     ; preds = %loop.cond307
  %141 = load i32, ptr %x, align 4, !dbg !3253
  %mul310 = mul i32 %141, 16, !dbg !3253
  store i32 %mul310, ptr %x, align 4, !dbg !3253
  %142 = load i64, ptr %dc, align 8, !dbg !3254
  %add311 = add i64 %142, 1, !dbg !3254
  store i64 %add311, ptr %dc, align 8, !dbg !3254
  br label %loop.cond307, !dbg !3254

loop.exit312:                                     ; preds = %loop.cond307
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !3255, metadata !DIExpression()), !dbg !3256
  store i64 0, ptr %e2, align 8, !dbg !3256
  %143 = load i8, ptr %c, align 1, !dbg !3257
  %zext313 = zext i8 %143 to i32, !dbg !3257
  %or314 = or i32 %zext313, 32, !dbg !3257
  %eq315 = icmp eq i32 %or314, 112, !dbg !3257
  %check316 = icmp sge i32 %or314, 0, !dbg !3257
  %siui-eq317 = and i1 %check316, %eq315, !dbg !3257
  br i1 %siui-eq317, label %if.then318, label %if.exit344, !dbg !3257

if.then318:                                       ; preds = %loop.exit312
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !3258, metadata !DIExpression()), !dbg !3260
  %144 = load %"char[]", ptr %chars145, align 8, !dbg !3261
  %145 = extractvalue %"char[]" %144, 0, !dbg !3261
  %146 = load i64, ptr %index, align 8, !dbg !3262
  %add319 = add i64 %146, 1, !dbg !3262
  %147 = extractvalue %"char[]" %144, 1, !dbg !3262
  %gt320 = icmp sgt i64 %add319, %147, !dbg !3262
  %148 = call i1 @llvm.expect.i1(i1 %gt320, i1 false), !dbg !3262
  br i1 %148, label %panic321, label %checkok331, !dbg !3262

checkok331:                                       ; preds = %if.then318
  %underflow = icmp slt i64 %add319, 0, !dbg !3263
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3263
  br i1 %149, label %panic332, label %checkok340, !dbg !3263

checkok340:                                       ; preds = %checkok331
  %size341 = sub i64 %147, %add319, !dbg !3262
  %ptradd342 = getelementptr inbounds i8, ptr %145, i64 %add319, !dbg !3262
  %150 = insertvalue %"char[]" undef, ptr %ptradd342, 0, !dbg !3262
  %151 = insertvalue %"char[]" %150, i64 %size341, 1, !dbg !3262
  store %"char[]" %151, ptr %indirectarg343, align 8
  %152 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg343, i32 10), !dbg !3264
  %not_err = icmp eq i64 %152, 0, !dbg !3264
  %153 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3264
  br i1 %153, label %after_check, label %else_block, !dbg !3264

after_check:                                      ; preds = %checkok340
  %154 = load i64, ptr %retparam, align 8, !dbg !3264
  br label %phi_block, !dbg !3264

else_block:                                       ; preds = %checkok340
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !3265
  br label %guard_block, !dbg !3265

guard_block:                                      ; preds = %else_block
  %155 = load i64, ptr %error_var, align 8, !dbg !3265
  store i64 %155, ptr %reterr, align 8, !dbg !3265
  br label %err_retblock, !dbg !3265

phi_block:                                        ; preds = %after_check
  store i64 %154, ptr %e2val, align 8, !dbg !3265
  %156 = load i64, ptr %e2val, align 8, !dbg !3266
  store i64 %156, ptr %e2, align 8, !dbg !3266
  br label %if.exit344, !dbg !3266

if.exit344:                                       ; preds = %phi_block, %loop.exit312
  %157 = load i64, ptr %e2, align 8, !dbg !3267
  %158 = load i64, ptr %rp, align 8, !dbg !3268
  %mul345 = mul i64 4, %158, !dbg !3269
  %sub346 = sub i64 %mul345, 32, !dbg !3269
  %add347 = add i64 %157, %sub346, !dbg !3267
  store i64 %add347, ptr %e2, align 8, !dbg !3267
  %159 = load i32, ptr %x, align 4, !dbg !3270
  %not348 = icmp eq i32 %159, 0, !dbg !3270
  br i1 %not348, label %if.then349, label %if.exit352, !dbg !3270

if.then349:                                       ; preds = %if.exit344
  %160 = load i32, ptr %sign146, align 4, !dbg !3271
  %sifp350 = sitofp i32 %160 to double, !dbg !3271
  %fmul351 = fmul double %sifp350, 0.000000e+00, !dbg !3271
  store double %fmul351, ptr %blockret147, align 8, !dbg !3271
  br label %expr_block.exit417, !dbg !3271

if.exit352:                                       ; preds = %if.exit344
  %161 = load i64, ptr %e2, align 8, !dbg !3272
  %gt353 = icmp sgt i64 %161, 149, !dbg !3272
  br i1 %gt353, label %if.then354, label %if.exit355, !dbg !3272

if.then354:                                       ; preds = %if.exit352
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3273
  br label %err_retblock, !dbg !3273

if.exit355:                                       ; preds = %if.exit352
  %162 = load i64, ptr %e2, align 8, !dbg !3274
  %lt356 = icmp slt i64 %162, -255, !dbg !3274
  br i1 %lt356, label %if.then357, label %if.exit358, !dbg !3274

if.then357:                                       ; preds = %if.exit355
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3275
  br label %err_retblock, !dbg !3275

if.exit358:                                       ; preds = %if.exit355
  br label %loop.cond359, !dbg !3276

loop.cond359:                                     ; preds = %if.exit370, %if.exit358
  %163 = load i32, ptr %x, align 4, !dbg !3277
  %lt360 = icmp ult i32 %163, -2147483648, !dbg !3277
  br i1 %lt360, label %loop.body361, label %loop.exit372, !dbg !3277

loop.body361:                                     ; preds = %loop.cond359
  %164 = load double, ptr %y, align 8, !dbg !3279
  %ge362 = fcmp oge double %164, 5.000000e-01, !dbg !3279
  br i1 %ge362, label %if.then363, label %if.else367, !dbg !3279

if.then363:                                       ; preds = %loop.body361
  %165 = load i32, ptr %x, align 4, !dbg !3281
  %166 = load i32, ptr %x, align 4, !dbg !3283
  %add364 = add i32 %166, 1, !dbg !3283
  %add365 = add i32 %165, %add364, !dbg !3281
  store i32 %add365, ptr %x, align 4, !dbg !3281
  %167 = load double, ptr %y, align 8, !dbg !3284
  %168 = load double, ptr %y, align 8, !dbg !3285
  %fsub = fsub double %168, 1.000000e+00, !dbg !3285
  %fadd366 = fadd double %167, %fsub, !dbg !3284
  store double %fadd366, ptr %y, align 8, !dbg !3284
  br label %if.exit370, !dbg !3284

if.else367:                                       ; preds = %loop.body361
  %169 = load i32, ptr %x, align 4, !dbg !3286
  %170 = load i32, ptr %x, align 4, !dbg !3288
  %add368 = add i32 %169, %170, !dbg !3286
  store i32 %add368, ptr %x, align 4, !dbg !3286
  %171 = load double, ptr %y, align 8, !dbg !3289
  %172 = load double, ptr %y, align 8, !dbg !3290
  %fadd369 = fadd double %171, %172, !dbg !3289
  store double %fadd369, ptr %y, align 8, !dbg !3289
  br label %if.exit370, !dbg !3289

if.exit370:                                       ; preds = %if.else367, %if.then363
  %173 = load i64, ptr %e2, align 8, !dbg !3291
  %sub371 = sub i64 %173, 1, !dbg !3291
  store i64 %sub371, ptr %e2, align 8, !dbg !3291
  br label %loop.cond359, !dbg !3291

loop.exit372:                                     ; preds = %loop.cond359
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !3292, metadata !DIExpression()), !dbg !3293
  store i32 24, ptr %bits, align 4, !dbg !3294
  %174 = load i64, ptr %e2, align 8, !dbg !3295
  %add373 = add i64 32, %174, !dbg !3296
  %sub374 = sub i64 %add373, -149, !dbg !3296
  %gt375 = icmp sgt i64 24, %sub374, !dbg !3297
  br i1 %gt375, label %if.then376, label %if.exit382, !dbg !3297

if.then376:                                       ; preds = %loop.exit372
  %175 = load i64, ptr %e2, align 8, !dbg !3298
  %add377 = add i64 32, %175, !dbg !3300
  %sub378 = sub i64 %add377, -149, !dbg !3301
  %trunc = trunc i64 %sub378 to i32, !dbg !3301
  store i32 %trunc, ptr %bits, align 4, !dbg !3301
  %176 = load i32, ptr %bits, align 4, !dbg !3302
  %lt379 = icmp slt i32 %176, 0, !dbg !3302
  br i1 %lt379, label %if.then380, label %if.exit381, !dbg !3302

if.then380:                                       ; preds = %if.then376
  store i32 0, ptr %bits, align 4, !dbg !3303
  br label %if.exit381, !dbg !3303

if.exit381:                                       ; preds = %if.then380, %if.then376
  br label %if.exit382, !dbg !3303

if.exit382:                                       ; preds = %if.exit381, %loop.exit372
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !3304, metadata !DIExpression()), !dbg !3305
  store double 0.000000e+00, ptr %bias, align 8, !dbg !3305
  %177 = load i32, ptr %bits, align 4, !dbg !3306
  %lt383 = icmp slt i32 %177, 53, !dbg !3306
  br i1 %lt383, label %if.then384, label %if.exit391, !dbg !3306

if.then384:                                       ; preds = %if.exit382
  store double 1.000000e+00, ptr %x385, align 8
  %178 = load i32, ptr %bits, align 4, !dbg !3307
  %sub386 = sub i32 85, %178, !dbg !3309
  %sub387 = sub i32 %sub386, 1, !dbg !3309
  store i32 %sub387, ptr %n, align 4
  %179 = load double, ptr %x385, align 8, !dbg !3310
  %180 = load i32, ptr %n, align 4, !dbg !3310
  %181 = call double @scalbn(double %179, i32 %180), !dbg !3313
  store double %181, ptr %mag, align 8
  %182 = load i32, ptr %sign146, align 4, !dbg !3314
  %sifp388 = sitofp i32 %182 to double, !dbg !3314
  store double %sifp388, ptr %sgn, align 8
  %183 = load double, ptr %mag, align 8
  store double %183, ptr %x389, align 8
  %184 = load double, ptr %sgn, align 8
  store double %184, ptr %y390, align 8
  %185 = load double, ptr %x389, align 8, !dbg !3315
  %186 = load double, ptr %sgn, align 8, !dbg !3320
  %187 = call double @llvm.copysign.f64(double %185, double %186), !dbg !3320
  store double %187, ptr %bias, align 8, !dbg !3320
  br label %if.exit391, !dbg !3320

if.exit391:                                       ; preds = %if.then384, %if.exit382
  %188 = load i32, ptr %bits, align 4, !dbg !3321
  %lt392 = icmp slt i32 %188, 32, !dbg !3321
  br i1 %lt392, label %and.rhs393, label %and.phi394, !dbg !3321

and.rhs393:                                       ; preds = %if.exit391
  %189 = load double, ptr %y, align 8, !dbg !3322
  %fpbool = fcmp une double %189, 0.000000e+00, !dbg !3322
  br label %and.phi394, !dbg !3322

and.phi394:                                       ; preds = %and.rhs393, %if.exit391
  %val395 = phi i1 [ false, %if.exit391 ], [ %fpbool, %and.rhs393 ], !dbg !3322
  br i1 %val395, label %and.rhs396, label %and.phi398, !dbg !3322

and.rhs396:                                       ; preds = %and.phi394
  %190 = load i32, ptr %x, align 4, !dbg !3323
  %and = and i32 %190, 1, !dbg !3323
  %not397 = icmp eq i32 %and, 0, !dbg !3323
  br label %and.phi398, !dbg !3323

and.phi398:                                       ; preds = %and.rhs396, %and.phi394
  %val399 = phi i1 [ false, %and.phi394 ], [ %not397, %and.rhs396 ], !dbg !3323
  br i1 %val399, label %if.then400, label %if.exit402, !dbg !3323

if.then400:                                       ; preds = %and.phi398
  %191 = load i32, ptr %x, align 4, !dbg !3324
  %add401 = add i32 %191, 1, !dbg !3324
  store i32 %add401, ptr %x, align 4, !dbg !3324
  store double 0.000000e+00, ptr %y, align 8, !dbg !3326
  br label %if.exit402, !dbg !3326

if.exit402:                                       ; preds = %if.then400, %and.phi398
  %192 = load double, ptr %bias, align 8, !dbg !3327
  %193 = load i32, ptr %sign146, align 4, !dbg !3328
  %sifp403 = sitofp i32 %193 to double, !dbg !3328
  %194 = load i32, ptr %x, align 4, !dbg !3329
  %uifp = uitofp i32 %194 to double, !dbg !3329
  %fmul404 = fmul double %sifp403, %uifp, !dbg !3328
  %fadd405 = fadd double %192, %fmul404, !dbg !3327
  %195 = load i32, ptr %sign146, align 4, !dbg !3330
  %sifp406 = sitofp i32 %195 to double, !dbg !3330
  %196 = load double, ptr %y, align 8, !dbg !3331
  %fmul407 = fmul double %sifp406, %196, !dbg !3330
  %fadd408 = fadd double %fadd405, %fmul407, !dbg !3327
  store double %fadd408, ptr %y, align 8, !dbg !3327
  %197 = load double, ptr %y, align 8, !dbg !3332
  %198 = load double, ptr %bias, align 8, !dbg !3333
  %fsub409 = fsub double %197, %198, !dbg !3332
  store double %fsub409, ptr %y, align 8, !dbg !3332
  %199 = load double, ptr %y, align 8, !dbg !3334
  %not410 = fcmp ueq double %199, 0.000000e+00, !dbg !3334
  br i1 %not410, label %if.then411, label %if.exit412, !dbg !3334

if.then411:                                       ; preds = %if.exit402
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3335
  br label %err_retblock, !dbg !3335

if.exit412:                                       ; preds = %if.exit402
  %200 = load double, ptr %y, align 8
  store double %200, ptr %x413, align 8
  %201 = load i64, ptr %e2, align 8, !dbg !3336
  %trunc414 = trunc i64 %201 to i32, !dbg !3336
  store i32 %trunc414, ptr %n415, align 4
  %202 = load double, ptr %x413, align 8, !dbg !3337
  %203 = load i32, ptr %n415, align 4, !dbg !3337
  %204 = call double @scalbn(double %202, i32 %203), !dbg !3340
  store double %204, ptr %blockret147, align 8, !dbg !3340
  br label %expr_block.exit417, !dbg !3340

expr_block.exit417:                               ; preds = %if.exit412, %if.then349, %if.exit176, %if.then167
  %205 = load double, ptr %blockret147, align 8, !dbg !3340
  %fpfptrunc = fptrunc double %205 to float, !dbg !3340
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !3340
  br label %expr_block.exit1946, !dbg !3340

if.exit418:                                       ; preds = %and.phi128
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars419, ptr align 8 %chars, i32 16, i1 false)
  %206 = load i32, ptr %sign, align 4
  store i32 %206, ptr %sign420, align 4
  %ptradd422 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3341
  %207 = load i64, ptr %ptradd422, align 8, !dbg !3341
  %lt423 = icmp ult i64 0, %207, !dbg !3341
  br i1 %lt423, label %assert_ok, label %assert_fail, !dbg !3341

assert_fail:                                      ; preds = %if.exit418
  store %"char[]" { ptr @.panic_msg.79, i64 34 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg425, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg426, align 8
  %208 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %208(ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, ptr align 8 %indirectarg426, i32 35), !dbg !3341
  unreachable, !dbg !3341

assert_ok:                                        ; preds = %if.exit418
  call void @llvm.dbg.declare(metadata ptr %x427, metadata !3345, metadata !DIExpression()), !dbg !3346
  call void @llvm.memset.p0.i64(ptr align 16 %x427, i8 0, i64 512, i1 false), !dbg !3346
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !3347, metadata !DIExpression()), !dbg !3348
  store i32 128, ptr %emax, align 4, !dbg !3349
  call void @llvm.dbg.declare(metadata ptr %index428, metadata !3350, metadata !DIExpression()), !dbg !3351
  store i64 0, ptr %index428, align 8, !dbg !3351
  call void @llvm.dbg.declare(metadata ptr %got_digit429, metadata !3352, metadata !DIExpression()), !dbg !3353
  %ptradd430 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3354
  %209 = load i64, ptr %ptradd430, align 8, !dbg !3354
  %210 = load ptr, ptr %chars419, align 8, !dbg !3354
  %ge431 = icmp sge i64 0, %209, !dbg !3355
  %211 = call i1 @llvm.expect.i1(i1 %ge431, i1 false), !dbg !3355
  br i1 %211, label %panic432, label %checkok442, !dbg !3355

checkok442:                                       ; preds = %assert_ok
  %212 = load i8, ptr %210, align 1, !dbg !3355
  %eq443 = icmp eq i8 %212, 48, !dbg !3354
  %213 = zext i1 %eq443 to i8, !dbg !3354
  store i8 %213, ptr %got_digit429, align 1, !dbg !3354
  call void @llvm.dbg.declare(metadata ptr %got_rad444, metadata !3356, metadata !DIExpression()), !dbg !3357
  store i8 0, ptr %got_rad444, align 1, !dbg !3357
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !3358, metadata !DIExpression()), !dbg !3359
  store i64 0, ptr %lrp, align 8, !dbg !3359
  call void @llvm.dbg.declare(metadata ptr %dc445, metadata !3360, metadata !DIExpression()), !dbg !3361
  store i64 0, ptr %dc445, align 8, !dbg !3361
  call void @llvm.dbg.declare(metadata ptr %k, metadata !3362, metadata !DIExpression()), !dbg !3363
  store i32 0, ptr %k, align 4, !dbg !3363
  call void @llvm.dbg.declare(metadata ptr %j, metadata !3364, metadata !DIExpression()), !dbg !3365
  store i32 0, ptr %j, align 4, !dbg !3365
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !3366, metadata !DIExpression()), !dbg !3367
  store i32 0, ptr %lnz, align 4, !dbg !3367
  call void @llvm.dbg.declare(metadata ptr %len446, metadata !3368, metadata !DIExpression()), !dbg !3369
  %ptradd447 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3370
  %214 = load i64, ptr %ptradd447, align 8, !dbg !3370
  store i64 %214, ptr %len446, align 8, !dbg !3370
  call void @llvm.dbg.declare(metadata ptr %last_char448, metadata !3371, metadata !DIExpression()), !dbg !3372
  %215 = load i64, ptr %len446, align 8, !dbg !3373
  %sub449 = sub i64 %215, 1, !dbg !3373
  store i64 %sub449, ptr %last_char448, align 8, !dbg !3373
  %216 = load i64, ptr %len446, align 8, !dbg !3374
  %intbool450 = icmp ne i64 %216, 0, !dbg !3374
  br i1 %intbool450, label %assert_ok455, label %assert_fail451, !dbg !3374

assert_fail451:                                   ; preds = %checkok442
  store %"char[]" { ptr @.panic_msg.80, i64 16 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg454, align 8
  %217 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %217(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 52), !dbg !3374
  unreachable, !dbg !3374

assert_ok455:                                     ; preds = %checkok442
  call void @llvm.dbg.declare(metadata ptr %c456, metadata !3375, metadata !DIExpression()), !dbg !3376
  br label %loop.cond457, !dbg !3377

loop.cond457:                                     ; preds = %if.exit478, %assert_ok455
  %ptradd458 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3378
  %218 = load i64, ptr %ptradd458, align 8, !dbg !3378
  %219 = load ptr, ptr %chars419, align 8, !dbg !3378
  %220 = load i64, ptr %index428, align 8, !dbg !3380
  %ge459 = icmp uge i64 %220, %218, !dbg !3380
  %221 = call i1 @llvm.expect.i1(i1 %ge459, i1 false), !dbg !3380
  br i1 %221, label %panic460, label %checkok470, !dbg !3380

checkok470:                                       ; preds = %loop.cond457
  %ptradd471 = getelementptr inbounds i8, ptr %219, i64 %220, !dbg !3380
  %222 = load i8, ptr %ptradd471, align 1, !dbg !3380
  store i8 %222, ptr %c456, align 1, !dbg !3380
  %eq472 = icmp eq i8 %222, 48, !dbg !3381
  br i1 %eq472, label %loop.body473, label %loop.exit480, !dbg !3381

loop.body473:                                     ; preds = %checkok470
  %223 = load i64, ptr %index428, align 8, !dbg !3382
  %224 = load i64, ptr %last_char448, align 8, !dbg !3384
  %eq474 = icmp eq i64 %223, %224, !dbg !3382
  br i1 %eq474, label %if.then475, label %if.exit478, !dbg !3382

if.then475:                                       ; preds = %loop.body473
  %225 = load i32, ptr %sign420, align 4, !dbg !3385
  %sifp476 = sitofp i32 %225 to double, !dbg !3385
  %fmul477 = fmul double %sifp476, 0.000000e+00, !dbg !3385
  store double %fmul477, ptr %blockret421, align 8, !dbg !3385
  br label %expr_block.exit1944, !dbg !3385

if.exit478:                                       ; preds = %loop.body473
  %226 = load i64, ptr %index428, align 8, !dbg !3386
  %add479 = add i64 %226, 1, !dbg !3386
  store i64 %add479, ptr %index428, align 8, !dbg !3386
  br label %loop.cond457, !dbg !3386

loop.exit480:                                     ; preds = %checkok470
  %227 = load i8, ptr %c456, align 1, !dbg !3387
  %eq481 = icmp eq i8 %227, 46, !dbg !3387
  br i1 %eq481, label %if.then482, label %if.exit538, !dbg !3387

if.then482:                                       ; preds = %loop.exit480
  store i8 1, ptr %got_rad444, align 1, !dbg !3388
  %228 = load i64, ptr %index428, align 8, !dbg !3390
  %229 = load i64, ptr %last_char448, align 8, !dbg !3391
  %eq483 = icmp eq i64 %228, %229, !dbg !3390
  br i1 %eq483, label %if.then484, label %if.exit490, !dbg !3390

if.then484:                                       ; preds = %if.then482
  %230 = load i8, ptr %got_digit429, align 1, !dbg !3392
  %231 = trunc i8 %230 to i1, !dbg !3392
  %not485 = xor i1 %231, true, !dbg !3392
  br i1 %not485, label %if.then486, label %if.exit487, !dbg !3392

if.then486:                                       ; preds = %if.then484
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3394
  br label %err_retblock, !dbg !3394

if.exit487:                                       ; preds = %if.then484
  %232 = load i32, ptr %sign420, align 4, !dbg !3395
  %sifp488 = sitofp i32 %232 to double, !dbg !3395
  %fmul489 = fmul double %sifp488, 0.000000e+00, !dbg !3395
  store double %fmul489, ptr %blockret421, align 8, !dbg !3395
  br label %expr_block.exit1944, !dbg !3395

if.exit490:                                       ; preds = %if.then482
  %233 = load i64, ptr %index428, align 8, !dbg !3396
  %234 = load i64, ptr %last_char448, align 8, !dbg !3397
  %neq491 = icmp ne i64 %233, %234, !dbg !3396
  br i1 %neq491, label %and.rhs492, label %and.phi509, !dbg !3396

and.rhs492:                                       ; preds = %if.exit490
  %ptradd493 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3398
  %235 = load i64, ptr %ptradd493, align 8, !dbg !3398
  %236 = load ptr, ptr %chars419, align 8, !dbg !3398
  %237 = load i64, ptr %index428, align 8, !dbg !3399
  %add494 = add i64 %237, 1, !dbg !3399
  store i64 %add494, ptr %index428, align 8, !dbg !3399
  %ge495 = icmp uge i64 %add494, %235, !dbg !3399
  %238 = call i1 @llvm.expect.i1(i1 %ge495, i1 false), !dbg !3399
  br i1 %238, label %panic496, label %checkok506, !dbg !3399

checkok506:                                       ; preds = %and.rhs492
  %ptradd507 = getelementptr inbounds i8, ptr %236, i64 %add494, !dbg !3400
  %239 = load i8, ptr %ptradd507, align 1, !dbg !3400
  store i8 %239, ptr %c456, align 1, !dbg !3400
  %eq508 = icmp eq i8 %239, 48, !dbg !3401
  br label %and.phi509, !dbg !3401

and.phi509:                                       ; preds = %checkok506, %if.exit490
  %val510 = phi i1 [ false, %if.exit490 ], [ %eq508, %checkok506 ], !dbg !3401
  br i1 %val510, label %if.then511, label %if.exit537, !dbg !3401

if.then511:                                       ; preds = %and.phi509
  %240 = load i64, ptr %lrp, align 8, !dbg !3402
  %sub512 = sub i64 %240, 1, !dbg !3402
  store i64 %sub512, ptr %lrp, align 8, !dbg !3402
  store i8 1, ptr %got_digit429, align 1, !dbg !3404
  br label %loop.cond513, !dbg !3405

loop.cond513:                                     ; preds = %loop.body534, %if.then511
  %241 = load i64, ptr %last_char448, align 8, !dbg !3406
  %242 = load i64, ptr %index428, align 8, !dbg !3408
  %neq514 = icmp ne i64 %241, %242, !dbg !3406
  br i1 %neq514, label %and.rhs515, label %and.phi532, !dbg !3406

and.rhs515:                                       ; preds = %loop.cond513
  %ptradd516 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3409
  %243 = load i64, ptr %ptradd516, align 8, !dbg !3409
  %244 = load ptr, ptr %chars419, align 8, !dbg !3409
  %245 = load i64, ptr %index428, align 8, !dbg !3410
  %add517 = add i64 %245, 1, !dbg !3410
  store i64 %add517, ptr %index428, align 8, !dbg !3410
  %ge518 = icmp uge i64 %add517, %243, !dbg !3410
  %246 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !3410
  br i1 %246, label %panic519, label %checkok529, !dbg !3410

checkok529:                                       ; preds = %and.rhs515
  %ptradd530 = getelementptr inbounds i8, ptr %244, i64 %add517, !dbg !3411
  %247 = load i8, ptr %ptradd530, align 1, !dbg !3411
  store i8 %247, ptr %c456, align 1, !dbg !3411
  %eq531 = icmp eq i8 %247, 48, !dbg !3412
  br label %and.phi532, !dbg !3412

and.phi532:                                       ; preds = %checkok529, %loop.cond513
  %val533 = phi i1 [ false, %loop.cond513 ], [ %eq531, %checkok529 ], !dbg !3412
  br i1 %val533, label %loop.body534, label %loop.exit536, !dbg !3412

loop.body534:                                     ; preds = %and.phi532
  %248 = load i64, ptr %lrp, align 8, !dbg !3413
  %sub535 = sub i64 %248, 1, !dbg !3413
  store i64 %sub535, ptr %lrp, align 8, !dbg !3413
  br label %loop.cond513, !dbg !3413

loop.exit536:                                     ; preds = %and.phi532
  br label %if.exit537, !dbg !3413

if.exit537:                                       ; preds = %loop.exit536, %and.phi509
  br label %if.exit538, !dbg !3413

if.exit538:                                       ; preds = %if.exit537, %loop.exit480
  br label %loop.cond539, !dbg !3415

loop.cond539:                                     ; preds = %checkok679, %if.exit538
  %249 = load i8, ptr %c456, align 1, !dbg !3416
  %zext540 = zext i8 %249 to i32, !dbg !3416
  %sub541 = sub i32 %zext540, 48, !dbg !3416
  %lt542 = icmp ult i32 %sub541, 10, !dbg !3416
  br i1 %lt542, label %or.phi545, label %or.rhs543, !dbg !3416

or.rhs543:                                        ; preds = %loop.cond539
  %250 = load i8, ptr %c456, align 1, !dbg !3418
  %eq544 = icmp eq i8 %250, 46, !dbg !3418
  br label %or.phi545, !dbg !3418

or.phi545:                                        ; preds = %or.rhs543, %loop.cond539
  %val546 = phi i1 [ true, %loop.cond539 ], [ %eq544, %or.rhs543 ], !dbg !3418
  br i1 %val546, label %loop.body547, label %loop.exit681, !dbg !3418

loop.body547:                                     ; preds = %or.phi545
  store i8 1, ptr %switch548, align 1
  br label %switch.entry549

switch.entry549:                                  ; preds = %loop.body547
  %251 = load i8, ptr %switch548, align 1
  %252 = trunc i8 %251 to i1
  %253 = load i8, ptr %c456, align 1, !dbg !3419
  %eq550 = icmp eq i8 %253, 46, !dbg !3419
  %eq551 = icmp eq i1 %eq550, %252, !dbg !3419
  br i1 %eq551, label %switch.case552, label %next_if555, !dbg !3419

switch.case552:                                   ; preds = %switch.entry549
  %254 = load i8, ptr %got_rad444, align 1, !dbg !3422
  %255 = trunc i8 %254 to i1, !dbg !3422
  br i1 %255, label %if.then553, label %if.exit554, !dbg !3422

if.then553:                                       ; preds = %switch.case552
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3424
  br label %err_retblock, !dbg !3424

if.exit554:                                       ; preds = %switch.case552
  store i8 1, ptr %got_rad444, align 1, !dbg !3425
  %256 = load i64, ptr %dc445, align 8, !dbg !3426
  store i64 %256, ptr %lrp, align 8, !dbg !3426
  br label %switch.exit656, !dbg !3426

next_if555:                                       ; preds = %switch.entry549
  %257 = load i32, ptr %k, align 4, !dbg !3427
  %lt556 = icmp slt i32 %257, 125, !dbg !3427
  %eq557 = icmp eq i1 %lt556, %252, !dbg !3427
  br i1 %eq557, label %switch.case558, label %next_if649, !dbg !3427

switch.case558:                                   ; preds = %next_if555
  %258 = load i64, ptr %dc445, align 8, !dbg !3428
  %add559 = add i64 %258, 1, !dbg !3428
  store i64 %add559, ptr %dc445, align 8, !dbg !3428
  %259 = load i8, ptr %c456, align 1, !dbg !3430
  %neq560 = icmp ne i8 %259, 48, !dbg !3430
  br i1 %neq560, label %if.then561, label %if.exit563, !dbg !3430

if.then561:                                       ; preds = %switch.case558
  %260 = load i64, ptr %dc445, align 8, !dbg !3431
  %trunc562 = trunc i64 %260 to i32, !dbg !3431
  store i32 %trunc562, ptr %lnz, align 4, !dbg !3431
  br label %if.exit563, !dbg !3431

if.exit563:                                       ; preds = %if.then561, %switch.case558
  %261 = load i32, ptr %j, align 4, !dbg !3432
  %intbool564 = icmp ne i32 %261, 0, !dbg !3432
  br i1 %intbool564, label %if.then565, label %if.else616, !dbg !3432

if.then565:                                       ; preds = %if.exit563
  %262 = load i32, ptr %k, align 4, !dbg !3433
  %sext = sext i32 %262 to i64, !dbg !3433
  %lt566 = icmp slt i64 %sext, 0, !dbg !3433
  %263 = call i1 @llvm.expect.i1(i1 %lt566, i1 false), !dbg !3433
  br i1 %263, label %panic567, label %checkok575, !dbg !3433

checkok575:                                       ; preds = %if.then565
  %ge576 = icmp sge i64 %sext, 128, !dbg !3433
  %264 = call i1 @llvm.expect.i1(i1 %ge576, i1 false), !dbg !3433
  br i1 %264, label %panic577, label %checkok587, !dbg !3433

checkok587:                                       ; preds = %checkok575
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext, !dbg !3433
  %265 = load i32, ptr %k, align 4, !dbg !3435
  %sext588 = sext i32 %265 to i64, !dbg !3435
  %lt589 = icmp slt i64 %sext588, 0, !dbg !3435
  %266 = call i1 @llvm.expect.i1(i1 %lt589, i1 false), !dbg !3435
  br i1 %266, label %panic590, label %checkok598, !dbg !3435

checkok598:                                       ; preds = %checkok587
  %ge599 = icmp sge i64 %sext588, 128, !dbg !3435
  %267 = call i1 @llvm.expect.i1(i1 %ge599, i1 false), !dbg !3435
  br i1 %267, label %panic600, label %checkok610, !dbg !3435

checkok610:                                       ; preds = %checkok598
  %ptroffset611 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext588, !dbg !3435
  %268 = load i32, ptr %ptroffset611, align 4, !dbg !3435
  %mul612 = mul i32 %268, 10, !dbg !3436
  %269 = load i8, ptr %c456, align 1, !dbg !3437
  %zext613 = zext i8 %269 to i32, !dbg !3437
  %add614 = add i32 %mul612, %zext613, !dbg !3436
  %sub615 = sub i32 %add614, 48, !dbg !3436
  store i32 %sub615, ptr %ptroffset, align 4, !dbg !3436
  br label %if.exit643, !dbg !3436

if.else616:                                       ; preds = %if.exit563
  %270 = load i32, ptr %k, align 4, !dbg !3438
  %sext617 = sext i32 %270 to i64, !dbg !3438
  %lt618 = icmp slt i64 %sext617, 0, !dbg !3438
  %271 = call i1 @llvm.expect.i1(i1 %lt618, i1 false), !dbg !3438
  br i1 %271, label %panic619, label %checkok627, !dbg !3438

checkok627:                                       ; preds = %if.else616
  %ge628 = icmp sge i64 %sext617, 128, !dbg !3438
  %272 = call i1 @llvm.expect.i1(i1 %ge628, i1 false), !dbg !3438
  br i1 %272, label %panic629, label %checkok639, !dbg !3438

checkok639:                                       ; preds = %checkok627
  %ptroffset640 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext617, !dbg !3438
  %273 = load i8, ptr %c456, align 1, !dbg !3440
  %zext641 = zext i8 %273 to i32, !dbg !3440
  %sub642 = sub i32 %zext641, 48, !dbg !3440
  store i32 %sub642, ptr %ptroffset640, align 4, !dbg !3440
  br label %if.exit643, !dbg !3440

if.exit643:                                       ; preds = %checkok639, %checkok610
  %274 = load i32, ptr %j, align 4, !dbg !3441
  %add644 = add i32 %274, 1, !dbg !3441
  store i32 %add644, ptr %j, align 4, !dbg !3441
  %eq645 = icmp eq i32 %add644, 9, !dbg !3442
  br i1 %eq645, label %if.then646, label %if.exit648, !dbg !3442

if.then646:                                       ; preds = %if.exit643
  %275 = load i32, ptr %k, align 4, !dbg !3443
  %add647 = add i32 %275, 1, !dbg !3443
  store i32 %add647, ptr %k, align 4, !dbg !3443
  store i32 0, ptr %j, align 4, !dbg !3445
  br label %if.exit648, !dbg !3445

if.exit648:                                       ; preds = %if.then646, %if.exit643
  store i8 1, ptr %got_digit429, align 1, !dbg !3446
  br label %switch.exit656, !dbg !3446

next_if649:                                       ; preds = %next_if555
  br label %switch.default, !dbg !3446

switch.default:                                   ; preds = %next_if649
  %276 = load i64, ptr %dc445, align 8, !dbg !3447
  %add650 = add i64 %276, 1, !dbg !3447
  store i64 %add650, ptr %dc445, align 8, !dbg !3447
  %277 = load i8, ptr %c456, align 1, !dbg !3449
  %neq651 = icmp ne i8 %277, 48, !dbg !3449
  br i1 %neq651, label %if.then652, label %if.exit655, !dbg !3449

if.then652:                                       ; preds = %switch.default
  %ptradd653 = getelementptr inbounds i8, ptr %x427, i64 496, !dbg !3450
  %278 = load i32, ptr %ptradd653, align 4, !dbg !3450
  %or654 = or i32 %278, 1, !dbg !3451
  store i32 %or654, ptr %ptradd653, align 4, !dbg !3451
  br label %if.exit655, !dbg !3451

if.exit655:                                       ; preds = %if.then652, %switch.default
  br label %switch.exit656, !dbg !3451

switch.exit656:                                   ; preds = %if.exit655, %if.exit648, %if.exit554
  %279 = load i64, ptr %index428, align 8, !dbg !3452
  %280 = load i64, ptr %last_char448, align 8, !dbg !3453
  %eq657 = icmp eq i64 %279, %280, !dbg !3452
  br i1 %eq657, label %if.then658, label %if.exit659, !dbg !3452

if.then658:                                       ; preds = %switch.exit656
  br label %loop.exit681, !dbg !3454

if.exit659:                                       ; preds = %switch.exit656
  %281 = load i64, ptr %index428, align 8, !dbg !3455
  %282 = load i64, ptr %last_char448, align 8, !dbg !3456
  %lt660 = icmp ult i64 %281, %282, !dbg !3455
  br i1 %lt660, label %assert_ok665, label %assert_fail661, !dbg !3455

assert_fail661:                                   ; preds = %if.exit659
  store %"char[]" { ptr @.panic_msg.80, i64 16 }, ptr %indirectarg662, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg663, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg664, align 8
  %283 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %283(ptr align 8 %indirectarg662, ptr align 8 %indirectarg663, ptr align 8 %indirectarg664, i32 112), !dbg !3455
  unreachable, !dbg !3455

assert_ok665:                                     ; preds = %if.exit659
  %ptradd666 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !3457
  %284 = load i64, ptr %ptradd666, align 8, !dbg !3457
  %285 = load ptr, ptr %chars419, align 8, !dbg !3457
  %286 = load i64, ptr %index428, align 8, !dbg !3458
  %add667 = add i64 %286, 1, !dbg !3458
  store i64 %add667, ptr %index428, align 8, !dbg !3458
  %ge668 = icmp uge i64 %add667, %284, !dbg !3458
  %287 = call i1 @llvm.expect.i1(i1 %ge668, i1 false), !dbg !3458
  br i1 %287, label %panic669, label %checkok679, !dbg !3458

checkok679:                                       ; preds = %assert_ok665
  %ptradd680 = getelementptr inbounds i8, ptr %285, i64 %add667, !dbg !3459
  %288 = load i8, ptr %ptradd680, align 1, !dbg !3459
  store i8 %288, ptr %c456, align 1, !dbg !3459
  br label %loop.cond539, !dbg !3459

loop.exit681:                                     ; preds = %if.then658, %or.phi545
  %289 = load i8, ptr %got_rad444, align 1, !dbg !3460
  %290 = trunc i8 %289 to i1, !dbg !3460
  %not682 = xor i1 %290, true, !dbg !3460
  br i1 %not682, label %if.then683, label %if.exit684, !dbg !3460

if.then683:                                       ; preds = %loop.exit681
  %291 = load i64, ptr %dc445, align 8, !dbg !3461
  store i64 %291, ptr %lrp, align 8, !dbg !3461
  br label %if.exit684, !dbg !3461

if.exit684:                                       ; preds = %if.then683, %loop.exit681
  %292 = load i8, ptr %got_digit429, align 1, !dbg !3462
  %293 = trunc i8 %292 to i1, !dbg !3462
  %not685 = xor i1 %293, true, !dbg !3462
  br i1 %not685, label %if.then686, label %if.exit687, !dbg !3462

if.then686:                                       ; preds = %if.exit684
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3463
  br label %err_retblock, !dbg !3463

if.exit687:                                       ; preds = %if.exit684
  %294 = load i8, ptr %c456, align 1, !dbg !3464
  %zext688 = zext i8 %294 to i32, !dbg !3464
  %or689 = or i32 %zext688, 32, !dbg !3464
  %eq690 = icmp eq i32 %or689, 101, !dbg !3464
  %check691 = icmp sge i32 %or689, 0, !dbg !3464
  %siui-eq692 = and i1 %check691, %eq690, !dbg !3464
  br i1 %siui-eq692, label %if.then693, label %if.else731, !dbg !3464

if.then693:                                       ; preds = %if.exit687
  %295 = load i64, ptr %last_char448, align 8, !dbg !3465
  %296 = load i64, ptr %index428, align 8, !dbg !3467
  %eq694 = icmp eq i64 %295, %296, !dbg !3465
  br i1 %eq694, label %if.then695, label %if.exit696, !dbg !3465

if.then695:                                       ; preds = %if.then693
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3468
  br label %err_retblock, !dbg !3468

if.exit696:                                       ; preds = %if.then693
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !3469, metadata !DIExpression()), !dbg !3470
  %297 = load %"char[]", ptr %chars419, align 8, !dbg !3471
  %298 = extractvalue %"char[]" %297, 0, !dbg !3471
  %299 = load i64, ptr %index428, align 8, !dbg !3472
  %add697 = add i64 %299, 1, !dbg !3472
  %300 = extractvalue %"char[]" %297, 1, !dbg !3472
  %gt698 = icmp sgt i64 %add697, %300, !dbg !3472
  %301 = call i1 @llvm.expect.i1(i1 %gt698, i1 false), !dbg !3472
  br i1 %301, label %panic699, label %checkok709, !dbg !3472

checkok709:                                       ; preds = %if.exit696
  %underflow710 = icmp slt i64 %add697, 0, !dbg !3473
  %302 = call i1 @llvm.expect.i1(i1 %underflow710, i1 false), !dbg !3473
  br i1 %302, label %panic711, label %checkok719, !dbg !3473

checkok719:                                       ; preds = %checkok709
  %size720 = sub i64 %300, %add697, !dbg !3472
  %ptradd721 = getelementptr inbounds i8, ptr %298, i64 %add697, !dbg !3472
  %303 = insertvalue %"char[]" undef, ptr %ptradd721, 0, !dbg !3472
  %304 = insertvalue %"char[]" %303, i64 %size720, 1, !dbg !3472
  store %"char[]" %304, ptr %indirectarg723, align 8
  %305 = call i64 @std.core.String.to_long(ptr %retparam722, ptr align 8 %indirectarg723, i32 10), !dbg !3474
  %not_err724 = icmp eq i64 %305, 0, !dbg !3474
  %306 = call i1 @llvm.expect.i1(i1 %not_err724, i1 true), !dbg !3474
  br i1 %306, label %after_check725, label %else_block726, !dbg !3474

after_check725:                                   ; preds = %checkok719
  %307 = load i64, ptr %retparam722, align 8, !dbg !3474
  br label %phi_block729, !dbg !3474

else_block726:                                    ; preds = %checkok719
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var727, align 8, !dbg !3475
  br label %guard_block728, !dbg !3475

guard_block728:                                   ; preds = %else_block726
  %308 = load i64, ptr %error_var727, align 8, !dbg !3475
  store i64 %308, ptr %reterr, align 8, !dbg !3475
  br label %err_retblock, !dbg !3475

phi_block729:                                     ; preds = %after_check725
  store i64 %307, ptr %e10, align 8, !dbg !3475
  %309 = load i64, ptr %lrp, align 8, !dbg !3476
  %310 = load i64, ptr %e10, align 8, !dbg !3477
  %add730 = add i64 %309, %310, !dbg !3476
  store i64 %add730, ptr %lrp, align 8, !dbg !3476
  br label %if.exit735, !dbg !3476

if.else731:                                       ; preds = %if.exit687
  %311 = load i64, ptr %index428, align 8, !dbg !3478
  %312 = load i64, ptr %last_char448, align 8, !dbg !3479
  %neq732 = icmp ne i64 %311, %312, !dbg !3478
  br i1 %neq732, label %if.then733, label %if.exit734, !dbg !3478

if.then733:                                       ; preds = %if.else731
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3480
  br label %err_retblock, !dbg !3480

if.exit734:                                       ; preds = %if.else731
  br label %if.exit735, !dbg !3480

if.exit735:                                       ; preds = %if.exit734, %phi_block729
  %313 = load i32, ptr %x427, align 4, !dbg !3482
  %not736 = icmp eq i32 %313, 0, !dbg !3482
  br i1 %not736, label %if.then737, label %if.exit740, !dbg !3482

if.then737:                                       ; preds = %if.exit735
  %314 = load i32, ptr %sign420, align 4, !dbg !3483
  %sifp738 = sitofp i32 %314 to double, !dbg !3483
  %fmul739 = fmul double %sifp738, 0.000000e+00, !dbg !3483
  store double %fmul739, ptr %blockret421, align 8, !dbg !3483
  br label %expr_block.exit1944, !dbg !3483

if.exit740:                                       ; preds = %if.exit735
  %315 = load i64, ptr %lrp, align 8, !dbg !3484
  %316 = load i64, ptr %dc445, align 8, !dbg !3485
  %eq741 = icmp eq i64 %315, %316, !dbg !3484
  br i1 %eq741, label %and.rhs742, label %and.phi744, !dbg !3484

and.rhs742:                                       ; preds = %if.exit740
  %317 = load i64, ptr %dc445, align 8, !dbg !3486
  %lt743 = icmp slt i64 %317, 10, !dbg !3486
  br label %and.phi744, !dbg !3486

and.phi744:                                       ; preds = %and.rhs742, %if.exit740
  %val745 = phi i1 [ false, %if.exit740 ], [ %lt743, %and.rhs742 ], !dbg !3486
  br i1 %val745, label %and.rhs746, label %and.phi752, !dbg !3486

and.rhs746:                                       ; preds = %and.phi744
  br i1 false, label %or.phi750, label %or.rhs747, !dbg !3487

or.rhs747:                                        ; preds = %and.rhs746
  %318 = load i32, ptr %x427, align 4, !dbg !3488
  %zext748 = zext i32 %318 to i64, !dbg !3488
  %lshr = lshr i64 %zext748, 24, !dbg !3489
  %319 = freeze i64 %lshr, !dbg !3489
  %eq749 = icmp eq i64 0, %319, !dbg !3489
  br label %or.phi750, !dbg !3489

or.phi750:                                        ; preds = %or.rhs747, %and.rhs746
  %val751 = phi i1 [ true, %and.rhs746 ], [ %eq749, %or.rhs747 ], !dbg !3489
  br label %and.phi752, !dbg !3489

and.phi752:                                       ; preds = %or.phi750, %and.phi744
  %val753 = phi i1 [ false, %and.phi744 ], [ %val751, %or.phi750 ], !dbg !3489
  br i1 %val753, label %if.then754, label %if.exit758, !dbg !3489

if.then754:                                       ; preds = %and.phi752
  %320 = load i32, ptr %sign420, align 4, !dbg !3490
  %sifp755 = sitofp i32 %320 to double, !dbg !3490
  %321 = load i32, ptr %x427, align 4, !dbg !3491
  %uifp756 = uitofp i32 %321 to double, !dbg !3491
  %fmul757 = fmul double %sifp755, %uifp756, !dbg !3490
  store double %fmul757, ptr %blockret421, align 8, !dbg !3490
  br label %expr_block.exit1944, !dbg !3490

if.exit758:                                       ; preds = %and.phi752
  %322 = load i64, ptr %lrp, align 8, !dbg !3492
  %gt759 = icmp sgt i64 %322, 74, !dbg !3492
  br i1 %gt759, label %if.then760, label %if.exit761, !dbg !3492

if.then760:                                       ; preds = %if.exit758
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3493
  br label %err_retblock, !dbg !3493

if.exit761:                                       ; preds = %if.exit758
  %323 = load i64, ptr %lrp, align 8, !dbg !3494
  %lt762 = icmp slt i64 %323, -255, !dbg !3494
  br i1 %lt762, label %if.then763, label %if.exit764, !dbg !3494

if.then763:                                       ; preds = %if.exit761
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3495
  br label %err_retblock, !dbg !3495

if.exit764:                                       ; preds = %if.exit761
  %324 = load i32, ptr %j, align 4, !dbg !3496
  %intbool765 = icmp ne i32 %324, 0, !dbg !3496
  br i1 %intbool765, label %if.then766, label %if.exit798, !dbg !3496

if.then766:                                       ; preds = %if.exit764
  br label %loop.cond767, !dbg !3497

loop.cond767:                                     ; preds = %checkok792, %if.then766
  %325 = load i32, ptr %j, align 4, !dbg !3499
  %lt768 = icmp slt i32 %325, 9, !dbg !3499
  br i1 %lt768, label %loop.body769, label %loop.exit796, !dbg !3499

loop.body769:                                     ; preds = %loop.cond767
  %326 = load i32, ptr %k, align 4, !dbg !3501
  %sext770 = sext i32 %326 to i64, !dbg !3501
  %lt771 = icmp slt i64 %sext770, 0, !dbg !3501
  %327 = call i1 @llvm.expect.i1(i1 %lt771, i1 false), !dbg !3501
  br i1 %327, label %panic772, label %checkok780, !dbg !3501

checkok780:                                       ; preds = %loop.body769
  %ge781 = icmp sge i64 %sext770, 128, !dbg !3501
  %328 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !3501
  br i1 %328, label %panic782, label %checkok792, !dbg !3501

checkok792:                                       ; preds = %checkok780
  %ptroffset793 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext770, !dbg !3501
  %329 = load i32, ptr %ptroffset793, align 4, !dbg !3501
  %mul794 = mul i32 %329, 10, !dbg !3502
  store i32 %mul794, ptr %ptroffset793, align 4, !dbg !3502
  %330 = load i32, ptr %j, align 4, !dbg !3503
  %add795 = add i32 %330, 1, !dbg !3503
  store i32 %add795, ptr %j, align 4, !dbg !3503
  br label %loop.cond767, !dbg !3503

loop.exit796:                                     ; preds = %loop.cond767
  %331 = load i32, ptr %k, align 4, !dbg !3504
  %add797 = add i32 %331, 1, !dbg !3504
  store i32 %add797, ptr %k, align 4, !dbg !3504
  store i32 0, ptr %j, align 4, !dbg !3505
  br label %if.exit798, !dbg !3505

if.exit798:                                       ; preds = %loop.exit796, %if.exit764
  call void @llvm.dbg.declare(metadata ptr %a, metadata !3506, metadata !DIExpression()), !dbg !3507
  store i32 0, ptr %a, align 4, !dbg !3507
  call void @llvm.dbg.declare(metadata ptr %z, metadata !3508, metadata !DIExpression()), !dbg !3509
  %332 = load i32, ptr %k, align 4, !dbg !3510
  store i32 %332, ptr %z, align 4, !dbg !3510
  call void @llvm.dbg.declare(metadata ptr %e2799, metadata !3511, metadata !DIExpression()), !dbg !3512
  store i32 0, ptr %e2799, align 4, !dbg !3512
  call void @llvm.dbg.declare(metadata ptr %rp800, metadata !3513, metadata !DIExpression()), !dbg !3514
  %333 = load i64, ptr %lrp, align 8, !dbg !3515
  store i64 %333, ptr %rp800, align 8, !dbg !3515
  %334 = load i32, ptr %lnz, align 4, !dbg !3516
  %lt801 = icmp slt i32 %334, 9, !dbg !3516
  br i1 %lt801, label %and.rhs802, label %and.phi804, !dbg !3516

and.rhs802:                                       ; preds = %if.exit798
  %335 = load i32, ptr %lnz, align 4, !dbg !3517
  %sext803 = sext i32 %335 to i64, !dbg !3517
  %336 = load i64, ptr %rp800, align 8, !dbg !3518
  %le = icmp sle i64 %sext803, %336, !dbg !3517
  br label %and.phi804, !dbg !3517

and.phi804:                                       ; preds = %and.rhs802, %if.exit798
  %val805 = phi i1 [ false, %if.exit798 ], [ %le, %and.rhs802 ], !dbg !3517
  br i1 %val805, label %and.rhs806, label %and.phi808, !dbg !3517

and.rhs806:                                       ; preds = %and.phi804
  %337 = load i64, ptr %rp800, align 8, !dbg !3519
  %lt807 = icmp slt i64 %337, 18, !dbg !3519
  br label %and.phi808, !dbg !3519

and.phi808:                                       ; preds = %and.rhs806, %and.phi804
  %val809 = phi i1 [ false, %and.phi804 ], [ %lt807, %and.rhs806 ], !dbg !3519
  br i1 %val809, label %if.then810, label %if.exit904, !dbg !3519

if.then810:                                       ; preds = %and.phi808
  %338 = load i64, ptr %rp800, align 8, !dbg !3520
  %eq811 = icmp eq i64 %338, 9, !dbg !3520
  br i1 %eq811, label %if.then812, label %if.exit816, !dbg !3520

if.then812:                                       ; preds = %if.then810
  %339 = load i32, ptr %sign420, align 4, !dbg !3522
  %sifp813 = sitofp i32 %339 to double, !dbg !3522
  %340 = load i32, ptr %x427, align 4, !dbg !3523
  %uifp814 = uitofp i32 %340 to double, !dbg !3523
  %fmul815 = fmul double %sifp813, %uifp814, !dbg !3522
  store double %fmul815, ptr %blockret421, align 8, !dbg !3522
  br label %expr_block.exit1944, !dbg !3522

if.exit816:                                       ; preds = %if.then810
  %341 = load i64, ptr %rp800, align 8, !dbg !3524
  %lt817 = icmp slt i64 %341, 9, !dbg !3524
  br i1 %lt817, label %if.then818, label %if.exit853, !dbg !3524

if.then818:                                       ; preds = %if.exit816
  %342 = load i32, ptr %sign420, align 4, !dbg !3525
  %sifp819 = sitofp i32 %342 to double, !dbg !3525
  %343 = load i32, ptr %x427, align 4, !dbg !3526
  %uifp820 = uitofp i32 %343 to double, !dbg !3526
  %fmul821 = fmul double %sifp819, %uifp820, !dbg !3525
  %344 = load i64, ptr %rp800, align 8, !dbg !3527
  %sub822 = sub i64 8, %344, !dbg !3528
  %lt823 = icmp slt i64 %sub822, 0, !dbg !3528
  %345 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !3528
  br i1 %345, label %panic824, label %checkok832, !dbg !3528

checkok832:                                       ; preds = %if.then818
  %ge833 = icmp sge i64 %sub822, 8, !dbg !3528
  %346 = call i1 @llvm.expect.i1(i1 %ge833, i1 false), !dbg !3528
  br i1 %346, label %panic834, label %checkok844, !dbg !3528

checkok844:                                       ; preds = %checkok832
  %ptroffset845 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub822, !dbg !3528
  %347 = load i32, ptr %ptroffset845, align 4, !dbg !3528
  %sifp846 = sitofp i32 %347 to double, !dbg !3528
  %zero = fcmp ueq double %sifp846, 0.000000e+00, !dbg !3525
  %348 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3525
  br i1 %348, label %panic847, label %checkok851, !dbg !3525

checkok851:                                       ; preds = %checkok844
  %fdiv852 = fdiv double %fmul821, %sifp846, !dbg !3525
  store double %fdiv852, ptr %blockret421, align 8, !dbg !3525
  br label %expr_block.exit1944, !dbg !3525

if.exit853:                                       ; preds = %if.exit816
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !3529, metadata !DIExpression()), !dbg !3530
  %349 = load i64, ptr %rp800, align 8, !dbg !3531
  %sub854 = sub i64 %349, 9, !dbg !3532
  %trunc855 = trunc i64 %sub854 to i32, !dbg !3532
  %mul856 = mul i32 3, %trunc855, !dbg !3533
  %sub857 = sub i32 24, %mul856, !dbg !3534
  store i32 %sub857, ptr %bitlim, align 4, !dbg !3534
  %350 = load i32, ptr %bitlim, align 4, !dbg !3535
  %gt858 = icmp sgt i32 %350, 30, !dbg !3535
  br i1 %gt858, label %or.phi871, label %or.rhs859, !dbg !3535

or.rhs859:                                        ; preds = %if.exit853
  %351 = load i32, ptr %x427, align 4, !dbg !3536
  %352 = load i32, ptr %bitlim, align 4, !dbg !3537
  %shift_exceeds = icmp uge i32 %352, 32, !dbg !3538
  %353 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3538
  br i1 %353, label %panic860, label %checkok868, !dbg !3538

checkok868:                                       ; preds = %or.rhs859
  %lshr869 = lshr i32 %351, %352, !dbg !3538
  %354 = freeze i32 %lshr869, !dbg !3538
  %eq870 = icmp eq i32 0, %354, !dbg !3538
  br label %or.phi871, !dbg !3538

or.phi871:                                        ; preds = %checkok868, %if.exit853
  %val872 = phi i1 [ true, %if.exit853 ], [ %eq870, %checkok868 ], !dbg !3538
  br i1 %val872, label %if.then873, label %if.exit903, !dbg !3538

if.then873:                                       ; preds = %or.phi871
  %355 = load i32, ptr %sign420, align 4, !dbg !3539
  %sifp874 = sitofp i32 %355 to double, !dbg !3539
  %356 = load i32, ptr %x427, align 4, !dbg !3540
  %uifp875 = uitofp i32 %356 to double, !dbg !3540
  %fmul876 = fmul double %sifp874, %uifp875, !dbg !3539
  %357 = load i64, ptr %rp800, align 8, !dbg !3541
  %sub877 = sub i64 %357, 10, !dbg !3541
  %lt878 = icmp slt i64 %sub877, 0, !dbg !3541
  %358 = call i1 @llvm.expect.i1(i1 %lt878, i1 false), !dbg !3541
  br i1 %358, label %panic879, label %checkok887, !dbg !3541

checkok887:                                       ; preds = %if.then873
  %ge888 = icmp sge i64 %sub877, 8, !dbg !3541
  %359 = call i1 @llvm.expect.i1(i1 %ge888, i1 false), !dbg !3541
  br i1 %359, label %panic889, label %checkok899, !dbg !3541

checkok899:                                       ; preds = %checkok887
  %ptroffset900 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub877, !dbg !3541
  %360 = load i32, ptr %ptroffset900, align 4, !dbg !3541
  %sifp901 = sitofp i32 %360 to double, !dbg !3541
  %fmul902 = fmul double %fmul876, %sifp901, !dbg !3539
  store double %fmul902, ptr %blockret421, align 8, !dbg !3539
  br label %expr_block.exit1944, !dbg !3539

if.exit903:                                       ; preds = %or.phi871
  br label %if.exit904, !dbg !3539

if.exit904:                                       ; preds = %if.exit903, %and.phi808
  %361 = load i64, ptr %rp800, align 8, !dbg !3542
  %smod = srem i64 %361, 9, !dbg !3542
  %intbool905 = icmp ne i64 %smod, 0, !dbg !3542
  br i1 %intbool905, label %if.then906, label %if.exit1099, !dbg !3542

if.then906:                                       ; preds = %if.exit904
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !3543, metadata !DIExpression()), !dbg !3545
  %362 = load i64, ptr %rp800, align 8, !dbg !3546
  %ge907 = icmp sge i64 %362, 0, !dbg !3546
  br i1 %ge907, label %cond.lhs, label %cond.rhs, !dbg !3546

cond.lhs:                                         ; preds = %if.then906
  %363 = load i64, ptr %rp800, align 8, !dbg !3547
  %smod908 = srem i64 %363, 9, !dbg !3547
  br label %cond.phi, !dbg !3547

cond.rhs:                                         ; preds = %if.then906
  %364 = load i64, ptr %rp800, align 8, !dbg !3548
  %smod909 = srem i64 %364, 9, !dbg !3548
  %add910 = add i64 %smod909, 9, !dbg !3548
  br label %cond.phi, !dbg !3548

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val911 = phi i64 [ %smod908, %cond.lhs ], [ %add910, %cond.rhs ], !dbg !3548
  store i64 %val911, ptr %rpm9, align 8, !dbg !3548
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !3549, metadata !DIExpression()), !dbg !3550
  %365 = load i64, ptr %rpm9, align 8, !dbg !3551
  %sub912 = sub i64 8, %365, !dbg !3552
  %lt913 = icmp slt i64 %sub912, 0, !dbg !3552
  %366 = call i1 @llvm.expect.i1(i1 %lt913, i1 false), !dbg !3552
  br i1 %366, label %panic914, label %checkok922, !dbg !3552

checkok922:                                       ; preds = %cond.phi
  %ge923 = icmp sge i64 %sub912, 8, !dbg !3552
  %367 = call i1 @llvm.expect.i1(i1 %ge923, i1 false), !dbg !3552
  br i1 %367, label %panic924, label %checkok934, !dbg !3552

checkok934:                                       ; preds = %checkok922
  %ptroffset935 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub912, !dbg !3552
  %368 = load i32, ptr %ptroffset935, align 4, !dbg !3552
  store i32 %368, ptr %p10, align 4, !dbg !3552
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !3553, metadata !DIExpression()), !dbg !3554
  store i32 0, ptr %carry, align 4, !dbg !3555
  %369 = load i32, ptr %a, align 4, !dbg !3556
  store i32 %369, ptr %k, align 4, !dbg !3556
  br label %loop.cond936, !dbg !3556

loop.cond936:                                     ; preds = %if.exit1066, %checkok934
  %370 = load i32, ptr %k, align 4, !dbg !3558
  %371 = load i32, ptr %z, align 4, !dbg !3559
  %neq937 = icmp ne i32 %370, %371, !dbg !3558
  br i1 %neq937, label %loop.body938, label %loop.exit1068, !dbg !3558

loop.body938:                                     ; preds = %loop.cond936
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !3560, metadata !DIExpression()), !dbg !3562
  %372 = load i32, ptr %k, align 4, !dbg !3563
  %sext939 = sext i32 %372 to i64, !dbg !3563
  %lt940 = icmp slt i64 %sext939, 0, !dbg !3563
  %373 = call i1 @llvm.expect.i1(i1 %lt940, i1 false), !dbg !3563
  br i1 %373, label %panic941, label %checkok949, !dbg !3563

checkok949:                                       ; preds = %loop.body938
  %ge950 = icmp sge i64 %sext939, 128, !dbg !3563
  %374 = call i1 @llvm.expect.i1(i1 %ge950, i1 false), !dbg !3563
  br i1 %374, label %panic951, label %checkok961, !dbg !3563

checkok961:                                       ; preds = %checkok949
  %ptroffset962 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext939, !dbg !3563
  %375 = load i32, ptr %ptroffset962, align 4, !dbg !3563
  %376 = load i32, ptr %p10, align 4, !dbg !3564
  %zero963 = icmp eq i32 %376, 0, !dbg !3565
  %377 = call i1 @llvm.expect.i1(i1 %zero963, i1 false), !dbg !3565
  br i1 %377, label %panic964, label %checkok968, !dbg !3565

checkok968:                                       ; preds = %checkok961
  %smod969 = srem i32 %375, %376, !dbg !3565
  store i32 %smod969, ptr %tmp, align 4, !dbg !3565
  %378 = load i32, ptr %k, align 4, !dbg !3566
  %sext970 = sext i32 %378 to i64, !dbg !3566
  %lt971 = icmp slt i64 %sext970, 0, !dbg !3566
  %379 = call i1 @llvm.expect.i1(i1 %lt971, i1 false), !dbg !3566
  br i1 %379, label %panic972, label %checkok980, !dbg !3566

checkok980:                                       ; preds = %checkok968
  %ge981 = icmp sge i64 %sext970, 128, !dbg !3566
  %380 = call i1 @llvm.expect.i1(i1 %ge981, i1 false), !dbg !3566
  br i1 %380, label %panic982, label %checkok992, !dbg !3566

checkok992:                                       ; preds = %checkok980
  %ptroffset993 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext970, !dbg !3566
  %381 = load i32, ptr %k, align 4, !dbg !3567
  %sext994 = sext i32 %381 to i64, !dbg !3567
  %lt995 = icmp slt i64 %sext994, 0, !dbg !3567
  %382 = call i1 @llvm.expect.i1(i1 %lt995, i1 false), !dbg !3567
  br i1 %382, label %panic996, label %checkok1004, !dbg !3567

checkok1004:                                      ; preds = %checkok992
  %ge1005 = icmp sge i64 %sext994, 128, !dbg !3567
  %383 = call i1 @llvm.expect.i1(i1 %ge1005, i1 false), !dbg !3567
  br i1 %383, label %panic1006, label %checkok1016, !dbg !3567

checkok1016:                                      ; preds = %checkok1004
  %ptroffset1017 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext994, !dbg !3567
  %384 = load i32, ptr %ptroffset1017, align 4, !dbg !3567
  %385 = load i32, ptr %p10, align 4, !dbg !3568
  %zero1018 = icmp eq i32 %385, 0, !dbg !3569
  %386 = call i1 @llvm.expect.i1(i1 %zero1018, i1 false), !dbg !3569
  br i1 %386, label %panic1019, label %checkok1023, !dbg !3569

checkok1023:                                      ; preds = %checkok1016
  %sdiv = sdiv i32 %384, %385, !dbg !3569
  %387 = load i32, ptr %carry, align 4, !dbg !3570
  %add1024 = add i32 %sdiv, %387, !dbg !3569
  store i32 %add1024, ptr %ptroffset993, align 4, !dbg !3569
  %388 = load i32, ptr %p10, align 4, !dbg !3571
  %zero1025 = icmp eq i32 %388, 0, !dbg !3572
  %389 = call i1 @llvm.expect.i1(i1 %zero1025, i1 false), !dbg !3572
  br i1 %389, label %panic1026, label %checkok1030, !dbg !3572

checkok1030:                                      ; preds = %checkok1023
  %sdiv1031 = sdiv i32 1000000000, %388, !dbg !3572
  %390 = load i32, ptr %tmp, align 4, !dbg !3573
  %mul1032 = mul i32 %sdiv1031, %390, !dbg !3572
  store i32 %mul1032, ptr %carry, align 4, !dbg !3572
  %391 = load i32, ptr %k, align 4, !dbg !3574
  %392 = load i32, ptr %a, align 4, !dbg !3575
  %eq1033 = icmp eq i32 %391, %392, !dbg !3574
  br i1 %eq1033, label %and.rhs1034, label %and.phi1060, !dbg !3574

and.rhs1034:                                      ; preds = %checkok1030
  %393 = load i32, ptr %k, align 4, !dbg !3576
  %sext1035 = sext i32 %393 to i64, !dbg !3576
  %lt1036 = icmp slt i64 %sext1035, 0, !dbg !3576
  %394 = call i1 @llvm.expect.i1(i1 %lt1036, i1 false), !dbg !3576
  br i1 %394, label %panic1037, label %checkok1045, !dbg !3576

checkok1045:                                      ; preds = %and.rhs1034
  %ge1046 = icmp sge i64 %sext1035, 128, !dbg !3576
  %395 = call i1 @llvm.expect.i1(i1 %ge1046, i1 false), !dbg !3576
  br i1 %395, label %panic1047, label %checkok1057, !dbg !3576

checkok1057:                                      ; preds = %checkok1045
  %ptroffset1058 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1035, !dbg !3576
  %396 = load i32, ptr %ptroffset1058, align 4, !dbg !3576
  %not1059 = icmp eq i32 %396, 0, !dbg !3576
  br label %and.phi1060, !dbg !3576

and.phi1060:                                      ; preds = %checkok1057, %checkok1030
  %val1061 = phi i1 [ false, %checkok1030 ], [ %not1059, %checkok1057 ], !dbg !3576
  br i1 %val1061, label %if.then1062, label %if.exit1066, !dbg !3576

if.then1062:                                      ; preds = %and.phi1060
  %397 = load i32, ptr %a, align 4, !dbg !3577
  %add1063 = add i32 %397, 1, !dbg !3577
  %and1064 = and i32 %add1063, 127, !dbg !3577
  store i32 %and1064, ptr %a, align 4, !dbg !3577
  %398 = load i64, ptr %rp800, align 8, !dbg !3579
  %sub1065 = sub i64 %398, 9, !dbg !3579
  store i64 %sub1065, ptr %rp800, align 8, !dbg !3579
  br label %if.exit1066, !dbg !3579

if.exit1066:                                      ; preds = %if.then1062, %and.phi1060
  %399 = load i32, ptr %k, align 4, !dbg !3580
  %add1067 = add i32 %399, 1, !dbg !3580
  store i32 %add1067, ptr %k, align 4, !dbg !3580
  br label %loop.cond936, !dbg !3580

loop.exit1068:                                    ; preds = %loop.cond936
  %400 = load i32, ptr %carry, align 4, !dbg !3581
  %intbool1069 = icmp ne i32 %400, 0, !dbg !3581
  br i1 %intbool1069, label %if.then1070, label %if.exit1096, !dbg !3581

if.then1070:                                      ; preds = %loop.exit1068
  %401 = load i32, ptr %z, align 4, !dbg !3582
  %add1071 = add i32 %401, 1, !dbg !3582
  store i32 %add1071, ptr %z, align 4, !dbg !3582
  %sext1072 = sext i32 %401 to i64, !dbg !3582
  %lt1073 = icmp slt i64 %sext1072, 0, !dbg !3582
  %402 = call i1 @llvm.expect.i1(i1 %lt1073, i1 false), !dbg !3582
  br i1 %402, label %panic1074, label %checkok1082, !dbg !3582

checkok1082:                                      ; preds = %if.then1070
  %ge1083 = icmp sge i64 %sext1072, 128, !dbg !3582
  %403 = call i1 @llvm.expect.i1(i1 %ge1083, i1 false), !dbg !3582
  br i1 %403, label %panic1084, label %checkok1094, !dbg !3582

checkok1094:                                      ; preds = %checkok1082
  %ptroffset1095 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1072, !dbg !3582
  %404 = load i32, ptr %carry, align 4, !dbg !3583
  store i32 %404, ptr %ptroffset1095, align 4, !dbg !3583
  br label %if.exit1096, !dbg !3583

if.exit1096:                                      ; preds = %checkok1094, %loop.exit1068
  %405 = load i64, ptr %rp800, align 8, !dbg !3584
  %406 = load i64, ptr %rpm9, align 8, !dbg !3585
  %sub1097 = sub i64 9, %406, !dbg !3586
  %add1098 = add i64 %405, %sub1097, !dbg !3584
  store i64 %add1098, ptr %rp800, align 8, !dbg !3584
  br label %if.exit1099, !dbg !3584

if.exit1099:                                      ; preds = %if.exit1096, %if.exit904
  br label %loop.cond1100, !dbg !3587

loop.cond1100:                                    ; preds = %if.exit1353, %if.exit1099
  %407 = load i64, ptr %rp800, align 8, !dbg !3588
  %lt1101 = icmp slt i64 %407, 18, !dbg !3588
  br i1 %lt1101, label %or.phi1132, label %or.rhs1102, !dbg !3588

or.rhs1102:                                       ; preds = %loop.cond1100
  %408 = load i64, ptr %rp800, align 8, !dbg !3590
  %eq1103 = icmp eq i64 %408, 18, !dbg !3590
  br i1 %eq1103, label %and.rhs1104, label %and.phi1130, !dbg !3590

and.rhs1104:                                      ; preds = %or.rhs1102
  %409 = load i32, ptr %a, align 4, !dbg !3591
  %sext1105 = sext i32 %409 to i64, !dbg !3591
  %lt1106 = icmp slt i64 %sext1105, 0, !dbg !3591
  %410 = call i1 @llvm.expect.i1(i1 %lt1106, i1 false), !dbg !3591
  br i1 %410, label %panic1107, label %checkok1115, !dbg !3591

checkok1115:                                      ; preds = %and.rhs1104
  %ge1116 = icmp sge i64 %sext1105, 128, !dbg !3591
  %411 = call i1 @llvm.expect.i1(i1 %ge1116, i1 false), !dbg !3591
  br i1 %411, label %panic1117, label %checkok1127, !dbg !3591

checkok1127:                                      ; preds = %checkok1115
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1105, !dbg !3591
  %412 = load i32, ptr %ptroffset1128, align 4, !dbg !3591
  %lt1129 = icmp ult i32 %412, 9007199, !dbg !3592
  br label %and.phi1130, !dbg !3592

and.phi1130:                                      ; preds = %checkok1127, %or.rhs1102
  %val1131 = phi i1 [ false, %or.rhs1102 ], [ %lt1129, %checkok1127 ], !dbg !3592
  br label %or.phi1132, !dbg !3592

or.phi1132:                                       ; preds = %and.phi1130, %loop.cond1100
  %val1133 = phi i1 [ true, %loop.cond1100 ], [ %val1131, %and.phi1130 ], !dbg !3592
  br i1 %val1133, label %loop.body1134, label %loop.exit1354, !dbg !3592

loop.body1134:                                    ; preds = %or.phi1132
  call void @llvm.dbg.declare(metadata ptr %carry1135, metadata !3593, metadata !DIExpression()), !dbg !3595
  store i32 0, ptr %carry1135, align 4, !dbg !3596
  %413 = load i32, ptr %e2799, align 4, !dbg !3597
  %sub1136 = sub i32 %413, 29, !dbg !3597
  store i32 %sub1136, ptr %e2799, align 4, !dbg !3597
  %414 = load i32, ptr %z, align 4, !dbg !3598
  %sub1137 = sub i32 %414, 1, !dbg !3598
  %and1138 = and i32 %sub1137, 127, !dbg !3598
  store i32 %and1138, ptr %k, align 4, !dbg !3598
  br label %loop.body1139, !dbg !3598

loop.body1139:                                    ; preds = %if.exit1264, %loop.body1134
  call void @llvm.dbg.declare(metadata ptr %tmp1140, metadata !3600, metadata !DIExpression()), !dbg !3602
  %415 = load i32, ptr %k, align 4, !dbg !3603
  %sext1141 = sext i32 %415 to i64, !dbg !3603
  %lt1142 = icmp slt i64 %sext1141, 0, !dbg !3603
  %416 = call i1 @llvm.expect.i1(i1 %lt1142, i1 false), !dbg !3603
  br i1 %416, label %panic1143, label %checkok1151, !dbg !3603

checkok1151:                                      ; preds = %loop.body1139
  %ge1152 = icmp sge i64 %sext1141, 128, !dbg !3603
  %417 = call i1 @llvm.expect.i1(i1 %ge1152, i1 false), !dbg !3603
  br i1 %417, label %panic1153, label %checkok1163, !dbg !3603

checkok1163:                                      ; preds = %checkok1151
  %ptroffset1164 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1141, !dbg !3603
  %418 = load i32, ptr %ptroffset1164, align 4, !dbg !3603
  %zext1165 = zext i32 %418 to i64, !dbg !3603
  %shl = shl i64 %zext1165, 29, !dbg !3604
  %419 = freeze i64 %shl, !dbg !3604
  %420 = load i32, ptr %carry1135, align 4, !dbg !3605
  %zext1166 = zext i32 %420 to i64, !dbg !3605
  %add1167 = add i64 %419, %zext1166, !dbg !3604
  store i64 %add1167, ptr %tmp1140, align 8, !dbg !3604
  %421 = load i64, ptr %tmp1140, align 8, !dbg !3606
  %lt1168 = icmp ult i64 1000000000, %421, !dbg !3606
  br i1 %lt1168, label %if.then1169, label %if.else1198, !dbg !3606

if.then1169:                                      ; preds = %checkok1163
  %422 = load i64, ptr %tmp1140, align 8, !dbg !3607
  %sdiv1170 = sdiv i64 %422, 1000000000, !dbg !3609
  %trunc1171 = trunc i64 %sdiv1170 to i32, !dbg !3609
  store i32 %trunc1171, ptr %carry1135, align 4, !dbg !3609
  %423 = load i32, ptr %k, align 4, !dbg !3610
  %sext1172 = sext i32 %423 to i64, !dbg !3610
  %lt1173 = icmp slt i64 %sext1172, 0, !dbg !3610
  %424 = call i1 @llvm.expect.i1(i1 %lt1173, i1 false), !dbg !3610
  br i1 %424, label %panic1174, label %checkok1182, !dbg !3610

checkok1182:                                      ; preds = %if.then1169
  %ge1183 = icmp sge i64 %sext1172, 128, !dbg !3610
  %425 = call i1 @llvm.expect.i1(i1 %ge1183, i1 false), !dbg !3610
  br i1 %425, label %panic1184, label %checkok1194, !dbg !3610

checkok1194:                                      ; preds = %checkok1182
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1172, !dbg !3610
  %426 = load i64, ptr %tmp1140, align 8, !dbg !3611
  %smod1196 = srem i64 %426, 1000000000, !dbg !3612
  %trunc1197 = trunc i64 %smod1196 to i32, !dbg !3612
  store i32 %trunc1197, ptr %ptroffset1195, align 4, !dbg !3612
  br label %if.exit1224, !dbg !3612

if.else1198:                                      ; preds = %checkok1163
  store i32 0, ptr %carry1135, align 4, !dbg !3613
  %427 = load i32, ptr %k, align 4, !dbg !3615
  %sext1199 = sext i32 %427 to i64, !dbg !3615
  %lt1200 = icmp slt i64 %sext1199, 0, !dbg !3615
  %428 = call i1 @llvm.expect.i1(i1 %lt1200, i1 false), !dbg !3615
  br i1 %428, label %panic1201, label %checkok1209, !dbg !3615

checkok1209:                                      ; preds = %if.else1198
  %ge1210 = icmp sge i64 %sext1199, 128, !dbg !3615
  %429 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !3615
  br i1 %429, label %panic1211, label %checkok1221, !dbg !3615

checkok1221:                                      ; preds = %checkok1209
  %ptroffset1222 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1199, !dbg !3615
  %430 = load i64, ptr %tmp1140, align 8, !dbg !3616
  %trunc1223 = trunc i64 %430 to i32, !dbg !3616
  store i32 %trunc1223, ptr %ptroffset1222, align 4, !dbg !3616
  br label %if.exit1224, !dbg !3616

if.exit1224:                                      ; preds = %checkok1221, %checkok1194
  %431 = load i32, ptr %k, align 4, !dbg !3617
  %432 = load i32, ptr %z, align 4, !dbg !3618
  %sub1225 = sub i32 %432, 1, !dbg !3618
  %and1226 = and i32 %sub1225, 127, !dbg !3618
  %eq1227 = icmp eq i32 %431, %and1226, !dbg !3617
  br i1 %eq1227, label %and.rhs1228, label %and.phi1230, !dbg !3617

and.rhs1228:                                      ; preds = %if.exit1224
  %433 = load i32, ptr %k, align 4, !dbg !3619
  %434 = load i32, ptr %a, align 4, !dbg !3620
  %neq1229 = icmp ne i32 %433, %434, !dbg !3619
  br label %and.phi1230, !dbg !3619

and.phi1230:                                      ; preds = %and.rhs1228, %if.exit1224
  %val1231 = phi i1 [ false, %if.exit1224 ], [ %neq1229, %and.rhs1228 ], !dbg !3619
  br i1 %val1231, label %and.rhs1232, label %and.phi1258, !dbg !3619

and.rhs1232:                                      ; preds = %and.phi1230
  %435 = load i32, ptr %k, align 4, !dbg !3621
  %sext1233 = sext i32 %435 to i64, !dbg !3621
  %lt1234 = icmp slt i64 %sext1233, 0, !dbg !3621
  %436 = call i1 @llvm.expect.i1(i1 %lt1234, i1 false), !dbg !3621
  br i1 %436, label %panic1235, label %checkok1243, !dbg !3621

checkok1243:                                      ; preds = %and.rhs1232
  %ge1244 = icmp sge i64 %sext1233, 128, !dbg !3621
  %437 = call i1 @llvm.expect.i1(i1 %ge1244, i1 false), !dbg !3621
  br i1 %437, label %panic1245, label %checkok1255, !dbg !3621

checkok1255:                                      ; preds = %checkok1243
  %ptroffset1256 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1233, !dbg !3621
  %438 = load i32, ptr %ptroffset1256, align 4, !dbg !3621
  %not1257 = icmp eq i32 %438, 0, !dbg !3621
  br label %and.phi1258, !dbg !3621

and.phi1258:                                      ; preds = %checkok1255, %and.phi1230
  %val1259 = phi i1 [ false, %and.phi1230 ], [ %not1257, %checkok1255 ], !dbg !3621
  br i1 %val1259, label %if.then1260, label %if.exit1261, !dbg !3621

if.then1260:                                      ; preds = %and.phi1258
  %439 = load i32, ptr %k, align 4, !dbg !3622
  store i32 %439, ptr %z, align 4, !dbg !3622
  br label %if.exit1261, !dbg !3622

if.exit1261:                                      ; preds = %if.then1260, %and.phi1258
  %440 = load i32, ptr %k, align 4, !dbg !3623
  %441 = load i32, ptr %a, align 4, !dbg !3624
  %eq1262 = icmp eq i32 %440, %441, !dbg !3623
  br i1 %eq1262, label %if.then1263, label %if.exit1264, !dbg !3623

if.then1263:                                      ; preds = %if.exit1261
  br label %loop.exit1267, !dbg !3625

if.exit1264:                                      ; preds = %if.exit1261
  %442 = load i32, ptr %k, align 4, !dbg !3626
  %sub1265 = sub i32 %442, 1, !dbg !3626
  %and1266 = and i32 %sub1265, 127, !dbg !3626
  store i32 %and1266, ptr %k, align 4, !dbg !3626
  br label %loop.body1139, !dbg !3626

loop.exit1267:                                    ; preds = %if.then1263
  %443 = load i32, ptr %carry1135, align 4, !dbg !3627
  %intbool1268 = icmp ne i32 %443, 0, !dbg !3627
  br i1 %intbool1268, label %if.then1269, label %if.exit1353, !dbg !3627

if.then1269:                                      ; preds = %loop.exit1267
  %444 = load i64, ptr %rp800, align 8, !dbg !3628
  %add1270 = add i64 %444, 9, !dbg !3628
  store i64 %add1270, ptr %rp800, align 8, !dbg !3628
  %445 = load i32, ptr %a, align 4, !dbg !3630
  %sub1271 = sub i32 %445, 1, !dbg !3630
  %and1272 = and i32 %sub1271, 127, !dbg !3630
  store i32 %and1272, ptr %a, align 4, !dbg !3630
  %446 = load i32, ptr %a, align 4, !dbg !3631
  %447 = load i32, ptr %z, align 4, !dbg !3632
  %eq1273 = icmp eq i32 %446, %447, !dbg !3631
  br i1 %eq1273, label %if.then1274, label %if.exit1328, !dbg !3631

if.then1274:                                      ; preds = %if.then1269
  %448 = load i32, ptr %z, align 4, !dbg !3633
  %sub1275 = sub i32 %448, 1, !dbg !3633
  %and1276 = and i32 %sub1275, 127, !dbg !3633
  store i32 %and1276, ptr %z, align 4, !dbg !3633
  %449 = load i32, ptr %z, align 4, !dbg !3635
  %sub1277 = sub i32 %449, 1, !dbg !3635
  %and1278 = and i32 %sub1277, 127, !dbg !3635
  %sext1279 = sext i32 %and1278 to i64, !dbg !3635
  %lt1280 = icmp slt i64 %sext1279, 0, !dbg !3635
  %450 = call i1 @llvm.expect.i1(i1 %lt1280, i1 false), !dbg !3635
  br i1 %450, label %panic1281, label %checkok1289, !dbg !3635

checkok1289:                                      ; preds = %if.then1274
  %ge1290 = icmp sge i64 %sext1279, 128, !dbg !3635
  %451 = call i1 @llvm.expect.i1(i1 %ge1290, i1 false), !dbg !3635
  br i1 %451, label %panic1291, label %checkok1301, !dbg !3635

checkok1301:                                      ; preds = %checkok1289
  %ptroffset1302 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1279, !dbg !3635
  %452 = load i32, ptr %ptroffset1302, align 4, !dbg !3635
  %453 = load i32, ptr %z, align 4, !dbg !3636
  %sext1303 = sext i32 %453 to i64, !dbg !3636
  %lt1304 = icmp slt i64 %sext1303, 0, !dbg !3636
  %454 = call i1 @llvm.expect.i1(i1 %lt1304, i1 false), !dbg !3636
  br i1 %454, label %panic1305, label %checkok1313, !dbg !3636

checkok1313:                                      ; preds = %checkok1301
  %ge1314 = icmp sge i64 %sext1303, 128, !dbg !3636
  %455 = call i1 @llvm.expect.i1(i1 %ge1314, i1 false), !dbg !3636
  br i1 %455, label %panic1315, label %checkok1325, !dbg !3636

checkok1325:                                      ; preds = %checkok1313
  %ptroffset1326 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1303, !dbg !3636
  %456 = load i32, ptr %ptroffset1326, align 4, !dbg !3636
  %or1327 = or i32 %452, %456, !dbg !3637
  store i32 %or1327, ptr %ptroffset1302, align 4, !dbg !3637
  br label %if.exit1328, !dbg !3637

if.exit1328:                                      ; preds = %checkok1325, %if.then1269
  %457 = load i32, ptr %a, align 4, !dbg !3638
  %sext1329 = sext i32 %457 to i64, !dbg !3638
  %lt1330 = icmp slt i64 %sext1329, 0, !dbg !3638
  %458 = call i1 @llvm.expect.i1(i1 %lt1330, i1 false), !dbg !3638
  br i1 %458, label %panic1331, label %checkok1339, !dbg !3638

checkok1339:                                      ; preds = %if.exit1328
  %ge1340 = icmp sge i64 %sext1329, 128, !dbg !3638
  %459 = call i1 @llvm.expect.i1(i1 %ge1340, i1 false), !dbg !3638
  br i1 %459, label %panic1341, label %checkok1351, !dbg !3638

checkok1351:                                      ; preds = %checkok1339
  %ptroffset1352 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1329, !dbg !3638
  %460 = load i32, ptr %carry1135, align 4, !dbg !3639
  store i32 %460, ptr %ptroffset1352, align 4, !dbg !3639
  br label %if.exit1353, !dbg !3639

if.exit1353:                                      ; preds = %checkok1351, %loop.exit1267
  br label %loop.cond1100, !dbg !3639

loop.exit1354:                                    ; preds = %or.phi1132
  br label %loop.body1355, !dbg !3640

loop.body1355:                                    ; preds = %if.exit1713, %loop.exit1354
  call void @llvm.dbg.declare(metadata ptr %carry1356, metadata !3641, metadata !DIExpression()), !dbg !3644
  store i32 0, ptr %carry1356, align 4, !dbg !3645
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !3646, metadata !DIExpression()), !dbg !3647
  store i32 1, ptr %sh, align 4, !dbg !3648
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3649, metadata !DIExpression()), !dbg !3650
  store i32 0, ptr %i, align 4, !dbg !3650
  store i32 0, ptr %i, align 4, !dbg !3651
  br label %loop.cond1357, !dbg !3651

loop.cond1357:                                    ; preds = %if.exit1469, %loop.body1355
  %461 = load i32, ptr %i, align 4, !dbg !3653
  %lt1358 = icmp slt i32 %461, 2, !dbg !3653
  br i1 %lt1358, label %loop.body1359, label %loop.exit1471, !dbg !3653

loop.body1359:                                    ; preds = %loop.cond1357
  %462 = load i32, ptr %a, align 4, !dbg !3654
  %463 = load i32, ptr %i, align 4, !dbg !3656
  %add1360 = add i32 %462, %463, !dbg !3654
  %and1361 = and i32 %add1360, 127, !dbg !3654
  store i32 %and1361, ptr %k, align 4, !dbg !3654
  %464 = load i32, ptr %k, align 4, !dbg !3657
  %465 = load i32, ptr %z, align 4, !dbg !3658
  %eq1362 = icmp eq i32 %464, %465, !dbg !3657
  br i1 %eq1362, label %or.phi1413, label %or.rhs1363, !dbg !3657

or.rhs1363:                                       ; preds = %loop.body1359
  %466 = load i32, ptr %k, align 4, !dbg !3659
  %sext1364 = sext i32 %466 to i64, !dbg !3659
  %lt1365 = icmp slt i64 %sext1364, 0, !dbg !3659
  %467 = call i1 @llvm.expect.i1(i1 %lt1365, i1 false), !dbg !3659
  br i1 %467, label %panic1366, label %checkok1374, !dbg !3659

checkok1374:                                      ; preds = %or.rhs1363
  %ge1375 = icmp sge i64 %sext1364, 128, !dbg !3659
  %468 = call i1 @llvm.expect.i1(i1 %ge1375, i1 false), !dbg !3659
  br i1 %468, label %panic1376, label %checkok1386, !dbg !3659

checkok1386:                                      ; preds = %checkok1374
  %ptroffset1387 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1364, !dbg !3659
  %469 = load i32, ptr %ptroffset1387, align 4, !dbg !3659
  %470 = load i32, ptr %i, align 4, !dbg !3660
  %sext1388 = sext i32 %470 to i64, !dbg !3660
  %lt1389 = icmp slt i64 %sext1388, 0, !dbg !3660
  %471 = call i1 @llvm.expect.i1(i1 %lt1389, i1 false), !dbg !3660
  br i1 %471, label %panic1390, label %checkok1398, !dbg !3660

checkok1398:                                      ; preds = %checkok1386
  %ge1399 = icmp sge i64 %sext1388, 2, !dbg !3660
  %472 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !3660
  br i1 %472, label %panic1400, label %checkok1410, !dbg !3660

checkok1410:                                      ; preds = %checkok1398
  %ptroffset1411 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1388, !dbg !3660
  %473 = load i32, ptr %ptroffset1411, align 4, !dbg !3660
  %lt1412 = icmp ult i32 %469, %473, !dbg !3661
  br label %or.phi1413, !dbg !3661

or.phi1413:                                       ; preds = %checkok1410, %loop.body1359
  %val1414 = phi i1 [ true, %loop.body1359 ], [ %lt1412, %checkok1410 ], !dbg !3661
  br i1 %val1414, label %if.then1415, label %if.exit1416, !dbg !3661

if.then1415:                                      ; preds = %or.phi1413
  store i32 2, ptr %i, align 4, !dbg !3662
  br label %loop.exit1471, !dbg !3664

if.exit1416:                                      ; preds = %or.phi1413
  %474 = load i32, ptr %a, align 4, !dbg !3665
  %475 = load i32, ptr %i, align 4, !dbg !3666
  %add1417 = add i32 %474, %475, !dbg !3665
  %and1418 = and i32 %add1417, 127, !dbg !3665
  %sext1419 = sext i32 %and1418 to i64, !dbg !3665
  %lt1420 = icmp slt i64 %sext1419, 0, !dbg !3665
  %476 = call i1 @llvm.expect.i1(i1 %lt1420, i1 false), !dbg !3665
  br i1 %476, label %panic1421, label %checkok1429, !dbg !3665

checkok1429:                                      ; preds = %if.exit1416
  %ge1430 = icmp sge i64 %sext1419, 128, !dbg !3665
  %477 = call i1 @llvm.expect.i1(i1 %ge1430, i1 false), !dbg !3665
  br i1 %477, label %panic1431, label %checkok1441, !dbg !3665

checkok1441:                                      ; preds = %checkok1429
  %ptroffset1442 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1419, !dbg !3665
  %478 = load i32, ptr %ptroffset1442, align 4, !dbg !3665
  %479 = load i32, ptr %i, align 4, !dbg !3667
  %sext1443 = sext i32 %479 to i64, !dbg !3667
  %lt1444 = icmp slt i64 %sext1443, 0, !dbg !3667
  %480 = call i1 @llvm.expect.i1(i1 %lt1444, i1 false), !dbg !3667
  br i1 %480, label %panic1445, label %checkok1453, !dbg !3667

checkok1453:                                      ; preds = %checkok1441
  %ge1454 = icmp sge i64 %sext1443, 2, !dbg !3667
  %481 = call i1 @llvm.expect.i1(i1 %ge1454, i1 false), !dbg !3667
  br i1 %481, label %panic1455, label %checkok1465, !dbg !3667

checkok1465:                                      ; preds = %checkok1453
  %ptroffset1466 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1443, !dbg !3667
  %482 = load i32, ptr %ptroffset1466, align 4, !dbg !3667
  %gt1467 = icmp ugt i32 %478, %482, !dbg !3668
  br i1 %gt1467, label %if.then1468, label %if.exit1469, !dbg !3668

if.then1468:                                      ; preds = %checkok1465
  br label %loop.exit1471, !dbg !3669

if.exit1469:                                      ; preds = %checkok1465
  %483 = load i32, ptr %i, align 4, !dbg !3670
  %add1470 = add i32 %483, 1, !dbg !3670
  store i32 %add1470, ptr %i, align 4, !dbg !3670
  br label %loop.cond1357, !dbg !3670

loop.exit1471:                                    ; preds = %if.then1468, %if.then1415, %loop.cond1357
  %484 = load i32, ptr %i, align 4, !dbg !3671
  %eq1472 = icmp eq i32 %484, 2, !dbg !3671
  br i1 %eq1472, label %and.rhs1473, label %and.phi1475, !dbg !3671

and.rhs1473:                                      ; preds = %loop.exit1471
  %485 = load i64, ptr %rp800, align 8, !dbg !3672
  %eq1474 = icmp eq i64 %485, 18, !dbg !3672
  br label %and.phi1475, !dbg !3672

and.phi1475:                                      ; preds = %and.rhs1473, %loop.exit1471
  %val1476 = phi i1 [ false, %loop.exit1471 ], [ %eq1474, %and.rhs1473 ], !dbg !3672
  br i1 %val1476, label %if.then1477, label %if.exit1478, !dbg !3672

if.then1477:                                      ; preds = %and.phi1475
  br label %loop.exit1714, !dbg !3673

if.exit1478:                                      ; preds = %and.phi1475
  %486 = load i64, ptr %rp800, align 8, !dbg !3674
  %gt1479 = icmp sgt i64 %486, 27, !dbg !3674
  br i1 %gt1479, label %if.then1480, label %if.exit1481, !dbg !3674

if.then1480:                                      ; preds = %if.exit1478
  store i32 9, ptr %sh, align 4, !dbg !3675
  br label %if.exit1481, !dbg !3675

if.exit1481:                                      ; preds = %if.then1480, %if.exit1478
  %487 = load i32, ptr %e2799, align 4, !dbg !3676
  %488 = load i32, ptr %sh, align 4, !dbg !3677
  %add1482 = add i32 %487, %488, !dbg !3676
  store i32 %add1482, ptr %e2799, align 4, !dbg !3676
  %489 = load i32, ptr %a, align 4, !dbg !3678
  store i32 %489, ptr %k, align 4, !dbg !3678
  br label %loop.cond1483, !dbg !3678

loop.cond1483:                                    ; preds = %if.exit1648, %if.exit1481
  %490 = load i32, ptr %k, align 4, !dbg !3680
  %491 = load i32, ptr %z, align 4, !dbg !3681
  %neq1484 = icmp ne i32 %490, %491, !dbg !3680
  br i1 %neq1484, label %loop.body1485, label %loop.exit1651, !dbg !3680

loop.body1485:                                    ; preds = %loop.cond1483
  call void @llvm.dbg.declare(metadata ptr %tmp1486, metadata !3682, metadata !DIExpression()), !dbg !3684
  %492 = load i32, ptr %k, align 4, !dbg !3685
  %sext1487 = sext i32 %492 to i64, !dbg !3685
  %lt1488 = icmp slt i64 %sext1487, 0, !dbg !3685
  %493 = call i1 @llvm.expect.i1(i1 %lt1488, i1 false), !dbg !3685
  br i1 %493, label %panic1489, label %checkok1497, !dbg !3685

checkok1497:                                      ; preds = %loop.body1485
  %ge1498 = icmp sge i64 %sext1487, 128, !dbg !3685
  %494 = call i1 @llvm.expect.i1(i1 %ge1498, i1 false), !dbg !3685
  br i1 %494, label %panic1499, label %checkok1509, !dbg !3685

checkok1509:                                      ; preds = %checkok1497
  %ptroffset1510 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1487, !dbg !3685
  %495 = load i32, ptr %ptroffset1510, align 4, !dbg !3685
  %496 = load i32, ptr %sh, align 4, !dbg !3686
  %shift_underflow = icmp slt i32 %496, 0, !dbg !3687
  %497 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3687
  br i1 %497, label %panic1511, label %checkok1519, !dbg !3687

checkok1519:                                      ; preds = %checkok1509
  %shift_exceeds1520 = icmp sge i32 %496, 32, !dbg !3687
  %498 = call i1 @llvm.expect.i1(i1 %shift_exceeds1520, i1 false), !dbg !3687
  br i1 %498, label %panic1521, label %checkok1529, !dbg !3687

checkok1529:                                      ; preds = %checkok1519
  %shl1530 = shl i32 1, %496, !dbg !3687
  %499 = freeze i32 %shl1530, !dbg !3687
  %sub1531 = sub i32 %499, 1, !dbg !3687
  %and1532 = and i32 %495, %sub1531, !dbg !3688
  store i32 %and1532, ptr %tmp1486, align 4, !dbg !3688
  %500 = load i32, ptr %k, align 4, !dbg !3689
  %sext1533 = sext i32 %500 to i64, !dbg !3689
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !3689
  %501 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !3689
  br i1 %501, label %panic1535, label %checkok1543, !dbg !3689

checkok1543:                                      ; preds = %checkok1529
  %ge1544 = icmp sge i64 %sext1533, 128, !dbg !3689
  %502 = call i1 @llvm.expect.i1(i1 %ge1544, i1 false), !dbg !3689
  br i1 %502, label %panic1545, label %checkok1555, !dbg !3689

checkok1555:                                      ; preds = %checkok1543
  %ptroffset1556 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1533, !dbg !3689
  %503 = load i32, ptr %k, align 4, !dbg !3690
  %sext1557 = sext i32 %503 to i64, !dbg !3690
  %lt1558 = icmp slt i64 %sext1557, 0, !dbg !3690
  %504 = call i1 @llvm.expect.i1(i1 %lt1558, i1 false), !dbg !3690
  br i1 %504, label %panic1559, label %checkok1567, !dbg !3690

checkok1567:                                      ; preds = %checkok1555
  %ge1568 = icmp sge i64 %sext1557, 128, !dbg !3690
  %505 = call i1 @llvm.expect.i1(i1 %ge1568, i1 false), !dbg !3690
  br i1 %505, label %panic1569, label %checkok1579, !dbg !3690

checkok1579:                                      ; preds = %checkok1567
  %ptroffset1580 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1557, !dbg !3690
  %506 = load i32, ptr %ptroffset1580, align 4, !dbg !3690
  %507 = load i32, ptr %sh, align 4, !dbg !3691
  %shift_exceeds1581 = icmp uge i32 %507, 32, !dbg !3692
  %508 = call i1 @llvm.expect.i1(i1 %shift_exceeds1581, i1 false), !dbg !3692
  br i1 %508, label %panic1582, label %checkok1590, !dbg !3692

checkok1590:                                      ; preds = %checkok1579
  %lshr1591 = lshr i32 %506, %507, !dbg !3692
  %509 = freeze i32 %lshr1591, !dbg !3692
  %510 = load i32, ptr %carry1356, align 4, !dbg !3693
  %add1592 = add i32 %509, %510, !dbg !3692
  store i32 %add1592, ptr %ptroffset1556, align 4, !dbg !3692
  %511 = load i32, ptr %sh, align 4, !dbg !3694
  %shift_underflow1593 = icmp slt i32 %511, 0, !dbg !3695
  %512 = call i1 @llvm.expect.i1(i1 %shift_underflow1593, i1 false), !dbg !3695
  br i1 %512, label %panic1594, label %checkok1602, !dbg !3695

checkok1602:                                      ; preds = %checkok1590
  %shift_exceeds1603 = icmp sge i32 %511, 32, !dbg !3695
  %513 = call i1 @llvm.expect.i1(i1 %shift_exceeds1603, i1 false), !dbg !3695
  br i1 %513, label %panic1604, label %checkok1612, !dbg !3695

checkok1612:                                      ; preds = %checkok1602
  %ashr = ashr i32 1000000000, %511, !dbg !3695
  %514 = freeze i32 %ashr, !dbg !3695
  %515 = load i32, ptr %tmp1486, align 4, !dbg !3696
  %mul1613 = mul i32 %514, %515, !dbg !3695
  store i32 %mul1613, ptr %carry1356, align 4, !dbg !3695
  %516 = load i32, ptr %k, align 4, !dbg !3697
  %517 = load i32, ptr %a, align 4, !dbg !3698
  %eq1614 = icmp eq i32 %516, %517, !dbg !3697
  br i1 %eq1614, label %and.rhs1615, label %and.phi1641, !dbg !3697

and.rhs1615:                                      ; preds = %checkok1612
  %518 = load i32, ptr %k, align 4, !dbg !3699
  %sext1616 = sext i32 %518 to i64, !dbg !3699
  %lt1617 = icmp slt i64 %sext1616, 0, !dbg !3699
  %519 = call i1 @llvm.expect.i1(i1 %lt1617, i1 false), !dbg !3699
  br i1 %519, label %panic1618, label %checkok1626, !dbg !3699

checkok1626:                                      ; preds = %and.rhs1615
  %ge1627 = icmp sge i64 %sext1616, 128, !dbg !3699
  %520 = call i1 @llvm.expect.i1(i1 %ge1627, i1 false), !dbg !3699
  br i1 %520, label %panic1628, label %checkok1638, !dbg !3699

checkok1638:                                      ; preds = %checkok1626
  %ptroffset1639 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1616, !dbg !3699
  %521 = load i32, ptr %ptroffset1639, align 4, !dbg !3699
  %not1640 = icmp eq i32 %521, 0, !dbg !3699
  br label %and.phi1641, !dbg !3699

and.phi1641:                                      ; preds = %checkok1638, %checkok1612
  %val1642 = phi i1 [ false, %checkok1612 ], [ %not1640, %checkok1638 ], !dbg !3699
  br i1 %val1642, label %if.then1643, label %if.exit1648, !dbg !3699

if.then1643:                                      ; preds = %and.phi1641
  %522 = load i32, ptr %a, align 4, !dbg !3700
  %add1644 = add i32 %522, 1, !dbg !3700
  %and1645 = and i32 %add1644, 127, !dbg !3700
  store i32 %and1645, ptr %a, align 4, !dbg !3700
  %523 = load i32, ptr %i, align 4, !dbg !3702
  %sub1646 = sub i32 %523, 1, !dbg !3702
  store i32 %sub1646, ptr %i, align 4, !dbg !3702
  %524 = load i64, ptr %rp800, align 8, !dbg !3703
  %sub1647 = sub i64 %524, 9, !dbg !3703
  store i64 %sub1647, ptr %rp800, align 8, !dbg !3703
  br label %if.exit1648, !dbg !3703

if.exit1648:                                      ; preds = %if.then1643, %and.phi1641
  %525 = load i32, ptr %k, align 4, !dbg !3704
  %add1649 = add i32 %525, 1, !dbg !3704
  %and1650 = and i32 %add1649, 127, !dbg !3704
  store i32 %and1650, ptr %k, align 4, !dbg !3704
  br label %loop.cond1483, !dbg !3704

loop.exit1651:                                    ; preds = %loop.cond1483
  %526 = load i32, ptr %carry1356, align 4, !dbg !3705
  %intbool1652 = icmp ne i32 %526, 0, !dbg !3705
  br i1 %intbool1652, label %if.then1653, label %if.exit1713, !dbg !3705

if.then1653:                                      ; preds = %loop.exit1651
  %527 = load i32, ptr %z, align 4, !dbg !3706
  %add1654 = add i32 %527, 1, !dbg !3706
  %and1655 = and i32 %add1654, 127, !dbg !3706
  %528 = load i32, ptr %a, align 4, !dbg !3708
  %neq1656 = icmp ne i32 %and1655, %528, !dbg !3706
  br i1 %neq1656, label %if.then1657, label %if.else1684, !dbg !3706

if.then1657:                                      ; preds = %if.then1653
  %529 = load i32, ptr %z, align 4, !dbg !3709
  %sext1658 = sext i32 %529 to i64, !dbg !3709
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !3709
  %530 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !3709
  br i1 %530, label %panic1660, label %checkok1668, !dbg !3709

checkok1668:                                      ; preds = %if.then1657
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !3709
  %531 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !3709
  br i1 %531, label %panic1670, label %checkok1680, !dbg !3709

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1658, !dbg !3709
  %532 = load i32, ptr %carry1356, align 4, !dbg !3711
  store i32 %532, ptr %ptroffset1681, align 4, !dbg !3711
  %533 = load i32, ptr %z, align 4, !dbg !3712
  %add1682 = add i32 %533, 1, !dbg !3712
  %and1683 = and i32 %add1682, 127, !dbg !3712
  store i32 %and1683, ptr %z, align 4, !dbg !3712
  br label %if.exit1712, !dbg !3712

if.else1684:                                      ; preds = %if.then1653
  %534 = load i32, ptr %z, align 4, !dbg !3713
  %sub1685 = sub i32 %534, 1, !dbg !3713
  %and1686 = and i32 %sub1685, 127, !dbg !3713
  %sext1687 = sext i32 %and1686 to i64, !dbg !3713
  %lt1688 = icmp slt i64 %sext1687, 0, !dbg !3713
  %535 = call i1 @llvm.expect.i1(i1 %lt1688, i1 false), !dbg !3713
  br i1 %535, label %panic1689, label %checkok1697, !dbg !3713

checkok1697:                                      ; preds = %if.else1684
  %ge1698 = icmp sge i64 %sext1687, 128, !dbg !3713
  %536 = call i1 @llvm.expect.i1(i1 %ge1698, i1 false), !dbg !3713
  br i1 %536, label %panic1699, label %checkok1709, !dbg !3713

checkok1709:                                      ; preds = %checkok1697
  %ptroffset1710 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1687, !dbg !3713
  %537 = load i32, ptr %ptroffset1710, align 4, !dbg !3713
  %or1711 = or i32 %537, 1, !dbg !3715
  store i32 %or1711, ptr %ptroffset1710, align 4, !dbg !3715
  br label %if.exit1712, !dbg !3715

if.exit1712:                                      ; preds = %checkok1709, %checkok1680
  br label %if.exit1713, !dbg !3715

if.exit1713:                                      ; preds = %if.exit1712, %loop.exit1651
  br label %loop.body1355, !dbg !3715

loop.exit1714:                                    ; preds = %if.then1477
  call void @llvm.dbg.declare(metadata ptr %y1715, metadata !3716, metadata !DIExpression()), !dbg !3717
  store double 0.000000e+00, ptr %y1715, align 8, !dbg !3717
  call void @llvm.dbg.declare(metadata ptr %i1716, metadata !3718, metadata !DIExpression()), !dbg !3719
  store i32 0, ptr %i1716, align 4, !dbg !3719
  store i32 0, ptr %i1716, align 4, !dbg !3720
  br label %loop.cond1717, !dbg !3720

loop.cond1717:                                    ; preds = %checkok1777, %loop.exit1714
  %538 = load i32, ptr %i1716, align 4, !dbg !3722
  %lt1718 = icmp slt i32 %538, 2, !dbg !3722
  br i1 %lt1718, label %loop.body1719, label %loop.exit1782, !dbg !3722

loop.body1719:                                    ; preds = %loop.cond1717
  %539 = load i32, ptr %a, align 4, !dbg !3723
  %540 = load i32, ptr %i1716, align 4, !dbg !3725
  %add1720 = add i32 %539, %540, !dbg !3723
  %and1721 = and i32 %add1720, 127, !dbg !3723
  %541 = load i32, ptr %z, align 4, !dbg !3726
  %eq1722 = icmp eq i32 %and1721, %541, !dbg !3723
  br i1 %eq1722, label %if.then1723, label %if.exit1751, !dbg !3723

if.then1723:                                      ; preds = %loop.body1719
  %542 = load i32, ptr %z, align 4, !dbg !3727
  %add1724 = add i32 %542, 1, !dbg !3727
  %and1725 = and i32 %add1724, 127, !dbg !3727
  store i32 %and1725, ptr %z, align 4, !dbg !3727
  %sub1726 = sub i32 %and1725, 1, !dbg !3728
  %sext1727 = sext i32 %sub1726 to i64, !dbg !3728
  %lt1728 = icmp slt i64 %sext1727, 0, !dbg !3728
  %543 = call i1 @llvm.expect.i1(i1 %lt1728, i1 false), !dbg !3728
  br i1 %543, label %panic1729, label %checkok1737, !dbg !3728

checkok1737:                                      ; preds = %if.then1723
  %ge1738 = icmp sge i64 %sext1727, 128, !dbg !3728
  %544 = call i1 @llvm.expect.i1(i1 %ge1738, i1 false), !dbg !3728
  br i1 %544, label %panic1739, label %checkok1749, !dbg !3728

checkok1749:                                      ; preds = %checkok1737
  %ptroffset1750 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1727, !dbg !3728
  store i32 0, ptr %ptroffset1750, align 4, !dbg !3729
  br label %if.exit1751, !dbg !3729

if.exit1751:                                      ; preds = %checkok1749, %loop.body1719
  %545 = load double, ptr %y1715, align 8, !dbg !3730
  %fmul1752 = fmul double 1.000000e+09, %545, !dbg !3731
  %546 = load i32, ptr %a, align 4, !dbg !3732
  %547 = load i32, ptr %i1716, align 4, !dbg !3733
  %add1753 = add i32 %546, %547, !dbg !3732
  %and1754 = and i32 %add1753, 127, !dbg !3732
  %sext1755 = sext i32 %and1754 to i64, !dbg !3732
  %lt1756 = icmp slt i64 %sext1755, 0, !dbg !3732
  %548 = call i1 @llvm.expect.i1(i1 %lt1756, i1 false), !dbg !3732
  br i1 %548, label %panic1757, label %checkok1765, !dbg !3732

checkok1765:                                      ; preds = %if.exit1751
  %ge1766 = icmp sge i64 %sext1755, 128, !dbg !3732
  %549 = call i1 @llvm.expect.i1(i1 %ge1766, i1 false), !dbg !3732
  br i1 %549, label %panic1767, label %checkok1777, !dbg !3732

checkok1777:                                      ; preds = %checkok1765
  %ptroffset1778 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1755, !dbg !3732
  %550 = load i32, ptr %ptroffset1778, align 4, !dbg !3732
  %uifp1779 = uitofp i32 %550 to double, !dbg !3732
  %fadd1780 = fadd double %fmul1752, %uifp1779, !dbg !3731
  store double %fadd1780, ptr %y1715, align 8, !dbg !3731
  %551 = load i32, ptr %i1716, align 4, !dbg !3734
  %add1781 = add i32 %551, 1, !dbg !3734
  store i32 %add1781, ptr %i1716, align 4, !dbg !3734
  br label %loop.cond1717, !dbg !3734

loop.exit1782:                                    ; preds = %loop.cond1717
  %552 = load double, ptr %y1715, align 8, !dbg !3735
  %553 = load i32, ptr %sign420, align 4, !dbg !3736
  %sifp1783 = sitofp i32 %553 to double, !dbg !3736
  %fmul1784 = fmul double %552, %sifp1783, !dbg !3735
  store double %fmul1784, ptr %y1715, align 8, !dbg !3735
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !3737, metadata !DIExpression()), !dbg !3738
  store i8 0, ptr %denormal, align 1, !dbg !3738
  call void @llvm.dbg.declare(metadata ptr %bits1785, metadata !3739, metadata !DIExpression()), !dbg !3740
  store i32 24, ptr %bits1785, align 4, !dbg !3741
  %554 = load i32, ptr %bits1785, align 4, !dbg !3742
  %555 = load i32, ptr %e2799, align 4, !dbg !3743
  %add1786 = add i32 53, %555, !dbg !3744
  %sub1787 = sub i32 %add1786, -149, !dbg !3744
  %lt1788 = icmp slt i32 %sub1787, %554, !dbg !3742
  %check1789 = icmp slt i32 %554, 0, !dbg !3742
  %siui-lt1790 = or i1 %check1789, %lt1788, !dbg !3742
  br i1 %siui-lt1790, label %if.then1791, label %if.exit1797, !dbg !3742

if.then1791:                                      ; preds = %loop.exit1782
  %556 = load i32, ptr %e2799, align 4, !dbg !3745
  %add1792 = add i32 53, %556, !dbg !3747
  %sub1793 = sub i32 %add1792, -149, !dbg !3747
  store i32 %sub1793, ptr %bits1785, align 4, !dbg !3747
  %557 = load i32, ptr %bits1785, align 4, !dbg !3748
  %gt1794 = icmp ugt i32 0, %557, !dbg !3748
  br i1 %gt1794, label %if.then1795, label %if.exit1796, !dbg !3748

if.then1795:                                      ; preds = %if.then1791
  store i32 0, ptr %bits1785, align 4, !dbg !3749
  br label %if.exit1796, !dbg !3749

if.exit1796:                                      ; preds = %if.then1795, %if.then1791
  store i8 1, ptr %denormal, align 1, !dbg !3750
  br label %if.exit1797, !dbg !3750

if.exit1797:                                      ; preds = %if.exit1796, %loop.exit1782
  call void @llvm.dbg.declare(metadata ptr %bias1798, metadata !3751, metadata !DIExpression()), !dbg !3752
  store double 0.000000e+00, ptr %bias1798, align 8, !dbg !3752
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !3753, metadata !DIExpression()), !dbg !3754
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3754
  %558 = load i32, ptr %bits1785, align 4, !dbg !3755
  %gt1799 = icmp ugt i32 53, %558, !dbg !3755
  br i1 %gt1799, label %if.then1800, label %if.exit1820, !dbg !3755

if.then1800:                                      ; preds = %if.exit1797
  store double 1.000000e+00, ptr %x1801, align 8
  %559 = load i32, ptr %bits1785, align 4, !dbg !3756
  %sub1802 = sub i32 106, %559, !dbg !3758
  %sub1803 = sub i32 %sub1802, 1, !dbg !3758
  store i32 %sub1803, ptr %n1804, align 4
  %560 = load double, ptr %x1801, align 8, !dbg !3759
  %561 = load i32, ptr %n1804, align 4, !dbg !3759
  %562 = call double @scalbn(double %560, i32 %561), !dbg !3762
  store double %562, ptr %mag1805, align 8
  %563 = load double, ptr %y1715, align 8
  store double %563, ptr %sgn1806, align 8
  %564 = load double, ptr %mag1805, align 8
  store double %564, ptr %x1807, align 8
  %565 = load double, ptr %sgn1806, align 8
  store double %565, ptr %y1808, align 8
  %566 = load double, ptr %x1807, align 8, !dbg !3763
  %567 = load double, ptr %sgn1806, align 8, !dbg !3768
  %568 = call double @llvm.copysign.f64(double %566, double %567), !dbg !3768
  store double %568, ptr %bias1798, align 8, !dbg !3768
  %569 = load double, ptr %y1715, align 8, !dbg !3769
  store double 1.000000e+00, ptr %x1809, align 8
  %570 = load i32, ptr %bits1785, align 4, !dbg !3770
  %sub1810 = sub i32 53, %570, !dbg !3771
  store i32 %sub1810, ptr %n1811, align 4
  %571 = load double, ptr %x1809, align 8, !dbg !3772
  %572 = load i32, ptr %n1811, align 4, !dbg !3772
  %573 = call double @scalbn(double %571, i32 %572), !dbg !3775
  %zero1812 = fcmp ueq double %573, 0.000000e+00, !dbg !3769
  %574 = call i1 @llvm.expect.i1(i1 %zero1812, i1 false), !dbg !3769
  br i1 %574, label %panic1813, label %checkok1817, !dbg !3769

checkok1817:                                      ; preds = %if.then1800
  %fmod = frem double %569, %573, !dbg !3769
  store double %fmod, ptr %frac, align 8, !dbg !3769
  %575 = load double, ptr %y1715, align 8, !dbg !3776
  %576 = load double, ptr %frac, align 8, !dbg !3777
  %fsub1818 = fsub double %575, %576, !dbg !3776
  store double %fsub1818, ptr %y1715, align 8, !dbg !3776
  %577 = load double, ptr %y1715, align 8, !dbg !3778
  %578 = load double, ptr %bias1798, align 8, !dbg !3779
  %fadd1819 = fadd double %577, %578, !dbg !3778
  store double %fadd1819, ptr %y1715, align 8, !dbg !3778
  br label %if.exit1820, !dbg !3778

if.exit1820:                                      ; preds = %checkok1817, %if.exit1797
  %579 = load i32, ptr %a, align 4, !dbg !3780
  %580 = load i32, ptr %i1716, align 4, !dbg !3781
  %add1821 = add i32 %579, %580, !dbg !3780
  %and1822 = and i32 %add1821, 127, !dbg !3780
  %581 = load i32, ptr %z, align 4, !dbg !3782
  %neq1823 = icmp ne i32 %and1822, %581, !dbg !3780
  br i1 %neq1823, label %if.then1824, label %if.exit1905, !dbg !3780

if.then1824:                                      ; preds = %if.exit1820
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3783, metadata !DIExpression()), !dbg !3785
  %582 = load i32, ptr %a, align 4, !dbg !3786
  %583 = load i32, ptr %i1716, align 4, !dbg !3787
  %add1825 = add i32 %582, %583, !dbg !3786
  %and1826 = and i32 %add1825, 127, !dbg !3786
  %sext1827 = sext i32 %and1826 to i64, !dbg !3786
  %lt1828 = icmp slt i64 %sext1827, 0, !dbg !3786
  %584 = call i1 @llvm.expect.i1(i1 %lt1828, i1 false), !dbg !3786
  br i1 %584, label %panic1829, label %checkok1837, !dbg !3786

checkok1837:                                      ; preds = %if.then1824
  %ge1838 = icmp sge i64 %sext1827, 128, !dbg !3786
  %585 = call i1 @llvm.expect.i1(i1 %ge1838, i1 false), !dbg !3786
  br i1 %585, label %panic1839, label %checkok1849, !dbg !3786

checkok1849:                                      ; preds = %checkok1837
  %ptroffset1850 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1827, !dbg !3786
  %586 = load i32, ptr %ptroffset1850, align 4, !dbg !3786
  store i32 %586, ptr %t, align 4, !dbg !3786
  store i8 1, ptr %switch1851, align 1
  br label %switch.entry1852

switch.entry1852:                                 ; preds = %checkok1849
  %587 = load i8, ptr %switch1851, align 1
  %588 = trunc i8 %587 to i1
  %589 = load i32, ptr %t, align 4, !dbg !3788
  %gt1853 = icmp ugt i32 500000000, %589, !dbg !3788
  br i1 %gt1853, label %and.rhs1854, label %and.phi1863, !dbg !3788

and.rhs1854:                                      ; preds = %switch.entry1852
  %590 = load i32, ptr %t, align 4, !dbg !3790
  %intbool1855 = icmp ne i32 %590, 0, !dbg !3790
  br i1 %intbool1855, label %or.phi1861, label %or.rhs1856, !dbg !3790

or.rhs1856:                                       ; preds = %and.rhs1854
  %591 = load i32, ptr %a, align 4, !dbg !3791
  %592 = load i32, ptr %i1716, align 4, !dbg !3792
  %add1857 = add i32 %591, %592, !dbg !3791
  %add1858 = add i32 %add1857, 1, !dbg !3791
  %and1859 = and i32 %add1858, 127, !dbg !3791
  %593 = load i32, ptr %z, align 4, !dbg !3793
  %neq1860 = icmp ne i32 %and1859, %593, !dbg !3791
  br label %or.phi1861, !dbg !3791

or.phi1861:                                       ; preds = %or.rhs1856, %and.rhs1854
  %val1862 = phi i1 [ true, %and.rhs1854 ], [ %neq1860, %or.rhs1856 ], !dbg !3791
  br label %and.phi1863, !dbg !3791

and.phi1863:                                      ; preds = %or.phi1861, %switch.entry1852
  %val1864 = phi i1 [ false, %switch.entry1852 ], [ %val1862, %or.phi1861 ], !dbg !3791
  %eq1865 = icmp eq i1 %val1864, %588, !dbg !3791
  br i1 %eq1865, label %switch.case1866, label %next_if1870, !dbg !3791

switch.case1866:                                  ; preds = %and.phi1863
  %594 = load double, ptr %frac, align 8, !dbg !3794
  %595 = load i32, ptr %sign420, align 4, !dbg !3796
  %sifp1867 = sitofp i32 %595 to double, !dbg !3796
  %fmul1868 = fmul double 2.500000e-01, %sifp1867, !dbg !3797
  %fadd1869 = fadd double %594, %fmul1868, !dbg !3794
  store double %fadd1869, ptr %frac, align 8, !dbg !3794
  br label %switch.exit1895, !dbg !3794

next_if1870:                                      ; preds = %and.phi1863
  %596 = load i32, ptr %t, align 4, !dbg !3798
  %lt1871 = icmp ult i32 500000000, %596, !dbg !3798
  %eq1872 = icmp eq i1 %lt1871, %588, !dbg !3798
  br i1 %eq1872, label %switch.case1873, label %next_if1877, !dbg !3798

switch.case1873:                                  ; preds = %next_if1870
  %597 = load double, ptr %frac, align 8, !dbg !3799
  %598 = load i32, ptr %sign420, align 4, !dbg !3801
  %sifp1874 = sitofp i32 %598 to double, !dbg !3801
  %fmul1875 = fmul double 7.500000e-01, %sifp1874, !dbg !3802
  %fadd1876 = fadd double %597, %fmul1875, !dbg !3799
  store double %fadd1876, ptr %frac, align 8, !dbg !3799
  br label %switch.exit1895, !dbg !3799

next_if1877:                                      ; preds = %next_if1870
  %599 = load i32, ptr %t, align 4, !dbg !3803
  %eq1878 = icmp eq i32 500000000, %599, !dbg !3803
  %eq1879 = icmp eq i1 %eq1878, %588, !dbg !3803
  br i1 %eq1879, label %switch.case1880, label %next_if1894, !dbg !3803

switch.case1880:                                  ; preds = %next_if1877
  %600 = load i32, ptr %a, align 4, !dbg !3804
  %601 = load i32, ptr %i1716, align 4, !dbg !3806
  %add1881 = add i32 %600, %601, !dbg !3804
  %add1882 = add i32 %add1881, 1, !dbg !3804
  %and1883 = and i32 %add1882, 127, !dbg !3804
  %602 = load i32, ptr %z, align 4, !dbg !3807
  %eq1884 = icmp eq i32 %and1883, %602, !dbg !3804
  br i1 %eq1884, label %if.then1885, label %if.else1889, !dbg !3804

if.then1885:                                      ; preds = %switch.case1880
  %603 = load double, ptr %frac, align 8, !dbg !3808
  %604 = load i32, ptr %sign420, align 4, !dbg !3810
  %sifp1886 = sitofp i32 %604 to double, !dbg !3810
  %fmul1887 = fmul double 5.000000e-01, %sifp1886, !dbg !3811
  %fadd1888 = fadd double %603, %fmul1887, !dbg !3808
  store double %fadd1888, ptr %frac, align 8, !dbg !3808
  br label %if.exit1893, !dbg !3808

if.else1889:                                      ; preds = %switch.case1880
  %605 = load double, ptr %frac, align 8, !dbg !3812
  %606 = load i32, ptr %sign420, align 4, !dbg !3814
  %sifp1890 = sitofp i32 %606 to double, !dbg !3814
  %fmul1891 = fmul double 7.500000e-01, %sifp1890, !dbg !3815
  %fadd1892 = fadd double %605, %fmul1891, !dbg !3812
  store double %fadd1892, ptr %frac, align 8, !dbg !3812
  br label %if.exit1893, !dbg !3812

if.exit1893:                                      ; preds = %if.else1889, %if.then1885
  br label %switch.exit1895, !dbg !3812

next_if1894:                                      ; preds = %next_if1877
  br label %switch.exit1895, !dbg !3812

switch.exit1895:                                  ; preds = %next_if1894, %if.exit1893, %switch.case1873, %switch.case1866
  %607 = load i32, ptr %bits1785, align 4, !dbg !3816
  %sub1896 = sub i32 53, %607, !dbg !3817
  %ge1897 = icmp sge i32 %sub1896, 2, !dbg !3817
  br i1 %ge1897, label %and.rhs1898, label %and.phi1901, !dbg !3817

and.rhs1898:                                      ; preds = %switch.exit1895
  %608 = load double, ptr %frac, align 8, !dbg !3818
  %fmod1899 = frem double %608, 1.000000e+00, !dbg !3818
  %not1900 = fcmp ueq double %fmod1899, 0.000000e+00, !dbg !3818
  br label %and.phi1901, !dbg !3818

and.phi1901:                                      ; preds = %and.rhs1898, %switch.exit1895
  %val1902 = phi i1 [ false, %switch.exit1895 ], [ %not1900, %and.rhs1898 ], !dbg !3818
  br i1 %val1902, label %if.then1903, label %if.exit1904, !dbg !3818

if.then1903:                                      ; preds = %and.phi1901
  %609 = load double, ptr %frac, align 8, !dbg !3819
  %fincdec = fadd double %609, 1.000000e+00, !dbg !3819
  store double %fincdec, ptr %frac, align 8, !dbg !3819
  br label %if.exit1904, !dbg !3819

if.exit1904:                                      ; preds = %if.then1903, %and.phi1901
  br label %if.exit1905, !dbg !3819

if.exit1905:                                      ; preds = %if.exit1904, %if.exit1820
  %610 = load double, ptr %y1715, align 8, !dbg !3820
  %611 = load double, ptr %frac, align 8, !dbg !3821
  %fadd1906 = fadd double %610, %611, !dbg !3820
  store double %fadd1906, ptr %y1715, align 8, !dbg !3820
  %612 = load double, ptr %y1715, align 8, !dbg !3822
  %613 = load double, ptr %bias1798, align 8, !dbg !3823
  %fsub1907 = fsub double %612, %613, !dbg !3822
  store double %fsub1907, ptr %y1715, align 8, !dbg !3822
  %614 = load i32, ptr %e2799, align 4, !dbg !3824
  %add1908 = add i32 %614, 53, !dbg !3824
  %and1909 = and i32 %add1908, 2147483647, !dbg !3824
  %615 = load i32, ptr %emax, align 4, !dbg !3825
  %sub1910 = sub i32 %615, 5, !dbg !3825
  %gt1911 = icmp sgt i32 %and1909, %sub1910, !dbg !3824
  br i1 %gt1911, label %if.then1912, label %if.exit1940, !dbg !3824

if.then1912:                                      ; preds = %if.exit1905
  %616 = load double, ptr %y1715, align 8
  store double %616, ptr %x1913, align 8
  %617 = load double, ptr %x1913, align 8, !dbg !3826
  %618 = call double @llvm.fabs.f64(double %617), !dbg !3826
  %ge1914 = fcmp oge double %618, 0x4340000000000000, !dbg !3828
  br i1 %ge1914, label %if.then1915, label %if.exit1928, !dbg !3828

if.then1915:                                      ; preds = %if.then1912
  %619 = load i8, ptr %denormal, align 1, !dbg !3830
  %620 = trunc i8 %619 to i1, !dbg !3830
  br i1 %620, label %and.rhs1916, label %and.phi1922, !dbg !3830

and.rhs1916:                                      ; preds = %if.then1915
  %621 = load i32, ptr %bits1785, align 4, !dbg !3832
  %622 = load i32, ptr %e2799, align 4, !dbg !3833
  %add1917 = add i32 53, %622, !dbg !3834
  %sub1918 = sub i32 %add1917, -149, !dbg !3834
  %eq1919 = icmp eq i32 %sub1918, %621, !dbg !3832
  %check1920 = icmp sge i32 %sub1918, 0, !dbg !3832
  %siui-eq1921 = and i1 %check1920, %eq1919, !dbg !3832
  br label %and.phi1922, !dbg !3832

and.phi1922:                                      ; preds = %and.rhs1916, %if.then1915
  %val1923 = phi i1 [ false, %if.then1915 ], [ %siui-eq1921, %and.rhs1916 ], !dbg !3832
  br i1 %val1923, label %if.then1924, label %if.exit1925, !dbg !3832

if.then1924:                                      ; preds = %and.phi1922
  store i8 0, ptr %denormal, align 1, !dbg !3835
  br label %if.exit1925, !dbg !3835

if.exit1925:                                      ; preds = %if.then1924, %and.phi1922
  %623 = load double, ptr %y1715, align 8, !dbg !3836
  %fmul1926 = fmul double %623, 5.000000e-01, !dbg !3836
  store double %fmul1926, ptr %y1715, align 8, !dbg !3836
  %624 = load i32, ptr %e2799, align 4, !dbg !3837
  %add1927 = add i32 %624, 1, !dbg !3837
  store i32 %add1927, ptr %e2799, align 4, !dbg !3837
  br label %if.exit1928, !dbg !3837

if.exit1928:                                      ; preds = %if.exit1925, %if.then1912
  %625 = load i32, ptr %e2799, align 4, !dbg !3838
  %add1929 = add i32 %625, 53, !dbg !3838
  %626 = load i32, ptr %emax, align 4, !dbg !3839
  %gt1930 = icmp sgt i32 %add1929, %626, !dbg !3838
  br i1 %gt1930, label %or.phi1936, label %or.rhs1931, !dbg !3838

or.rhs1931:                                       ; preds = %if.exit1928
  %627 = load i8, ptr %denormal, align 1, !dbg !3840
  %628 = trunc i8 %627 to i1, !dbg !3840
  br i1 %628, label %and.rhs1932, label %and.phi1934, !dbg !3840

and.rhs1932:                                      ; preds = %or.rhs1931
  %629 = load double, ptr %frac, align 8, !dbg !3841
  %fpbool1933 = fcmp une double %629, 0.000000e+00, !dbg !3841
  br label %and.phi1934, !dbg !3841

and.phi1934:                                      ; preds = %and.rhs1932, %or.rhs1931
  %val1935 = phi i1 [ false, %or.rhs1931 ], [ %fpbool1933, %and.rhs1932 ], !dbg !3841
  br label %or.phi1936, !dbg !3841

or.phi1936:                                       ; preds = %and.phi1934, %if.exit1928
  %val1937 = phi i1 [ true, %if.exit1928 ], [ %val1935, %and.phi1934 ], !dbg !3841
  br i1 %val1937, label %if.then1938, label %if.exit1939, !dbg !3841

if.then1938:                                      ; preds = %or.phi1936
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3842
  br label %err_retblock, !dbg !3842

if.exit1939:                                      ; preds = %or.phi1936
  br label %if.exit1940, !dbg !3842

if.exit1940:                                      ; preds = %if.exit1939, %if.exit1905
  %630 = load double, ptr %y1715, align 8
  store double %630, ptr %x1941, align 8
  %631 = load i32, ptr %e2799, align 4
  store i32 %631, ptr %n1942, align 4
  %632 = load double, ptr %x1941, align 8, !dbg !3843
  %633 = load i32, ptr %n1942, align 4, !dbg !3843
  %634 = call double @scalbn(double %632, i32 %633), !dbg !3846
  store double %634, ptr %blockret421, align 8, !dbg !3846
  br label %expr_block.exit1944, !dbg !3846

expr_block.exit1944:                              ; preds = %if.exit1940, %checkok899, %checkok851, %if.then812, %if.then754, %if.then737, %if.exit487, %if.then475
  %635 = load double, ptr %blockret421, align 8, !dbg !3846
  %fpfptrunc1945 = fptrunc double %635 to float, !dbg !3846
  store float %fpfptrunc1945, ptr %blockret, align 4, !dbg !3846
  br label %expr_block.exit1946, !dbg !3846

expr_block.exit1946:                              ; preds = %expr_block.exit1944, %expr_block.exit417, %if.then91, %if.then64
  %636 = load float, ptr %blockret, align 4, !dbg !3846
  store float %636, ptr %0, align 4, !dbg !3846
  ret i64 0, !dbg !3846

err_retblock:                                     ; preds = %if.then1938, %if.then763, %if.then760, %if.then733, %guard_block728, %if.then695, %if.then686, %if.then553, %if.then486, %if.then411, %if.then357, %if.then354, %guard_block, %if.then302, %if.then245, %if.then175, %if.then
  %637 = load i64, ptr %reterr, align 8, !dbg !3846
  ret i64 %637, !dbg !3846

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %638 = insertvalue %any undef, ptr %taddr, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %640 = insertvalue %any undef, ptr %taddr2, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg4, align 8
  store %any %639, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %641, ptr %ptradd5, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 468, ptr align 8 %indirectarg6), !dbg !3105
  unreachable, !dbg !3105

panic7:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr8, align 8
  %643 = insertvalue %any undef, ptr %taddr8, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr9, align 8
  %645 = insertvalue %any undef, ptr %taddr9, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg12, align 8
  store %any %644, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %646, ptr %ptradd14, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 468, ptr align 8 %indirectarg16), !dbg !3106
  unreachable, !dbg !3106

panic22:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr23, align 8
  %648 = insertvalue %any undef, ptr %taddr23, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %650 = insertvalue %any undef, ptr %taddr24, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg27, align 8
  store %any %649, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %651, ptr %ptradd29, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 470, ptr align 8 %indirectarg31), !dbg !3112
  unreachable, !dbg !3112

panic35:                                          ; preds = %switch.case33
  store i64 %21, ptr %taddr36, align 8
  %653 = insertvalue %any undef, ptr %taddr36, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr37, align 8
  %655 = insertvalue %any undef, ptr %taddr37, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg40, align 8
  store %any %654, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %656, ptr %ptradd42, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 476, ptr align 8 %indirectarg44), !dbg !3116
  unreachable, !dbg !3116

panic98:                                          ; preds = %and.rhs95
  store i64 %55, ptr %taddr99, align 8
  %658 = insertvalue %any undef, ptr %taddr99, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr100, align 8
  %660 = insertvalue %any undef, ptr %taddr100, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg103, align 8
  store %any %659, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %661, ptr %ptradd105, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 481, ptr align 8 %indirectarg107), !dbg !3127
  unreachable, !dbg !3127

panic115:                                         ; preds = %and.rhs112
  store i64 %59, ptr %taddr116, align 8
  %663 = insertvalue %any undef, ptr %taddr116, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr117, align 8
  %665 = insertvalue %any undef, ptr %taddr117, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg120, align 8
  store %any %664, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %666, ptr %ptradd122, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, i32 481, ptr align 8 %indirectarg124), !dbg !3129
  unreachable, !dbg !3129

panic132:                                         ; preds = %if.then130
  store i64 %65, ptr %taddr133, align 8
  %668 = insertvalue %any undef, ptr %taddr133, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr134, align 8
  %670 = insertvalue %any undef, ptr %taddr134, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg137, align 8
  store %any %669, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %671, ptr %ptradd139, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, i32 483, ptr align 8 %indirectarg141), !dbg !3133
  unreachable, !dbg !3133

panic152:                                         ; preds = %loop.cond149
  store i64 %72, ptr %taddr153, align 8
  %673 = insertvalue %any undef, ptr %taddr153, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr154, align 8
  %675 = insertvalue %any undef, ptr %taddr154, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg157, align 8
  store %any %674, ptr %varargslots158, align 16
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %676, ptr %ptradd159, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp160", ptr %indirectarg161, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, i32 344, ptr align 8 %indirectarg161), !dbg !3166
  unreachable, !dbg !3166

panic184:                                         ; preds = %and.rhs180
  store i64 %88, ptr %taddr185, align 8
  %678 = insertvalue %any undef, ptr %taddr185, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %680 = insertvalue %any undef, ptr %taddr186, 0
  %681 = insertvalue %any %680, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg189, align 8
  store %any %679, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %681, ptr %ptradd191, align 16
  %682 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %682, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 357, ptr align 8 %indirectarg193), !dbg !3186
  unreachable, !dbg !3186

panic207:                                         ; preds = %and.rhs203
  store i64 %96, ptr %taddr208, align 8
  %683 = insertvalue %any undef, ptr %taddr208, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add205, ptr %taddr209, align 8
  %685 = insertvalue %any undef, ptr %taddr209, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg210, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg211, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg212, align 8
  store %any %684, ptr %varargslots213, align 16
  %ptradd214 = getelementptr inbounds i8, ptr %varargslots213, i64 16
  store %any %686, ptr %ptradd214, align 16
  %687 = insertvalue %"any[]" undef, ptr %varargslots213, 0
  %"$$temp215" = insertvalue %"any[]" %687, i64 2, 1
  store %"any[]" %"$$temp215", ptr %indirectarg216, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg210, ptr align 8 %indirectarg211, ptr align 8 %indirectarg212, i32 361, ptr align 8 %indirectarg216), !dbg !3197
  unreachable, !dbg !3197

panic288:                                         ; preds = %if.exit284
  store i64 %130, ptr %taddr289, align 8
  %688 = insertvalue %any undef, ptr %taddr289, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %690 = insertvalue %any undef, ptr %taddr290, 0
  %691 = insertvalue %any %690, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg291, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg292, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg293, align 8
  store %any %689, ptr %varargslots294, align 16
  %ptradd295 = getelementptr inbounds i8, ptr %varargslots294, i64 16
  store %any %691, ptr %ptradd295, align 16
  %692 = insertvalue %"any[]" undef, ptr %varargslots294, 0
  %"$$temp296" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp296", ptr %indirectarg297, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg291, ptr align 8 %indirectarg292, ptr align 8 %indirectarg293, i32 397, ptr align 8 %indirectarg297), !dbg !3245
  unreachable, !dbg !3245

panic321:                                         ; preds = %if.then318
  store i64 %147, ptr %taddr322, align 8
  %693 = insertvalue %any undef, ptr %taddr322, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add319, ptr %taddr323, align 8
  %695 = insertvalue %any undef, ptr %taddr323, 0
  %696 = insertvalue %any %695, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg324, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg325, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg326, align 8
  store %any %694, ptr %varargslots327, align 16
  %ptradd328 = getelementptr inbounds i8, ptr %varargslots327, i64 16
  store %any %696, ptr %ptradd328, align 16
  %697 = insertvalue %"any[]" undef, ptr %varargslots327, 0
  %"$$temp329" = insertvalue %"any[]" %697, i64 2, 1
  store %"any[]" %"$$temp329", ptr %indirectarg330, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg324, ptr align 8 %indirectarg325, ptr align 8 %indirectarg326, i32 406, ptr align 8 %indirectarg330), !dbg !3263
  unreachable, !dbg !3263

panic332:                                         ; preds = %checkok331
  store i64 %add319, ptr %taddr333, align 8
  %698 = insertvalue %any undef, ptr %taddr333, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 22 }, ptr %indirectarg334, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg335, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg336, align 8
  store %any %699, ptr %varargslots337, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots337, 0
  %"$$temp338" = insertvalue %"any[]" %700, i64 1, 1
  store %"any[]" %"$$temp338", ptr %indirectarg339, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg334, ptr align 8 %indirectarg335, ptr align 8 %indirectarg336, i32 406, ptr align 8 %indirectarg339), !dbg !3262
  unreachable, !dbg !3262

panic432:                                         ; preds = %assert_ok
  store i64 %209, ptr %taddr433, align 8
  %701 = insertvalue %any undef, ptr %taddr433, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr434, align 8
  %703 = insertvalue %any undef, ptr %taddr434, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg436, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg437, align 8
  store %any %702, ptr %varargslots438, align 16
  %ptradd439 = getelementptr inbounds i8, ptr %varargslots438, i64 16
  store %any %704, ptr %ptradd439, align 16
  %705 = insertvalue %"any[]" undef, ptr %varargslots438, 0
  %"$$temp440" = insertvalue %"any[]" %705, i64 2, 1
  store %"any[]" %"$$temp440", ptr %indirectarg441, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, ptr align 8 %indirectarg437, i32 45, ptr align 8 %indirectarg441), !dbg !3355
  unreachable, !dbg !3355

panic460:                                         ; preds = %loop.cond457
  store i64 %218, ptr %taddr461, align 8
  %706 = insertvalue %any undef, ptr %taddr461, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %220, ptr %taddr462, align 8
  %708 = insertvalue %any undef, ptr %taddr462, 0
  %709 = insertvalue %any %708, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg463, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg465, align 8
  store %any %707, ptr %varargslots466, align 16
  %ptradd467 = getelementptr inbounds i8, ptr %varargslots466, i64 16
  store %any %709, ptr %ptradd467, align 16
  %710 = insertvalue %"any[]" undef, ptr %varargslots466, 0
  %"$$temp468" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp468", ptr %indirectarg469, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg463, ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, i32 56, ptr align 8 %indirectarg469), !dbg !3380
  unreachable, !dbg !3380

panic496:                                         ; preds = %and.rhs492
  store i64 %235, ptr %taddr497, align 8
  %711 = insertvalue %any undef, ptr %taddr497, 0
  %712 = insertvalue %any %711, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add494, ptr %taddr498, align 8
  %713 = insertvalue %any undef, ptr %taddr498, 0
  %714 = insertvalue %any %713, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg499, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg501, align 8
  store %any %712, ptr %varargslots502, align 16
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots502, i64 16
  store %any %714, ptr %ptradd503, align 16
  %715 = insertvalue %"any[]" undef, ptr %varargslots502, 0
  %"$$temp504" = insertvalue %"any[]" %715, i64 2, 1
  store %"any[]" %"$$temp504", ptr %indirectarg505, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg499, ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, i32 70, ptr align 8 %indirectarg505), !dbg !3400
  unreachable, !dbg !3400

panic519:                                         ; preds = %and.rhs515
  store i64 %243, ptr %taddr520, align 8
  %716 = insertvalue %any undef, ptr %taddr520, 0
  %717 = insertvalue %any %716, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add517, ptr %taddr521, align 8
  %718 = insertvalue %any undef, ptr %taddr521, 0
  %719 = insertvalue %any %718, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg522, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg523, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg524, align 8
  store %any %717, ptr %varargslots525, align 16
  %ptradd526 = getelementptr inbounds i8, ptr %varargslots525, i64 16
  store %any %719, ptr %ptradd526, align 16
  %720 = insertvalue %"any[]" undef, ptr %varargslots525, 0
  %"$$temp527" = insertvalue %"any[]" %720, i64 2, 1
  store %"any[]" %"$$temp527", ptr %indirectarg528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg522, ptr align 8 %indirectarg523, ptr align 8 %indirectarg524, i32 74, ptr align 8 %indirectarg528), !dbg !3411
  unreachable, !dbg !3411

panic567:                                         ; preds = %if.then565
  store i64 %sext, ptr %taddr568, align 8
  %721 = insertvalue %any undef, ptr %taddr568, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg569, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg570, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg571, align 8
  store %any %722, ptr %varargslots572, align 16
  %723 = insertvalue %"any[]" undef, ptr %varargslots572, 0
  %"$$temp573" = insertvalue %"any[]" %723, i64 1, 1
  store %"any[]" %"$$temp573", ptr %indirectarg574, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg569, ptr align 8 %indirectarg570, ptr align 8 %indirectarg571, i32 94, ptr align 8 %indirectarg574), !dbg !3433
  unreachable, !dbg !3433

panic577:                                         ; preds = %checkok575
  store i64 128, ptr %taddr578, align 8
  %724 = insertvalue %any undef, ptr %taddr578, 0
  %725 = insertvalue %any %724, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr579, align 8
  %726 = insertvalue %any undef, ptr %taddr579, 0
  %727 = insertvalue %any %726, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg580, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg581, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg582, align 8
  store %any %725, ptr %varargslots583, align 16
  %ptradd584 = getelementptr inbounds i8, ptr %varargslots583, i64 16
  store %any %727, ptr %ptradd584, align 16
  %728 = insertvalue %"any[]" undef, ptr %varargslots583, 0
  %"$$temp585" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp585", ptr %indirectarg586, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg580, ptr align 8 %indirectarg581, ptr align 8 %indirectarg582, i32 94, ptr align 8 %indirectarg586), !dbg !3433
  unreachable, !dbg !3433

panic590:                                         ; preds = %checkok587
  store i64 %sext588, ptr %taddr591, align 8
  %729 = insertvalue %any undef, ptr %taddr591, 0
  %730 = insertvalue %any %729, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg594, align 8
  store %any %730, ptr %varargslots595, align 16
  %731 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp596" = insertvalue %"any[]" %731, i64 1, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, i32 94, ptr align 8 %indirectarg597), !dbg !3435
  unreachable, !dbg !3435

panic600:                                         ; preds = %checkok598
  store i64 128, ptr %taddr601, align 8
  %732 = insertvalue %any undef, ptr %taddr601, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext588, ptr %taddr602, align 8
  %734 = insertvalue %any undef, ptr %taddr602, 0
  %735 = insertvalue %any %734, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg603, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg605, align 8
  store %any %733, ptr %varargslots606, align 16
  %ptradd607 = getelementptr inbounds i8, ptr %varargslots606, i64 16
  store %any %735, ptr %ptradd607, align 16
  %736 = insertvalue %"any[]" undef, ptr %varargslots606, 0
  %"$$temp608" = insertvalue %"any[]" %736, i64 2, 1
  store %"any[]" %"$$temp608", ptr %indirectarg609, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg603, ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, i32 94, ptr align 8 %indirectarg609), !dbg !3435
  unreachable, !dbg !3435

panic619:                                         ; preds = %if.else616
  store i64 %sext617, ptr %taddr620, align 8
  %737 = insertvalue %any undef, ptr %taddr620, 0
  %738 = insertvalue %any %737, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg621, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg622, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg623, align 8
  store %any %738, ptr %varargslots624, align 16
  %739 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp625" = insertvalue %"any[]" %739, i64 1, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg621, ptr align 8 %indirectarg622, ptr align 8 %indirectarg623, i32 98, ptr align 8 %indirectarg626), !dbg !3438
  unreachable, !dbg !3438

panic629:                                         ; preds = %checkok627
  store i64 128, ptr %taddr630, align 8
  %740 = insertvalue %any undef, ptr %taddr630, 0
  %741 = insertvalue %any %740, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext617, ptr %taddr631, align 8
  %742 = insertvalue %any undef, ptr %taddr631, 0
  %743 = insertvalue %any %742, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg634, align 8
  store %any %741, ptr %varargslots635, align 16
  %ptradd636 = getelementptr inbounds i8, ptr %varargslots635, i64 16
  store %any %743, ptr %ptradd636, align 16
  %744 = insertvalue %"any[]" undef, ptr %varargslots635, 0
  %"$$temp637" = insertvalue %"any[]" %744, i64 2, 1
  store %"any[]" %"$$temp637", ptr %indirectarg638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 98, ptr align 8 %indirectarg638), !dbg !3438
  unreachable, !dbg !3438

panic669:                                         ; preds = %assert_ok665
  store i64 %284, ptr %taddr670, align 8
  %745 = insertvalue %any undef, ptr %taddr670, 0
  %746 = insertvalue %any %745, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add667, ptr %taddr671, align 8
  %747 = insertvalue %any undef, ptr %taddr671, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg672, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg673, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg674, align 8
  store %any %746, ptr %varargslots675, align 16
  %ptradd676 = getelementptr inbounds i8, ptr %varargslots675, i64 16
  store %any %748, ptr %ptradd676, align 16
  %749 = insertvalue %"any[]" undef, ptr %varargslots675, 0
  %"$$temp677" = insertvalue %"any[]" %749, i64 2, 1
  store %"any[]" %"$$temp677", ptr %indirectarg678, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg672, ptr align 8 %indirectarg673, ptr align 8 %indirectarg674, i32 113, ptr align 8 %indirectarg678), !dbg !3459
  unreachable, !dbg !3459

panic699:                                         ; preds = %if.exit696
  store i64 %300, ptr %taddr700, align 8
  %750 = insertvalue %any undef, ptr %taddr700, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add697, ptr %taddr701, align 8
  %752 = insertvalue %any undef, ptr %taddr701, 0
  %753 = insertvalue %any %752, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg702, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg703, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg704, align 8
  store %any %751, ptr %varargslots705, align 16
  %ptradd706 = getelementptr inbounds i8, ptr %varargslots705, i64 16
  store %any %753, ptr %ptradd706, align 16
  %754 = insertvalue %"any[]" undef, ptr %varargslots705, 0
  %"$$temp707" = insertvalue %"any[]" %754, i64 2, 1
  store %"any[]" %"$$temp707", ptr %indirectarg708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg702, ptr align 8 %indirectarg703, ptr align 8 %indirectarg704, i32 120, ptr align 8 %indirectarg708), !dbg !3473
  unreachable, !dbg !3473

panic711:                                         ; preds = %checkok709
  store i64 %add697, ptr %taddr712, align 8
  %755 = insertvalue %any undef, ptr %taddr712, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.78, i64 22 }, ptr %indirectarg713, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg714, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg715, align 8
  store %any %756, ptr %varargslots716, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots716, 0
  %"$$temp717" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp717", ptr %indirectarg718, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg713, ptr align 8 %indirectarg714, ptr align 8 %indirectarg715, i32 120, ptr align 8 %indirectarg718), !dbg !3472
  unreachable, !dbg !3472

panic772:                                         ; preds = %loop.body769
  store i64 %sext770, ptr %taddr773, align 8
  %758 = insertvalue %any undef, ptr %taddr773, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg774, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg775, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg776, align 8
  store %any %759, ptr %varargslots777, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg774, ptr align 8 %indirectarg775, ptr align 8 %indirectarg776, i32 138, ptr align 8 %indirectarg779), !dbg !3501
  unreachable, !dbg !3501

panic782:                                         ; preds = %checkok780
  store i64 128, ptr %taddr783, align 8
  %761 = insertvalue %any undef, ptr %taddr783, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext770, ptr %taddr784, align 8
  %763 = insertvalue %any undef, ptr %taddr784, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg785, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg786, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg787, align 8
  store %any %762, ptr %varargslots788, align 16
  %ptradd789 = getelementptr inbounds i8, ptr %varargslots788, i64 16
  store %any %764, ptr %ptradd789, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots788, 0
  %"$$temp790" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp790", ptr %indirectarg791, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg785, ptr align 8 %indirectarg786, ptr align 8 %indirectarg787, i32 138, ptr align 8 %indirectarg791), !dbg !3501
  unreachable, !dbg !3501

panic824:                                         ; preds = %if.then818
  store i64 %sub822, ptr %taddr825, align 8
  %766 = insertvalue %any undef, ptr %taddr825, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg826, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg827, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg828, align 8
  store %any %767, ptr %varargslots829, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots829, 0
  %"$$temp830" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp830", ptr %indirectarg831, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg826, ptr align 8 %indirectarg827, ptr align 8 %indirectarg828, i32 152, ptr align 8 %indirectarg831), !dbg !3528
  unreachable, !dbg !3528

panic834:                                         ; preds = %checkok832
  store i64 8, ptr %taddr835, align 8
  %769 = insertvalue %any undef, ptr %taddr835, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub822, ptr %taddr836, align 8
  %771 = insertvalue %any undef, ptr %taddr836, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg837, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg838, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg839, align 8
  store %any %770, ptr %varargslots840, align 16
  %ptradd841 = getelementptr inbounds i8, ptr %varargslots840, i64 16
  store %any %772, ptr %ptradd841, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots840, 0
  %"$$temp842" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp842", ptr %indirectarg843, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg837, ptr align 8 %indirectarg838, ptr align 8 %indirectarg839, i32 152, ptr align 8 %indirectarg843), !dbg !3528
  unreachable, !dbg !3528

panic847:                                         ; preds = %checkok844
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg848, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg850, align 8
  %774 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %774(ptr align 8 %indirectarg848, ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, i32 152), !dbg !3525
  unreachable, !dbg !3525

panic860:                                         ; preds = %or.rhs859
  store i32 %352, ptr %taddr861, align 4
  %775 = insertvalue %any undef, ptr %taddr861, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg862, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg863, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg864, align 8
  store %any %776, ptr %varargslots865, align 16
  %777 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %777, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg862, ptr align 8 %indirectarg863, ptr align 8 %indirectarg864, i32 154, ptr align 8 %indirectarg867), !dbg !3538
  unreachable, !dbg !3538

panic879:                                         ; preds = %if.then873
  store i64 %sub877, ptr %taddr880, align 8
  %778 = insertvalue %any undef, ptr %taddr880, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg881, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg882, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg883, align 8
  store %any %779, ptr %varargslots884, align 16
  %780 = insertvalue %"any[]" undef, ptr %varargslots884, 0
  %"$$temp885" = insertvalue %"any[]" %780, i64 1, 1
  store %"any[]" %"$$temp885", ptr %indirectarg886, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg881, ptr align 8 %indirectarg882, ptr align 8 %indirectarg883, i32 154, ptr align 8 %indirectarg886), !dbg !3541
  unreachable, !dbg !3541

panic889:                                         ; preds = %checkok887
  store i64 8, ptr %taddr890, align 8
  %781 = insertvalue %any undef, ptr %taddr890, 0
  %782 = insertvalue %any %781, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub877, ptr %taddr891, align 8
  %783 = insertvalue %any undef, ptr %taddr891, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg892, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg894, align 8
  store %any %782, ptr %varargslots895, align 16
  %ptradd896 = getelementptr inbounds i8, ptr %varargslots895, i64 16
  store %any %784, ptr %ptradd896, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp897" = insertvalue %"any[]" %785, i64 2, 1
  store %"any[]" %"$$temp897", ptr %indirectarg898, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg892, ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, i32 154, ptr align 8 %indirectarg898), !dbg !3541
  unreachable, !dbg !3541

panic914:                                         ; preds = %cond.phi
  store i64 %sub912, ptr %taddr915, align 8
  %786 = insertvalue %any undef, ptr %taddr915, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg916, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg917, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg918, align 8
  store %any %787, ptr %varargslots919, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots919, 0
  %"$$temp920" = insertvalue %"any[]" %788, i64 1, 1
  store %"any[]" %"$$temp920", ptr %indirectarg921, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg916, ptr align 8 %indirectarg917, ptr align 8 %indirectarg918, i32 161, ptr align 8 %indirectarg921), !dbg !3552
  unreachable, !dbg !3552

panic924:                                         ; preds = %checkok922
  store i64 8, ptr %taddr925, align 8
  %789 = insertvalue %any undef, ptr %taddr925, 0
  %790 = insertvalue %any %789, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub912, ptr %taddr926, align 8
  %791 = insertvalue %any undef, ptr %taddr926, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg927, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg928, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg929, align 8
  store %any %790, ptr %varargslots930, align 16
  %ptradd931 = getelementptr inbounds i8, ptr %varargslots930, i64 16
  store %any %792, ptr %ptradd931, align 16
  %793 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp932" = insertvalue %"any[]" %793, i64 2, 1
  store %"any[]" %"$$temp932", ptr %indirectarg933, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg927, ptr align 8 %indirectarg928, ptr align 8 %indirectarg929, i32 161, ptr align 8 %indirectarg933), !dbg !3552
  unreachable, !dbg !3552

panic941:                                         ; preds = %loop.body938
  store i64 %sext939, ptr %taddr942, align 8
  %794 = insertvalue %any undef, ptr %taddr942, 0
  %795 = insertvalue %any %794, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg943, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg944, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg945, align 8
  store %any %795, ptr %varargslots946, align 16
  %796 = insertvalue %"any[]" undef, ptr %varargslots946, 0
  %"$$temp947" = insertvalue %"any[]" %796, i64 1, 1
  store %"any[]" %"$$temp947", ptr %indirectarg948, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg943, ptr align 8 %indirectarg944, ptr align 8 %indirectarg945, i32 165, ptr align 8 %indirectarg948), !dbg !3563
  unreachable, !dbg !3563

panic951:                                         ; preds = %checkok949
  store i64 128, ptr %taddr952, align 8
  %797 = insertvalue %any undef, ptr %taddr952, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext939, ptr %taddr953, align 8
  %799 = insertvalue %any undef, ptr %taddr953, 0
  %800 = insertvalue %any %799, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg954, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg955, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg956, align 8
  store %any %798, ptr %varargslots957, align 16
  %ptradd958 = getelementptr inbounds i8, ptr %varargslots957, i64 16
  store %any %800, ptr %ptradd958, align 16
  %801 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp959" = insertvalue %"any[]" %801, i64 2, 1
  store %"any[]" %"$$temp959", ptr %indirectarg960, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg954, ptr align 8 %indirectarg955, ptr align 8 %indirectarg956, i32 165, ptr align 8 %indirectarg960), !dbg !3563
  unreachable, !dbg !3563

panic964:                                         ; preds = %checkok961
  store %"char[]" { ptr @.panic_msg.84, i64 10 }, ptr %indirectarg965, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg966, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg967, align 8
  %802 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %802(ptr align 8 %indirectarg965, ptr align 8 %indirectarg966, ptr align 8 %indirectarg967, i32 165), !dbg !3565
  unreachable, !dbg !3565

panic972:                                         ; preds = %checkok968
  store i64 %sext970, ptr %taddr973, align 8
  %803 = insertvalue %any undef, ptr %taddr973, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg974, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg975, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg976, align 8
  store %any %804, ptr %varargslots977, align 16
  %805 = insertvalue %"any[]" undef, ptr %varargslots977, 0
  %"$$temp978" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp978", ptr %indirectarg979, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg974, ptr align 8 %indirectarg975, ptr align 8 %indirectarg976, i32 166, ptr align 8 %indirectarg979), !dbg !3566
  unreachable, !dbg !3566

panic982:                                         ; preds = %checkok980
  store i64 128, ptr %taddr983, align 8
  %806 = insertvalue %any undef, ptr %taddr983, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext970, ptr %taddr984, align 8
  %808 = insertvalue %any undef, ptr %taddr984, 0
  %809 = insertvalue %any %808, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg985, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg986, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg987, align 8
  store %any %807, ptr %varargslots988, align 16
  %ptradd989 = getelementptr inbounds i8, ptr %varargslots988, i64 16
  store %any %809, ptr %ptradd989, align 16
  %810 = insertvalue %"any[]" undef, ptr %varargslots988, 0
  %"$$temp990" = insertvalue %"any[]" %810, i64 2, 1
  store %"any[]" %"$$temp990", ptr %indirectarg991, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg985, ptr align 8 %indirectarg986, ptr align 8 %indirectarg987, i32 166, ptr align 8 %indirectarg991), !dbg !3566
  unreachable, !dbg !3566

panic996:                                         ; preds = %checkok992
  store i64 %sext994, ptr %taddr997, align 8
  %811 = insertvalue %any undef, ptr %taddr997, 0
  %812 = insertvalue %any %811, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1000, align 8
  store %any %812, ptr %varargslots1001, align 16
  %813 = insertvalue %"any[]" undef, ptr %varargslots1001, 0
  %"$$temp1002" = insertvalue %"any[]" %813, i64 1, 1
  store %"any[]" %"$$temp1002", ptr %indirectarg1003, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 166, ptr align 8 %indirectarg1003), !dbg !3567
  unreachable, !dbg !3567

panic1006:                                        ; preds = %checkok1004
  store i64 128, ptr %taddr1007, align 8
  %814 = insertvalue %any undef, ptr %taddr1007, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext994, ptr %taddr1008, align 8
  %816 = insertvalue %any undef, ptr %taddr1008, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1009, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1011, align 8
  store %any %815, ptr %varargslots1012, align 16
  %ptradd1013 = getelementptr inbounds i8, ptr %varargslots1012, i64 16
  store %any %817, ptr %ptradd1013, align 16
  %818 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1014" = insertvalue %"any[]" %818, i64 2, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1009, ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, i32 166, ptr align 8 %indirectarg1015), !dbg !3567
  unreachable, !dbg !3567

panic1019:                                        ; preds = %checkok1016
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg1020, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1022, align 8
  %819 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %819(ptr align 8 %indirectarg1020, ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, i32 166), !dbg !3569
  unreachable, !dbg !3569

panic1026:                                        ; preds = %checkok1023
  store %"char[]" { ptr @.panic_msg.82, i64 17 }, ptr %indirectarg1027, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1028, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1029, align 8
  %820 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %820(ptr align 8 %indirectarg1027, ptr align 8 %indirectarg1028, ptr align 8 %indirectarg1029, i32 167), !dbg !3572
  unreachable, !dbg !3572

panic1037:                                        ; preds = %and.rhs1034
  store i64 %sext1035, ptr %taddr1038, align 8
  %821 = insertvalue %any undef, ptr %taddr1038, 0
  %822 = insertvalue %any %821, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1039, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1040, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1041, align 8
  store %any %822, ptr %varargslots1042, align 16
  %823 = insertvalue %"any[]" undef, ptr %varargslots1042, 0
  %"$$temp1043" = insertvalue %"any[]" %823, i64 1, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1039, ptr align 8 %indirectarg1040, ptr align 8 %indirectarg1041, i32 168, ptr align 8 %indirectarg1044), !dbg !3576
  unreachable, !dbg !3576

panic1047:                                        ; preds = %checkok1045
  store i64 128, ptr %taddr1048, align 8
  %824 = insertvalue %any undef, ptr %taddr1048, 0
  %825 = insertvalue %any %824, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1035, ptr %taddr1049, align 8
  %826 = insertvalue %any undef, ptr %taddr1049, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1050, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1051, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1052, align 8
  store %any %825, ptr %varargslots1053, align 16
  %ptradd1054 = getelementptr inbounds i8, ptr %varargslots1053, i64 16
  store %any %827, ptr %ptradd1054, align 16
  %828 = insertvalue %"any[]" undef, ptr %varargslots1053, 0
  %"$$temp1055" = insertvalue %"any[]" %828, i64 2, 1
  store %"any[]" %"$$temp1055", ptr %indirectarg1056, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1050, ptr align 8 %indirectarg1051, ptr align 8 %indirectarg1052, i32 168, ptr align 8 %indirectarg1056), !dbg !3576
  unreachable, !dbg !3576

panic1074:                                        ; preds = %if.then1070
  store i64 %sext1072, ptr %taddr1075, align 8
  %829 = insertvalue %any undef, ptr %taddr1075, 0
  %830 = insertvalue %any %829, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1076, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1077, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1078, align 8
  store %any %830, ptr %varargslots1079, align 16
  %831 = insertvalue %"any[]" undef, ptr %varargslots1079, 0
  %"$$temp1080" = insertvalue %"any[]" %831, i64 1, 1
  store %"any[]" %"$$temp1080", ptr %indirectarg1081, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1076, ptr align 8 %indirectarg1077, ptr align 8 %indirectarg1078, i32 174, ptr align 8 %indirectarg1081), !dbg !3582
  unreachable, !dbg !3582

panic1084:                                        ; preds = %checkok1082
  store i64 128, ptr %taddr1085, align 8
  %832 = insertvalue %any undef, ptr %taddr1085, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1072, ptr %taddr1086, align 8
  %834 = insertvalue %any undef, ptr %taddr1086, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1087, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1088, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1089, align 8
  store %any %833, ptr %varargslots1090, align 16
  %ptradd1091 = getelementptr inbounds i8, ptr %varargslots1090, i64 16
  store %any %835, ptr %ptradd1091, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots1090, 0
  %"$$temp1092" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp1092", ptr %indirectarg1093, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1087, ptr align 8 %indirectarg1088, ptr align 8 %indirectarg1089, i32 174, ptr align 8 %indirectarg1093), !dbg !3582
  unreachable, !dbg !3582

panic1107:                                        ; preds = %and.rhs1104
  store i64 %sext1105, ptr %taddr1108, align 8
  %837 = insertvalue %any undef, ptr %taddr1108, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1109, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1110, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1111, align 8
  store %any %838, ptr %varargslots1112, align 16
  %839 = insertvalue %"any[]" undef, ptr %varargslots1112, 0
  %"$$temp1113" = insertvalue %"any[]" %839, i64 1, 1
  store %"any[]" %"$$temp1113", ptr %indirectarg1114, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1109, ptr align 8 %indirectarg1110, ptr align 8 %indirectarg1111, i32 179, ptr align 8 %indirectarg1114), !dbg !3591
  unreachable, !dbg !3591

panic1117:                                        ; preds = %checkok1115
  store i64 128, ptr %taddr1118, align 8
  %840 = insertvalue %any undef, ptr %taddr1118, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1105, ptr %taddr1119, align 8
  %842 = insertvalue %any undef, ptr %taddr1119, 0
  %843 = insertvalue %any %842, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1120, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1121, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1122, align 8
  store %any %841, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %843, ptr %ptradd1124, align 16
  %844 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %844, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1120, ptr align 8 %indirectarg1121, ptr align 8 %indirectarg1122, i32 179, ptr align 8 %indirectarg1126), !dbg !3591
  unreachable, !dbg !3591

panic1143:                                        ; preds = %loop.body1139
  store i64 %sext1141, ptr %taddr1144, align 8
  %845 = insertvalue %any undef, ptr %taddr1144, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1145, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1146, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1147, align 8
  store %any %846, ptr %varargslots1148, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots1148, 0
  %"$$temp1149" = insertvalue %"any[]" %847, i64 1, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1145, ptr align 8 %indirectarg1146, ptr align 8 %indirectarg1147, i32 185, ptr align 8 %indirectarg1150), !dbg !3603
  unreachable, !dbg !3603

panic1153:                                        ; preds = %checkok1151
  store i64 128, ptr %taddr1154, align 8
  %848 = insertvalue %any undef, ptr %taddr1154, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1141, ptr %taddr1155, align 8
  %850 = insertvalue %any undef, ptr %taddr1155, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1156, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1157, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1158, align 8
  store %any %849, ptr %varargslots1159, align 16
  %ptradd1160 = getelementptr inbounds i8, ptr %varargslots1159, i64 16
  store %any %851, ptr %ptradd1160, align 16
  %852 = insertvalue %"any[]" undef, ptr %varargslots1159, 0
  %"$$temp1161" = insertvalue %"any[]" %852, i64 2, 1
  store %"any[]" %"$$temp1161", ptr %indirectarg1162, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1156, ptr align 8 %indirectarg1157, ptr align 8 %indirectarg1158, i32 185, ptr align 8 %indirectarg1162), !dbg !3603
  unreachable, !dbg !3603

panic1174:                                        ; preds = %if.then1169
  store i64 %sext1172, ptr %taddr1175, align 8
  %853 = insertvalue %any undef, ptr %taddr1175, 0
  %854 = insertvalue %any %853, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1177, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1178, align 8
  store %any %854, ptr %varargslots1179, align 16
  %855 = insertvalue %"any[]" undef, ptr %varargslots1179, 0
  %"$$temp1180" = insertvalue %"any[]" %855, i64 1, 1
  store %"any[]" %"$$temp1180", ptr %indirectarg1181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, ptr align 8 %indirectarg1178, i32 189, ptr align 8 %indirectarg1181), !dbg !3610
  unreachable, !dbg !3610

panic1184:                                        ; preds = %checkok1182
  store i64 128, ptr %taddr1185, align 8
  %856 = insertvalue %any undef, ptr %taddr1185, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1172, ptr %taddr1186, align 8
  %858 = insertvalue %any undef, ptr %taddr1186, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1188, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1189, align 8
  store %any %857, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %859, ptr %ptradd1191, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, ptr align 8 %indirectarg1189, i32 189, ptr align 8 %indirectarg1193), !dbg !3610
  unreachable, !dbg !3610

panic1201:                                        ; preds = %if.else1198
  store i64 %sext1199, ptr %taddr1202, align 8
  %861 = insertvalue %any undef, ptr %taddr1202, 0
  %862 = insertvalue %any %861, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1203, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1204, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1205, align 8
  store %any %862, ptr %varargslots1206, align 16
  %863 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %863, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1203, ptr align 8 %indirectarg1204, ptr align 8 %indirectarg1205, i32 194, ptr align 8 %indirectarg1208), !dbg !3615
  unreachable, !dbg !3615

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %864 = insertvalue %any undef, ptr %taddr1212, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1199, ptr %taddr1213, align 8
  %866 = insertvalue %any undef, ptr %taddr1213, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1214, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1215, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1216, align 8
  store %any %865, ptr %varargslots1217, align 16
  %ptradd1218 = getelementptr inbounds i8, ptr %varargslots1217, i64 16
  store %any %867, ptr %ptradd1218, align 16
  %868 = insertvalue %"any[]" undef, ptr %varargslots1217, 0
  %"$$temp1219" = insertvalue %"any[]" %868, i64 2, 1
  store %"any[]" %"$$temp1219", ptr %indirectarg1220, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1214, ptr align 8 %indirectarg1215, ptr align 8 %indirectarg1216, i32 194, ptr align 8 %indirectarg1220), !dbg !3615
  unreachable, !dbg !3615

panic1235:                                        ; preds = %and.rhs1232
  store i64 %sext1233, ptr %taddr1236, align 8
  %869 = insertvalue %any undef, ptr %taddr1236, 0
  %870 = insertvalue %any %869, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1237, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1238, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1239, align 8
  store %any %870, ptr %varargslots1240, align 16
  %871 = insertvalue %"any[]" undef, ptr %varargslots1240, 0
  %"$$temp1241" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp1241", ptr %indirectarg1242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1237, ptr align 8 %indirectarg1238, ptr align 8 %indirectarg1239, i32 196, ptr align 8 %indirectarg1242), !dbg !3621
  unreachable, !dbg !3621

panic1245:                                        ; preds = %checkok1243
  store i64 128, ptr %taddr1246, align 8
  %872 = insertvalue %any undef, ptr %taddr1246, 0
  %873 = insertvalue %any %872, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1233, ptr %taddr1247, align 8
  %874 = insertvalue %any undef, ptr %taddr1247, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1248, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1249, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1250, align 8
  store %any %873, ptr %varargslots1251, align 16
  %ptradd1252 = getelementptr inbounds i8, ptr %varargslots1251, i64 16
  store %any %875, ptr %ptradd1252, align 16
  %876 = insertvalue %"any[]" undef, ptr %varargslots1251, 0
  %"$$temp1253" = insertvalue %"any[]" %876, i64 2, 1
  store %"any[]" %"$$temp1253", ptr %indirectarg1254, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1248, ptr align 8 %indirectarg1249, ptr align 8 %indirectarg1250, i32 196, ptr align 8 %indirectarg1254), !dbg !3621
  unreachable, !dbg !3621

panic1281:                                        ; preds = %if.then1274
  store i64 %sext1279, ptr %taddr1282, align 8
  %877 = insertvalue %any undef, ptr %taddr1282, 0
  %878 = insertvalue %any %877, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1283, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1284, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1285, align 8
  store %any %878, ptr %varargslots1286, align 16
  %879 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %879, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1283, ptr align 8 %indirectarg1284, ptr align 8 %indirectarg1285, i32 206, ptr align 8 %indirectarg1288), !dbg !3635
  unreachable, !dbg !3635

panic1291:                                        ; preds = %checkok1289
  store i64 128, ptr %taddr1292, align 8
  %880 = insertvalue %any undef, ptr %taddr1292, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1279, ptr %taddr1293, align 8
  %882 = insertvalue %any undef, ptr %taddr1293, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1294, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1295, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1296, align 8
  store %any %881, ptr %varargslots1297, align 16
  %ptradd1298 = getelementptr inbounds i8, ptr %varargslots1297, i64 16
  store %any %883, ptr %ptradd1298, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1299" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1299", ptr %indirectarg1300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1294, ptr align 8 %indirectarg1295, ptr align 8 %indirectarg1296, i32 206, ptr align 8 %indirectarg1300), !dbg !3635
  unreachable, !dbg !3635

panic1305:                                        ; preds = %checkok1301
  store i64 %sext1303, ptr %taddr1306, align 8
  %885 = insertvalue %any undef, ptr %taddr1306, 0
  %886 = insertvalue %any %885, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1307, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1308, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1309, align 8
  store %any %886, ptr %varargslots1310, align 16
  %887 = insertvalue %"any[]" undef, ptr %varargslots1310, 0
  %"$$temp1311" = insertvalue %"any[]" %887, i64 1, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1307, ptr align 8 %indirectarg1308, ptr align 8 %indirectarg1309, i32 206, ptr align 8 %indirectarg1312), !dbg !3636
  unreachable, !dbg !3636

panic1315:                                        ; preds = %checkok1313
  store i64 128, ptr %taddr1316, align 8
  %888 = insertvalue %any undef, ptr %taddr1316, 0
  %889 = insertvalue %any %888, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1303, ptr %taddr1317, align 8
  %890 = insertvalue %any undef, ptr %taddr1317, 0
  %891 = insertvalue %any %890, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1318, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1319, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1320, align 8
  store %any %889, ptr %varargslots1321, align 16
  %ptradd1322 = getelementptr inbounds i8, ptr %varargslots1321, i64 16
  store %any %891, ptr %ptradd1322, align 16
  %892 = insertvalue %"any[]" undef, ptr %varargslots1321, 0
  %"$$temp1323" = insertvalue %"any[]" %892, i64 2, 1
  store %"any[]" %"$$temp1323", ptr %indirectarg1324, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1318, ptr align 8 %indirectarg1319, ptr align 8 %indirectarg1320, i32 206, ptr align 8 %indirectarg1324), !dbg !3636
  unreachable, !dbg !3636

panic1331:                                        ; preds = %if.exit1328
  store i64 %sext1329, ptr %taddr1332, align 8
  %893 = insertvalue %any undef, ptr %taddr1332, 0
  %894 = insertvalue %any %893, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1333, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1334, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1335, align 8
  store %any %894, ptr %varargslots1336, align 16
  %895 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %895, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1333, ptr align 8 %indirectarg1334, ptr align 8 %indirectarg1335, i32 208, ptr align 8 %indirectarg1338), !dbg !3638
  unreachable, !dbg !3638

panic1341:                                        ; preds = %checkok1339
  store i64 128, ptr %taddr1342, align 8
  %896 = insertvalue %any undef, ptr %taddr1342, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1329, ptr %taddr1343, align 8
  %898 = insertvalue %any undef, ptr %taddr1343, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1344, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1345, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1346, align 8
  store %any %897, ptr %varargslots1347, align 16
  %ptradd1348 = getelementptr inbounds i8, ptr %varargslots1347, i64 16
  store %any %899, ptr %ptradd1348, align 16
  %900 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1349" = insertvalue %"any[]" %900, i64 2, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1344, ptr align 8 %indirectarg1345, ptr align 8 %indirectarg1346, i32 208, ptr align 8 %indirectarg1350), !dbg !3638
  unreachable, !dbg !3638

panic1366:                                        ; preds = %or.rhs1363
  store i64 %sext1364, ptr %taddr1367, align 8
  %901 = insertvalue %any undef, ptr %taddr1367, 0
  %902 = insertvalue %any %901, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1368, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1369, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1370, align 8
  store %any %902, ptr %varargslots1371, align 16
  %903 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1372" = insertvalue %"any[]" %903, i64 1, 1
  store %"any[]" %"$$temp1372", ptr %indirectarg1373, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1368, ptr align 8 %indirectarg1369, ptr align 8 %indirectarg1370, i32 221, ptr align 8 %indirectarg1373), !dbg !3659
  unreachable, !dbg !3659

panic1376:                                        ; preds = %checkok1374
  store i64 128, ptr %taddr1377, align 8
  %904 = insertvalue %any undef, ptr %taddr1377, 0
  %905 = insertvalue %any %904, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1364, ptr %taddr1378, align 8
  %906 = insertvalue %any undef, ptr %taddr1378, 0
  %907 = insertvalue %any %906, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1379, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1380, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1381, align 8
  store %any %905, ptr %varargslots1382, align 16
  %ptradd1383 = getelementptr inbounds i8, ptr %varargslots1382, i64 16
  store %any %907, ptr %ptradd1383, align 16
  %908 = insertvalue %"any[]" undef, ptr %varargslots1382, 0
  %"$$temp1384" = insertvalue %"any[]" %908, i64 2, 1
  store %"any[]" %"$$temp1384", ptr %indirectarg1385, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1379, ptr align 8 %indirectarg1380, ptr align 8 %indirectarg1381, i32 221, ptr align 8 %indirectarg1385), !dbg !3659
  unreachable, !dbg !3659

panic1390:                                        ; preds = %checkok1386
  store i64 %sext1388, ptr %taddr1391, align 8
  %909 = insertvalue %any undef, ptr %taddr1391, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1392, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1393, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1394, align 8
  store %any %910, ptr %varargslots1395, align 16
  %911 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %911, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1392, ptr align 8 %indirectarg1393, ptr align 8 %indirectarg1394, i32 221, ptr align 8 %indirectarg1397), !dbg !3660
  unreachable, !dbg !3660

panic1400:                                        ; preds = %checkok1398
  store i64 2, ptr %taddr1401, align 8
  %912 = insertvalue %any undef, ptr %taddr1401, 0
  %913 = insertvalue %any %912, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1388, ptr %taddr1402, align 8
  %914 = insertvalue %any undef, ptr %taddr1402, 0
  %915 = insertvalue %any %914, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1403, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1404, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1405, align 8
  store %any %913, ptr %varargslots1406, align 16
  %ptradd1407 = getelementptr inbounds i8, ptr %varargslots1406, i64 16
  store %any %915, ptr %ptradd1407, align 16
  %916 = insertvalue %"any[]" undef, ptr %varargslots1406, 0
  %"$$temp1408" = insertvalue %"any[]" %916, i64 2, 1
  store %"any[]" %"$$temp1408", ptr %indirectarg1409, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1403, ptr align 8 %indirectarg1404, ptr align 8 %indirectarg1405, i32 221, ptr align 8 %indirectarg1409), !dbg !3660
  unreachable, !dbg !3660

panic1421:                                        ; preds = %if.exit1416
  store i64 %sext1419, ptr %taddr1422, align 8
  %917 = insertvalue %any undef, ptr %taddr1422, 0
  %918 = insertvalue %any %917, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1423, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1424, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1425, align 8
  store %any %918, ptr %varargslots1426, align 16
  %919 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1427" = insertvalue %"any[]" %919, i64 1, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1423, ptr align 8 %indirectarg1424, ptr align 8 %indirectarg1425, i32 226, ptr align 8 %indirectarg1428), !dbg !3665
  unreachable, !dbg !3665

panic1431:                                        ; preds = %checkok1429
  store i64 128, ptr %taddr1432, align 8
  %920 = insertvalue %any undef, ptr %taddr1432, 0
  %921 = insertvalue %any %920, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1419, ptr %taddr1433, align 8
  %922 = insertvalue %any undef, ptr %taddr1433, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1434, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1435, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1436, align 8
  store %any %921, ptr %varargslots1437, align 16
  %ptradd1438 = getelementptr inbounds i8, ptr %varargslots1437, i64 16
  store %any %923, ptr %ptradd1438, align 16
  %924 = insertvalue %"any[]" undef, ptr %varargslots1437, 0
  %"$$temp1439" = insertvalue %"any[]" %924, i64 2, 1
  store %"any[]" %"$$temp1439", ptr %indirectarg1440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1434, ptr align 8 %indirectarg1435, ptr align 8 %indirectarg1436, i32 226, ptr align 8 %indirectarg1440), !dbg !3665
  unreachable, !dbg !3665

panic1445:                                        ; preds = %checkok1441
  store i64 %sext1443, ptr %taddr1446, align 8
  %925 = insertvalue %any undef, ptr %taddr1446, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1447, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1448, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1449, align 8
  store %any %926, ptr %varargslots1450, align 16
  %927 = insertvalue %"any[]" undef, ptr %varargslots1450, 0
  %"$$temp1451" = insertvalue %"any[]" %927, i64 1, 1
  store %"any[]" %"$$temp1451", ptr %indirectarg1452, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1447, ptr align 8 %indirectarg1448, ptr align 8 %indirectarg1449, i32 226, ptr align 8 %indirectarg1452), !dbg !3667
  unreachable, !dbg !3667

panic1455:                                        ; preds = %checkok1453
  store i64 2, ptr %taddr1456, align 8
  %928 = insertvalue %any undef, ptr %taddr1456, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1443, ptr %taddr1457, align 8
  %930 = insertvalue %any undef, ptr %taddr1457, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1458, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1459, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1460, align 8
  store %any %929, ptr %varargslots1461, align 16
  %ptradd1462 = getelementptr inbounds i8, ptr %varargslots1461, i64 16
  store %any %931, ptr %ptradd1462, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots1461, 0
  %"$$temp1463" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp1463", ptr %indirectarg1464, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1458, ptr align 8 %indirectarg1459, ptr align 8 %indirectarg1460, i32 226, ptr align 8 %indirectarg1464), !dbg !3667
  unreachable, !dbg !3667

panic1489:                                        ; preds = %loop.body1485
  store i64 %sext1487, ptr %taddr1490, align 8
  %933 = insertvalue %any undef, ptr %taddr1490, 0
  %934 = insertvalue %any %933, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1491, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1492, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1493, align 8
  store %any %934, ptr %varargslots1494, align 16
  %935 = insertvalue %"any[]" undef, ptr %varargslots1494, 0
  %"$$temp1495" = insertvalue %"any[]" %935, i64 1, 1
  store %"any[]" %"$$temp1495", ptr %indirectarg1496, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1491, ptr align 8 %indirectarg1492, ptr align 8 %indirectarg1493, i32 233, ptr align 8 %indirectarg1496), !dbg !3685
  unreachable, !dbg !3685

panic1499:                                        ; preds = %checkok1497
  store i64 128, ptr %taddr1500, align 8
  %936 = insertvalue %any undef, ptr %taddr1500, 0
  %937 = insertvalue %any %936, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1487, ptr %taddr1501, align 8
  %938 = insertvalue %any undef, ptr %taddr1501, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1502, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1503, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1504, align 8
  store %any %937, ptr %varargslots1505, align 16
  %ptradd1506 = getelementptr inbounds i8, ptr %varargslots1505, i64 16
  store %any %939, ptr %ptradd1506, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1505, 0
  %"$$temp1507" = insertvalue %"any[]" %940, i64 2, 1
  store %"any[]" %"$$temp1507", ptr %indirectarg1508, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1502, ptr align 8 %indirectarg1503, ptr align 8 %indirectarg1504, i32 233, ptr align 8 %indirectarg1508), !dbg !3685
  unreachable, !dbg !3685

panic1511:                                        ; preds = %checkok1509
  store i32 %496, ptr %taddr1512, align 4
  %941 = insertvalue %any undef, ptr %taddr1512, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1513, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1514, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1515, align 8
  store %any %942, ptr %varargslots1516, align 16
  %943 = insertvalue %"any[]" undef, ptr %varargslots1516, 0
  %"$$temp1517" = insertvalue %"any[]" %943, i64 1, 1
  store %"any[]" %"$$temp1517", ptr %indirectarg1518, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1513, ptr align 8 %indirectarg1514, ptr align 8 %indirectarg1515, i32 233, ptr align 8 %indirectarg1518), !dbg !3687
  unreachable, !dbg !3687

panic1521:                                        ; preds = %checkok1519
  store i32 %496, ptr %taddr1522, align 4
  %944 = insertvalue %any undef, ptr %taddr1522, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1523, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1524, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1525, align 8
  store %any %945, ptr %varargslots1526, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots1526, 0
  %"$$temp1527" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp1527", ptr %indirectarg1528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1523, ptr align 8 %indirectarg1524, ptr align 8 %indirectarg1525, i32 233, ptr align 8 %indirectarg1528), !dbg !3687
  unreachable, !dbg !3687

panic1535:                                        ; preds = %checkok1529
  store i64 %sext1533, ptr %taddr1536, align 8
  %947 = insertvalue %any undef, ptr %taddr1536, 0
  %948 = insertvalue %any %947, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1537, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1538, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1539, align 8
  store %any %948, ptr %varargslots1540, align 16
  %949 = insertvalue %"any[]" undef, ptr %varargslots1540, 0
  %"$$temp1541" = insertvalue %"any[]" %949, i64 1, 1
  store %"any[]" %"$$temp1541", ptr %indirectarg1542, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1537, ptr align 8 %indirectarg1538, ptr align 8 %indirectarg1539, i32 234, ptr align 8 %indirectarg1542), !dbg !3689
  unreachable, !dbg !3689

panic1545:                                        ; preds = %checkok1543
  store i64 128, ptr %taddr1546, align 8
  %950 = insertvalue %any undef, ptr %taddr1546, 0
  %951 = insertvalue %any %950, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1547, align 8
  %952 = insertvalue %any undef, ptr %taddr1547, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1548, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1549, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1550, align 8
  store %any %951, ptr %varargslots1551, align 16
  %ptradd1552 = getelementptr inbounds i8, ptr %varargslots1551, i64 16
  store %any %953, ptr %ptradd1552, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1551, 0
  %"$$temp1553" = insertvalue %"any[]" %954, i64 2, 1
  store %"any[]" %"$$temp1553", ptr %indirectarg1554, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1548, ptr align 8 %indirectarg1549, ptr align 8 %indirectarg1550, i32 234, ptr align 8 %indirectarg1554), !dbg !3689
  unreachable, !dbg !3689

panic1559:                                        ; preds = %checkok1555
  store i64 %sext1557, ptr %taddr1560, align 8
  %955 = insertvalue %any undef, ptr %taddr1560, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1561, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1562, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1563, align 8
  store %any %956, ptr %varargslots1564, align 16
  %957 = insertvalue %"any[]" undef, ptr %varargslots1564, 0
  %"$$temp1565" = insertvalue %"any[]" %957, i64 1, 1
  store %"any[]" %"$$temp1565", ptr %indirectarg1566, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1561, ptr align 8 %indirectarg1562, ptr align 8 %indirectarg1563, i32 234, ptr align 8 %indirectarg1566), !dbg !3690
  unreachable, !dbg !3690

panic1569:                                        ; preds = %checkok1567
  store i64 128, ptr %taddr1570, align 8
  %958 = insertvalue %any undef, ptr %taddr1570, 0
  %959 = insertvalue %any %958, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1557, ptr %taddr1571, align 8
  %960 = insertvalue %any undef, ptr %taddr1571, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1572, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1573, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1574, align 8
  store %any %959, ptr %varargslots1575, align 16
  %ptradd1576 = getelementptr inbounds i8, ptr %varargslots1575, i64 16
  store %any %961, ptr %ptradd1576, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1575, 0
  %"$$temp1577" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp1577", ptr %indirectarg1578, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1572, ptr align 8 %indirectarg1573, ptr align 8 %indirectarg1574, i32 234, ptr align 8 %indirectarg1578), !dbg !3690
  unreachable, !dbg !3690

panic1582:                                        ; preds = %checkok1579
  store i32 %507, ptr %taddr1583, align 4
  %963 = insertvalue %any undef, ptr %taddr1583, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1584, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1585, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1586, align 8
  store %any %964, ptr %varargslots1587, align 16
  %965 = insertvalue %"any[]" undef, ptr %varargslots1587, 0
  %"$$temp1588" = insertvalue %"any[]" %965, i64 1, 1
  store %"any[]" %"$$temp1588", ptr %indirectarg1589, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1584, ptr align 8 %indirectarg1585, ptr align 8 %indirectarg1586, i32 234, ptr align 8 %indirectarg1589), !dbg !3692
  unreachable, !dbg !3692

panic1594:                                        ; preds = %checkok1590
  store i32 %511, ptr %taddr1595, align 4
  %966 = insertvalue %any undef, ptr %taddr1595, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1596, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1597, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1598, align 8
  store %any %967, ptr %varargslots1599, align 16
  %968 = insertvalue %"any[]" undef, ptr %varargslots1599, 0
  %"$$temp1600" = insertvalue %"any[]" %968, i64 1, 1
  store %"any[]" %"$$temp1600", ptr %indirectarg1601, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1596, ptr align 8 %indirectarg1597, ptr align 8 %indirectarg1598, i32 235, ptr align 8 %indirectarg1601), !dbg !3695
  unreachable, !dbg !3695

panic1604:                                        ; preds = %checkok1602
  store i32 %511, ptr %taddr1605, align 4
  %969 = insertvalue %any undef, ptr %taddr1605, 0
  %970 = insertvalue %any %969, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.83, i64 35 }, ptr %indirectarg1606, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1607, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1608, align 8
  store %any %970, ptr %varargslots1609, align 16
  %971 = insertvalue %"any[]" undef, ptr %varargslots1609, 0
  %"$$temp1610" = insertvalue %"any[]" %971, i64 1, 1
  store %"any[]" %"$$temp1610", ptr %indirectarg1611, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1606, ptr align 8 %indirectarg1607, ptr align 8 %indirectarg1608, i32 235, ptr align 8 %indirectarg1611), !dbg !3695
  unreachable, !dbg !3695

panic1618:                                        ; preds = %and.rhs1615
  store i64 %sext1616, ptr %taddr1619, align 8
  %972 = insertvalue %any undef, ptr %taddr1619, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1620, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1621, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1622, align 8
  store %any %973, ptr %varargslots1623, align 16
  %974 = insertvalue %"any[]" undef, ptr %varargslots1623, 0
  %"$$temp1624" = insertvalue %"any[]" %974, i64 1, 1
  store %"any[]" %"$$temp1624", ptr %indirectarg1625, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1620, ptr align 8 %indirectarg1621, ptr align 8 %indirectarg1622, i32 236, ptr align 8 %indirectarg1625), !dbg !3699
  unreachable, !dbg !3699

panic1628:                                        ; preds = %checkok1626
  store i64 128, ptr %taddr1629, align 8
  %975 = insertvalue %any undef, ptr %taddr1629, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1616, ptr %taddr1630, align 8
  %977 = insertvalue %any undef, ptr %taddr1630, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1631, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1632, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1633, align 8
  store %any %976, ptr %varargslots1634, align 16
  %ptradd1635 = getelementptr inbounds i8, ptr %varargslots1634, i64 16
  store %any %978, ptr %ptradd1635, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots1634, 0
  %"$$temp1636" = insertvalue %"any[]" %979, i64 2, 1
  store %"any[]" %"$$temp1636", ptr %indirectarg1637, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1631, ptr align 8 %indirectarg1632, ptr align 8 %indirectarg1633, i32 236, ptr align 8 %indirectarg1637), !dbg !3699
  unreachable, !dbg !3699

panic1660:                                        ; preds = %if.then1657
  store i64 %sext1658, ptr %taddr1661, align 8
  %980 = insertvalue %any undef, ptr %taddr1661, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1664, align 8
  store %any %981, ptr %varargslots1665, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %982, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 247, ptr align 8 %indirectarg1667), !dbg !3709
  unreachable, !dbg !3709

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %983 = insertvalue %any undef, ptr %taddr1671, 0
  %984 = insertvalue %any %983, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %985 = insertvalue %any undef, ptr %taddr1672, 0
  %986 = insertvalue %any %985, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1675, align 8
  store %any %984, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %986, ptr %ptradd1677, align 16
  %987 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %987, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 247, ptr align 8 %indirectarg1679), !dbg !3709
  unreachable, !dbg !3709

panic1689:                                        ; preds = %if.else1684
  store i64 %sext1687, ptr %taddr1690, align 8
  %988 = insertvalue %any undef, ptr %taddr1690, 0
  %989 = insertvalue %any %988, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1691, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1692, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1693, align 8
  store %any %989, ptr %varargslots1694, align 16
  %990 = insertvalue %"any[]" undef, ptr %varargslots1694, 0
  %"$$temp1695" = insertvalue %"any[]" %990, i64 1, 1
  store %"any[]" %"$$temp1695", ptr %indirectarg1696, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1691, ptr align 8 %indirectarg1692, ptr align 8 %indirectarg1693, i32 252, ptr align 8 %indirectarg1696), !dbg !3713
  unreachable, !dbg !3713

panic1699:                                        ; preds = %checkok1697
  store i64 128, ptr %taddr1700, align 8
  %991 = insertvalue %any undef, ptr %taddr1700, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1687, ptr %taddr1701, align 8
  %993 = insertvalue %any undef, ptr %taddr1701, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1704, align 8
  store %any %992, ptr %varargslots1705, align 16
  %ptradd1706 = getelementptr inbounds i8, ptr %varargslots1705, i64 16
  store %any %994, ptr %ptradd1706, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1707" = insertvalue %"any[]" %995, i64 2, 1
  store %"any[]" %"$$temp1707", ptr %indirectarg1708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 252, ptr align 8 %indirectarg1708), !dbg !3713
  unreachable, !dbg !3713

panic1729:                                        ; preds = %if.then1723
  store i64 %sext1727, ptr %taddr1730, align 8
  %996 = insertvalue %any undef, ptr %taddr1730, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1732, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1733, align 8
  store %any %997, ptr %varargslots1734, align 16
  %998 = insertvalue %"any[]" undef, ptr %varargslots1734, 0
  %"$$temp1735" = insertvalue %"any[]" %998, i64 1, 1
  store %"any[]" %"$$temp1735", ptr %indirectarg1736, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, ptr align 8 %indirectarg1733, i32 262, ptr align 8 %indirectarg1736), !dbg !3728
  unreachable, !dbg !3728

panic1739:                                        ; preds = %checkok1737
  store i64 128, ptr %taddr1740, align 8
  %999 = insertvalue %any undef, ptr %taddr1740, 0
  %1000 = insertvalue %any %999, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1727, ptr %taddr1741, align 8
  %1001 = insertvalue %any undef, ptr %taddr1741, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1743, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1744, align 8
  store %any %1000, ptr %varargslots1745, align 16
  %ptradd1746 = getelementptr inbounds i8, ptr %varargslots1745, i64 16
  store %any %1002, ptr %ptradd1746, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots1745, 0
  %"$$temp1747" = insertvalue %"any[]" %1003, i64 2, 1
  store %"any[]" %"$$temp1747", ptr %indirectarg1748, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, ptr align 8 %indirectarg1744, i32 262, ptr align 8 %indirectarg1748), !dbg !3728
  unreachable, !dbg !3728

panic1757:                                        ; preds = %if.exit1751
  store i64 %sext1755, ptr %taddr1758, align 8
  %1004 = insertvalue %any undef, ptr %taddr1758, 0
  %1005 = insertvalue %any %1004, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1759, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1760, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1761, align 8
  store %any %1005, ptr %varargslots1762, align 16
  %1006 = insertvalue %"any[]" undef, ptr %varargslots1762, 0
  %"$$temp1763" = insertvalue %"any[]" %1006, i64 1, 1
  store %"any[]" %"$$temp1763", ptr %indirectarg1764, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1759, ptr align 8 %indirectarg1760, ptr align 8 %indirectarg1761, i32 263, ptr align 8 %indirectarg1764), !dbg !3732
  unreachable, !dbg !3732

panic1767:                                        ; preds = %checkok1765
  store i64 128, ptr %taddr1768, align 8
  %1007 = insertvalue %any undef, ptr %taddr1768, 0
  %1008 = insertvalue %any %1007, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1755, ptr %taddr1769, align 8
  %1009 = insertvalue %any undef, ptr %taddr1769, 0
  %1010 = insertvalue %any %1009, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1770, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1771, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1772, align 8
  store %any %1008, ptr %varargslots1773, align 16
  %ptradd1774 = getelementptr inbounds i8, ptr %varargslots1773, i64 16
  store %any %1010, ptr %ptradd1774, align 16
  %1011 = insertvalue %"any[]" undef, ptr %varargslots1773, 0
  %"$$temp1775" = insertvalue %"any[]" %1011, i64 2, 1
  store %"any[]" %"$$temp1775", ptr %indirectarg1776, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1770, ptr align 8 %indirectarg1771, ptr align 8 %indirectarg1772, i32 263, ptr align 8 %indirectarg1776), !dbg !3732
  unreachable, !dbg !3732

panic1813:                                        ; preds = %if.then1800
  store %"char[]" { ptr @.panic_msg.84, i64 10 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1816, align 8
  %1012 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1012(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 284), !dbg !3769
  unreachable, !dbg !3769

panic1829:                                        ; preds = %if.then1824
  store i64 %sext1827, ptr %taddr1830, align 8
  %1013 = insertvalue %any undef, ptr %taddr1830, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.81, i64 38 }, ptr %indirectarg1831, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1832, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1833, align 8
  store %any %1014, ptr %varargslots1834, align 16
  %1015 = insertvalue %"any[]" undef, ptr %varargslots1834, 0
  %"$$temp1835" = insertvalue %"any[]" %1015, i64 1, 1
  store %"any[]" %"$$temp1835", ptr %indirectarg1836, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1831, ptr align 8 %indirectarg1832, ptr align 8 %indirectarg1833, i32 292, ptr align 8 %indirectarg1836), !dbg !3786
  unreachable, !dbg !3786

panic1839:                                        ; preds = %checkok1837
  store i64 128, ptr %taddr1840, align 8
  %1016 = insertvalue %any undef, ptr %taddr1840, 0
  %1017 = insertvalue %any %1016, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1827, ptr %taddr1841, align 8
  %1018 = insertvalue %any undef, ptr %taddr1841, 0
  %1019 = insertvalue %any %1018, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg1842, align 8
  store %"char[]" { ptr @.file.73, i64 17 }, ptr %indirectarg1843, align 8
  store %"char[]" { ptr @.func.85, i64 8 }, ptr %indirectarg1844, align 8
  store %any %1017, ptr %varargslots1845, align 16
  %ptradd1846 = getelementptr inbounds i8, ptr %varargslots1845, i64 16
  store %any %1019, ptr %ptradd1846, align 16
  %1020 = insertvalue %"any[]" undef, ptr %varargslots1845, 0
  %"$$temp1847" = insertvalue %"any[]" %1020, i64 2, 1
  store %"any[]" %"$$temp1847", ptr %indirectarg1848, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1842, ptr align 8 %indirectarg1843, ptr align 8 %indirectarg1844, i32 292, ptr align 8 %indirectarg1848), !dbg !3786
  unreachable, !dbg !3786
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3847 {
entry:
  %literal = alloca %Splitter, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3855, metadata !DIExpression()), !dbg !3856
  call void @llvm.dbg.declare(metadata ptr %2, metadata !3857, metadata !DIExpression()), !dbg !3858
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !3859
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3859
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %2, i32 16, i1 false), !dbg !3859
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 32, !dbg !3859
  store i64 0, ptr %ptradd1, align 8, !dbg !3859
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 40, i1 false), !dbg !3859
  ret void, !dbg !3859
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !3860 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3864
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3864
  br i1 %2, label %panic, label %checkok, !dbg !3864

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3865, metadata !DIExpression()), !dbg !3866
  %3 = load ptr, ptr %self, align 8, !dbg !3867
  %checknull = icmp eq ptr %3, null, !dbg !3867
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3867
  br i1 %4, label %panic3, label %checkok7, !dbg !3867

checkok7:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !3867
  store i64 0, ptr %ptradd, align 8, !dbg !3868
  ret void, !dbg !3868

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.90, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.91, i64 5 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 731), !dbg !3866
  unreachable, !dbg !3866

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.91, i64 5 }, ptr %indirectarg6, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 733), !dbg !3867
  unreachable, !dbg !3867
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !3869 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %current = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %remaining = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 16
  %indirectarg61 = alloca %"any[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %reterr89 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3872
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3872
  br i1 %3, label %panic, label %checkok, !dbg !3872

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3873, metadata !DIExpression()), !dbg !3874
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3875, metadata !DIExpression()), !dbg !3876
  %4 = load ptr, ptr %self, align 8, !dbg !3877
  %checknull = icmp eq ptr %4, null, !dbg !3877
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3877
  br i1 %5, label %panic3, label %checkok7, !dbg !3877

checkok7:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !3877
  %6 = load i64, ptr %ptradd, align 8, !dbg !3877
  store i64 %6, ptr %len, align 8, !dbg !3877
  call void @llvm.dbg.declare(metadata ptr %current, metadata !3878, metadata !DIExpression()), !dbg !3879
  %7 = load ptr, ptr %self, align 8, !dbg !3880
  %checknull8 = icmp eq ptr %7, null, !dbg !3880
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3880
  br i1 %8, label %panic9, label %checkok13, !dbg !3880

checkok13:                                        ; preds = %checkok7
  %ptradd14 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !3880
  %9 = load i64, ptr %ptradd14, align 8, !dbg !3880
  store i64 %9, ptr %current, align 8, !dbg !3880
  %10 = load i64, ptr %current, align 8, !dbg !3881
  %11 = load i64, ptr %len, align 8, !dbg !3882
  %ge = icmp uge i64 %10, %11, !dbg !3881
  br i1 %ge, label %if.then, label %if.exit, !dbg !3881

if.then:                                          ; preds = %checkok13
  ret i64 ptrtoint (ptr @"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" to i64), !dbg !3883

if.exit:                                          ; preds = %checkok13
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !3884, metadata !DIExpression()), !dbg !3885
  %12 = load ptr, ptr %self, align 8, !dbg !3886
  %checknull15 = icmp eq ptr %12, null, !dbg !3886
  %13 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !3886
  br i1 %13, label %panic16, label %checkok20, !dbg !3886

checkok20:                                        ; preds = %if.exit
  %14 = load %"char[]", ptr %12, align 8, !dbg !3886
  %15 = extractvalue %"char[]" %14, 0, !dbg !3886
  %16 = load i64, ptr %current, align 8, !dbg !3887
  %17 = extractvalue %"char[]" %14, 1, !dbg !3887
  %gt = icmp ugt i64 %16, %17, !dbg !3887
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3887
  br i1 %18, label %panic21, label %checkok28, !dbg !3887

checkok28:                                        ; preds = %checkok20
  %size = sub i64 %17, %16, !dbg !3886
  %ptradd29 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !3886
  %19 = insertvalue %"char[]" undef, ptr %ptradd29, 0, !dbg !3886
  %20 = insertvalue %"char[]" %19, i64 %size, 1, !dbg !3886
  store %"char[]" %20, ptr %remaining, align 8, !dbg !3886
  call void @llvm.dbg.declare(metadata ptr %next, metadata !3888, metadata !DIExpression()), !dbg !3889
  %21 = load ptr, ptr %self, align 8, !dbg !3890
  %checknull30 = icmp eq ptr %21, null, !dbg !3890
  %22 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !3890
  br i1 %22, label %panic31, label %checkok35, !dbg !3890

checkok35:                                        ; preds = %checkok28
  %ptradd36 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !3890
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg37, ptr align 8 %remaining, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg38, ptr align 8 %ptradd36, i32 16, i1 false)
  %23 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38), !dbg !3891
  %not_err = icmp eq i64 %23, 0, !dbg !3891
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3891
  br i1 %24, label %after_check, label %assign_optional, !dbg !3891

assign_optional:                                  ; preds = %checkok35
  store i64 %23, ptr %next.f, align 8, !dbg !3891
  br label %after_assign, !dbg !3891

after_check:                                      ; preds = %checkok35
  %25 = load i64, ptr %retparam, align 8, !dbg !3891
  store i64 %25, ptr %next, align 8, !dbg !3891
  store i64 0, ptr %next.f, align 8, !dbg !3891
  br label %after_assign, !dbg !3891

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !3892
  %result = icmp eq i64 %load.err, 0, !dbg !3892
  br i1 %result, label %if.then39, label %if.exit81, !dbg !3892

if.then39:                                        ; preds = %after_assign
  %26 = load %"char[]", ptr %remaining, align 8, !dbg !3893
  %27 = extractvalue %"char[]" %26, 0, !dbg !3893
  %28 = extractvalue %"char[]" %26, 1, !dbg !3895
  %gt40 = icmp ugt i64 0, %28, !dbg !3895
  %29 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !3895
  br i1 %29, label %panic41, label %checkok51, !dbg !3895

checkok51:                                        ; preds = %if.then39
  %30 = load i64, ptr %next, align 8, !dbg !3896
  %add = add i64 0, %30, !dbg !3896
  %lt = icmp ult i64 %28, %add, !dbg !3896
  %sub = sub i64 %add, 1, !dbg !3896
  %31 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3896
  br i1 %31, label %panic52, label %checkok62, !dbg !3896

checkok62:                                        ; preds = %checkok51
  %size63 = sub i64 %add, 0, !dbg !3893
  %32 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !3893
  %33 = insertvalue %"char[]" %32, i64 %size63, 1, !dbg !3893
  %34 = load ptr, ptr %self, align 8, !dbg !3897
  %checknull64 = icmp eq ptr %34, null, !dbg !3897
  %35 = call i1 @llvm.expect.i1(i1 %checknull64, i1 false), !dbg !3897
  br i1 %35, label %panic65, label %checkok69, !dbg !3897

checkok69:                                        ; preds = %checkok62
  %ptradd70 = getelementptr inbounds i8, ptr %34, i64 32, !dbg !3897
  %36 = load i64, ptr %current, align 8, !dbg !3899
  %37 = load i64, ptr %next, align 8, !dbg !3900
  %add71 = add i64 %36, %37, !dbg !3899
  %38 = load ptr, ptr %self, align 8, !dbg !3901
  %checknull72 = icmp eq ptr %38, null, !dbg !3901
  %39 = call i1 @llvm.expect.i1(i1 %checknull72, i1 false), !dbg !3901
  br i1 %39, label %panic73, label %checkok77, !dbg !3901

checkok77:                                        ; preds = %checkok69
  %ptradd78 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !3901
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 8, !dbg !3901
  %40 = load i64, ptr %ptradd79, align 8, !dbg !3901
  %add80 = add i64 %add71, %40, !dbg !3899
  store i64 %add80, ptr %ptradd70, align 8, !dbg !3899
  store %"char[]" %33, ptr %0, align 8, !dbg !3899
  ret i64 0, !dbg !3899

if.exit81:                                        ; preds = %after_assign
  %41 = load ptr, ptr %self, align 8, !dbg !3902
  %checknull82 = icmp eq ptr %41, null, !dbg !3902
  %42 = call i1 @llvm.expect.i1(i1 %checknull82, i1 false), !dbg !3902
  br i1 %42, label %panic83, label %checkok87, !dbg !3902

checkok87:                                        ; preds = %if.exit81
  %ptradd88 = getelementptr inbounds i8, ptr %41, i64 32, !dbg !3902
  %43 = load i64, ptr %len, align 8, !dbg !3903
  store i64 %43, ptr %ptradd88, align 8, !dbg !3903
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !3904
  ret i64 0, !dbg !3904

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.90, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 736), !dbg !3874
  unreachable, !dbg !3874

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg6, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 738), !dbg !3877
  unreachable, !dbg !3877

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg12, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 739), !dbg !3880
  unreachable, !dbg !3880

panic16:                                          ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg19, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 741), !dbg !3886
  unreachable, !dbg !3886

panic21:                                          ; preds = %checkok20
  store i64 %17, ptr %taddr, align 8
  %48 = insertvalue %any undef, ptr %taddr, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr22, align 8
  %50 = insertvalue %any undef, ptr %taddr22, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg25, align 8
  store %any %49, ptr %varargslots, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %51, ptr %ptradd26, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 741, ptr align 8 %indirectarg27), !dbg !3886
  unreachable, !dbg !3886

panic31:                                          ; preds = %checkok28
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg34, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 742), !dbg !3890
  unreachable, !dbg !3890

panic41:                                          ; preds = %if.then39
  store i64 %28, ptr %taddr42, align 8
  %54 = insertvalue %any undef, ptr %taddr42, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %56 = insertvalue %any undef, ptr %taddr43, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg46, align 8
  store %any %55, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %57, ptr %ptradd48, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 746, ptr align 8 %indirectarg50), !dbg !3893
  unreachable, !dbg !3893

panic52:                                          ; preds = %checkok51
  store i64 %sub, ptr %taddr53, align 8
  %59 = insertvalue %any undef, ptr %taddr53, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr54, align 8
  %61 = insertvalue %any undef, ptr %taddr54, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg57, align 8
  store %any %60, ptr %varargslots58, align 16
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %62, ptr %ptradd59, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp60", ptr %indirectarg61, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 746, ptr align 8 %indirectarg61), !dbg !3893
  unreachable, !dbg !3893

panic65:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg68, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 745), !dbg !3897
  unreachable, !dbg !3897

panic73:                                          ; preds = %checkok69
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg76, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 745), !dbg !3901
  unreachable, !dbg !3901

panic83:                                          ; preds = %if.exit81
  store %"char[]" { ptr @.panic_msg.92, i64 45 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %indirectarg86, align 8
  %66 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %66(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 748), !dbg !3902
  unreachable, !dbg !3902
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.tformat_zstr(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !3905 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !3917, metadata !DIExpression()), !dbg !3918
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3919, metadata !DIExpression()), !dbg !3920
  call void @llvm.dbg.declare(metadata ptr %str, metadata !3921, metadata !DIExpression()), !dbg !3923
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !3924
  %2 = load i64, ptr %ptradd, align 8, !dbg !3924
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3925
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3925
  %mul = mul i64 %3, 8, !dbg !3925
  %add = add i64 %2, %mul, !dbg !3924
  %4 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !3926
  store ptr %4, ptr %str, align 8, !dbg !3926
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %1, i32 16, i1 false)
  %5 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !3927
  %6 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !3928
  ret ptr %6, !dbg !3928
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.format(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !3929 {
entry:
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg9 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3932, metadata !DIExpression()), !dbg !3933
  call void @llvm.dbg.declare(metadata ptr %2, metadata !3934, metadata !DIExpression()), !dbg !3935
  call void @llvm.dbg.declare(metadata ptr %3, metadata !3936, metadata !DIExpression()), !dbg !3937
  call void @llvm.dbg.declare(metadata ptr %current, metadata !3938, metadata !DIExpression()), !dbg !3960
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3962
  %not = icmp eq ptr %4, null, !dbg !3962
  br i1 %not, label %if.then, label %if.exit, !dbg !3962

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !3965
  br label %if.exit, !dbg !3965

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3967
  store ptr %5, ptr %current, align 8, !dbg !3967
  call void @llvm.dbg.declare(metadata ptr %original, metadata !3968, metadata !DIExpression()), !dbg !3969
  %6 = load ptr, ptr %current, align 8, !dbg !3970
  store ptr %6, ptr %original, align 8, !dbg !3970
  %7 = load ptr, ptr %current, align 8, !dbg !3971
  %8 = load ptr, ptr %3, align 8, !dbg !3972
  %eq = icmp eq ptr %7, %8, !dbg !3971
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !3971

if.then1:                                         ; preds = %if.exit
  %9 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !3973
  store ptr %9, ptr %current, align 8, !dbg !3973
  br label %if.exit2, !dbg !3973

if.exit2:                                         ; preds = %if.then1, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !3974, metadata !DIExpression()), !dbg !3975
  %10 = load ptr, ptr %current, align 8, !dbg !3976
  %checknull = icmp eq ptr %10, null, !dbg !3976
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3976
  br i1 %11, label %panic, label %checkok, !dbg !3976

checkok:                                          ; preds = %if.exit2
  %ptradd = getelementptr inbounds i8, ptr %10, i64 24, !dbg !3976
  %12 = load i64, ptr %ptradd, align 8, !dbg !3976
  store i64 %12, ptr %mark, align 8, !dbg !3976
  call void @llvm.dbg.declare(metadata ptr %str, metadata !3977, metadata !DIExpression()), !dbg !3979
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3980
  %13 = load i64, ptr %ptradd5, align 8, !dbg !3980
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3981
  %14 = load i64, ptr %ptradd6, align 8, !dbg !3981
  %mul = mul i64 %14, 8, !dbg !3981
  %add = add i64 %13, %mul, !dbg !3980
  %15 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !3982
  store ptr %15, ptr %str, align 8, !dbg !3982
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg7, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %2, i32 16, i1 false)
  %16 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8), !dbg !3983
  %17 = load ptr, ptr %str, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %17, ptr align 8 %indirectarg9), !dbg !3984
  %18 = load %"char[]", ptr %sretparam, align 8, !dbg !3984
  %19 = load ptr, ptr %current, align 8, !dbg !3985
  %20 = load i64, ptr %mark, align 8, !dbg !3985
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %19, i64 %20), !dbg !3987
  %21 = load ptr, ptr %original, align 8, !dbg !3988
  store ptr %21, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3988
  store %"char[]" %18, ptr %0, align 8, !dbg !3989
  ret void, !dbg !3989

panic:                                            ; preds = %if.exit2
  store %"char[]" { ptr @.panic_msg, i64 48 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func, i64 6 }, ptr %indirectarg4, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 542), !dbg !3976
  unreachable, !dbg !3976
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.new_format(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !3990 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %indirectarg2 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !3991, metadata !DIExpression()), !dbg !3992
  call void @llvm.dbg.declare(metadata ptr %2, metadata !3993, metadata !DIExpression()), !dbg !3994
  call void @llvm.dbg.declare(metadata ptr %3, metadata !3995, metadata !DIExpression()), !dbg !3996
  %4 = load %any, ptr %3, align 8, !dbg !3997
  %5 = extractvalue %any %4, 0, !dbg !3997
  %anybool = icmp ne ptr %5, null, !dbg !3997
  br i1 %anybool, label %cond.phi, label %cond.rhs, !dbg !3997

cond.rhs:                                         ; preds = %entry
  %6 = load %any, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !3998
  br label %cond.phi, !dbg !3998

cond.phi:                                         ; preds = %cond.rhs, %entry
  %val = phi %any [ %4, %entry ], [ %6, %cond.rhs ], !dbg !3998
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  store %any %val, ptr %indirectarg2, align 8
  call void @std.core.string.format(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2), !dbg !4001
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !4001
  ret void, !dbg !4001
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.tformat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !4002 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4005, metadata !DIExpression()), !dbg !4006
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4007, metadata !DIExpression()), !dbg !4008
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4009, metadata !DIExpression()), !dbg !4010
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4011
  %3 = load i64, ptr %ptradd, align 8, !dbg !4011
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !4012
  %4 = load i64, ptr %ptradd1, align 8, !dbg !4012
  %mul = mul i64 %4, 8, !dbg !4012
  %add = add i64 %3, %mul, !dbg !4011
  %5 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4013
  store ptr %5, ptr %str, align 8, !dbg !4013
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !4014
  %7 = load ptr, ptr %str, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %7), !dbg !4015
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !4015
  ret void, !dbg !4015
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.new_format_zstr(ptr align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !4016 {
entry:
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"any[]", align 8
  %indirectarg9 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %0, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4023, metadata !DIExpression()), !dbg !4024
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4025, metadata !DIExpression()), !dbg !4027
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4029
  %not = icmp eq ptr %3, null, !dbg !4029
  br i1 %not, label %if.then, label %if.exit, !dbg !4029

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4032
  br label %if.exit, !dbg !4032

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4034
  store ptr %4, ptr %current, align 8, !dbg !4034
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4035, metadata !DIExpression()), !dbg !4036
  %5 = load ptr, ptr %current, align 8, !dbg !4037
  store ptr %5, ptr %original, align 8, !dbg !4037
  %6 = load ptr, ptr %current, align 8, !dbg !4038
  %7 = load ptr, ptr %2, align 8, !dbg !4039
  %eq = icmp eq ptr %6, %7, !dbg !4038
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !4038

if.then1:                                         ; preds = %if.exit
  %8 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4040
  store ptr %8, ptr %current, align 8, !dbg !4040
  br label %if.exit2, !dbg !4040

if.exit2:                                         ; preds = %if.then1, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4041, metadata !DIExpression()), !dbg !4042
  %9 = load ptr, ptr %current, align 8, !dbg !4043
  %checknull = icmp eq ptr %9, null, !dbg !4043
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4043
  br i1 %10, label %panic, label %checkok, !dbg !4043

checkok:                                          ; preds = %if.exit2
  %ptradd = getelementptr inbounds i8, ptr %9, i64 24, !dbg !4043
  %11 = load i64, ptr %ptradd, align 8, !dbg !4043
  store i64 %11, ptr %mark, align 8, !dbg !4043
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4044, metadata !DIExpression()), !dbg !4046
  %ptradd5 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !4047
  %12 = load i64, ptr %ptradd5, align 8, !dbg !4047
  %ptradd6 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4048
  %13 = load i64, ptr %ptradd6, align 8, !dbg !4048
  %mul = mul i64 %13, 8, !dbg !4048
  %add = add i64 %12, %mul, !dbg !4047
  %14 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4049
  store ptr %14, ptr %str, align 8, !dbg !4049
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg7, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %1, i32 16, i1 false)
  %15 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8), !dbg !4050
  %16 = load ptr, ptr %str, align 8, !dbg !4051
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %2, i32 16, i1 false)
  %17 = call ptr @std.core.dstring.DString.copy_zstr(ptr %16, ptr align 8 %indirectarg9), !dbg !4052
  %18 = load ptr, ptr %current, align 8, !dbg !4053
  %19 = load i64, ptr %mark, align 8, !dbg !4053
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %18, i64 %19), !dbg !4055
  %20 = load ptr, ptr %original, align 8, !dbg !4056
  store ptr %20, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4056
  ret ptr %17, !dbg !4057

panic:                                            ; preds = %if.exit2
  store %"char[]" { ptr @.panic_msg, i64 48 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.15, i64 15 }, ptr %indirectarg4, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 542), !dbg !4043
  unreachable, !dbg !4043
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.join_new(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !4058 {
entry:
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %elements2 = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon41 = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %.anon89 = alloca ptr, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %taddr104 = alloca %"char[][]", align 8
  %.anon105 = alloca i64, align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %.anon113 = alloca i64, align 8
  %str117 = alloca ptr, align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %taddr127 = alloca i64, align 8
  %taddr128 = alloca i64, align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %varargslots132 = alloca [2 x %any], align 16
  %indirectarg135 = alloca %"any[]", align 8
  %self138 = alloca ptr, align 8
  %value139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %self141 = alloca ptr, align 8
  %indirectarg144 = alloca %"char[]", align 8
  %indirectarg145 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %value148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg152 = alloca %any, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !4061
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4062, metadata !DIExpression()), !dbg !4063
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4064, metadata !DIExpression()), !dbg !4065
  call void @llvm.dbg.declare(metadata ptr %3, metadata !4066, metadata !DIExpression()), !dbg !4067
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4061
  %4 = load i64, ptr %ptradd, align 8, !dbg !4061
  %not = icmp eq i64 %4, 0, !dbg !4061
  br i1 %not, label %if.then, label %if.exit36, !dbg !4061

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %3, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8
  store i64 %5, ptr %elements2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator1, i32 16, i1 false)
  %6 = load i64, ptr %elements2, align 8, !dbg !4068
  %mul = mul i64 1, %6, !dbg !4074
  store i64 %mul, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4075
  %not4 = icmp eq i64 %7, 0, !dbg !4075
  br i1 %not4, label %if.then5, label %if.exit, !dbg !4075

if.then5:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !4078
  br label %expr_block.exit, !dbg !4078

if.exit:                                          ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4079
  %8 = load i64, ptr %ptradd6, align 8, !dbg !4079
  %9 = inttoptr i64 %8 to ptr, !dbg !4079
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !4061
  %10 = icmp eq ptr %9, %type, !dbg !4061
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !4061

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !4061
  %11 = load ptr, ptr %ptradd7, align 8, !dbg !4061
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire"), !dbg !4061
  store ptr %12, ptr %.inlinecache, align 8, !dbg !4061
  store ptr %9, ptr %.cachedtype, align 8, !dbg !4061
  br label %13, !dbg !4061

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !4061
  br label %13, !dbg !4061

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !4061
  %14 = icmp eq ptr %fn_phi, null, !dbg !4061
  br i1 %14, label %missing_function, label %match, !dbg !4061

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg9, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 80), !dbg !4081
  unreachable, !dbg !4081

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 1, i64 0), !dbg !4081
  %not_err = icmp eq i64 %18, 0, !dbg !4081
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4081
  br i1 %19, label %after_check, label %assign_optional, !dbg !4081

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !4081
  br label %panic_block, !dbg !4081

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !4081
  store ptr %20, ptr %blockret, align 8, !dbg !4081
  br label %expr_block.exit, !dbg !4081

expr_block.exit:                                  ; preds = %after_check, %if.then5
  %21 = load ptr, ptr %blockret, align 8, !dbg !4081
  store ptr %21, ptr %taddr, align 8
  %22 = load ptr, ptr %taddr, align 8
  %23 = load i64, ptr %elements2, align 8, !dbg !4082
  %add = add i64 0, %23, !dbg !4082
  %size10 = sub i64 %add, 0, !dbg !4082
  %24 = insertvalue %"char[]" undef, ptr %22, 0, !dbg !4082
  %25 = insertvalue %"char[]" %24, i64 %size10, 1, !dbg !4082
  br label %noerr_block, !dbg !4082

panic_block:                                      ; preds = %assign_optional
  %26 = insertvalue %any undef, ptr %error_var, 0, !dbg !4082
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4082
  store %"char[]" { ptr @.panic_msg.19, i64 36 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg13, align 8
  store %any %27, ptr %varargslots, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 244, ptr align 8 %indirectarg14), !dbg !4070
  unreachable, !dbg !4070

noerr_block:                                      ; preds = %expr_block.exit
  store %"char[]" %25, ptr %taddr15, align 8
  %29 = load %"char[]", ptr %taddr15, align 8
  %30 = extractvalue %"char[]" %29, 0
  %31 = extractvalue %"char[]" %29, 1
  %gt = icmp sgt i64 0, %31
  %32 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %32, label %panic, label %checkok

checkok:                                          ; preds = %noerr_block
  %lt = icmp slt i64 %31, 0, !dbg !4083
  %33 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4083
  br i1 %33, label %panic25, label %checkok35, !dbg !4083

checkok35:                                        ; preds = %checkok
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !4083
  %35 = insertvalue %"char[]" %34, i64 0, 1, !dbg !4083
  store %"char[]" %35, ptr %0, align 8, !dbg !4083
  ret void, !dbg !4083

if.exit36:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %total_size, metadata !4084, metadata !DIExpression()), !dbg !4085
  %ptradd37 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !4086
  %36 = load i64, ptr %ptradd37, align 8, !dbg !4086
  %ptradd38 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4087
  %37 = load i64, ptr %ptradd38, align 8, !dbg !4087
  %mul39 = mul i64 %36, %37, !dbg !4086
  store i64 %mul39, ptr %total_size, align 8, !dbg !4086
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !4088, metadata !DIExpression()), !dbg !4090
  %ptradd40 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4090
  %38 = load i64, ptr %ptradd40, align 8, !dbg !4090
  store i64 %38, ptr %.anon, align 8, !dbg !4090
  call void @llvm.dbg.declare(metadata ptr %.anon41, metadata !4088, metadata !DIExpression()), !dbg !4090
  store i64 0, ptr %.anon41, align 8, !dbg !4090
  br label %loop.cond, !dbg !4090

loop.cond:                                        ; preds = %checkok59, %if.exit36
  %39 = load i64, ptr %.anon41, align 8, !dbg !4090
  %40 = load i64, ptr %.anon, align 8, !dbg !4090
  %lt42 = icmp ult i64 %39, %40, !dbg !4090
  br i1 %lt42, label %loop.body, label %loop.exit, !dbg !4090

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4091, metadata !DIExpression()), !dbg !4093
  %ptradd43 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4094
  %41 = load i64, ptr %ptradd43, align 8, !dbg !4094
  %42 = load ptr, ptr %1, align 8, !dbg !4094
  %43 = load i64, ptr %.anon41, align 8, !dbg !4094
  %ge = icmp uge i64 %43, %41, !dbg !4094
  %44 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4094
  br i1 %44, label %panic44, label %checkok54, !dbg !4094

checkok54:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %42, i64 %43, !dbg !4094
  store ptr %ptroffset, ptr %str, align 8, !dbg !4094
  %45 = load i64, ptr %total_size, align 8, !dbg !4095
  %46 = load ptr, ptr %str, align 8, !dbg !4097
  %checknull = icmp eq ptr %46, null, !dbg !4097
  %47 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4097
  br i1 %47, label %panic55, label %checkok59, !dbg !4097

checkok59:                                        ; preds = %checkok54
  %ptradd60 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !4097
  %48 = load i64, ptr %ptradd60, align 8, !dbg !4097
  %add61 = add i64 %45, %48, !dbg !4095
  store i64 %add61, ptr %total_size, align 8, !dbg !4095
  %49 = load i64, ptr %.anon41, align 8, !dbg !4090
  %addnuw = add nuw i64 %49, 1, !dbg !4090
  store i64 %addnuw, ptr %.anon41, align 8, !dbg !4090
  br label %loop.cond, !dbg !4090

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4098, metadata !DIExpression()), !dbg !4100
  %50 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4102
  %not63 = icmp eq ptr %50, null, !dbg !4102
  br i1 %not63, label %if.then64, label %if.exit65, !dbg !4102

if.then64:                                        ; preds = %loop.exit
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4105
  br label %if.exit65, !dbg !4105

if.exit65:                                        ; preds = %if.then64, %loop.exit
  %51 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4107
  store ptr %51, ptr %current, align 8, !dbg !4107
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4108, metadata !DIExpression()), !dbg !4109
  %52 = load ptr, ptr %current, align 8, !dbg !4110
  store ptr %52, ptr %original, align 8, !dbg !4110
  %53 = load ptr, ptr %current, align 8, !dbg !4111
  %54 = load ptr, ptr %3, align 8, !dbg !4112
  %eq = icmp eq ptr %53, %54, !dbg !4111
  br i1 %eq, label %if.then66, label %if.exit67, !dbg !4111

if.then66:                                        ; preds = %if.exit65
  %55 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4113
  store ptr %55, ptr %current, align 8, !dbg !4113
  br label %if.exit67, !dbg !4113

if.exit67:                                        ; preds = %if.then66, %if.exit65
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4114, metadata !DIExpression()), !dbg !4115
  %56 = load ptr, ptr %current, align 8, !dbg !4116
  %checknull68 = icmp eq ptr %56, null, !dbg !4116
  %57 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !4116
  br i1 %57, label %panic69, label %checkok73, !dbg !4116

checkok73:                                        ; preds = %if.exit67
  %ptradd74 = getelementptr inbounds i8, ptr %56, i64 24, !dbg !4116
  %58 = load i64, ptr %ptradd74, align 8, !dbg !4116
  store i64 %58, ptr %mark, align 8, !dbg !4116
  call void @llvm.dbg.declare(metadata ptr %res, metadata !4117, metadata !DIExpression()), !dbg !4119
  %59 = load i64, ptr %total_size, align 8, !dbg !4120
  %60 = call ptr @std.core.dstring.temp_with_capacity(i64 %59), !dbg !4121
  store ptr %60, ptr %res, align 8, !dbg !4121
  store ptr %res, ptr %self, align 8
  %ptradd75 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !4122
  %61 = load i64, ptr %ptradd75, align 8, !dbg !4122
  %62 = load ptr, ptr %1, align 8, !dbg !4122
  %ge76 = icmp sge i64 0, %61, !dbg !4123
  %63 = call i1 @llvm.expect.i1(i1 %ge76, i1 false), !dbg !4123
  br i1 %63, label %panic77, label %checkok87, !dbg !4123

checkok87:                                        ; preds = %checkok73
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %62, i32 16, i1 false)
  %64 = load ptr, ptr %self, align 8, !dbg !4124
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %value, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %64, ptr align 8 %indirectarg88), !dbg !4128
  call void @llvm.dbg.declare(metadata ptr %.anon89, metadata !4129, metadata !DIExpression()), !dbg !4132
  %65 = load %"char[][]", ptr %1, align 8, !dbg !4132
  %66 = extractvalue %"char[][]" %65, 0, !dbg !4132
  %67 = extractvalue %"char[][]" %65, 1, !dbg !4133
  %gt90 = icmp sgt i64 1, %67, !dbg !4133
  %68 = call i1 @llvm.expect.i1(i1 %gt90, i1 false), !dbg !4133
  br i1 %68, label %panic91, label %checkok101, !dbg !4133

checkok101:                                       ; preds = %checkok87
  %size102 = sub i64 %67, 1, !dbg !4132
  %ptradd103 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !4132
  %69 = insertvalue %"char[][]" undef, ptr %ptradd103, 0, !dbg !4132
  %70 = insertvalue %"char[][]" %69, i64 %size102, 1, !dbg !4132
  store %"char[][]" %70, ptr %taddr104, align 8
  store ptr %taddr104, ptr %.anon89, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon105, metadata !4134, metadata !DIExpression()), !dbg !4132
  %71 = load ptr, ptr %.anon89, align 8, !dbg !4132
  %checknull106 = icmp eq ptr %71, null, !dbg !4132
  %72 = call i1 @llvm.expect.i1(i1 %checknull106, i1 false), !dbg !4132
  br i1 %72, label %panic107, label %checkok111, !dbg !4132

checkok111:                                       ; preds = %checkok101
  %ptradd112 = getelementptr inbounds i8, ptr %71, i64 8, !dbg !4132
  %73 = load i64, ptr %ptradd112, align 8, !dbg !4132
  store i64 %73, ptr %.anon105, align 8, !dbg !4132
  call void @llvm.dbg.declare(metadata ptr %.anon113, metadata !4134, metadata !DIExpression()), !dbg !4132
  store i64 0, ptr %.anon113, align 8, !dbg !4132
  br label %loop.cond114, !dbg !4132

loop.cond114:                                     ; preds = %checkok147, %checkok111
  %74 = load i64, ptr %.anon113, align 8, !dbg !4132
  %75 = load i64, ptr %.anon105, align 8, !dbg !4132
  %lt115 = icmp ult i64 %74, %75, !dbg !4132
  br i1 %lt115, label %loop.body116, label %loop.exit151, !dbg !4132

loop.body116:                                     ; preds = %loop.cond114
  call void @llvm.dbg.declare(metadata ptr %str117, metadata !4135, metadata !DIExpression()), !dbg !4137
  %76 = load ptr, ptr %.anon89, align 8, !dbg !4138
  %checknull118 = icmp eq ptr %76, null, !dbg !4138
  %77 = call i1 @llvm.expect.i1(i1 %checknull118, i1 false), !dbg !4138
  br i1 %77, label %panic119, label %checkok123, !dbg !4138

checkok123:                                       ; preds = %loop.body116
  %ptradd124 = getelementptr inbounds i8, ptr %76, i64 8, !dbg !4138
  %78 = load i64, ptr %ptradd124, align 8, !dbg !4138
  %79 = load ptr, ptr %76, align 8, !dbg !4138
  %80 = load i64, ptr %.anon113, align 8, !dbg !4138
  %ge125 = icmp uge i64 %80, %78, !dbg !4138
  %81 = call i1 @llvm.expect.i1(i1 %ge125, i1 false), !dbg !4138
  br i1 %81, label %panic126, label %checkok136, !dbg !4138

checkok136:                                       ; preds = %checkok123
  %ptroffset137 = getelementptr inbounds [16 x i8], ptr %79, i64 %80, !dbg !4138
  store ptr %ptroffset137, ptr %str117, align 8, !dbg !4138
  store ptr %res, ptr %self138, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value139, ptr align 8 %2, i32 16, i1 false)
  %82 = load ptr, ptr %self138, align 8, !dbg !4139
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg140, ptr align 8 %value139, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %82, ptr align 8 %indirectarg140), !dbg !4143
  store ptr %res, ptr %self141, align 8
  %83 = load ptr, ptr %str117, align 8, !dbg !4144
  %checknull142 = icmp eq ptr %83, null, !dbg !4144
  %84 = call i1 @llvm.expect.i1(i1 %checknull142, i1 false), !dbg !4144
  br i1 %84, label %panic143, label %checkok147, !dbg !4144

checkok147:                                       ; preds = %checkok136
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value148, ptr align 8 %83, i32 16, i1 false)
  %85 = load ptr, ptr %self141, align 8, !dbg !4145
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg149, ptr align 8 %value148, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %85, ptr align 8 %indirectarg149), !dbg !4148
  %86 = load i64, ptr %.anon113, align 8, !dbg !4132
  %addnuw150 = add nuw i64 %86, 1, !dbg !4132
  store i64 %addnuw150, ptr %.anon113, align 8, !dbg !4132
  br label %loop.cond114, !dbg !4132

loop.exit151:                                     ; preds = %loop.cond114
  %87 = load ptr, ptr %res, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg152, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %87, ptr align 8 %indirectarg152), !dbg !4149
  %88 = load %"char[]", ptr %sretparam, align 8, !dbg !4149
  %89 = load ptr, ptr %current, align 8, !dbg !4150
  %90 = load i64, ptr %mark, align 8, !dbg !4150
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %89, i64 %90), !dbg !4152
  %91 = load ptr, ptr %original, align 8, !dbg !4153
  store ptr %91, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4153
  store %"char[]" %88, ptr %0, align 8, !dbg !4154
  ret void, !dbg !4154

panic:                                            ; preds = %noerr_block
  store i64 %31, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg20, align 8
  store %any %93, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %95, ptr %ptradd22, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 117, ptr align 8 %indirectarg24), !dbg !4083
  unreachable, !dbg !4083

panic25:                                          ; preds = %checkok
  store i64 -1, ptr %taddr26, align 8
  %97 = insertvalue %any undef, ptr %taddr26, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr27, align 8
  %99 = insertvalue %any undef, ptr %taddr27, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 60 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg30, align 8
  store %any %98, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %100, ptr %ptradd32, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 117, ptr align 8 %indirectarg34), !dbg !4083
  unreachable, !dbg !4083

panic44:                                          ; preds = %loop.body
  store i64 %41, ptr %taddr45, align 8
  %102 = insertvalue %any undef, ptr %taddr45, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr46, align 8
  %104 = insertvalue %any undef, ptr %taddr46, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg49, align 8
  store %any %103, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %105, ptr %ptradd51, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 121, ptr align 8 %indirectarg53), !dbg !4094
  unreachable, !dbg !4094

panic55:                                          ; preds = %checkok54
  store %"char[]" { ptr @.panic_msg.24, i64 44 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg58, align 8
  %107 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %107(ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, i32 123), !dbg !4097
  unreachable, !dbg !4097

panic69:                                          ; preds = %if.exit67
  store %"char[]" { ptr @.panic_msg, i64 48 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file, i64 6 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg72, align 8
  %108 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %108(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 542), !dbg !4116
  unreachable, !dbg !4116

panic77:                                          ; preds = %checkok73
  store i64 %61, ptr %taddr78, align 8
  %109 = insertvalue %any undef, ptr %taddr78, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr79, align 8
  %111 = insertvalue %any undef, ptr %taddr79, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg82, align 8
  store %any %110, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %112, ptr %ptradd84, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 128, ptr align 8 %indirectarg86), !dbg !4123
  unreachable, !dbg !4123

panic91:                                          ; preds = %checkok87
  store i64 %67, ptr %taddr92, align 8
  %114 = insertvalue %any undef, ptr %taddr92, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr93, align 8
  %116 = insertvalue %any undef, ptr %taddr93, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 61 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg96, align 8
  store %any %115, ptr %varargslots97, align 16
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %117, ptr %ptradd98, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, i32 129, ptr align 8 %indirectarg100), !dbg !4132
  unreachable, !dbg !4132

panic107:                                         ; preds = %checkok101
  store %"char[]" { ptr @.panic_msg.25, i64 47 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg110, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 129), !dbg !4132
  unreachable, !dbg !4132

panic119:                                         ; preds = %loop.body116
  store %"char[]" { ptr @.panic_msg.25, i64 47 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg122, align 8
  %120 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %120(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 129), !dbg !4138
  unreachable, !dbg !4138

panic126:                                         ; preds = %checkok123
  store i64 %78, ptr %taddr127, align 8
  %121 = insertvalue %any undef, ptr %taddr127, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %80, ptr %taddr128, align 8
  %123 = insertvalue %any undef, ptr %taddr128, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 59 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg131, align 8
  store %any %122, ptr %varargslots132, align 16
  %ptradd133 = getelementptr inbounds i8, ptr %varargslots132, i64 16
  store %any %124, ptr %ptradd133, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots132, 0
  %"$$temp134" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp134", ptr %indirectarg135, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, i32 129, ptr align 8 %indirectarg135), !dbg !4138
  unreachable, !dbg !4138

panic143:                                         ; preds = %checkok136
  store %"char[]" { ptr @.panic_msg.24, i64 44 }, ptr %indirectarg144, align 8
  store %"char[]" { ptr @.file.21, i64 9 }, ptr %indirectarg145, align 8
  store %"char[]" { ptr @.func.18, i64 8 }, ptr %indirectarg146, align 8
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126(ptr align 8 %indirectarg144, ptr align 8 %indirectarg145, ptr align 8 %indirectarg146, i32 132), !dbg !4144
  unreachable, !dbg !4144
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !4155 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"uint[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg5 = alloca %"uint[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4162, metadata !DIExpression()), !dbg !4163
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4164, metadata !DIExpression()), !dbg !4165
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4166, metadata !DIExpression()), !dbg !4167
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8 %indirectarg), !dbg !4168
  store i64 %3, ptr %len, align 8, !dbg !4168
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4169, metadata !DIExpression()), !dbg !4170
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !4171
  %add = add i64 %4, 1, !dbg !4171
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !4172
  %not = icmp eq i64 %5, 0, !dbg !4172
  br i1 %not, label %if.then, label %if.exit, !dbg !4172

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4175
  br label %expr_block.exit, !dbg !4175

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4176
  %6 = load i64, ptr %ptradd, align 8, !dbg !4176
  %7 = inttoptr i64 %6 to ptr, !dbg !4176
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd1, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.26, i64 14 }, ptr %indirectarg4, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 68), !dbg !4178
  unreachable, !dbg !4178

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator, align 8
  %15 = load i64, ptr %size, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !4178
  %not_err = icmp eq i64 %16, 0, !dbg !4178
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4178
  br i1 %17, label %after_check, label %assign_optional, !dbg !4178

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !4178
  br label %guard_block, !dbg !4178

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !4178
  store ptr %18, ptr %blockret, align 8, !dbg !4178
  br label %expr_block.exit, !dbg !4178

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4178

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !4178
  ret i64 %19, !dbg !4178

noerr_block:                                      ; preds = %expr_block.exit
  %20 = load ptr, ptr %blockret, align 8, !dbg !4178
  store ptr %20, ptr %data, align 8, !dbg !4178
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %1, i32 16, i1 false)
  %21 = load ptr, ptr %data, align 8
  call void @std.core.string.conv.utf32to8_unsafe(ptr align 8 %indirectarg5, ptr %21), !dbg !4179
  %22 = load ptr, ptr %data, align 8, !dbg !4180
  %23 = load i64, ptr %len, align 8, !dbg !4181
  %ptradd6 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !4181
  store i8 0, ptr %ptradd6, align 1, !dbg !4182
  %24 = load ptr, ptr %data, align 8, !dbg !4183
  %25 = load i64, ptr %len, align 8, !dbg !4184
  %add7 = add i64 0, %25, !dbg !4184
  %size8 = sub i64 %add7, 0, !dbg !4184
  %26 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !4184
  %27 = insertvalue %"char[]" %26, i64 %size8, 1, !dbg !4184
  store %"char[]" %27, ptr %0, align 8, !dbg !4184
  ret i64 0, !dbg !4184
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !4185 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"ushort[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var5 = alloca i64, align 8
  %indirectarg6 = alloca %"ushort[]", align 8
  %allocator11 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache16 = alloca ptr, align 8
  %.cachedtype17 = alloca ptr, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype17, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4192, metadata !DIExpression()), !dbg !4193
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4194, metadata !DIExpression()), !dbg !4195
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4196, metadata !DIExpression()), !dbg !4197
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8 %indirectarg), !dbg !4198
  store i64 %3, ptr %len, align 8, !dbg !4198
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4199, metadata !DIExpression()), !dbg !4200
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !4201
  %add = add i64 %4, 1, !dbg !4201
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !4202
  %not = icmp eq i64 %5, 0, !dbg !4202
  br i1 %not, label %if.then, label %if.exit, !dbg !4202

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4205
  br label %expr_block.exit, !dbg !4205

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4206
  %6 = load i64, ptr %ptradd, align 8, !dbg !4206
  %7 = inttoptr i64 %6 to ptr, !dbg !4206
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd1, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.16, i64 44 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.27, i64 14 }, ptr %indirectarg4, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 68), !dbg !4208
  unreachable, !dbg !4208

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator, align 8
  %15 = load i64, ptr %size, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !4208
  %not_err = icmp eq i64 %16, 0, !dbg !4208
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4208
  br i1 %17, label %after_check, label %assign_optional, !dbg !4208

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !4208
  br label %guard_block, !dbg !4208

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !4208
  store ptr %18, ptr %blockret, align 8, !dbg !4208
  br label %expr_block.exit, !dbg !4208

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4208

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !4208
  ret i64 %19, !dbg !4208

noerr_block:                                      ; preds = %expr_block.exit
  %20 = load ptr, ptr %blockret, align 8, !dbg !4208
  store ptr %20, ptr %data, align 8, !dbg !4208
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg6, ptr align 8 %1, i32 16, i1 false)
  %21 = load ptr, ptr %data, align 8
  %22 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8 %indirectarg6, ptr %21), !dbg !4209
  %not_err7 = icmp eq i64 %22, 0, !dbg !4209
  %23 = call i1 @llvm.expect.i1(i1 %not_err7, i1 true), !dbg !4209
  br i1 %23, label %after_check9, label %assign_optional8, !dbg !4209

assign_optional8:                                 ; preds = %noerr_block
  store i64 %22, ptr %error_var5, align 8, !dbg !4209
  br label %guard_block10, !dbg !4209

after_check9:                                     ; preds = %noerr_block
  br label %noerr_block30, !dbg !4209

guard_block10:                                    ; preds = %assign_optional8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator11, ptr align 8 %2, i32 16, i1 false)
  %24 = load ptr, ptr %data, align 8, !dbg !4210
  store ptr %24, ptr %ptr, align 8
  %25 = load ptr, ptr %ptr, align 8, !dbg !4212
  %not12 = icmp eq ptr %25, null, !dbg !4212
  br i1 %not12, label %if.then13, label %if.exit14, !dbg !4212

if.then13:                                        ; preds = %guard_block10
  br label %expr_block.exit29, !dbg !4215

if.exit14:                                        ; preds = %guard_block10
  %ptradd15 = getelementptr inbounds i8, ptr %allocator11, i64 8, !dbg !4216
  %26 = load i64, ptr %ptradd15, align 8, !dbg !4216
  %27 = inttoptr i64 %26 to ptr, !dbg !4216
  %type18 = load ptr, ptr %.cachedtype17, align 8
  %28 = icmp eq ptr %27, %type18
  br i1 %28, label %cache_hit21, label %cache_miss19

cache_miss19:                                     ; preds = %if.exit14
  %ptradd20 = getelementptr inbounds i8, ptr %27, i64 16
  %29 = load ptr, ptr %ptradd20, align 8
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.release")
  store ptr %30, ptr %.inlinecache16, align 8
  store ptr %27, ptr %.cachedtype17, align 8
  br label %31

cache_hit21:                                      ; preds = %if.exit14
  %cache_hit_fn22 = load ptr, ptr %.inlinecache16, align 8
  br label %31

31:                                               ; preds = %cache_hit21, %cache_miss19
  %fn_phi23 = phi ptr [ %cache_hit_fn22, %cache_hit21 ], [ %30, %cache_miss19 ]
  %32 = icmp eq ptr %fn_phi23, null
  br i1 %32, label %missing_function24, label %match28

missing_function24:                               ; preds = %31
  store %"char[]" { ptr @.panic_msg.28, i64 44 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.17, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.27, i64 14 }, ptr %indirectarg27, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 105), !dbg !4217
  unreachable, !dbg !4217

match28:                                          ; preds = %31
  %34 = load ptr, ptr %allocator11, align 8, !dbg !4217
  %35 = load ptr, ptr %ptr, align 8, !dbg !4217
  call void %fn_phi23(ptr %34, ptr %35, i8 zeroext 0), !dbg !4217
  br label %expr_block.exit29, !dbg !4217

expr_block.exit29:                                ; preds = %match28, %if.then13
  %36 = load i64, ptr %error_var5, align 8, !dbg !4217
  ret i64 %36, !dbg !4217

noerr_block30:                                    ; preds = %after_check9
  %37 = load ptr, ptr %data, align 8, !dbg !4218
  %38 = load i64, ptr %len, align 8, !dbg !4219
  %ptradd31 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !4219
  store i8 0, ptr %ptradd31, align 1, !dbg !4220
  %39 = load ptr, ptr %data, align 8, !dbg !4221
  %40 = load i64, ptr %len, align 8, !dbg !4222
  %add32 = add i64 0, %40, !dbg !4222
  %size33 = sub i64 %add32, 0, !dbg !4222
  %41 = insertvalue %"char[]" undef, ptr %39, 0, !dbg !4222
  %42 = insertvalue %"char[]" %41, i64 %size33, 1, !dbg !4222
  store %"char[]" %42, ptr %0, align 8, !dbg !4222
  ret i64 0, !dbg !4222
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_wstring(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !4223 {
entry:
  %wstring = alloca ptr, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %"ushort[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4226, metadata !DIExpression()), !dbg !4227
  call void @llvm.dbg.declare(metadata ptr %2, metadata !4228, metadata !DIExpression()), !dbg !4229
  call void @llvm.dbg.declare(metadata ptr %utf16_len, metadata !4230, metadata !DIExpression()), !dbg !4231
  store i64 0, ptr %utf16_len, align 8, !dbg !4231
  br label %loop.cond, !dbg !4232

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load ptr, ptr %wstring, align 8, !dbg !4233
  %4 = load i64, ptr %utf16_len, align 8, !dbg !4235
  %ptroffset = getelementptr inbounds [2 x i8], ptr %3, i64 %4, !dbg !4235
  %5 = load i16, ptr %ptroffset, align 2, !dbg !4235
  %zext = zext i16 %5 to i32, !dbg !4235
  %neq = icmp ne i32 0, %zext, !dbg !4233
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !4233

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %utf16_len, align 8, !dbg !4236
  %add = add i64 %6, 1, !dbg !4236
  store i64 %add, ptr %utf16_len, align 8, !dbg !4236
  br label %loop.cond, !dbg !4236

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4237, metadata !DIExpression()), !dbg !4238
  %7 = load ptr, ptr %wstring, align 8, !dbg !4239
  %8 = load i64, ptr %utf16_len, align 8, !dbg !4240
  %add1 = add i64 0, %8, !dbg !4240
  %size = sub i64 %add1, 0, !dbg !4240
  %9 = insertvalue %"ushort[]" undef, ptr %7, 0, !dbg !4240
  %10 = insertvalue %"ushort[]" %9, i64 %size, 1, !dbg !4240
  store %"ushort[]" %10, ptr %utf16, align 8, !dbg !4240
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %utf16, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  %11 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !4241
  %not_err = icmp eq i64 %11, 0, !dbg !4241
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4241
  br i1 %12, label %after_check, label %assign_optional, !dbg !4241

assign_optional:                                  ; preds = %loop.exit
  store i64 %11, ptr %reterr, align 8, !dbg !4241
  br label %err_retblock, !dbg !4241

after_check:                                      ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4241
  ret i64 0, !dbg !4241

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !4241
  ret i64 %13, !dbg !4241
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_wstring(ptr %0, ptr %1) #0 comdat !dbg !4242 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4245, metadata !DIExpression()), !dbg !4246
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4247
  %not = icmp eq ptr %2, null, !dbg !4247
  br i1 %not, label %if.then, label %if.exit, !dbg !4247

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4250
  br label %if.exit, !dbg !4250

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4252
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4252
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4252
  %6 = load ptr, ptr %wstring, align 8
  store %any %5, ptr %indirectarg, align 8
  %7 = call i64 @std.core.string.new_from_wstring(ptr %retparam, ptr %6, ptr align 8 %indirectarg) #5, !dbg !4253
  %not_err = icmp eq i64 %7, 0, !dbg !4253
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4253
  br i1 %8, label %after_check, label %assign_optional, !dbg !4253

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !4253
  br label %err_retblock, !dbg !4253

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4253
  ret i64 0, !dbg !4253

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !4253
  ret i64 %9, !dbg !4253
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !4254 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %"ushort[]", align 8
  %indirectarg1 = alloca %any, align 8
  call void @llvm.dbg.declare(metadata ptr %1, metadata !4257, metadata !DIExpression()), !dbg !4258
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4259
  %not = icmp eq ptr %2, null, !dbg !4259
  br i1 %not, label %if.then, label %if.exit, !dbg !4259

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4262
  br label %if.exit, !dbg !4262

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4264
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4264
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4264
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !4265
  %not_err = icmp eq i64 %6, 0, !dbg !4265
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4265
  br i1 %7, label %after_check, label %assign_optional, !dbg !4265

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !4265
  br label %err_retblock, !dbg !4265

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4265
  ret i64 0, !dbg !4265

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !4265
  ret i64 %8, !dbg !4265
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr align 8, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #3

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.allocator.temp_allocator_next() #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.copy_str(ptr noalias sret(%"char[]") align 8, ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.copy_zstr(ptr, ptr align 8) #0

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.append_chars(ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.string.conv.utf32to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8_codepoints(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.ascii.char.is_upper(i8) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.ascii.char.is_lower(i8) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!48, !49, !50}
!llvm.dbg.cu = !{!51}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 17, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 21, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 22, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 460, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 461, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 4, !"PIC Level", i32 2}
!49 = !{i32 1, !"CodeView", i32 1}
!50 = !{i32 1, !"uwtable", i32 2}
!51 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !52, splitDebugInlining: false)
!52 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!53 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 146, type: !54, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!54 = !DISubroutineType(types: !55)
!55 = !{!56, !56, !56}
!56 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !57)
!57 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !58, identifier: "char[]")
!58 = !{!59, !62}
!59 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !57, baseType: !60, size: 64, align: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !61, size: 64, align: 64, dwarfAddressSpace: 0)
!61 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !57, baseType: !63, size: 64, align: 64, offset: 64)
!63 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !64)
!64 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!65 = !{}
!66 = !DILocalVariable(name: "string", arg: 1, scope: !53, file: !2, line: 146, type: !56)
!67 = !DILocation(line: 146, column: 23, scope: !53)
!68 = !DILocalVariable(name: "to_trim", arg: 2, scope: !53, file: !2, line: 146, type: !56)
!69 = !DILocation(line: 146, column: 38, scope: !53)
!70 = !DILocalVariable(name: "start", scope: !53, file: !2, line: 148, type: !63, align: 8)
!71 = !DILocation(line: 148, column: 6, scope: !53)
!72 = !DILocation(line: 148, column: 14, scope: !53)
!73 = !DILocalVariable(name: "len", scope: !53, file: !2, line: 149, type: !63, align: 8)
!74 = !DILocation(line: 149, column: 6, scope: !53)
!75 = !DILocation(line: 149, column: 12, scope: !53)
!76 = !DILocation(line: 150, column: 2, scope: !53)
!77 = !DILocation(line: 150, column: 9, scope: !78)
!78 = distinct !DILexicalBlock(scope: !53, file: !2, line: 150, column: 2)
!79 = !DILocation(line: 150, column: 17, scope: !78)
!80 = !DILocation(line: 150, column: 36, scope: !78)
!81 = !DILocation(line: 150, column: 43, scope: !78)
!82 = !DILocalVariable(name: ".temp", scope: !83, file: !2, line: 109, type: !63, align: 8)
!83 = distinct !DILexicalBlock(scope: !84, file: !2, line: 109, column: 2)
!84 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 107, scopeLine: 107, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!85 = !DILocation(line: 109, column: 16, scope: !83, inlinedAt: !86)
!86 = !DILocation(line: 150, column: 24, scope: !78)
!87 = !DILocalVariable(name: "ch", scope: !88, file: !2, line: 109, type: !61, align: 1)
!88 = distinct !DILexicalBlock(scope: !83, file: !2, line: 109, column: 21)
!89 = !DILocation(line: 109, column: 11, scope: !88, inlinedAt: !86)
!90 = !DILocation(line: 109, column: 16, scope: !88, inlinedAt: !86)
!91 = !DILocation(line: 109, column: 25, scope: !88, inlinedAt: !86)
!92 = !DILocation(line: 109, column: 31, scope: !88, inlinedAt: !86)
!93 = !DILocation(line: 109, column: 41, scope: !88, inlinedAt: !86)
!94 = !DILocation(line: 110, column: 9, scope: !84, inlinedAt: !86)
!95 = !DILocation(line: 150, column: 61, scope: !78)
!96 = !DILocation(line: 151, column: 6, scope: !53)
!97 = !DILocation(line: 151, column: 15, scope: !53)
!98 = !DILocation(line: 151, column: 27, scope: !53)
!99 = !DILocalVariable(name: "end", scope: !53, file: !2, line: 152, type: !63, align: 8)
!100 = !DILocation(line: 152, column: 6, scope: !53)
!101 = !DILocation(line: 152, column: 12, scope: !53)
!102 = !DILocation(line: 153, column: 2, scope: !53)
!103 = !DILocation(line: 153, column: 9, scope: !104)
!104 = distinct !DILexicalBlock(scope: !53, file: !2, line: 153, column: 2)
!105 = !DILocation(line: 153, column: 15, scope: !104)
!106 = !DILocation(line: 153, column: 36, scope: !104)
!107 = !DILocation(line: 153, column: 43, scope: !104)
!108 = !DILocalVariable(name: ".temp", scope: !109, file: !2, line: 109, type: !63, align: 8)
!109 = distinct !DILexicalBlock(scope: !110, file: !2, line: 109, column: 2)
!110 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 107, scopeLine: 107, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!111 = !DILocation(line: 109, column: 16, scope: !109, inlinedAt: !112)
!112 = !DILocation(line: 153, column: 24, scope: !104)
!113 = !DILocalVariable(name: "ch", scope: !114, file: !2, line: 109, type: !61, align: 1)
!114 = distinct !DILexicalBlock(scope: !109, file: !2, line: 109, column: 21)
!115 = !DILocation(line: 109, column: 11, scope: !114, inlinedAt: !112)
!116 = !DILocation(line: 109, column: 16, scope: !114, inlinedAt: !112)
!117 = !DILocation(line: 109, column: 25, scope: !114, inlinedAt: !112)
!118 = !DILocation(line: 109, column: 31, scope: !114, inlinedAt: !112)
!119 = !DILocation(line: 109, column: 41, scope: !114, inlinedAt: !112)
!120 = !DILocation(line: 110, column: 9, scope: !110, inlinedAt: !112)
!121 = !DILocation(line: 153, column: 59, scope: !104)
!122 = !DILocation(line: 154, column: 9, scope: !53)
!123 = !DILocation(line: 154, column: 16, scope: !53)
!124 = !DILocation(line: 154, column: 23, scope: !53)
!125 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 165, type: !126, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!126 = !DISubroutineType(types: !127)
!127 = !{!128, !56, !56}
!128 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!129 = !DILocalVariable(name: "string", arg: 1, scope: !125, file: !2, line: 165, type: !56)
!130 = !DILocation(line: 165, column: 28, scope: !125)
!131 = !DILocalVariable(name: "needle", arg: 2, scope: !125, file: !2, line: 165, type: !56)
!132 = !DILocation(line: 165, column: 43, scope: !125)
!133 = !DILocation(line: 167, column: 6, scope: !125)
!134 = !DILocation(line: 167, column: 19, scope: !125)
!135 = !DILocation(line: 167, column: 38, scope: !125)
!136 = !DILocation(line: 168, column: 7, scope: !125)
!137 = !DILocation(line: 168, column: 26, scope: !125)
!138 = !DILocation(line: 169, column: 9, scope: !125)
!139 = !DILocation(line: 169, column: 16, scope: !125)
!140 = !DILocation(line: 169, column: 17, scope: !125)
!141 = !DILocation(line: 169, column: 32, scope: !125)
!142 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 180, type: !126, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!143 = !DILocalVariable(name: "string", arg: 1, scope: !142, file: !2, line: 180, type: !56)
!144 = !DILocation(line: 180, column: 26, scope: !142)
!145 = !DILocalVariable(name: "needle", arg: 2, scope: !142, file: !2, line: 180, type: !56)
!146 = !DILocation(line: 180, column: 41, scope: !142)
!147 = !DILocation(line: 182, column: 6, scope: !142)
!148 = !DILocation(line: 182, column: 19, scope: !142)
!149 = !DILocation(line: 182, column: 38, scope: !142)
!150 = !DILocation(line: 183, column: 7, scope: !142)
!151 = !DILocation(line: 183, column: 26, scope: !142)
!152 = !DILocation(line: 184, column: 9, scope: !142)
!153 = !DILocation(line: 184, column: 17, scope: !142)
!154 = !DILocation(line: 184, column: 34, scope: !142)
!155 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 195, type: !54, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!156 = !DILocalVariable(name: "string", arg: 1, scope: !155, file: !2, line: 195, type: !56)
!157 = !DILocation(line: 195, column: 24, scope: !155)
!158 = !DILocalVariable(name: "needle", arg: 2, scope: !155, file: !2, line: 195, type: !56)
!159 = !DILocation(line: 195, column: 39, scope: !155)
!160 = !DILocation(line: 197, column: 7, scope: !155)
!161 = !DILocation(line: 197, column: 22, scope: !155)
!162 = !DILocation(line: 197, column: 57, scope: !155)
!163 = !DILocation(line: 198, column: 9, scope: !155)
!164 = !DILocation(line: 198, column: 16, scope: !155)
!165 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 209, type: !54, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!166 = !DILocalVariable(name: "string", arg: 1, scope: !165, file: !2, line: 209, type: !56)
!167 = !DILocation(line: 209, column: 28, scope: !165)
!168 = !DILocalVariable(name: "needle", arg: 2, scope: !165, file: !2, line: 209, type: !56)
!169 = !DILocation(line: 209, column: 43, scope: !165)
!170 = !DILocation(line: 211, column: 7, scope: !165)
!171 = !DILocation(line: 211, column: 22, scope: !165)
!172 = !DILocation(line: 211, column: 55, scope: !165)
!173 = !DILocation(line: 213, column: 9, scope: !165)
!174 = !DILocation(line: 213, column: 16, scope: !165)
!175 = !DILocation(line: 213, column: 18, scope: !165)
!176 = !DILocation(line: 213, column: 31, scope: !165)
!177 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 226, type: !178, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!178 = !DISubroutineType(types: !179)
!179 = !{!180, !56, !56, !64, !185}
!180 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !181, identifier: "String[]")
!181 = !{!182, !184}
!182 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !180, baseType: !183, size: 64, align: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !56, size: 64, align: 64, dwarfAddressSpace: 0)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !180, baseType: !63, size: 64, align: 64, offset: 64)
!185 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !186, identifier: "Allocator")
!186 = !{!187, !189}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !185, baseType: !188, size: 64, align: 64)
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !185, baseType: !190, size: 64, align: 64, offset: 64)
!190 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!191 = !DILocalVariable(name: "s", arg: 1, scope: !177, file: !2, line: 226, type: !56)
!192 = !DILocation(line: 226, column: 26, scope: !177)
!193 = !DILocalVariable(name: "needle", arg: 2, scope: !177, file: !2, line: 226, type: !56)
!194 = !DILocation(line: 226, column: 36, scope: !177)
!195 = !DILocalVariable(name: "max", arg: 3, scope: !177, file: !2, line: 226, type: !63)
!196 = !DILocation(line: 226, column: 48, scope: !177)
!197 = !DILocalVariable(name: "allocator", arg: 4, scope: !177, file: !2, line: 226, type: !185)
!198 = !DILocation(line: 226, column: 67, scope: !177)
!199 = !DILocation(line: 223, column: 11, scope: !200)
!200 = distinct !DILexicalBlock(scope: !177, file: !2, line: 227, column: 1)
!201 = !DILocalVariable(name: "capacity", scope: !177, file: !2, line: 228, type: !63, align: 8)
!202 = !DILocation(line: 228, column: 6, scope: !177)
!203 = !DILocation(line: 228, column: 17, scope: !177)
!204 = !DILocalVariable(name: "i", scope: !177, file: !2, line: 229, type: !63, align: 8)
!205 = !DILocation(line: 229, column: 6, scope: !177)
!206 = !DILocation(line: 229, column: 10, scope: !177)
!207 = !DILocalVariable(name: "holder", scope: !177, file: !2, line: 230, type: !183, align: 8)
!208 = !DILocation(line: 230, column: 10, scope: !177)
!209 = !DILocation(line: 286, column: 55, scope: !210, inlinedAt: !212)
!210 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !211, file: !211, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!211 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!212 = !DILocation(line: 269, column: 9, scope: !213, inlinedAt: !214)
!213 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !211, file: !211, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!214 = !DILocation(line: 230, column: 30, scope: !177)
!215 = !DILocation(line: 286, column: 40, scope: !210, inlinedAt: !212)
!216 = !DILocation(line: 62, column: 7, scope: !217, inlinedAt: !218)
!217 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!218 = !DILocation(line: 286, column: 11, scope: !210, inlinedAt: !212)
!219 = !DILocation(line: 62, column: 20, scope: !217, inlinedAt: !218)
!220 = !DILocation(line: 28, column: 71, scope: !221, inlinedAt: !222)
!221 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!222 = !DILocation(line: 68, column: 10, scope: !217, inlinedAt: !218)
!223 = !DILocation(line: 286, column: 67, scope: !210, inlinedAt: !212)
!224 = !DILocalVariable(name: "no_more", scope: !177, file: !2, line: 231, type: !128, align: 1)
!225 = !DILocation(line: 231, column: 7, scope: !177)
!226 = !DILocation(line: 231, column: 17, scope: !177)
!227 = !DILocation(line: 232, column: 2, scope: !177)
!228 = !DILocation(line: 232, column: 10, scope: !229)
!229 = distinct !DILexicalBlock(scope: !177, file: !2, line: 232, column: 2)
!230 = !DILocalVariable(name: "index", scope: !231, file: !2, line: 234, type: !64, align: 8)
!231 = distinct !DILexicalBlock(scope: !229, file: !2, line: 233, column: 2)
!232 = !DILocation(line: 234, column: 8, scope: !231)
!233 = !DILocation(line: 234, column: 16, scope: !231)
!234 = !DILocation(line: 234, column: 21, scope: !231)
!235 = !DILocation(line: 234, column: 31, scope: !231)
!236 = !DILocation(line: 234, column: 55, scope: !231)
!237 = !DILocalVariable(name: "res", scope: !231, file: !2, line: 235, type: !56, align: 8)
!238 = !DILocation(line: 235, column: 10, scope: !231)
!239 = !DILocation(line: 236, column: 7, scope: !231)
!240 = !DILocation(line: 238, column: 10, scope: !241)
!241 = distinct !DILexicalBlock(scope: !231, file: !2, line: 237, column: 3)
!242 = !DILocation(line: 238, column: 12, scope: !241)
!243 = !DILocation(line: 238, column: 13, scope: !241)
!244 = !DILocation(line: 239, column: 8, scope: !241)
!245 = !DILocation(line: 239, column: 10, scope: !241)
!246 = !DILocation(line: 239, column: 18, scope: !241)
!247 = !DILocation(line: 243, column: 10, scope: !248)
!248 = distinct !DILexicalBlock(scope: !231, file: !2, line: 242, column: 3)
!249 = !DILocation(line: 244, column: 14, scope: !248)
!250 = !DILocation(line: 246, column: 7, scope: !231)
!251 = !DILocation(line: 246, column: 12, scope: !231)
!252 = !DILocation(line: 248, column: 4, scope: !253)
!253 = distinct !DILexicalBlock(scope: !231, file: !2, line: 247, column: 3)
!254 = !DILocation(line: 249, column: 43, scope: !253)
!255 = !DILocation(line: 249, column: 67, scope: !253)
!256 = !DILocation(line: 249, column: 51, scope: !253)
!257 = !DILocation(line: 90, column: 7, scope: !258, inlinedAt: !259)
!258 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !211, file: !211, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!259 = !DILocation(line: 85, column: 9, scope: !260, inlinedAt: !261)
!260 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !211, file: !211, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!261 = !DILocation(line: 249, column: 24, scope: !253)
!262 = !DILocation(line: 101, column: 7, scope: !263, inlinedAt: !264)
!263 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !211, file: !211, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!264 = !DILocation(line: 92, column: 3, scope: !265, inlinedAt: !259)
!265 = distinct !DILexicalBlock(scope: !258, file: !211, line: 91, column: 2)
!266 = !DILocation(line: 101, column: 18, scope: !263, inlinedAt: !264)
!267 = !DILocation(line: 105, column: 25, scope: !263, inlinedAt: !264)
!268 = !DILocation(line: 105, column: 2, scope: !263, inlinedAt: !264)
!269 = !DILocation(line: 93, column: 10, scope: !265, inlinedAt: !259)
!270 = !DILocation(line: 95, column: 7, scope: !258, inlinedAt: !259)
!271 = !DILocation(line: 28, column: 71, scope: !272, inlinedAt: !273)
!272 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!273 = !DILocation(line: 95, column: 19, scope: !258, inlinedAt: !259)
!274 = !DILocation(line: 35, column: 60, scope: !275, inlinedAt: !276)
!275 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!276 = !DILocation(line: 96, column: 9, scope: !258, inlinedAt: !259)
!277 = !DILocation(line: 251, column: 3, scope: !231)
!278 = !DILocation(line: 251, column: 10, scope: !231)
!279 = !DILocation(line: 251, column: 17, scope: !231)
!280 = !DILocation(line: 253, column: 9, scope: !177)
!281 = !DILocation(line: 253, column: 17, scope: !177)
!282 = !DILocation(line: 224, column: 10, scope: !177)
!283 = distinct !DISubprogram(name: "new_split", linkageName: "std.core.String.new_split", scope: !2, file: !2, line: 266, type: !284, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!284 = !DISubroutineType(types: !285)
!285 = !{!180, !56, !56, !64}
!286 = !DILocalVariable(name: "s", arg: 1, scope: !283, file: !2, line: 266, type: !56)
!287 = !DILocation(line: 266, column: 30, scope: !283)
!288 = !DILocalVariable(name: "needle", arg: 2, scope: !283, file: !2, line: 266, type: !56)
!289 = !DILocation(line: 266, column: 40, scope: !283)
!290 = !DILocalVariable(name: "max", arg: 3, scope: !283, file: !2, line: 266, type: !63)
!291 = !DILocation(line: 266, column: 52, scope: !283)
!292 = !DILocation(line: 263, column: 11, scope: !293)
!293 = distinct !DILexicalBlock(scope: !283, file: !2, line: 266, column: 64)
!294 = !DILocation(line: 266, column: 64, scope: !283)
!295 = !DILocation(line: 264, column: 10, scope: !283)
!296 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 276, type: !284, scopeLine: 276, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!297 = !DILocalVariable(name: "s", arg: 1, scope: !296, file: !2, line: 276, type: !56)
!298 = !DILocation(line: 276, column: 27, scope: !296)
!299 = !DILocalVariable(name: "needle", arg: 2, scope: !296, file: !2, line: 276, type: !56)
!300 = !DILocation(line: 276, column: 37, scope: !296)
!301 = !DILocalVariable(name: "max", arg: 3, scope: !296, file: !2, line: 276, type: !63)
!302 = !DILocation(line: 276, column: 49, scope: !296)
!303 = !DILocation(line: 396, column: 7, scope: !304, inlinedAt: !305)
!304 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!305 = !DILocation(line: 276, column: 93, scope: !296)
!306 = !DILocation(line: 398, column: 3, scope: !307, inlinedAt: !305)
!307 = distinct !DILexicalBlock(scope: !304, file: !211, line: 397, column: 2)
!308 = !DILocation(line: 400, column: 9, scope: !304, inlinedAt: !305)
!309 = !DILocation(line: 276, column: 61, scope: !296)
!310 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 286, type: !126, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!311 = !DILocalVariable(name: "s", arg: 1, scope: !310, file: !2, line: 286, type: !56)
!312 = !DILocation(line: 286, column: 25, scope: !310)
!313 = !DILocalVariable(name: "needle", arg: 2, scope: !310, file: !2, line: 286, type: !56)
!314 = !DILocation(line: 286, column: 35, scope: !310)
!315 = !DILocation(line: 336, column: 12, scope: !316, inlinedAt: !318)
!316 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !317, file: !317, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!317 = !DIFile(filename: "builtin.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!318 = !DILocation(line: 288, column: 9, scope: !310)
!319 = !DILocation(line: 336, column: 26, scope: !316, inlinedAt: !318)
!320 = !DILocation(line: 337, column: 9, scope: !316, inlinedAt: !318)
!321 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 301, type: !322, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!322 = !DISubroutineType(types: !323)
!323 = !{!324, !326, !56, !61}
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !325)
!325 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!326 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !63, size: 64, align: 64, dwarfAddressSpace: 0)
!327 = !DILocalVariable(name: "s", arg: 1, scope: !321, file: !2, line: 301, type: !56)
!328 = !DILocation(line: 301, column: 30, scope: !321)
!329 = !DILocalVariable(name: "needle", arg: 2, scope: !321, file: !2, line: 301, type: !61)
!330 = !DILocation(line: 301, column: 38, scope: !321)
!331 = !DILocalVariable(name: ".temp", scope: !332, file: !2, line: 303, type: !63, align: 8)
!332 = distinct !DILexicalBlock(scope: !321, file: !2, line: 303, column: 2)
!333 = !DILocation(line: 303, column: 18, scope: !332)
!334 = !DILocation(line: 303, column: 11, scope: !332)
!335 = !DILocalVariable(name: "i", scope: !336, file: !2, line: 303, type: !63, align: 8)
!336 = distinct !DILexicalBlock(scope: !332, file: !2, line: 304, column: 2)
!337 = !DILocation(line: 303, column: 11, scope: !336)
!338 = !DILocalVariable(name: "c", scope: !336, file: !2, line: 303, type: !61, align: 1)
!339 = !DILocation(line: 303, column: 14, scope: !336)
!340 = !DILocation(line: 303, column: 18, scope: !336)
!341 = !DILocation(line: 305, column: 7, scope: !342)
!342 = distinct !DILexicalBlock(scope: !336, file: !2, line: 304, column: 2)
!343 = !DILocation(line: 305, column: 12, scope: !342)
!344 = !DILocation(line: 305, column: 27, scope: !342)
!345 = !DILocation(line: 297, column: 10, scope: !342)
!346 = !DILocation(line: 297, column: 19, scope: !342)
!347 = !DILocation(line: 307, column: 9, scope: !321)
!348 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 321, type: !349, scopeLine: 321, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!349 = !DISubroutineType(types: !350)
!350 = !{!324, !326, !56, !61, !64}
!351 = !DILocalVariable(name: "s", arg: 1, scope: !348, file: !2, line: 321, type: !56)
!352 = !DILocation(line: 321, column: 35, scope: !348)
!353 = !DILocalVariable(name: "needle", arg: 2, scope: !348, file: !2, line: 321, type: !61)
!354 = !DILocation(line: 321, column: 43, scope: !348)
!355 = !DILocalVariable(name: "start_index", arg: 3, scope: !348, file: !2, line: 321, type: !63)
!356 = !DILocation(line: 321, column: 55, scope: !348)
!357 = !DILocalVariable(name: "len", scope: !348, file: !2, line: 323, type: !63, align: 8)
!358 = !DILocation(line: 323, column: 6, scope: !348)
!359 = !DILocation(line: 323, column: 12, scope: !348)
!360 = !DILocation(line: 324, column: 6, scope: !348)
!361 = !DILocation(line: 324, column: 13, scope: !348)
!362 = !DILocation(line: 324, column: 33, scope: !348)
!363 = !DILocalVariable(name: "i", scope: !364, file: !2, line: 325, type: !63, align: 8)
!364 = distinct !DILexicalBlock(scope: !348, file: !2, line: 325, column: 2)
!365 = !DILocation(line: 325, column: 11, scope: !364)
!366 = !DILocation(line: 325, column: 15, scope: !364)
!367 = !DILocation(line: 325, column: 28, scope: !364)
!368 = !DILocation(line: 325, column: 32, scope: !364)
!369 = !DILocation(line: 327, column: 7, scope: !370)
!370 = distinct !DILexicalBlock(scope: !364, file: !2, line: 326, column: 2)
!371 = !DILocation(line: 327, column: 9, scope: !370)
!372 = !DILocation(line: 327, column: 15, scope: !370)
!373 = !DILocation(line: 327, column: 30, scope: !370)
!374 = !DILocation(line: 317, column: 10, scope: !370)
!375 = !DILocation(line: 317, column: 19, scope: !370)
!376 = !DILocation(line: 325, column: 37, scope: !364)
!377 = !DILocation(line: 329, column: 9, scope: !348)
!378 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 342, type: !322, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!379 = !DILocalVariable(name: "s", arg: 1, scope: !378, file: !2, line: 342, type: !56)
!380 = !DILocation(line: 342, column: 31, scope: !378)
!381 = !DILocalVariable(name: "needle", arg: 2, scope: !378, file: !2, line: 342, type: !61)
!382 = !DILocation(line: 342, column: 39, scope: !378)
!383 = !DILocalVariable(name: ".temp", scope: !384, file: !2, line: 344, type: !63, align: 8)
!384 = distinct !DILexicalBlock(scope: !378, file: !2, line: 344, column: 2)
!385 = !DILocation(line: 344, column: 13, scope: !384)
!386 = !DILocation(line: 344, column: 20, scope: !384)
!387 = !DILocalVariable(name: "i", scope: !388, file: !2, line: 344, type: !63, align: 8)
!388 = distinct !DILexicalBlock(scope: !384, file: !2, line: 345, column: 2)
!389 = !DILocation(line: 344, column: 13, scope: !388)
!390 = !DILocalVariable(name: "c", scope: !388, file: !2, line: 344, type: !61, align: 1)
!391 = !DILocation(line: 344, column: 16, scope: !388)
!392 = !DILocation(line: 344, column: 20, scope: !388)
!393 = !DILocation(line: 346, column: 7, scope: !394)
!394 = distinct !DILexicalBlock(scope: !388, file: !2, line: 345, column: 2)
!395 = !DILocation(line: 346, column: 12, scope: !394)
!396 = !DILocation(line: 346, column: 27, scope: !394)
!397 = !DILocation(line: 338, column: 10, scope: !394)
!398 = !DILocation(line: 338, column: 19, scope: !394)
!399 = !DILocation(line: 348, column: 9, scope: !378)
!400 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 362, type: !401, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!401 = !DISubroutineType(types: !402)
!402 = !{!324, !326, !56, !56}
!403 = !DILocalVariable(name: "s", arg: 1, scope: !400, file: !2, line: 362, type: !56)
!404 = !DILocation(line: 362, column: 25, scope: !400)
!405 = !DILocalVariable(name: "needle", arg: 2, scope: !400, file: !2, line: 362, type: !56)
!406 = !DILocation(line: 362, column: 35, scope: !400)
!407 = !DILocation(line: 358, column: 11, scope: !408)
!408 = distinct !DILexicalBlock(scope: !400, file: !2, line: 363, column: 1)
!409 = !DILocalVariable(name: "needed", scope: !400, file: !2, line: 364, type: !63, align: 8)
!410 = !DILocation(line: 364, column: 6, scope: !400)
!411 = !DILocation(line: 364, column: 15, scope: !400)
!412 = !DILocation(line: 365, column: 6, scope: !400)
!413 = !DILocation(line: 365, column: 20, scope: !400)
!414 = !DILocation(line: 365, column: 29, scope: !400)
!415 = !DILocalVariable(name: "first", scope: !416, file: !2, line: 367, type: !61, align: 1)
!416 = distinct !DILexicalBlock(scope: !400, file: !2, line: 366, column: 2)
!417 = !DILocation(line: 367, column: 8, scope: !416)
!418 = !DILocation(line: 367, column: 16, scope: !416)
!419 = !DILocation(line: 367, column: 23, scope: !416)
!420 = !DILocalVariable(name: ".temp", scope: !421, file: !2, line: 368, type: !183, align: 8)
!421 = distinct !DILexicalBlock(scope: !416, file: !2, line: 368, column: 3)
!422 = !DILocation(line: 368, column: 18, scope: !421)
!423 = !DILocation(line: 368, column: 20, scope: !421)
!424 = !DILocation(line: 368, column: 23, scope: !421)
!425 = !DILocalVariable(name: ".temp", scope: !421, file: !2, line: 368, type: !63, align: 8)
!426 = !DILocation(line: 368, column: 12, scope: !421)
!427 = !DILocalVariable(name: "i", scope: !428, file: !2, line: 368, type: !63, align: 8)
!428 = distinct !DILexicalBlock(scope: !421, file: !2, line: 369, column: 3)
!429 = !DILocation(line: 368, column: 12, scope: !428)
!430 = !DILocalVariable(name: "c", scope: !428, file: !2, line: 368, type: !61, align: 1)
!431 = !DILocation(line: 368, column: 15, scope: !428)
!432 = !DILocation(line: 368, column: 18, scope: !428)
!433 = !DILocation(line: 370, column: 8, scope: !434)
!434 = distinct !DILexicalBlock(scope: !428, file: !2, line: 369, column: 3)
!435 = !DILocation(line: 370, column: 13, scope: !434)
!436 = !DILocation(line: 370, column: 22, scope: !434)
!437 = !DILocation(line: 370, column: 24, scope: !434)
!438 = !DILocation(line: 370, column: 26, scope: !434)
!439 = !DILocation(line: 370, column: 37, scope: !434)
!440 = !DILocation(line: 370, column: 52, scope: !434)
!441 = !DILocation(line: 357, column: 10, scope: !434)
!442 = !DILocation(line: 357, column: 19, scope: !434)
!443 = !DILocation(line: 373, column: 9, scope: !400)
!444 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 387, type: !401, scopeLine: 387, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!445 = !DILocalVariable(name: "s", arg: 1, scope: !444, file: !2, line: 387, type: !56)
!446 = !DILocation(line: 387, column: 26, scope: !444)
!447 = !DILocalVariable(name: "needle", arg: 2, scope: !444, file: !2, line: 387, type: !56)
!448 = !DILocation(line: 387, column: 36, scope: !444)
!449 = !DILocation(line: 383, column: 11, scope: !450)
!450 = distinct !DILexicalBlock(scope: !444, file: !2, line: 388, column: 1)
!451 = !DILocalVariable(name: "needed", scope: !444, file: !2, line: 389, type: !63, align: 8)
!452 = !DILocation(line: 389, column: 6, scope: !444)
!453 = !DILocation(line: 389, column: 15, scope: !444)
!454 = !DILocation(line: 390, column: 6, scope: !444)
!455 = !DILocation(line: 390, column: 20, scope: !444)
!456 = !DILocation(line: 390, column: 29, scope: !444)
!457 = !DILocalVariable(name: "first", scope: !458, file: !2, line: 392, type: !61, align: 1)
!458 = distinct !DILexicalBlock(scope: !444, file: !2, line: 391, column: 2)
!459 = !DILocation(line: 392, column: 8, scope: !458)
!460 = !DILocation(line: 392, column: 16, scope: !458)
!461 = !DILocation(line: 392, column: 23, scope: !458)
!462 = !DILocalVariable(name: ".temp", scope: !463, file: !2, line: 393, type: !183, align: 8)
!463 = distinct !DILexicalBlock(scope: !458, file: !2, line: 393, column: 3)
!464 = !DILocation(line: 393, column: 20, scope: !463)
!465 = !DILocation(line: 393, column: 22, scope: !463)
!466 = !DILocation(line: 393, column: 25, scope: !463)
!467 = !DILocalVariable(name: ".temp", scope: !463, file: !2, line: 393, type: !63, align: 8)
!468 = !DILocation(line: 393, column: 14, scope: !463)
!469 = !DILocalVariable(name: "i", scope: !470, file: !2, line: 393, type: !63, align: 8)
!470 = distinct !DILexicalBlock(scope: !463, file: !2, line: 394, column: 3)
!471 = !DILocation(line: 393, column: 14, scope: !470)
!472 = !DILocalVariable(name: "c", scope: !470, file: !2, line: 393, type: !61, align: 1)
!473 = !DILocation(line: 393, column: 17, scope: !470)
!474 = !DILocation(line: 393, column: 20, scope: !470)
!475 = !DILocation(line: 395, column: 8, scope: !476)
!476 = distinct !DILexicalBlock(scope: !470, file: !2, line: 394, column: 3)
!477 = !DILocation(line: 395, column: 13, scope: !476)
!478 = !DILocation(line: 395, column: 22, scope: !476)
!479 = !DILocation(line: 395, column: 24, scope: !476)
!480 = !DILocation(line: 395, column: 26, scope: !476)
!481 = !DILocation(line: 395, column: 37, scope: !476)
!482 = !DILocation(line: 395, column: 52, scope: !476)
!483 = !DILocation(line: 382, column: 10, scope: !476)
!484 = !DILocation(line: 382, column: 19, scope: !476)
!485 = !DILocation(line: 398, column: 9, scope: !444)
!486 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 401, type: !487, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!487 = !DISubroutineType(types: !488)
!488 = !{!56, !489}
!489 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 5, baseType: !60, align: 8)
!490 = !DILocalVariable(name: "str", arg: 1, scope: !486, file: !2, line: 401, type: !489)
!491 = !DILocation(line: 401, column: 28, scope: !486)
!492 = !DILocation(line: 403, column: 18, scope: !486)
!493 = !DILocation(line: 403, column: 23, scope: !486)
!494 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 406, type: !495, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!495 = !DISubroutineType(types: !496)
!496 = !{!63, !489}
!497 = !DILocalVariable(name: "str", arg: 1, scope: !494, file: !2, line: 406, type: !489)
!498 = !DILocation(line: 406, column: 25, scope: !494)
!499 = !DILocalVariable(name: "len", scope: !494, file: !2, line: 408, type: !63, align: 8)
!500 = !DILocation(line: 408, column: 6, scope: !494)
!501 = !DILocation(line: 408, column: 12, scope: !494)
!502 = !DILocalVariable(name: "ptr", scope: !494, file: !2, line: 409, type: !60, align: 8)
!503 = !DILocation(line: 409, column: 8, scope: !494)
!504 = !DILocation(line: 409, column: 15, scope: !494)
!505 = !DILocation(line: 410, column: 2, scope: !494)
!506 = !DILocalVariable(name: "c", scope: !507, file: !2, line: 410, type: !61, align: 1)
!507 = distinct !DILexicalBlock(scope: !494, file: !2, line: 410, column: 2)
!508 = !DILocation(line: 410, column: 14, scope: !507)
!509 = !DILocation(line: 410, column: 18, scope: !507)
!510 = !DILocation(line: 410, column: 24, scope: !507)
!511 = !DILocation(line: 412, column: 7, scope: !512)
!512 = distinct !DILexicalBlock(scope: !507, file: !2, line: 411, column: 2)
!513 = !DILocation(line: 412, column: 25, scope: !512)
!514 = !DILocation(line: 414, column: 9, scope: !494)
!515 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 417, type: !495, scopeLine: 417, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!516 = !DILocalVariable(name: "str", arg: 1, scope: !515, file: !2, line: 417, type: !489)
!517 = !DILocation(line: 417, column: 20, scope: !515)
!518 = !DILocalVariable(name: "len", scope: !515, file: !2, line: 419, type: !63, align: 8)
!519 = !DILocation(line: 419, column: 6, scope: !515)
!520 = !DILocation(line: 419, column: 12, scope: !515)
!521 = !DILocalVariable(name: "ptr", scope: !515, file: !2, line: 420, type: !60, align: 8)
!522 = !DILocation(line: 420, column: 8, scope: !515)
!523 = !DILocation(line: 420, column: 15, scope: !515)
!524 = !DILocation(line: 421, column: 2, scope: !515)
!525 = !DILocalVariable(name: "c", scope: !526, file: !2, line: 421, type: !61, align: 1)
!526 = distinct !DILexicalBlock(scope: !515, file: !2, line: 421, column: 2)
!527 = !DILocation(line: 421, column: 14, scope: !526)
!528 = !DILocation(line: 421, column: 18, scope: !526)
!529 = !DILocation(line: 421, column: 24, scope: !526)
!530 = !DILocation(line: 421, column: 28, scope: !526)
!531 = !DILocation(line: 422, column: 9, scope: !515)
!532 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 426, type: !533, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!533 = !DISubroutineType(types: !534)
!534 = !{!489, !56, !185}
!535 = !DILocation(line: 428, column: 12, scope: !532)
!536 = !DILocalVariable(name: "s", arg: 1, scope: !532, file: !2, line: 426, type: !56)
!537 = !DILocation(line: 426, column: 29, scope: !532)
!538 = !DILocalVariable(name: "allocator", arg: 2, scope: !532, file: !2, line: 426, type: !185)
!539 = !DILocation(line: 426, column: 42, scope: !532)
!540 = !DILocalVariable(name: "len", scope: !532, file: !2, line: 428, type: !63, align: 8)
!541 = !DILocation(line: 428, column: 6, scope: !532)
!542 = !DILocalVariable(name: "str", scope: !532, file: !2, line: 429, type: !60, align: 8)
!543 = !DILocation(line: 429, column: 8, scope: !532)
!544 = !DILocation(line: 429, column: 43, scope: !532)
!545 = !DILocation(line: 62, column: 7, scope: !546, inlinedAt: !547)
!546 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!547 = !DILocation(line: 57, column: 9, scope: !548, inlinedAt: !549)
!548 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !211, file: !211, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!549 = !DILocation(line: 429, column: 25, scope: !532)
!550 = !DILocation(line: 62, column: 20, scope: !546, inlinedAt: !547)
!551 = !DILocation(line: 28, column: 71, scope: !552, inlinedAt: !553)
!552 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!553 = !DILocation(line: 68, column: 10, scope: !546, inlinedAt: !547)
!554 = !DILocation(line: 430, column: 12, scope: !532)
!555 = !DILocation(line: 430, column: 17, scope: !532)
!556 = !DILocation(line: 309, column: 11, scope: !557, inlinedAt: !560)
!557 = distinct !DILexicalBlock(scope: !559, file: !558, line: 312, column: 1)
!558 = !DIFile(filename: "mem.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!559 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !558, file: !558, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!560 = !DILocation(line: 430, column: 7, scope: !532)
!561 = !DILocation(line: 309, column: 23, scope: !557, inlinedAt: !560)
!562 = !DILocation(line: 309, column: 29, scope: !557, inlinedAt: !560)
!563 = !DILocation(line: 309, column: 36, scope: !557, inlinedAt: !560)
!564 = !DILocation(line: 309, column: 43, scope: !557, inlinedAt: !560)
!565 = !DILocation(line: 309, column: 49, scope: !557, inlinedAt: !560)
!566 = !DILocation(line: 309, column: 56, scope: !557, inlinedAt: !560)
!567 = !DILocation(line: 313, column: 11, scope: !559, inlinedAt: !560)
!568 = !DILocation(line: 313, column: 16, scope: !559, inlinedAt: !560)
!569 = !DILocation(line: 313, column: 21, scope: !559, inlinedAt: !560)
!570 = !DILocation(line: 313, column: 26, scope: !559, inlinedAt: !560)
!571 = !DILocation(line: 431, column: 2, scope: !532)
!572 = !DILocation(line: 431, column: 6, scope: !532)
!573 = !DILocation(line: 431, column: 13, scope: !532)
!574 = !DILocation(line: 432, column: 10, scope: !532)
!575 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 435, type: !576, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!576 = !DISubroutineType(types: !577)
!577 = !{!56, !56, !56, !185}
!578 = !DILocation(line: 437, column: 17, scope: !575)
!579 = !DILocalVariable(name: "s1", arg: 1, scope: !575, file: !2, line: 435, type: !56)
!580 = !DILocation(line: 435, column: 25, scope: !575)
!581 = !DILocalVariable(name: "s2", arg: 2, scope: !575, file: !2, line: 435, type: !56)
!582 = !DILocation(line: 435, column: 36, scope: !575)
!583 = !DILocalVariable(name: "allocator", arg: 3, scope: !575, file: !2, line: 435, type: !185)
!584 = !DILocation(line: 435, column: 50, scope: !575)
!585 = !DILocalVariable(name: "full_len", scope: !575, file: !2, line: 437, type: !63, align: 8)
!586 = !DILocation(line: 437, column: 6, scope: !575)
!587 = !DILocation(line: 437, column: 26, scope: !575)
!588 = !DILocalVariable(name: "str", scope: !575, file: !2, line: 438, type: !60, align: 8)
!589 = !DILocation(line: 438, column: 8, scope: !575)
!590 = !DILocation(line: 438, column: 43, scope: !575)
!591 = !DILocation(line: 62, column: 7, scope: !592, inlinedAt: !593)
!592 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!593 = !DILocation(line: 57, column: 9, scope: !594, inlinedAt: !595)
!594 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !211, file: !211, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!595 = !DILocation(line: 438, column: 25, scope: !575)
!596 = !DILocation(line: 62, column: 20, scope: !592, inlinedAt: !593)
!597 = !DILocation(line: 28, column: 71, scope: !598, inlinedAt: !599)
!598 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!599 = !DILocation(line: 68, column: 10, scope: !592, inlinedAt: !593)
!600 = !DILocalVariable(name: "s1_len", scope: !575, file: !2, line: 439, type: !63, align: 8)
!601 = !DILocation(line: 439, column: 6, scope: !575)
!602 = !DILocation(line: 439, column: 15, scope: !575)
!603 = !DILocation(line: 440, column: 12, scope: !575)
!604 = !DILocation(line: 440, column: 17, scope: !575)
!605 = !DILocation(line: 309, column: 11, scope: !606, inlinedAt: !608)
!606 = distinct !DILexicalBlock(scope: !607, file: !558, line: 312, column: 1)
!607 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !558, file: !558, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!608 = !DILocation(line: 440, column: 7, scope: !575)
!609 = !DILocation(line: 309, column: 23, scope: !606, inlinedAt: !608)
!610 = !DILocation(line: 309, column: 29, scope: !606, inlinedAt: !608)
!611 = !DILocation(line: 309, column: 36, scope: !606, inlinedAt: !608)
!612 = !DILocation(line: 309, column: 43, scope: !606, inlinedAt: !608)
!613 = !DILocation(line: 309, column: 49, scope: !606, inlinedAt: !608)
!614 = !DILocation(line: 309, column: 56, scope: !606, inlinedAt: !608)
!615 = !DILocation(line: 313, column: 11, scope: !607, inlinedAt: !608)
!616 = !DILocation(line: 313, column: 16, scope: !607, inlinedAt: !608)
!617 = !DILocation(line: 313, column: 21, scope: !607, inlinedAt: !608)
!618 = !DILocation(line: 313, column: 26, scope: !607, inlinedAt: !608)
!619 = !DILocation(line: 441, column: 12, scope: !575)
!620 = !DILocation(line: 441, column: 18, scope: !575)
!621 = !DILocation(line: 441, column: 26, scope: !575)
!622 = !DILocation(line: 441, column: 34, scope: !575)
!623 = !DILocation(line: 309, column: 11, scope: !624, inlinedAt: !626)
!624 = distinct !DILexicalBlock(scope: !625, file: !558, line: 312, column: 1)
!625 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !558, file: !558, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!626 = !DILocation(line: 441, column: 7, scope: !575)
!627 = !DILocation(line: 309, column: 23, scope: !624, inlinedAt: !626)
!628 = !DILocation(line: 309, column: 29, scope: !624, inlinedAt: !626)
!629 = !DILocation(line: 309, column: 36, scope: !624, inlinedAt: !626)
!630 = !DILocation(line: 309, column: 43, scope: !624, inlinedAt: !626)
!631 = !DILocation(line: 309, column: 49, scope: !624, inlinedAt: !626)
!632 = !DILocation(line: 309, column: 56, scope: !624, inlinedAt: !626)
!633 = !DILocation(line: 313, column: 11, scope: !625, inlinedAt: !626)
!634 = !DILocation(line: 313, column: 16, scope: !625, inlinedAt: !626)
!635 = !DILocation(line: 313, column: 21, scope: !625, inlinedAt: !626)
!636 = !DILocation(line: 313, column: 26, scope: !625, inlinedAt: !626)
!637 = !DILocation(line: 442, column: 2, scope: !575)
!638 = !DILocation(line: 442, column: 6, scope: !575)
!639 = !DILocation(line: 442, column: 18, scope: !575)
!640 = !DILocation(line: 443, column: 17, scope: !575)
!641 = !DILocation(line: 443, column: 22, scope: !575)
!642 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 446, type: !54, scopeLine: 446, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!643 = !DILocalVariable(name: "s1", arg: 1, scope: !642, file: !2, line: 446, type: !56)
!644 = !DILocation(line: 446, column: 26, scope: !642)
!645 = !DILocalVariable(name: "s2", arg: 2, scope: !642, file: !2, line: 446, type: !56)
!646 = !DILocation(line: 446, column: 37, scope: !642)
!647 = !DILocation(line: 396, column: 7, scope: !648, inlinedAt: !649)
!648 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!649 = !DILocation(line: 446, column: 69, scope: !642)
!650 = !DILocation(line: 398, column: 3, scope: !651, inlinedAt: !649)
!651 = distinct !DILexicalBlock(scope: !648, file: !211, line: 397, column: 2)
!652 = !DILocation(line: 400, column: 9, scope: !648, inlinedAt: !649)
!653 = !DILocation(line: 446, column: 44, scope: !642)
!654 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 449, type: !655, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!655 = !DISubroutineType(types: !656)
!656 = !{!489, !56}
!657 = !DILocalVariable(name: "s", arg: 1, scope: !654, file: !2, line: 449, type: !56)
!658 = !DILocation(line: 449, column: 30, scope: !654)
!659 = !DILocation(line: 396, column: 7, scope: !660, inlinedAt: !661)
!660 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!661 = !DILocation(line: 449, column: 59, scope: !654)
!662 = !DILocation(line: 398, column: 3, scope: !663, inlinedAt: !661)
!663 = distinct !DILexicalBlock(scope: !660, file: !211, line: 397, column: 2)
!664 = !DILocation(line: 400, column: 9, scope: !660, inlinedAt: !661)
!665 = !DILocation(line: 449, column: 36, scope: !654)
!666 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 451, type: !667, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!667 = !DISubroutineType(types: !668)
!668 = !{!56, !56, !185}
!669 = !DILocation(line: 453, column: 12, scope: !666)
!670 = !DILocalVariable(name: "s", arg: 1, scope: !666, file: !2, line: 451, type: !56)
!671 = !DILocation(line: 451, column: 23, scope: !666)
!672 = !DILocalVariable(name: "allocator", arg: 2, scope: !666, file: !2, line: 451, type: !185)
!673 = !DILocation(line: 451, column: 36, scope: !666)
!674 = !DILocalVariable(name: "len", scope: !666, file: !2, line: 453, type: !63, align: 8)
!675 = !DILocation(line: 453, column: 6, scope: !666)
!676 = !DILocalVariable(name: "str", scope: !666, file: !2, line: 454, type: !60, align: 8)
!677 = !DILocation(line: 454, column: 8, scope: !666)
!678 = !DILocation(line: 454, column: 43, scope: !666)
!679 = !DILocation(line: 62, column: 7, scope: !680, inlinedAt: !681)
!680 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!681 = !DILocation(line: 57, column: 9, scope: !682, inlinedAt: !683)
!682 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !211, file: !211, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!683 = !DILocation(line: 454, column: 25, scope: !666)
!684 = !DILocation(line: 62, column: 20, scope: !680, inlinedAt: !681)
!685 = !DILocation(line: 28, column: 71, scope: !686, inlinedAt: !687)
!686 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!687 = !DILocation(line: 68, column: 10, scope: !680, inlinedAt: !681)
!688 = !DILocation(line: 455, column: 12, scope: !666)
!689 = !DILocation(line: 455, column: 17, scope: !666)
!690 = !DILocation(line: 309, column: 11, scope: !691, inlinedAt: !693)
!691 = distinct !DILexicalBlock(scope: !692, file: !558, line: 312, column: 1)
!692 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !558, file: !558, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!693 = !DILocation(line: 455, column: 7, scope: !666)
!694 = !DILocation(line: 309, column: 23, scope: !691, inlinedAt: !693)
!695 = !DILocation(line: 309, column: 29, scope: !691, inlinedAt: !693)
!696 = !DILocation(line: 309, column: 36, scope: !691, inlinedAt: !693)
!697 = !DILocation(line: 309, column: 43, scope: !691, inlinedAt: !693)
!698 = !DILocation(line: 309, column: 49, scope: !691, inlinedAt: !693)
!699 = !DILocation(line: 309, column: 56, scope: !691, inlinedAt: !693)
!700 = !DILocation(line: 313, column: 11, scope: !692, inlinedAt: !693)
!701 = !DILocation(line: 313, column: 16, scope: !692, inlinedAt: !693)
!702 = !DILocation(line: 313, column: 21, scope: !692, inlinedAt: !693)
!703 = !DILocation(line: 313, column: 26, scope: !692, inlinedAt: !693)
!704 = !DILocation(line: 456, column: 2, scope: !666)
!705 = !DILocation(line: 456, column: 6, scope: !666)
!706 = !DILocation(line: 456, column: 13, scope: !666)
!707 = !DILocation(line: 457, column: 17, scope: !666)
!708 = !DILocation(line: 457, column: 22, scope: !666)
!709 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 460, type: !710, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!710 = !DISubroutineType(types: !711)
!711 = !{null, !183, !185}
!712 = !DILocation(line: 461, column: 1, scope: !709)
!713 = !DILocalVariable(name: "s", arg: 1, scope: !709, file: !2, line: 460, type: !183)
!714 = !DILocation(line: 460, column: 21, scope: !709)
!715 = !DILocalVariable(name: "allocator", arg: 2, scope: !709, file: !2, line: 460, type: !185)
!716 = !DILocation(line: 460, column: 35, scope: !709)
!717 = !DILocation(line: 462, column: 7, scope: !709)
!718 = !DILocation(line: 462, column: 20, scope: !709)
!719 = !DILocation(line: 463, column: 29, scope: !709)
!720 = !DILocation(line: 101, column: 7, scope: !721, inlinedAt: !722)
!721 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !211, file: !211, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!722 = !DILocation(line: 463, column: 13, scope: !709)
!723 = !DILocation(line: 101, column: 18, scope: !721, inlinedAt: !722)
!724 = !DILocation(line: 105, column: 25, scope: !721, inlinedAt: !722)
!725 = !DILocation(line: 105, column: 2, scope: !721, inlinedAt: !722)
!726 = !DILocation(line: 464, column: 3, scope: !709)
!727 = !DILocation(line: 464, column: 7, scope: !709)
!728 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 467, type: !729, scopeLine: 467, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!729 = !DISubroutineType(types: !730)
!730 = !{!56, !56}
!731 = !DILocalVariable(name: "s", arg: 1, scope: !728, file: !2, line: 467, type: !56)
!732 = !DILocation(line: 467, column: 24, scope: !728)
!733 = !DILocation(line: 396, column: 7, scope: !734, inlinedAt: !735)
!734 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!735 = !DILocation(line: 467, column: 48, scope: !728)
!736 = !DILocation(line: 398, column: 3, scope: !737, inlinedAt: !735)
!737 = distinct !DILexicalBlock(scope: !734, file: !211, line: 397, column: 2)
!738 = !DILocation(line: 400, column: 9, scope: !734, inlinedAt: !735)
!739 = !DILocation(line: 467, column: 30, scope: !728)
!740 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 469, type: !741, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!741 = !DISubroutineType(types: !742)
!742 = !{!56, !489, !185}
!743 = !DILocalVariable(name: "z", arg: 1, scope: !740, file: !2, line: 469, type: !489)
!744 = !DILocation(line: 469, column: 24, scope: !740)
!745 = !DILocalVariable(name: "allocator", arg: 2, scope: !740, file: !2, line: 469, type: !185)
!746 = !DILocation(line: 469, column: 37, scope: !740)
!747 = !DILocation(line: 471, column: 9, scope: !740)
!748 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 474, type: !487, scopeLine: 474, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!749 = !DILocalVariable(name: "z", arg: 1, scope: !748, file: !2, line: 474, type: !489)
!750 = !DILocation(line: 474, column: 25, scope: !748)
!751 = !DILocation(line: 476, column: 9, scope: !748)
!752 = !DILocation(line: 396, column: 7, scope: !753, inlinedAt: !754)
!753 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!754 = !DILocation(line: 476, column: 38, scope: !748)
!755 = !DILocation(line: 398, column: 3, scope: !756, inlinedAt: !754)
!756 = distinct !DILexicalBlock(scope: !753, file: !211, line: 397, column: 2)
!757 = !DILocation(line: 400, column: 9, scope: !753, inlinedAt: !754)
!758 = distinct !DISubprogram(name: "to_new_utf16", linkageName: "std.core.String.to_new_utf16", scope: !2, file: !2, line: 485, type: !759, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!759 = !DISubroutineType(types: !760)
!760 = !{!324, !761, !56, !185}
!761 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !762, size: 64, align: 64, dwarfAddressSpace: 0)
!762 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !763, identifier: "Char16[]")
!763 = !{!764, !768}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !762, baseType: !765, size: 64, align: 64)
!765 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !766, size: 64, align: 64, dwarfAddressSpace: 0)
!766 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 8, baseType: !767, align: 2)
!767 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !762, baseType: !63, size: 64, align: 64, offset: 64)
!769 = !DILocalVariable(name: "s", arg: 1, scope: !758, file: !2, line: 485, type: !56)
!770 = !DILocation(line: 485, column: 34, scope: !758)
!771 = !DILocalVariable(name: "allocator", arg: 2, scope: !758, file: !2, line: 485, type: !185)
!772 = !DILocation(line: 485, column: 47, scope: !758)
!773 = !DILocalVariable(name: "len16", scope: !758, file: !2, line: 487, type: !63, align: 8)
!774 = !DILocation(line: 487, column: 6, scope: !758)
!775 = !DILocation(line: 487, column: 20, scope: !758)
!776 = !DILocalVariable(name: "data", scope: !758, file: !2, line: 488, type: !765, align: 8)
!777 = !DILocation(line: 488, column: 10, scope: !758)
!778 = !DILocation(line: 488, column: 63, scope: !758)
!779 = !DILocation(line: 286, column: 55, scope: !780, inlinedAt: !781)
!780 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !211, file: !211, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!781 = !DILocation(line: 488, column: 28, scope: !758)
!782 = !DILocation(line: 286, column: 40, scope: !780, inlinedAt: !781)
!783 = !DILocation(line: 62, column: 7, scope: !784, inlinedAt: !785)
!784 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!785 = !DILocation(line: 286, column: 11, scope: !780, inlinedAt: !781)
!786 = !DILocation(line: 62, column: 20, scope: !784, inlinedAt: !785)
!787 = !DILocation(line: 28, column: 71, scope: !788, inlinedAt: !789)
!788 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!789 = !DILocation(line: 68, column: 10, scope: !784, inlinedAt: !785)
!790 = !DILocation(line: 286, column: 67, scope: !780, inlinedAt: !781)
!791 = !DILocation(line: 489, column: 8, scope: !758)
!792 = !DILocation(line: 490, column: 2, scope: !758)
!793 = !DILocation(line: 490, column: 7, scope: !758)
!794 = !DILocation(line: 490, column: 16, scope: !758)
!795 = !DILocation(line: 491, column: 9, scope: !758)
!796 = !DILocation(line: 491, column: 15, scope: !758)
!797 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 500, type: !798, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!798 = !DISubroutineType(types: !799)
!799 = !{!324, !761, !56}
!800 = !DILocalVariable(name: "s", arg: 1, scope: !797, file: !2, line: 500, type: !56)
!801 = !DILocation(line: 500, column: 35, scope: !797)
!802 = !DILocation(line: 396, column: 7, scope: !803, inlinedAt: !804)
!803 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!804 = !DILocation(line: 502, column: 35, scope: !797)
!805 = !DILocation(line: 398, column: 3, scope: !806, inlinedAt: !804)
!806 = distinct !DILexicalBlock(scope: !803, file: !211, line: 397, column: 2)
!807 = !DILocation(line: 400, column: 9, scope: !803, inlinedAt: !804)
!808 = !DILocation(line: 502, column: 9, scope: !797)
!809 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 505, type: !810, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!810 = !DISubroutineType(types: !811)
!811 = !{!324, !812, !56, !185}
!812 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !813, size: 64, align: 64, dwarfAddressSpace: 0)
!813 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 6, baseType: !814, align: 8)
!814 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !767, size: 64, align: 64, dwarfAddressSpace: 0)
!815 = !DILocalVariable(name: "s", arg: 1, scope: !809, file: !2, line: 505, type: !56)
!816 = !DILocation(line: 505, column: 31, scope: !809)
!817 = !DILocalVariable(name: "allocator", arg: 2, scope: !809, file: !2, line: 505, type: !185)
!818 = !DILocation(line: 505, column: 44, scope: !809)
!819 = !DILocation(line: 507, column: 18, scope: !809)
!820 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 510, type: !821, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!821 = !DISubroutineType(types: !822)
!822 = !{!324, !812, !56}
!823 = !DILocalVariable(name: "s", arg: 1, scope: !820, file: !2, line: 510, type: !56)
!824 = !DILocation(line: 510, column: 36, scope: !820)
!825 = !DILocation(line: 396, column: 7, scope: !826, inlinedAt: !827)
!826 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!827 = !DILocation(line: 510, column: 66, scope: !820)
!828 = !DILocation(line: 398, column: 3, scope: !829, inlinedAt: !827)
!829 = distinct !DILexicalBlock(scope: !826, file: !211, line: 397, column: 2)
!830 = !DILocation(line: 400, column: 9, scope: !826, inlinedAt: !827)
!831 = !DILocation(line: 510, column: 42, scope: !820)
!832 = distinct !DISubprogram(name: "to_new_wstring", linkageName: "std.core.String.to_new_wstring", scope: !2, file: !2, line: 511, type: !821, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!833 = !DILocalVariable(name: "s", arg: 1, scope: !832, file: !2, line: 511, type: !56)
!834 = !DILocation(line: 511, column: 35, scope: !832)
!835 = !DILocation(line: 511, column: 41, scope: !832)
!836 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 513, type: !837, scopeLine: 513, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!837 = !DISubroutineType(types: !838)
!838 = !{!324, !839, !56, !185}
!839 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !840, size: 64, align: 64, dwarfAddressSpace: 0)
!840 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !841, identifier: "Char32[]")
!841 = !{!842, !845}
!842 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !840, baseType: !843, size: 64, align: 64)
!843 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !844, size: 64, align: 64, dwarfAddressSpace: 0)
!844 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 7, baseType: !3, align: 4)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !840, baseType: !63, size: 64, align: 64, offset: 64)
!846 = !DILocalVariable(name: "s", arg: 1, scope: !836, file: !2, line: 513, type: !56)
!847 = !DILocation(line: 513, column: 30, scope: !836)
!848 = !DILocalVariable(name: "allocator", arg: 2, scope: !836, file: !2, line: 513, type: !185)
!849 = !DILocation(line: 513, column: 43, scope: !836)
!850 = !DILocalVariable(name: "codepoints", scope: !836, file: !2, line: 515, type: !63, align: 8)
!851 = !DILocation(line: 515, column: 6, scope: !836)
!852 = !DILocation(line: 515, column: 25, scope: !836)
!853 = !DILocalVariable(name: "data", scope: !836, file: !2, line: 516, type: !843, align: 8)
!854 = !DILocation(line: 516, column: 10, scope: !836)
!855 = !DILocation(line: 516, column: 63, scope: !836)
!856 = !DILocation(line: 286, column: 55, scope: !857, inlinedAt: !858)
!857 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !211, file: !211, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!858 = !DILocation(line: 516, column: 28, scope: !836)
!859 = !DILocation(line: 286, column: 40, scope: !857, inlinedAt: !858)
!860 = !DILocation(line: 62, column: 7, scope: !861, inlinedAt: !862)
!861 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!862 = !DILocation(line: 286, column: 11, scope: !857, inlinedAt: !858)
!863 = !DILocation(line: 62, column: 20, scope: !861, inlinedAt: !862)
!864 = !DILocation(line: 28, column: 71, scope: !865, inlinedAt: !866)
!865 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!866 = !DILocation(line: 68, column: 10, scope: !861, inlinedAt: !862)
!867 = !DILocation(line: 286, column: 67, scope: !857, inlinedAt: !858)
!868 = !DILocation(line: 517, column: 8, scope: !836)
!869 = !DILocation(line: 518, column: 2, scope: !836)
!870 = !DILocation(line: 518, column: 7, scope: !836)
!871 = !DILocation(line: 518, column: 21, scope: !836)
!872 = !DILocation(line: 519, column: 9, scope: !836)
!873 = !DILocation(line: 519, column: 15, scope: !836)
!874 = distinct !DISubprogram(name: "to_new_utf32", linkageName: "std.core.String.to_new_utf32", scope: !2, file: !2, line: 522, type: !875, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!875 = !DISubroutineType(types: !876)
!876 = !{!324, !839, !56}
!877 = !DILocalVariable(name: "s", arg: 1, scope: !874, file: !2, line: 522, type: !56)
!878 = !DILocation(line: 522, column: 34, scope: !874)
!879 = !DILocation(line: 522, column: 40, scope: !874)
!880 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 523, type: !875, scopeLine: 523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!881 = !DILocalVariable(name: "s", arg: 1, scope: !880, file: !2, line: 523, type: !56)
!882 = !DILocation(line: 523, column: 35, scope: !880)
!883 = !DILocation(line: 396, column: 7, scope: !884, inlinedAt: !885)
!884 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!885 = !DILocation(line: 523, column: 63, scope: !880)
!886 = !DILocation(line: 398, column: 3, scope: !887, inlinedAt: !885)
!887 = distinct !DILexicalBlock(scope: !884, file: !211, line: 397, column: 2)
!888 = !DILocation(line: 400, column: 9, scope: !884, inlinedAt: !885)
!889 = !DILocation(line: 523, column: 41, scope: !880)
!890 = distinct !DISubprogram(name: "convert_ascii_to_lower", linkageName: "std.core.String.convert_ascii_to_lower", scope: !2, file: !2, line: 531, type: !891, scopeLine: 531, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!891 = !DISubroutineType(types: !892)
!892 = !{null, !56}
!893 = !DILocalVariable(name: "s", arg: 1, scope: !890, file: !2, line: 531, type: !56)
!894 = !DILocation(line: 531, column: 39, scope: !890)
!895 = !DILocalVariable(name: ".temp", scope: !896, file: !2, line: 533, type: !63, align: 8)
!896 = distinct !DILexicalBlock(scope: !890, file: !2, line: 533, column: 2)
!897 = !DILocation(line: 533, column: 16, scope: !896)
!898 = !DILocalVariable(name: "c", scope: !899, file: !2, line: 533, type: !60, align: 8)
!899 = distinct !DILexicalBlock(scope: !896, file: !2, line: 533, column: 19)
!900 = !DILocation(line: 533, column: 12, scope: !899)
!901 = !DILocation(line: 533, column: 16, scope: !899)
!902 = !DILocation(line: 533, column: 23, scope: !899)
!903 = !DILocation(line: 533, column: 44, scope: !899)
!904 = !DILocation(line: 533, column: 43, scope: !899)
!905 = distinct !DISubprogram(name: "new_ascii_to_lower", linkageName: "std.core.String.new_ascii_to_lower", scope: !2, file: !2, line: 536, type: !667, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!906 = !DILocalVariable(name: "s", arg: 1, scope: !905, file: !2, line: 536, type: !56)
!907 = !DILocation(line: 536, column: 37, scope: !905)
!908 = !DILocalVariable(name: "allocator", arg: 2, scope: !905, file: !2, line: 536, type: !185)
!909 = !DILocation(line: 536, column: 50, scope: !905)
!910 = !DILocalVariable(name: "copy", scope: !905, file: !2, line: 538, type: !56, align: 8)
!911 = !DILocation(line: 538, column: 9, scope: !905)
!912 = !DILocation(line: 538, column: 16, scope: !905)
!913 = !DILocation(line: 539, column: 2, scope: !905)
!914 = !DILocation(line: 540, column: 9, scope: !905)
!915 = distinct !DISubprogram(name: "temp_ascii_to_lower", linkageName: "std.core.String.temp_ascii_to_lower", scope: !2, file: !2, line: 543, type: !729, scopeLine: 543, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!916 = !DILocalVariable(name: "s", arg: 1, scope: !915, file: !2, line: 543, type: !56)
!917 = !DILocation(line: 543, column: 38, scope: !915)
!918 = !DILocation(line: 396, column: 7, scope: !919, inlinedAt: !920)
!919 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!920 = !DILocation(line: 545, column: 41, scope: !915)
!921 = !DILocation(line: 398, column: 3, scope: !922, inlinedAt: !920)
!922 = distinct !DILexicalBlock(scope: !919, file: !211, line: 397, column: 2)
!923 = !DILocation(line: 400, column: 9, scope: !919, inlinedAt: !920)
!924 = !DILocation(line: 545, column: 9, scope: !915)
!925 = distinct !DISubprogram(name: "convert_ascii_to_upper", linkageName: "std.core.String.convert_ascii_to_upper", scope: !2, file: !2, line: 554, type: !891, scopeLine: 554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!926 = !DILocalVariable(name: "s", arg: 1, scope: !925, file: !2, line: 554, type: !56)
!927 = !DILocation(line: 554, column: 39, scope: !925)
!928 = !DILocalVariable(name: ".temp", scope: !929, file: !2, line: 556, type: !63, align: 8)
!929 = distinct !DILexicalBlock(scope: !925, file: !2, line: 556, column: 2)
!930 = !DILocation(line: 556, column: 16, scope: !929)
!931 = !DILocalVariable(name: "c", scope: !932, file: !2, line: 556, type: !60, align: 8)
!932 = distinct !DILexicalBlock(scope: !929, file: !2, line: 556, column: 19)
!933 = !DILocation(line: 556, column: 12, scope: !932)
!934 = !DILocation(line: 556, column: 16, scope: !932)
!935 = !DILocation(line: 556, column: 23, scope: !932)
!936 = !DILocation(line: 556, column: 44, scope: !932)
!937 = !DILocation(line: 556, column: 43, scope: !932)
!938 = distinct !DISubprogram(name: "new_ascii_to_upper", linkageName: "std.core.String.new_ascii_to_upper", scope: !2, file: !2, line: 567, type: !667, scopeLine: 567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!939 = !DILocalVariable(name: "s", arg: 1, scope: !938, file: !2, line: 567, type: !56)
!940 = !DILocation(line: 567, column: 37, scope: !938)
!941 = !DILocalVariable(name: "allocator", arg: 2, scope: !938, file: !2, line: 567, type: !185)
!942 = !DILocation(line: 567, column: 50, scope: !938)
!943 = !DILocalVariable(name: "copy", scope: !938, file: !2, line: 569, type: !56, align: 8)
!944 = !DILocation(line: 569, column: 9, scope: !938)
!945 = !DILocation(line: 569, column: 16, scope: !938)
!946 = !DILocation(line: 570, column: 2, scope: !938)
!947 = !DILocation(line: 571, column: 9, scope: !938)
!948 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 574, type: !949, scopeLine: 574, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!949 = !DISubroutineType(types: !950)
!950 = !{!951, !56}
!951 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !952, identifier: "std.core.string.iterator.StringIterator")
!952 = !{!953, !954}
!953 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !951, file: !2, line: 5, baseType: !56, size: 128, align: 64)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !951, file: !2, line: 6, baseType: !63, size: 64, align: 64, offset: 128)
!955 = !DILocalVariable(name: "s", arg: 1, scope: !948, file: !2, line: 574, type: !56)
!956 = !DILocation(line: 574, column: 35, scope: !948)
!957 = !DILocation(line: 576, column: 11, scope: !948)
!958 = !DILocation(line: 576, column: 14, scope: !948)
!959 = distinct !DISubprogram(name: "temp_ascii_to_upper", linkageName: "std.core.String.temp_ascii_to_upper", scope: !2, file: !2, line: 583, type: !729, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!960 = !DILocalVariable(name: "s", arg: 1, scope: !959, file: !2, line: 583, type: !56)
!961 = !DILocation(line: 583, column: 38, scope: !959)
!962 = !DILocation(line: 396, column: 7, scope: !963, inlinedAt: !964)
!963 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!964 = !DILocation(line: 585, column: 41, scope: !959)
!965 = !DILocation(line: 398, column: 3, scope: !966, inlinedAt: !964)
!966 = distinct !DILexicalBlock(scope: !963, file: !211, line: 397, column: 2)
!967 = !DILocation(line: 400, column: 9, scope: !963, inlinedAt: !964)
!968 = !DILocation(line: 585, column: 9, scope: !959)
!969 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 619, type: !970, scopeLine: 619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!970 = !DISubroutineType(types: !971)
!971 = !{!63, !56}
!972 = !DILocalVariable(name: "s", arg: 1, scope: !969, file: !2, line: 619, type: !56)
!973 = !DILocation(line: 619, column: 31, scope: !969)
!974 = !DILocalVariable(name: "len", scope: !969, file: !2, line: 621, type: !63, align: 8)
!975 = !DILocation(line: 621, column: 6, scope: !969)
!976 = !DILocation(line: 621, column: 12, scope: !969)
!977 = !DILocalVariable(name: ".temp", scope: !978, file: !2, line: 622, type: !63, align: 8)
!978 = distinct !DILexicalBlock(scope: !969, file: !2, line: 622, column: 2)
!979 = !DILocation(line: 622, column: 20, scope: !978)
!980 = !DILocalVariable(name: "c", scope: !981, file: !2, line: 622, type: !61, align: 1)
!981 = distinct !DILexicalBlock(scope: !978, file: !2, line: 623, column: 2)
!982 = !DILocation(line: 622, column: 16, scope: !981)
!983 = !DILocation(line: 622, column: 20, scope: !981)
!984 = !DILocation(line: 624, column: 7, scope: !985)
!985 = distinct !DILexicalBlock(scope: !981, file: !2, line: 623, column: 2)
!986 = !DILocation(line: 624, column: 25, scope: !985)
!987 = !DILocation(line: 626, column: 9, scope: !969)
!988 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 704, type: !989, scopeLine: 704, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!989 = !DISubroutineType(types: !990)
!990 = !{!324, !991, !56, !18}
!991 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !992, size: 64, align: 64, dwarfAddressSpace: 0)
!992 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!993 = !DILocalVariable(name: "s", arg: 1, scope: !988, file: !2, line: 704, type: !56)
!994 = !DILocation(line: 704, column: 29, scope: !988)
!995 = !DILocalVariable(name: "base", arg: 2, scope: !988, file: !2, line: 704, type: !18)
!996 = !DILocation(line: 704, column: 36, scope: !988)
!997 = !DILocation(line: 631, column: 12, scope: !998, inlinedAt: !1000)
!998 = distinct !DILexicalBlock(scope: !999, file: !2, line: 634, column: 1)
!999 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1000 = !DILocation(line: 704, column: 50, scope: !988)
!1001 = !DILocation(line: 631, column: 26, scope: !998, inlinedAt: !1000)
!1002 = !DILocation(line: 631, column: 39, scope: !998, inlinedAt: !1000)
!1003 = !DILocalVariable(name: "len", scope: !999, file: !2, line: 635, type: !63, align: 8)
!1004 = !DILocation(line: 635, column: 6, scope: !999, inlinedAt: !1000)
!1005 = !DILocation(line: 635, column: 12, scope: !999, inlinedAt: !1000)
!1006 = !DILocalVariable(name: "index", scope: !999, file: !2, line: 636, type: !63, align: 8)
!1007 = !DILocation(line: 636, column: 6, scope: !999, inlinedAt: !1000)
!1008 = !DILocation(line: 636, column: 14, scope: !999, inlinedAt: !1000)
!1009 = !DILocalVariable(name: "ptr", scope: !999, file: !2, line: 637, type: !60, align: 8)
!1010 = !DILocation(line: 637, column: 8, scope: !999, inlinedAt: !1000)
!1011 = !DILocation(line: 637, column: 14, scope: !999, inlinedAt: !1000)
!1012 = !DILocation(line: 638, column: 2, scope: !999, inlinedAt: !1000)
!1013 = !DILocation(line: 638, column: 9, scope: !1014, inlinedAt: !1000)
!1014 = distinct !DILexicalBlock(scope: !999, file: !2, line: 638, column: 2)
!1015 = !DILocation(line: 638, column: 17, scope: !1014, inlinedAt: !1000)
!1016 = !DILocation(line: 638, column: 42, scope: !1014, inlinedAt: !1000)
!1017 = !DILocation(line: 638, column: 46, scope: !1014, inlinedAt: !1000)
!1018 = !DILocation(line: 16, column: 29, scope: !1019, inlinedAt: !1021)
!1019 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1020 = !DIFile(filename: "ascii.c3", directory: "C:/Dev/C3/c3-windows/lib/std")
!1021 = !DILocation(line: 638, column: 31, scope: !1014, inlinedAt: !1000)
!1022 = !DILocation(line: 16, column: 42, scope: !1019, inlinedAt: !1021)
!1023 = !DILocation(line: 638, column: 55, scope: !1014, inlinedAt: !1000)
!1024 = !DILocation(line: 639, column: 6, scope: !999, inlinedAt: !1000)
!1025 = !DILocation(line: 639, column: 13, scope: !999, inlinedAt: !1000)
!1026 = !DILocation(line: 639, column: 27, scope: !999, inlinedAt: !1000)
!1027 = !DILocalVariable(name: "is_negative", scope: !999, file: !2, line: 640, type: !128, align: 1)
!1028 = !DILocation(line: 640, column: 7, scope: !999, inlinedAt: !1000)
!1029 = !DILocation(line: 641, column: 10, scope: !1030, inlinedAt: !1000)
!1030 = distinct !DILexicalBlock(scope: !999, file: !2, line: 641, column: 2)
!1031 = !DILocation(line: 641, column: 17, scope: !1030, inlinedAt: !1000)
!1032 = !DILocation(line: 644, column: 8, scope: !1033, inlinedAt: !1000)
!1033 = distinct !DILexicalBlock(scope: !1030, file: !2, line: 644, column: 4)
!1034 = !DILocation(line: 645, column: 18, scope: !1033, inlinedAt: !1000)
!1035 = !DILocation(line: 646, column: 4, scope: !1033, inlinedAt: !1000)
!1036 = !DILocation(line: 648, column: 4, scope: !1037, inlinedAt: !1000)
!1037 = distinct !DILexicalBlock(scope: !1030, file: !2, line: 648, column: 4)
!1038 = !DILocation(line: 650, column: 4, scope: !1039, inlinedAt: !1000)
!1039 = distinct !DILexicalBlock(scope: !1030, file: !2, line: 650, column: 4)
!1040 = !DILocation(line: 652, column: 6, scope: !999, inlinedAt: !1000)
!1041 = !DILocation(line: 652, column: 13, scope: !999, inlinedAt: !1000)
!1042 = !DILocation(line: 652, column: 27, scope: !999, inlinedAt: !1000)
!1043 = !DILocalVariable(name: "base_used", scope: !999, file: !2, line: 653, type: !992, align: 16)
!1044 = !DILocation(line: 653, column: 8, scope: !999, inlinedAt: !1000)
!1045 = !DILocation(line: 653, column: 21, scope: !999, inlinedAt: !1000)
!1046 = !DILocation(line: 654, column: 6, scope: !999, inlinedAt: !1000)
!1047 = !DILocation(line: 654, column: 13, scope: !999, inlinedAt: !1000)
!1048 = !DILocation(line: 654, column: 30, scope: !999, inlinedAt: !1000)
!1049 = !DILocation(line: 656, column: 3, scope: !1050, inlinedAt: !1000)
!1050 = distinct !DILexicalBlock(scope: !999, file: !2, line: 655, column: 2)
!1051 = !DILocation(line: 657, column: 7, scope: !1050, inlinedAt: !1000)
!1052 = !DILocation(line: 657, column: 16, scope: !1050, inlinedAt: !1000)
!1053 = !DILocation(line: 657, column: 29, scope: !1050, inlinedAt: !1000)
!1054 = !DILocation(line: 658, column: 11, scope: !1055, inlinedAt: !1000)
!1055 = distinct !DILexicalBlock(scope: !1050, file: !2, line: 658, column: 3)
!1056 = !DILocation(line: 658, column: 18, scope: !1055, inlinedAt: !1000)
!1057 = !DILocation(line: 662, column: 17, scope: !1058, inlinedAt: !1000)
!1058 = distinct !DILexicalBlock(scope: !1055, file: !2, line: 662, column: 5)
!1059 = !DILocation(line: 663, column: 5, scope: !1058, inlinedAt: !1000)
!1060 = !DILocation(line: 666, column: 17, scope: !1061, inlinedAt: !1000)
!1061 = distinct !DILexicalBlock(scope: !1055, file: !2, line: 666, column: 5)
!1062 = !DILocation(line: 667, column: 5, scope: !1061, inlinedAt: !1000)
!1063 = !DILocation(line: 670, column: 17, scope: !1064, inlinedAt: !1000)
!1064 = distinct !DILexicalBlock(scope: !1055, file: !2, line: 670, column: 5)
!1065 = !DILocation(line: 671, column: 5, scope: !1064, inlinedAt: !1000)
!1066 = !DILocation(line: 673, column: 5, scope: !1067, inlinedAt: !1000)
!1067 = distinct !DILexicalBlock(scope: !1055, file: !2, line: 673, column: 5)
!1068 = !DILocation(line: 675, column: 7, scope: !1050, inlinedAt: !1000)
!1069 = !DILocation(line: 675, column: 14, scope: !1050, inlinedAt: !1000)
!1070 = !DILocation(line: 675, column: 28, scope: !1050, inlinedAt: !1000)
!1071 = !DILocalVariable(name: "value", scope: !999, file: !2, line: 677, type: !992, align: 16)
!1072 = !DILocation(line: 677, column: 8, scope: !999, inlinedAt: !1000)
!1073 = !DILocation(line: 677, column: 16, scope: !999, inlinedAt: !1000)
!1074 = !DILocation(line: 678, column: 2, scope: !999, inlinedAt: !1000)
!1075 = !DILocation(line: 678, column: 9, scope: !1076, inlinedAt: !1000)
!1076 = distinct !DILexicalBlock(scope: !999, file: !2, line: 678, column: 2)
!1077 = !DILocation(line: 678, column: 18, scope: !1076, inlinedAt: !1000)
!1078 = !DILocalVariable(name: "c", scope: !1079, file: !2, line: 680, type: !61, align: 1)
!1079 = distinct !DILexicalBlock(scope: !1076, file: !2, line: 679, column: 2)
!1080 = !DILocation(line: 680, column: 8, scope: !1079, inlinedAt: !1000)
!1081 = !DILocalVariable(name: "ch", scope: !1082, file: !2, line: 681, type: !61, align: 1)
!1082 = distinct !DILexicalBlock(scope: !1079, file: !2, line: 681, column: 4)
!1083 = !DILocation(line: 681, column: 9, scope: !1082, inlinedAt: !1000)
!1084 = !DILocation(line: 681, column: 14, scope: !1082, inlinedAt: !1000)
!1085 = !DILocation(line: 681, column: 21, scope: !1082, inlinedAt: !1000)
!1086 = !DILocation(line: 682, column: 8, scope: !1082, inlinedAt: !1000)
!1087 = !DILocation(line: 682, column: 27, scope: !1082, inlinedAt: !1000)
!1088 = !DILocation(line: 682, column: 51, scope: !1082, inlinedAt: !1000)
!1089 = !DILocation(line: 682, column: 45, scope: !1082, inlinedAt: !1000)
!1090 = !DILocation(line: 683, column: 8, scope: !1082, inlinedAt: !1000)
!1091 = !DILocation(line: 683, column: 33, scope: !1082, inlinedAt: !1000)
!1092 = !DILocation(line: 683, column: 27, scope: !1082, inlinedAt: !1000)
!1093 = !DILocation(line: 684, column: 8, scope: !1082, inlinedAt: !1000)
!1094 = !DILocation(line: 684, column: 25, scope: !1082, inlinedAt: !1000)
!1095 = !DILocation(line: 685, column: 8, scope: !1082, inlinedAt: !1000)
!1096 = !DILocation(line: 685, column: 25, scope: !1082, inlinedAt: !1000)
!1097 = !DILocation(line: 686, column: 18, scope: !1082, inlinedAt: !1000)
!1098 = !DILocation(line: 686, column: 12, scope: !1082, inlinedAt: !1000)
!1099 = !DILocation(line: 688, column: 7, scope: !1079, inlinedAt: !1000)
!1100 = !DILocation(line: 688, column: 12, scope: !1079, inlinedAt: !1000)
!1101 = !DILocation(line: 688, column: 30, scope: !1079, inlinedAt: !1000)
!1102 = !DILocation(line: 690, column: 8, scope: !1103, inlinedAt: !1000)
!1103 = distinct !DILexicalBlock(scope: !1079, file: !2, line: 690, column: 4)
!1104 = !DILocalVariable(name: "new_value", scope: !1105, file: !2, line: 692, type: !992, align: 16)
!1105 = distinct !DILexicalBlock(scope: !1103, file: !2, line: 691, column: 4)
!1106 = !DILocation(line: 692, column: 11, scope: !1105, inlinedAt: !1000)
!1107 = !DILocation(line: 692, column: 23, scope: !1105, inlinedAt: !1000)
!1108 = !DILocation(line: 692, column: 31, scope: !1105, inlinedAt: !1000)
!1109 = !DILocation(line: 692, column: 43, scope: !1105, inlinedAt: !1000)
!1110 = !DILocation(line: 693, column: 9, scope: !1105, inlinedAt: !1000)
!1111 = !DILocation(line: 693, column: 21, scope: !1105, inlinedAt: !1000)
!1112 = !DILocation(line: 693, column: 35, scope: !1105, inlinedAt: !1000)
!1113 = !DILocation(line: 694, column: 12, scope: !1105, inlinedAt: !1000)
!1114 = !DILocalVariable(name: "new_value", scope: !1103, file: !2, line: 696, type: !992, align: 16)
!1115 = !DILocation(line: 696, column: 10, scope: !1103, inlinedAt: !1000)
!1116 = !DILocation(line: 696, column: 22, scope: !1103, inlinedAt: !1000)
!1117 = !DILocation(line: 696, column: 30, scope: !1103, inlinedAt: !1000)
!1118 = !DILocation(line: 696, column: 42, scope: !1103, inlinedAt: !1000)
!1119 = !DILocation(line: 697, column: 8, scope: !1103, inlinedAt: !1000)
!1120 = !DILocation(line: 697, column: 20, scope: !1103, inlinedAt: !1000)
!1121 = !DILocation(line: 697, column: 34, scope: !1103, inlinedAt: !1000)
!1122 = !DILocation(line: 698, column: 11, scope: !1103, inlinedAt: !1000)
!1123 = !DILocation(line: 701, column: 9, scope: !999, inlinedAt: !1000)
!1124 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 705, type: !1125, scopeLine: 705, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!324, !1127, !56, !18}
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !325, size: 64, align: 64, dwarfAddressSpace: 0)
!1128 = !DILocalVariable(name: "s", arg: 1, scope: !1124, file: !2, line: 705, type: !56)
!1129 = !DILocation(line: 705, column: 25, scope: !1124)
!1130 = !DILocalVariable(name: "base", arg: 2, scope: !1124, file: !2, line: 705, type: !18)
!1131 = !DILocation(line: 705, column: 32, scope: !1124)
!1132 = !DILocation(line: 631, column: 12, scope: !1133, inlinedAt: !1135)
!1133 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 634, column: 1)
!1134 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1135 = !DILocation(line: 705, column: 46, scope: !1124)
!1136 = !DILocation(line: 631, column: 26, scope: !1133, inlinedAt: !1135)
!1137 = !DILocation(line: 631, column: 39, scope: !1133, inlinedAt: !1135)
!1138 = !DILocalVariable(name: "len", scope: !1134, file: !2, line: 635, type: !63, align: 8)
!1139 = !DILocation(line: 635, column: 6, scope: !1134, inlinedAt: !1135)
!1140 = !DILocation(line: 635, column: 12, scope: !1134, inlinedAt: !1135)
!1141 = !DILocalVariable(name: "index", scope: !1134, file: !2, line: 636, type: !63, align: 8)
!1142 = !DILocation(line: 636, column: 6, scope: !1134, inlinedAt: !1135)
!1143 = !DILocation(line: 636, column: 14, scope: !1134, inlinedAt: !1135)
!1144 = !DILocalVariable(name: "ptr", scope: !1134, file: !2, line: 637, type: !60, align: 8)
!1145 = !DILocation(line: 637, column: 8, scope: !1134, inlinedAt: !1135)
!1146 = !DILocation(line: 637, column: 14, scope: !1134, inlinedAt: !1135)
!1147 = !DILocation(line: 638, column: 2, scope: !1134, inlinedAt: !1135)
!1148 = !DILocation(line: 638, column: 9, scope: !1149, inlinedAt: !1135)
!1149 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 638, column: 2)
!1150 = !DILocation(line: 638, column: 17, scope: !1149, inlinedAt: !1135)
!1151 = !DILocation(line: 638, column: 42, scope: !1149, inlinedAt: !1135)
!1152 = !DILocation(line: 638, column: 46, scope: !1149, inlinedAt: !1135)
!1153 = !DILocation(line: 16, column: 29, scope: !1154, inlinedAt: !1155)
!1154 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1155 = !DILocation(line: 638, column: 31, scope: !1149, inlinedAt: !1135)
!1156 = !DILocation(line: 16, column: 42, scope: !1154, inlinedAt: !1155)
!1157 = !DILocation(line: 638, column: 55, scope: !1149, inlinedAt: !1135)
!1158 = !DILocation(line: 639, column: 6, scope: !1134, inlinedAt: !1135)
!1159 = !DILocation(line: 639, column: 13, scope: !1134, inlinedAt: !1135)
!1160 = !DILocation(line: 639, column: 27, scope: !1134, inlinedAt: !1135)
!1161 = !DILocalVariable(name: "is_negative", scope: !1134, file: !2, line: 640, type: !128, align: 1)
!1162 = !DILocation(line: 640, column: 7, scope: !1134, inlinedAt: !1135)
!1163 = !DILocation(line: 641, column: 10, scope: !1164, inlinedAt: !1135)
!1164 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 641, column: 2)
!1165 = !DILocation(line: 641, column: 17, scope: !1164, inlinedAt: !1135)
!1166 = !DILocation(line: 644, column: 8, scope: !1167, inlinedAt: !1135)
!1167 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 644, column: 4)
!1168 = !DILocation(line: 645, column: 18, scope: !1167, inlinedAt: !1135)
!1169 = !DILocation(line: 646, column: 4, scope: !1167, inlinedAt: !1135)
!1170 = !DILocation(line: 648, column: 4, scope: !1171, inlinedAt: !1135)
!1171 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 648, column: 4)
!1172 = !DILocation(line: 650, column: 4, scope: !1173, inlinedAt: !1135)
!1173 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 650, column: 4)
!1174 = !DILocation(line: 652, column: 6, scope: !1134, inlinedAt: !1135)
!1175 = !DILocation(line: 652, column: 13, scope: !1134, inlinedAt: !1135)
!1176 = !DILocation(line: 652, column: 27, scope: !1134, inlinedAt: !1135)
!1177 = !DILocalVariable(name: "base_used", scope: !1134, file: !2, line: 653, type: !325, align: 8)
!1178 = !DILocation(line: 653, column: 8, scope: !1134, inlinedAt: !1135)
!1179 = !DILocation(line: 653, column: 21, scope: !1134, inlinedAt: !1135)
!1180 = !DILocation(line: 654, column: 6, scope: !1134, inlinedAt: !1135)
!1181 = !DILocation(line: 654, column: 13, scope: !1134, inlinedAt: !1135)
!1182 = !DILocation(line: 654, column: 30, scope: !1134, inlinedAt: !1135)
!1183 = !DILocation(line: 656, column: 3, scope: !1184, inlinedAt: !1135)
!1184 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 655, column: 2)
!1185 = !DILocation(line: 657, column: 7, scope: !1184, inlinedAt: !1135)
!1186 = !DILocation(line: 657, column: 16, scope: !1184, inlinedAt: !1135)
!1187 = !DILocation(line: 657, column: 29, scope: !1184, inlinedAt: !1135)
!1188 = !DILocation(line: 658, column: 11, scope: !1189, inlinedAt: !1135)
!1189 = distinct !DILexicalBlock(scope: !1184, file: !2, line: 658, column: 3)
!1190 = !DILocation(line: 658, column: 18, scope: !1189, inlinedAt: !1135)
!1191 = !DILocation(line: 662, column: 17, scope: !1192, inlinedAt: !1135)
!1192 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 662, column: 5)
!1193 = !DILocation(line: 663, column: 5, scope: !1192, inlinedAt: !1135)
!1194 = !DILocation(line: 666, column: 17, scope: !1195, inlinedAt: !1135)
!1195 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 666, column: 5)
!1196 = !DILocation(line: 667, column: 5, scope: !1195, inlinedAt: !1135)
!1197 = !DILocation(line: 670, column: 17, scope: !1198, inlinedAt: !1135)
!1198 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 670, column: 5)
!1199 = !DILocation(line: 671, column: 5, scope: !1198, inlinedAt: !1135)
!1200 = !DILocation(line: 673, column: 5, scope: !1201, inlinedAt: !1135)
!1201 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 673, column: 5)
!1202 = !DILocation(line: 675, column: 7, scope: !1184, inlinedAt: !1135)
!1203 = !DILocation(line: 675, column: 14, scope: !1184, inlinedAt: !1135)
!1204 = !DILocation(line: 675, column: 28, scope: !1184, inlinedAt: !1135)
!1205 = !DILocalVariable(name: "value", scope: !1134, file: !2, line: 677, type: !325, align: 8)
!1206 = !DILocation(line: 677, column: 8, scope: !1134, inlinedAt: !1135)
!1207 = !DILocation(line: 677, column: 16, scope: !1134, inlinedAt: !1135)
!1208 = !DILocation(line: 678, column: 2, scope: !1134, inlinedAt: !1135)
!1209 = !DILocation(line: 678, column: 9, scope: !1210, inlinedAt: !1135)
!1210 = distinct !DILexicalBlock(scope: !1134, file: !2, line: 678, column: 2)
!1211 = !DILocation(line: 678, column: 18, scope: !1210, inlinedAt: !1135)
!1212 = !DILocalVariable(name: "c", scope: !1213, file: !2, line: 680, type: !61, align: 1)
!1213 = distinct !DILexicalBlock(scope: !1210, file: !2, line: 679, column: 2)
!1214 = !DILocation(line: 680, column: 8, scope: !1213, inlinedAt: !1135)
!1215 = !DILocalVariable(name: "ch", scope: !1216, file: !2, line: 681, type: !61, align: 1)
!1216 = distinct !DILexicalBlock(scope: !1213, file: !2, line: 681, column: 4)
!1217 = !DILocation(line: 681, column: 9, scope: !1216, inlinedAt: !1135)
!1218 = !DILocation(line: 681, column: 14, scope: !1216, inlinedAt: !1135)
!1219 = !DILocation(line: 681, column: 21, scope: !1216, inlinedAt: !1135)
!1220 = !DILocation(line: 682, column: 8, scope: !1216, inlinedAt: !1135)
!1221 = !DILocation(line: 682, column: 27, scope: !1216, inlinedAt: !1135)
!1222 = !DILocation(line: 682, column: 51, scope: !1216, inlinedAt: !1135)
!1223 = !DILocation(line: 682, column: 45, scope: !1216, inlinedAt: !1135)
!1224 = !DILocation(line: 683, column: 8, scope: !1216, inlinedAt: !1135)
!1225 = !DILocation(line: 683, column: 33, scope: !1216, inlinedAt: !1135)
!1226 = !DILocation(line: 683, column: 27, scope: !1216, inlinedAt: !1135)
!1227 = !DILocation(line: 684, column: 8, scope: !1216, inlinedAt: !1135)
!1228 = !DILocation(line: 684, column: 25, scope: !1216, inlinedAt: !1135)
!1229 = !DILocation(line: 685, column: 8, scope: !1216, inlinedAt: !1135)
!1230 = !DILocation(line: 685, column: 25, scope: !1216, inlinedAt: !1135)
!1231 = !DILocation(line: 686, column: 18, scope: !1216, inlinedAt: !1135)
!1232 = !DILocation(line: 686, column: 12, scope: !1216, inlinedAt: !1135)
!1233 = !DILocation(line: 688, column: 7, scope: !1213, inlinedAt: !1135)
!1234 = !DILocation(line: 688, column: 12, scope: !1213, inlinedAt: !1135)
!1235 = !DILocation(line: 688, column: 30, scope: !1213, inlinedAt: !1135)
!1236 = !DILocation(line: 690, column: 8, scope: !1237, inlinedAt: !1135)
!1237 = distinct !DILexicalBlock(scope: !1213, file: !2, line: 690, column: 4)
!1238 = !DILocalVariable(name: "new_value", scope: !1239, file: !2, line: 692, type: !325, align: 8)
!1239 = distinct !DILexicalBlock(scope: !1237, file: !2, line: 691, column: 4)
!1240 = !DILocation(line: 692, column: 11, scope: !1239, inlinedAt: !1135)
!1241 = !DILocation(line: 692, column: 23, scope: !1239, inlinedAt: !1135)
!1242 = !DILocation(line: 692, column: 31, scope: !1239, inlinedAt: !1135)
!1243 = !DILocation(line: 692, column: 43, scope: !1239, inlinedAt: !1135)
!1244 = !DILocation(line: 693, column: 9, scope: !1239, inlinedAt: !1135)
!1245 = !DILocation(line: 693, column: 21, scope: !1239, inlinedAt: !1135)
!1246 = !DILocation(line: 693, column: 35, scope: !1239, inlinedAt: !1135)
!1247 = !DILocation(line: 694, column: 12, scope: !1239, inlinedAt: !1135)
!1248 = !DILocalVariable(name: "new_value", scope: !1237, file: !2, line: 696, type: !325, align: 8)
!1249 = !DILocation(line: 696, column: 10, scope: !1237, inlinedAt: !1135)
!1250 = !DILocation(line: 696, column: 22, scope: !1237, inlinedAt: !1135)
!1251 = !DILocation(line: 696, column: 30, scope: !1237, inlinedAt: !1135)
!1252 = !DILocation(line: 696, column: 42, scope: !1237, inlinedAt: !1135)
!1253 = !DILocation(line: 697, column: 8, scope: !1237, inlinedAt: !1135)
!1254 = !DILocation(line: 697, column: 20, scope: !1237, inlinedAt: !1135)
!1255 = !DILocation(line: 697, column: 34, scope: !1237, inlinedAt: !1135)
!1256 = !DILocation(line: 698, column: 11, scope: !1237, inlinedAt: !1135)
!1257 = !DILocation(line: 701, column: 9, scope: !1134, inlinedAt: !1135)
!1258 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 706, type: !1259, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1259 = !DISubroutineType(types: !1260)
!1260 = !{!324, !1261, !56, !18}
!1261 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!1262 = !DILocalVariable(name: "s", arg: 1, scope: !1258, file: !2, line: 706, type: !56)
!1263 = !DILocation(line: 706, column: 23, scope: !1258)
!1264 = !DILocalVariable(name: "base", arg: 2, scope: !1258, file: !2, line: 706, type: !18)
!1265 = !DILocation(line: 706, column: 30, scope: !1258)
!1266 = !DILocation(line: 631, column: 12, scope: !1267, inlinedAt: !1269)
!1267 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 634, column: 1)
!1268 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1269 = !DILocation(line: 706, column: 44, scope: !1258)
!1270 = !DILocation(line: 631, column: 26, scope: !1267, inlinedAt: !1269)
!1271 = !DILocation(line: 631, column: 39, scope: !1267, inlinedAt: !1269)
!1272 = !DILocalVariable(name: "len", scope: !1268, file: !2, line: 635, type: !63, align: 8)
!1273 = !DILocation(line: 635, column: 6, scope: !1268, inlinedAt: !1269)
!1274 = !DILocation(line: 635, column: 12, scope: !1268, inlinedAt: !1269)
!1275 = !DILocalVariable(name: "index", scope: !1268, file: !2, line: 636, type: !63, align: 8)
!1276 = !DILocation(line: 636, column: 6, scope: !1268, inlinedAt: !1269)
!1277 = !DILocation(line: 636, column: 14, scope: !1268, inlinedAt: !1269)
!1278 = !DILocalVariable(name: "ptr", scope: !1268, file: !2, line: 637, type: !60, align: 8)
!1279 = !DILocation(line: 637, column: 8, scope: !1268, inlinedAt: !1269)
!1280 = !DILocation(line: 637, column: 14, scope: !1268, inlinedAt: !1269)
!1281 = !DILocation(line: 638, column: 2, scope: !1268, inlinedAt: !1269)
!1282 = !DILocation(line: 638, column: 9, scope: !1283, inlinedAt: !1269)
!1283 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 638, column: 2)
!1284 = !DILocation(line: 638, column: 17, scope: !1283, inlinedAt: !1269)
!1285 = !DILocation(line: 638, column: 42, scope: !1283, inlinedAt: !1269)
!1286 = !DILocation(line: 638, column: 46, scope: !1283, inlinedAt: !1269)
!1287 = !DILocation(line: 16, column: 29, scope: !1288, inlinedAt: !1289)
!1288 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1289 = !DILocation(line: 638, column: 31, scope: !1283, inlinedAt: !1269)
!1290 = !DILocation(line: 16, column: 42, scope: !1288, inlinedAt: !1289)
!1291 = !DILocation(line: 638, column: 55, scope: !1283, inlinedAt: !1269)
!1292 = !DILocation(line: 639, column: 6, scope: !1268, inlinedAt: !1269)
!1293 = !DILocation(line: 639, column: 13, scope: !1268, inlinedAt: !1269)
!1294 = !DILocation(line: 639, column: 27, scope: !1268, inlinedAt: !1269)
!1295 = !DILocalVariable(name: "is_negative", scope: !1268, file: !2, line: 640, type: !128, align: 1)
!1296 = !DILocation(line: 640, column: 7, scope: !1268, inlinedAt: !1269)
!1297 = !DILocation(line: 641, column: 10, scope: !1298, inlinedAt: !1269)
!1298 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 641, column: 2)
!1299 = !DILocation(line: 641, column: 17, scope: !1298, inlinedAt: !1269)
!1300 = !DILocation(line: 644, column: 8, scope: !1301, inlinedAt: !1269)
!1301 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 644, column: 4)
!1302 = !DILocation(line: 645, column: 18, scope: !1301, inlinedAt: !1269)
!1303 = !DILocation(line: 646, column: 4, scope: !1301, inlinedAt: !1269)
!1304 = !DILocation(line: 648, column: 4, scope: !1305, inlinedAt: !1269)
!1305 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 648, column: 4)
!1306 = !DILocation(line: 650, column: 4, scope: !1307, inlinedAt: !1269)
!1307 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 650, column: 4)
!1308 = !DILocation(line: 652, column: 6, scope: !1268, inlinedAt: !1269)
!1309 = !DILocation(line: 652, column: 13, scope: !1268, inlinedAt: !1269)
!1310 = !DILocation(line: 652, column: 27, scope: !1268, inlinedAt: !1269)
!1311 = !DILocalVariable(name: "base_used", scope: !1268, file: !2, line: 653, type: !18, align: 4)
!1312 = !DILocation(line: 653, column: 8, scope: !1268, inlinedAt: !1269)
!1313 = !DILocation(line: 653, column: 21, scope: !1268, inlinedAt: !1269)
!1314 = !DILocation(line: 654, column: 6, scope: !1268, inlinedAt: !1269)
!1315 = !DILocation(line: 654, column: 13, scope: !1268, inlinedAt: !1269)
!1316 = !DILocation(line: 654, column: 30, scope: !1268, inlinedAt: !1269)
!1317 = !DILocation(line: 656, column: 3, scope: !1318, inlinedAt: !1269)
!1318 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 655, column: 2)
!1319 = !DILocation(line: 657, column: 7, scope: !1318, inlinedAt: !1269)
!1320 = !DILocation(line: 657, column: 16, scope: !1318, inlinedAt: !1269)
!1321 = !DILocation(line: 657, column: 29, scope: !1318, inlinedAt: !1269)
!1322 = !DILocation(line: 658, column: 11, scope: !1323, inlinedAt: !1269)
!1323 = distinct !DILexicalBlock(scope: !1318, file: !2, line: 658, column: 3)
!1324 = !DILocation(line: 658, column: 18, scope: !1323, inlinedAt: !1269)
!1325 = !DILocation(line: 662, column: 17, scope: !1326, inlinedAt: !1269)
!1326 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 662, column: 5)
!1327 = !DILocation(line: 663, column: 5, scope: !1326, inlinedAt: !1269)
!1328 = !DILocation(line: 666, column: 17, scope: !1329, inlinedAt: !1269)
!1329 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 666, column: 5)
!1330 = !DILocation(line: 667, column: 5, scope: !1329, inlinedAt: !1269)
!1331 = !DILocation(line: 670, column: 17, scope: !1332, inlinedAt: !1269)
!1332 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 670, column: 5)
!1333 = !DILocation(line: 671, column: 5, scope: !1332, inlinedAt: !1269)
!1334 = !DILocation(line: 673, column: 5, scope: !1335, inlinedAt: !1269)
!1335 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 673, column: 5)
!1336 = !DILocation(line: 675, column: 7, scope: !1318, inlinedAt: !1269)
!1337 = !DILocation(line: 675, column: 14, scope: !1318, inlinedAt: !1269)
!1338 = !DILocation(line: 675, column: 28, scope: !1318, inlinedAt: !1269)
!1339 = !DILocalVariable(name: "value", scope: !1268, file: !2, line: 677, type: !18, align: 4)
!1340 = !DILocation(line: 677, column: 8, scope: !1268, inlinedAt: !1269)
!1341 = !DILocation(line: 677, column: 16, scope: !1268, inlinedAt: !1269)
!1342 = !DILocation(line: 678, column: 2, scope: !1268, inlinedAt: !1269)
!1343 = !DILocation(line: 678, column: 9, scope: !1344, inlinedAt: !1269)
!1344 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 678, column: 2)
!1345 = !DILocation(line: 678, column: 18, scope: !1344, inlinedAt: !1269)
!1346 = !DILocalVariable(name: "c", scope: !1347, file: !2, line: 680, type: !61, align: 1)
!1347 = distinct !DILexicalBlock(scope: !1344, file: !2, line: 679, column: 2)
!1348 = !DILocation(line: 680, column: 8, scope: !1347, inlinedAt: !1269)
!1349 = !DILocalVariable(name: "ch", scope: !1350, file: !2, line: 681, type: !61, align: 1)
!1350 = distinct !DILexicalBlock(scope: !1347, file: !2, line: 681, column: 4)
!1351 = !DILocation(line: 681, column: 9, scope: !1350, inlinedAt: !1269)
!1352 = !DILocation(line: 681, column: 14, scope: !1350, inlinedAt: !1269)
!1353 = !DILocation(line: 681, column: 21, scope: !1350, inlinedAt: !1269)
!1354 = !DILocation(line: 682, column: 8, scope: !1350, inlinedAt: !1269)
!1355 = !DILocation(line: 682, column: 27, scope: !1350, inlinedAt: !1269)
!1356 = !DILocation(line: 682, column: 51, scope: !1350, inlinedAt: !1269)
!1357 = !DILocation(line: 682, column: 45, scope: !1350, inlinedAt: !1269)
!1358 = !DILocation(line: 683, column: 8, scope: !1350, inlinedAt: !1269)
!1359 = !DILocation(line: 683, column: 33, scope: !1350, inlinedAt: !1269)
!1360 = !DILocation(line: 683, column: 27, scope: !1350, inlinedAt: !1269)
!1361 = !DILocation(line: 684, column: 8, scope: !1350, inlinedAt: !1269)
!1362 = !DILocation(line: 684, column: 25, scope: !1350, inlinedAt: !1269)
!1363 = !DILocation(line: 685, column: 8, scope: !1350, inlinedAt: !1269)
!1364 = !DILocation(line: 685, column: 25, scope: !1350, inlinedAt: !1269)
!1365 = !DILocation(line: 686, column: 18, scope: !1350, inlinedAt: !1269)
!1366 = !DILocation(line: 686, column: 12, scope: !1350, inlinedAt: !1269)
!1367 = !DILocation(line: 688, column: 7, scope: !1347, inlinedAt: !1269)
!1368 = !DILocation(line: 688, column: 12, scope: !1347, inlinedAt: !1269)
!1369 = !DILocation(line: 688, column: 30, scope: !1347, inlinedAt: !1269)
!1370 = !DILocation(line: 690, column: 8, scope: !1371, inlinedAt: !1269)
!1371 = distinct !DILexicalBlock(scope: !1347, file: !2, line: 690, column: 4)
!1372 = !DILocalVariable(name: "new_value", scope: !1373, file: !2, line: 692, type: !18, align: 4)
!1373 = distinct !DILexicalBlock(scope: !1371, file: !2, line: 691, column: 4)
!1374 = !DILocation(line: 692, column: 11, scope: !1373, inlinedAt: !1269)
!1375 = !DILocation(line: 692, column: 23, scope: !1373, inlinedAt: !1269)
!1376 = !DILocation(line: 692, column: 31, scope: !1373, inlinedAt: !1269)
!1377 = !DILocation(line: 692, column: 43, scope: !1373, inlinedAt: !1269)
!1378 = !DILocation(line: 693, column: 9, scope: !1373, inlinedAt: !1269)
!1379 = !DILocation(line: 693, column: 21, scope: !1373, inlinedAt: !1269)
!1380 = !DILocation(line: 693, column: 35, scope: !1373, inlinedAt: !1269)
!1381 = !DILocation(line: 694, column: 12, scope: !1373, inlinedAt: !1269)
!1382 = !DILocalVariable(name: "new_value", scope: !1371, file: !2, line: 696, type: !18, align: 4)
!1383 = !DILocation(line: 696, column: 10, scope: !1371, inlinedAt: !1269)
!1384 = !DILocation(line: 696, column: 22, scope: !1371, inlinedAt: !1269)
!1385 = !DILocation(line: 696, column: 30, scope: !1371, inlinedAt: !1269)
!1386 = !DILocation(line: 696, column: 42, scope: !1371, inlinedAt: !1269)
!1387 = !DILocation(line: 697, column: 8, scope: !1371, inlinedAt: !1269)
!1388 = !DILocation(line: 697, column: 20, scope: !1371, inlinedAt: !1269)
!1389 = !DILocation(line: 697, column: 34, scope: !1371, inlinedAt: !1269)
!1390 = !DILocation(line: 698, column: 11, scope: !1371, inlinedAt: !1269)
!1391 = !DILocation(line: 701, column: 9, scope: !1268, inlinedAt: !1269)
!1392 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 707, type: !1393, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1393 = !DISubroutineType(types: !1394)
!1394 = !{!324, !1395, !56, !18}
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1396, size: 64, align: 64, dwarfAddressSpace: 0)
!1396 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1397 = !DILocalVariable(name: "s", arg: 1, scope: !1392, file: !2, line: 707, type: !56)
!1398 = !DILocation(line: 707, column: 27, scope: !1392)
!1399 = !DILocalVariable(name: "base", arg: 2, scope: !1392, file: !2, line: 707, type: !18)
!1400 = !DILocation(line: 707, column: 34, scope: !1392)
!1401 = !DILocation(line: 631, column: 12, scope: !1402, inlinedAt: !1404)
!1402 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 634, column: 1)
!1403 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1404 = !DILocation(line: 707, column: 48, scope: !1392)
!1405 = !DILocation(line: 631, column: 26, scope: !1402, inlinedAt: !1404)
!1406 = !DILocation(line: 631, column: 39, scope: !1402, inlinedAt: !1404)
!1407 = !DILocalVariable(name: "len", scope: !1403, file: !2, line: 635, type: !63, align: 8)
!1408 = !DILocation(line: 635, column: 6, scope: !1403, inlinedAt: !1404)
!1409 = !DILocation(line: 635, column: 12, scope: !1403, inlinedAt: !1404)
!1410 = !DILocalVariable(name: "index", scope: !1403, file: !2, line: 636, type: !63, align: 8)
!1411 = !DILocation(line: 636, column: 6, scope: !1403, inlinedAt: !1404)
!1412 = !DILocation(line: 636, column: 14, scope: !1403, inlinedAt: !1404)
!1413 = !DILocalVariable(name: "ptr", scope: !1403, file: !2, line: 637, type: !60, align: 8)
!1414 = !DILocation(line: 637, column: 8, scope: !1403, inlinedAt: !1404)
!1415 = !DILocation(line: 637, column: 14, scope: !1403, inlinedAt: !1404)
!1416 = !DILocation(line: 638, column: 2, scope: !1403, inlinedAt: !1404)
!1417 = !DILocation(line: 638, column: 9, scope: !1418, inlinedAt: !1404)
!1418 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 638, column: 2)
!1419 = !DILocation(line: 638, column: 17, scope: !1418, inlinedAt: !1404)
!1420 = !DILocation(line: 638, column: 42, scope: !1418, inlinedAt: !1404)
!1421 = !DILocation(line: 638, column: 46, scope: !1418, inlinedAt: !1404)
!1422 = !DILocation(line: 16, column: 29, scope: !1423, inlinedAt: !1424)
!1423 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1424 = !DILocation(line: 638, column: 31, scope: !1418, inlinedAt: !1404)
!1425 = !DILocation(line: 16, column: 42, scope: !1423, inlinedAt: !1424)
!1426 = !DILocation(line: 638, column: 55, scope: !1418, inlinedAt: !1404)
!1427 = !DILocation(line: 639, column: 6, scope: !1403, inlinedAt: !1404)
!1428 = !DILocation(line: 639, column: 13, scope: !1403, inlinedAt: !1404)
!1429 = !DILocation(line: 639, column: 27, scope: !1403, inlinedAt: !1404)
!1430 = !DILocalVariable(name: "is_negative", scope: !1403, file: !2, line: 640, type: !128, align: 1)
!1431 = !DILocation(line: 640, column: 7, scope: !1403, inlinedAt: !1404)
!1432 = !DILocation(line: 641, column: 10, scope: !1433, inlinedAt: !1404)
!1433 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 641, column: 2)
!1434 = !DILocation(line: 641, column: 17, scope: !1433, inlinedAt: !1404)
!1435 = !DILocation(line: 644, column: 8, scope: !1436, inlinedAt: !1404)
!1436 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 644, column: 4)
!1437 = !DILocation(line: 645, column: 18, scope: !1436, inlinedAt: !1404)
!1438 = !DILocation(line: 646, column: 4, scope: !1436, inlinedAt: !1404)
!1439 = !DILocation(line: 648, column: 4, scope: !1440, inlinedAt: !1404)
!1440 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 648, column: 4)
!1441 = !DILocation(line: 650, column: 4, scope: !1442, inlinedAt: !1404)
!1442 = distinct !DILexicalBlock(scope: !1433, file: !2, line: 650, column: 4)
!1443 = !DILocation(line: 652, column: 6, scope: !1403, inlinedAt: !1404)
!1444 = !DILocation(line: 652, column: 13, scope: !1403, inlinedAt: !1404)
!1445 = !DILocation(line: 652, column: 27, scope: !1403, inlinedAt: !1404)
!1446 = !DILocalVariable(name: "base_used", scope: !1403, file: !2, line: 653, type: !1396, align: 2)
!1447 = !DILocation(line: 653, column: 8, scope: !1403, inlinedAt: !1404)
!1448 = !DILocation(line: 653, column: 21, scope: !1403, inlinedAt: !1404)
!1449 = !DILocation(line: 654, column: 6, scope: !1403, inlinedAt: !1404)
!1450 = !DILocation(line: 654, column: 13, scope: !1403, inlinedAt: !1404)
!1451 = !DILocation(line: 654, column: 30, scope: !1403, inlinedAt: !1404)
!1452 = !DILocation(line: 656, column: 3, scope: !1453, inlinedAt: !1404)
!1453 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 655, column: 2)
!1454 = !DILocation(line: 657, column: 7, scope: !1453, inlinedAt: !1404)
!1455 = !DILocation(line: 657, column: 16, scope: !1453, inlinedAt: !1404)
!1456 = !DILocation(line: 657, column: 29, scope: !1453, inlinedAt: !1404)
!1457 = !DILocation(line: 658, column: 11, scope: !1458, inlinedAt: !1404)
!1458 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 658, column: 3)
!1459 = !DILocation(line: 658, column: 18, scope: !1458, inlinedAt: !1404)
!1460 = !DILocation(line: 662, column: 17, scope: !1461, inlinedAt: !1404)
!1461 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 662, column: 5)
!1462 = !DILocation(line: 663, column: 5, scope: !1461, inlinedAt: !1404)
!1463 = !DILocation(line: 666, column: 17, scope: !1464, inlinedAt: !1404)
!1464 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 666, column: 5)
!1465 = !DILocation(line: 667, column: 5, scope: !1464, inlinedAt: !1404)
!1466 = !DILocation(line: 670, column: 17, scope: !1467, inlinedAt: !1404)
!1467 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 670, column: 5)
!1468 = !DILocation(line: 671, column: 5, scope: !1467, inlinedAt: !1404)
!1469 = !DILocation(line: 673, column: 5, scope: !1470, inlinedAt: !1404)
!1470 = distinct !DILexicalBlock(scope: !1458, file: !2, line: 673, column: 5)
!1471 = !DILocation(line: 675, column: 7, scope: !1453, inlinedAt: !1404)
!1472 = !DILocation(line: 675, column: 14, scope: !1453, inlinedAt: !1404)
!1473 = !DILocation(line: 675, column: 28, scope: !1453, inlinedAt: !1404)
!1474 = !DILocalVariable(name: "value", scope: !1403, file: !2, line: 677, type: !1396, align: 2)
!1475 = !DILocation(line: 677, column: 8, scope: !1403, inlinedAt: !1404)
!1476 = !DILocation(line: 677, column: 16, scope: !1403, inlinedAt: !1404)
!1477 = !DILocation(line: 678, column: 2, scope: !1403, inlinedAt: !1404)
!1478 = !DILocation(line: 678, column: 9, scope: !1479, inlinedAt: !1404)
!1479 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 678, column: 2)
!1480 = !DILocation(line: 678, column: 18, scope: !1479, inlinedAt: !1404)
!1481 = !DILocalVariable(name: "c", scope: !1482, file: !2, line: 680, type: !61, align: 1)
!1482 = distinct !DILexicalBlock(scope: !1479, file: !2, line: 679, column: 2)
!1483 = !DILocation(line: 680, column: 8, scope: !1482, inlinedAt: !1404)
!1484 = !DILocalVariable(name: "ch", scope: !1485, file: !2, line: 681, type: !61, align: 1)
!1485 = distinct !DILexicalBlock(scope: !1482, file: !2, line: 681, column: 4)
!1486 = !DILocation(line: 681, column: 9, scope: !1485, inlinedAt: !1404)
!1487 = !DILocation(line: 681, column: 14, scope: !1485, inlinedAt: !1404)
!1488 = !DILocation(line: 681, column: 21, scope: !1485, inlinedAt: !1404)
!1489 = !DILocation(line: 682, column: 8, scope: !1485, inlinedAt: !1404)
!1490 = !DILocation(line: 682, column: 27, scope: !1485, inlinedAt: !1404)
!1491 = !DILocation(line: 682, column: 51, scope: !1485, inlinedAt: !1404)
!1492 = !DILocation(line: 682, column: 45, scope: !1485, inlinedAt: !1404)
!1493 = !DILocation(line: 683, column: 8, scope: !1485, inlinedAt: !1404)
!1494 = !DILocation(line: 683, column: 33, scope: !1485, inlinedAt: !1404)
!1495 = !DILocation(line: 683, column: 27, scope: !1485, inlinedAt: !1404)
!1496 = !DILocation(line: 684, column: 8, scope: !1485, inlinedAt: !1404)
!1497 = !DILocation(line: 684, column: 25, scope: !1485, inlinedAt: !1404)
!1498 = !DILocation(line: 685, column: 8, scope: !1485, inlinedAt: !1404)
!1499 = !DILocation(line: 685, column: 25, scope: !1485, inlinedAt: !1404)
!1500 = !DILocation(line: 686, column: 18, scope: !1485, inlinedAt: !1404)
!1501 = !DILocation(line: 686, column: 12, scope: !1485, inlinedAt: !1404)
!1502 = !DILocation(line: 688, column: 7, scope: !1482, inlinedAt: !1404)
!1503 = !DILocation(line: 688, column: 12, scope: !1482, inlinedAt: !1404)
!1504 = !DILocation(line: 688, column: 30, scope: !1482, inlinedAt: !1404)
!1505 = !DILocation(line: 690, column: 8, scope: !1506, inlinedAt: !1404)
!1506 = distinct !DILexicalBlock(scope: !1482, file: !2, line: 690, column: 4)
!1507 = !DILocalVariable(name: "new_value", scope: !1508, file: !2, line: 692, type: !1396, align: 2)
!1508 = distinct !DILexicalBlock(scope: !1506, file: !2, line: 691, column: 4)
!1509 = !DILocation(line: 692, column: 11, scope: !1508, inlinedAt: !1404)
!1510 = !DILocation(line: 692, column: 23, scope: !1508, inlinedAt: !1404)
!1511 = !DILocation(line: 692, column: 31, scope: !1508, inlinedAt: !1404)
!1512 = !DILocation(line: 692, column: 43, scope: !1508, inlinedAt: !1404)
!1513 = !DILocation(line: 693, column: 9, scope: !1508, inlinedAt: !1404)
!1514 = !DILocation(line: 693, column: 21, scope: !1508, inlinedAt: !1404)
!1515 = !DILocation(line: 693, column: 35, scope: !1508, inlinedAt: !1404)
!1516 = !DILocation(line: 694, column: 12, scope: !1508, inlinedAt: !1404)
!1517 = !DILocalVariable(name: "new_value", scope: !1506, file: !2, line: 696, type: !1396, align: 2)
!1518 = !DILocation(line: 696, column: 10, scope: !1506, inlinedAt: !1404)
!1519 = !DILocation(line: 696, column: 22, scope: !1506, inlinedAt: !1404)
!1520 = !DILocation(line: 696, column: 30, scope: !1506, inlinedAt: !1404)
!1521 = !DILocation(line: 696, column: 42, scope: !1506, inlinedAt: !1404)
!1522 = !DILocation(line: 697, column: 8, scope: !1506, inlinedAt: !1404)
!1523 = !DILocation(line: 697, column: 20, scope: !1506, inlinedAt: !1404)
!1524 = !DILocation(line: 697, column: 34, scope: !1506, inlinedAt: !1404)
!1525 = !DILocation(line: 698, column: 11, scope: !1506, inlinedAt: !1404)
!1526 = !DILocation(line: 701, column: 9, scope: !1403, inlinedAt: !1404)
!1527 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 708, type: !1528, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1528 = !DISubroutineType(types: !1529)
!1529 = !{!324, !1530, !56, !18}
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1531, size: 64, align: 64, dwarfAddressSpace: 0)
!1531 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1532 = !DILocalVariable(name: "s", arg: 1, scope: !1527, file: !2, line: 708, type: !56)
!1533 = !DILocation(line: 708, column: 27, scope: !1527)
!1534 = !DILocalVariable(name: "base", arg: 2, scope: !1527, file: !2, line: 708, type: !18)
!1535 = !DILocation(line: 708, column: 34, scope: !1527)
!1536 = !DILocation(line: 631, column: 12, scope: !1537, inlinedAt: !1539)
!1537 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 634, column: 1)
!1538 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1539 = !DILocation(line: 708, column: 48, scope: !1527)
!1540 = !DILocation(line: 631, column: 26, scope: !1537, inlinedAt: !1539)
!1541 = !DILocation(line: 631, column: 39, scope: !1537, inlinedAt: !1539)
!1542 = !DILocalVariable(name: "len", scope: !1538, file: !2, line: 635, type: !63, align: 8)
!1543 = !DILocation(line: 635, column: 6, scope: !1538, inlinedAt: !1539)
!1544 = !DILocation(line: 635, column: 12, scope: !1538, inlinedAt: !1539)
!1545 = !DILocalVariable(name: "index", scope: !1538, file: !2, line: 636, type: !63, align: 8)
!1546 = !DILocation(line: 636, column: 6, scope: !1538, inlinedAt: !1539)
!1547 = !DILocation(line: 636, column: 14, scope: !1538, inlinedAt: !1539)
!1548 = !DILocalVariable(name: "ptr", scope: !1538, file: !2, line: 637, type: !60, align: 8)
!1549 = !DILocation(line: 637, column: 8, scope: !1538, inlinedAt: !1539)
!1550 = !DILocation(line: 637, column: 14, scope: !1538, inlinedAt: !1539)
!1551 = !DILocation(line: 638, column: 2, scope: !1538, inlinedAt: !1539)
!1552 = !DILocation(line: 638, column: 9, scope: !1553, inlinedAt: !1539)
!1553 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 638, column: 2)
!1554 = !DILocation(line: 638, column: 17, scope: !1553, inlinedAt: !1539)
!1555 = !DILocation(line: 638, column: 42, scope: !1553, inlinedAt: !1539)
!1556 = !DILocation(line: 638, column: 46, scope: !1553, inlinedAt: !1539)
!1557 = !DILocation(line: 16, column: 29, scope: !1558, inlinedAt: !1559)
!1558 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1559 = !DILocation(line: 638, column: 31, scope: !1553, inlinedAt: !1539)
!1560 = !DILocation(line: 16, column: 42, scope: !1558, inlinedAt: !1559)
!1561 = !DILocation(line: 638, column: 55, scope: !1553, inlinedAt: !1539)
!1562 = !DILocation(line: 639, column: 6, scope: !1538, inlinedAt: !1539)
!1563 = !DILocation(line: 639, column: 13, scope: !1538, inlinedAt: !1539)
!1564 = !DILocation(line: 639, column: 27, scope: !1538, inlinedAt: !1539)
!1565 = !DILocalVariable(name: "is_negative", scope: !1538, file: !2, line: 640, type: !128, align: 1)
!1566 = !DILocation(line: 640, column: 7, scope: !1538, inlinedAt: !1539)
!1567 = !DILocation(line: 641, column: 10, scope: !1568, inlinedAt: !1539)
!1568 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 641, column: 2)
!1569 = !DILocation(line: 641, column: 17, scope: !1568, inlinedAt: !1539)
!1570 = !DILocation(line: 644, column: 8, scope: !1571, inlinedAt: !1539)
!1571 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 644, column: 4)
!1572 = !DILocation(line: 645, column: 18, scope: !1571, inlinedAt: !1539)
!1573 = !DILocation(line: 646, column: 4, scope: !1571, inlinedAt: !1539)
!1574 = !DILocation(line: 648, column: 4, scope: !1575, inlinedAt: !1539)
!1575 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 648, column: 4)
!1576 = !DILocation(line: 650, column: 4, scope: !1577, inlinedAt: !1539)
!1577 = distinct !DILexicalBlock(scope: !1568, file: !2, line: 650, column: 4)
!1578 = !DILocation(line: 652, column: 6, scope: !1538, inlinedAt: !1539)
!1579 = !DILocation(line: 652, column: 13, scope: !1538, inlinedAt: !1539)
!1580 = !DILocation(line: 652, column: 27, scope: !1538, inlinedAt: !1539)
!1581 = !DILocalVariable(name: "base_used", scope: !1538, file: !2, line: 653, type: !1531, align: 1)
!1582 = !DILocation(line: 653, column: 8, scope: !1538, inlinedAt: !1539)
!1583 = !DILocation(line: 653, column: 21, scope: !1538, inlinedAt: !1539)
!1584 = !DILocation(line: 654, column: 6, scope: !1538, inlinedAt: !1539)
!1585 = !DILocation(line: 654, column: 13, scope: !1538, inlinedAt: !1539)
!1586 = !DILocation(line: 654, column: 30, scope: !1538, inlinedAt: !1539)
!1587 = !DILocation(line: 656, column: 3, scope: !1588, inlinedAt: !1539)
!1588 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 655, column: 2)
!1589 = !DILocation(line: 657, column: 7, scope: !1588, inlinedAt: !1539)
!1590 = !DILocation(line: 657, column: 16, scope: !1588, inlinedAt: !1539)
!1591 = !DILocation(line: 657, column: 29, scope: !1588, inlinedAt: !1539)
!1592 = !DILocation(line: 658, column: 11, scope: !1593, inlinedAt: !1539)
!1593 = distinct !DILexicalBlock(scope: !1588, file: !2, line: 658, column: 3)
!1594 = !DILocation(line: 658, column: 18, scope: !1593, inlinedAt: !1539)
!1595 = !DILocation(line: 662, column: 17, scope: !1596, inlinedAt: !1539)
!1596 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 662, column: 5)
!1597 = !DILocation(line: 663, column: 5, scope: !1596, inlinedAt: !1539)
!1598 = !DILocation(line: 666, column: 17, scope: !1599, inlinedAt: !1539)
!1599 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 666, column: 5)
!1600 = !DILocation(line: 667, column: 5, scope: !1599, inlinedAt: !1539)
!1601 = !DILocation(line: 670, column: 17, scope: !1602, inlinedAt: !1539)
!1602 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 670, column: 5)
!1603 = !DILocation(line: 671, column: 5, scope: !1602, inlinedAt: !1539)
!1604 = !DILocation(line: 673, column: 5, scope: !1605, inlinedAt: !1539)
!1605 = distinct !DILexicalBlock(scope: !1593, file: !2, line: 673, column: 5)
!1606 = !DILocation(line: 675, column: 7, scope: !1588, inlinedAt: !1539)
!1607 = !DILocation(line: 675, column: 14, scope: !1588, inlinedAt: !1539)
!1608 = !DILocation(line: 675, column: 28, scope: !1588, inlinedAt: !1539)
!1609 = !DILocalVariable(name: "value", scope: !1538, file: !2, line: 677, type: !1531, align: 1)
!1610 = !DILocation(line: 677, column: 8, scope: !1538, inlinedAt: !1539)
!1611 = !DILocation(line: 677, column: 16, scope: !1538, inlinedAt: !1539)
!1612 = !DILocation(line: 678, column: 2, scope: !1538, inlinedAt: !1539)
!1613 = !DILocation(line: 678, column: 9, scope: !1614, inlinedAt: !1539)
!1614 = distinct !DILexicalBlock(scope: !1538, file: !2, line: 678, column: 2)
!1615 = !DILocation(line: 678, column: 18, scope: !1614, inlinedAt: !1539)
!1616 = !DILocalVariable(name: "c", scope: !1617, file: !2, line: 680, type: !61, align: 1)
!1617 = distinct !DILexicalBlock(scope: !1614, file: !2, line: 679, column: 2)
!1618 = !DILocation(line: 680, column: 8, scope: !1617, inlinedAt: !1539)
!1619 = !DILocalVariable(name: "ch", scope: !1620, file: !2, line: 681, type: !61, align: 1)
!1620 = distinct !DILexicalBlock(scope: !1617, file: !2, line: 681, column: 4)
!1621 = !DILocation(line: 681, column: 9, scope: !1620, inlinedAt: !1539)
!1622 = !DILocation(line: 681, column: 14, scope: !1620, inlinedAt: !1539)
!1623 = !DILocation(line: 681, column: 21, scope: !1620, inlinedAt: !1539)
!1624 = !DILocation(line: 682, column: 8, scope: !1620, inlinedAt: !1539)
!1625 = !DILocation(line: 682, column: 27, scope: !1620, inlinedAt: !1539)
!1626 = !DILocation(line: 682, column: 51, scope: !1620, inlinedAt: !1539)
!1627 = !DILocation(line: 682, column: 45, scope: !1620, inlinedAt: !1539)
!1628 = !DILocation(line: 683, column: 8, scope: !1620, inlinedAt: !1539)
!1629 = !DILocation(line: 683, column: 33, scope: !1620, inlinedAt: !1539)
!1630 = !DILocation(line: 683, column: 27, scope: !1620, inlinedAt: !1539)
!1631 = !DILocation(line: 684, column: 8, scope: !1620, inlinedAt: !1539)
!1632 = !DILocation(line: 684, column: 25, scope: !1620, inlinedAt: !1539)
!1633 = !DILocation(line: 685, column: 8, scope: !1620, inlinedAt: !1539)
!1634 = !DILocation(line: 685, column: 25, scope: !1620, inlinedAt: !1539)
!1635 = !DILocation(line: 686, column: 18, scope: !1620, inlinedAt: !1539)
!1636 = !DILocation(line: 686, column: 12, scope: !1620, inlinedAt: !1539)
!1637 = !DILocation(line: 688, column: 7, scope: !1617, inlinedAt: !1539)
!1638 = !DILocation(line: 688, column: 12, scope: !1617, inlinedAt: !1539)
!1639 = !DILocation(line: 688, column: 30, scope: !1617, inlinedAt: !1539)
!1640 = !DILocation(line: 690, column: 8, scope: !1641, inlinedAt: !1539)
!1641 = distinct !DILexicalBlock(scope: !1617, file: !2, line: 690, column: 4)
!1642 = !DILocalVariable(name: "new_value", scope: !1643, file: !2, line: 692, type: !1531, align: 1)
!1643 = distinct !DILexicalBlock(scope: !1641, file: !2, line: 691, column: 4)
!1644 = !DILocation(line: 692, column: 11, scope: !1643, inlinedAt: !1539)
!1645 = !DILocation(line: 692, column: 23, scope: !1643, inlinedAt: !1539)
!1646 = !DILocation(line: 692, column: 31, scope: !1643, inlinedAt: !1539)
!1647 = !DILocation(line: 692, column: 43, scope: !1643, inlinedAt: !1539)
!1648 = !DILocation(line: 693, column: 9, scope: !1643, inlinedAt: !1539)
!1649 = !DILocation(line: 693, column: 21, scope: !1643, inlinedAt: !1539)
!1650 = !DILocation(line: 693, column: 35, scope: !1643, inlinedAt: !1539)
!1651 = !DILocation(line: 694, column: 12, scope: !1643, inlinedAt: !1539)
!1652 = !DILocalVariable(name: "new_value", scope: !1641, file: !2, line: 696, type: !1531, align: 1)
!1653 = !DILocation(line: 696, column: 10, scope: !1641, inlinedAt: !1539)
!1654 = !DILocation(line: 696, column: 22, scope: !1641, inlinedAt: !1539)
!1655 = !DILocation(line: 696, column: 30, scope: !1641, inlinedAt: !1539)
!1656 = !DILocation(line: 696, column: 42, scope: !1641, inlinedAt: !1539)
!1657 = !DILocation(line: 697, column: 8, scope: !1641, inlinedAt: !1539)
!1658 = !DILocation(line: 697, column: 20, scope: !1641, inlinedAt: !1539)
!1659 = !DILocation(line: 697, column: 34, scope: !1641, inlinedAt: !1539)
!1660 = !DILocation(line: 698, column: 11, scope: !1641, inlinedAt: !1539)
!1661 = !DILocation(line: 701, column: 9, scope: !1538, inlinedAt: !1539)
!1662 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 710, type: !1663, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1663 = !DISubroutineType(types: !1664)
!1664 = !{!324, !1665, !56, !18}
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1666, size: 64, align: 64, dwarfAddressSpace: 0)
!1666 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1667 = !DILocalVariable(name: "s", arg: 1, scope: !1662, file: !2, line: 710, type: !56)
!1668 = !DILocation(line: 710, column: 31, scope: !1662)
!1669 = !DILocalVariable(name: "base", arg: 2, scope: !1662, file: !2, line: 710, type: !18)
!1670 = !DILocation(line: 710, column: 38, scope: !1662)
!1671 = !DILocation(line: 631, column: 12, scope: !1672, inlinedAt: !1674)
!1672 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 634, column: 1)
!1673 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1674 = !DILocation(line: 710, column: 52, scope: !1662)
!1675 = !DILocation(line: 631, column: 26, scope: !1672, inlinedAt: !1674)
!1676 = !DILocation(line: 631, column: 39, scope: !1672, inlinedAt: !1674)
!1677 = !DILocalVariable(name: "len", scope: !1673, file: !2, line: 635, type: !63, align: 8)
!1678 = !DILocation(line: 635, column: 6, scope: !1673, inlinedAt: !1674)
!1679 = !DILocation(line: 635, column: 12, scope: !1673, inlinedAt: !1674)
!1680 = !DILocalVariable(name: "index", scope: !1673, file: !2, line: 636, type: !63, align: 8)
!1681 = !DILocation(line: 636, column: 6, scope: !1673, inlinedAt: !1674)
!1682 = !DILocation(line: 636, column: 14, scope: !1673, inlinedAt: !1674)
!1683 = !DILocalVariable(name: "ptr", scope: !1673, file: !2, line: 637, type: !60, align: 8)
!1684 = !DILocation(line: 637, column: 8, scope: !1673, inlinedAt: !1674)
!1685 = !DILocation(line: 637, column: 14, scope: !1673, inlinedAt: !1674)
!1686 = !DILocation(line: 638, column: 2, scope: !1673, inlinedAt: !1674)
!1687 = !DILocation(line: 638, column: 9, scope: !1688, inlinedAt: !1674)
!1688 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 638, column: 2)
!1689 = !DILocation(line: 638, column: 17, scope: !1688, inlinedAt: !1674)
!1690 = !DILocation(line: 638, column: 42, scope: !1688, inlinedAt: !1674)
!1691 = !DILocation(line: 638, column: 46, scope: !1688, inlinedAt: !1674)
!1692 = !DILocation(line: 16, column: 29, scope: !1693, inlinedAt: !1694)
!1693 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1694 = !DILocation(line: 638, column: 31, scope: !1688, inlinedAt: !1674)
!1695 = !DILocation(line: 16, column: 42, scope: !1693, inlinedAt: !1694)
!1696 = !DILocation(line: 638, column: 55, scope: !1688, inlinedAt: !1674)
!1697 = !DILocation(line: 639, column: 6, scope: !1673, inlinedAt: !1674)
!1698 = !DILocation(line: 639, column: 13, scope: !1673, inlinedAt: !1674)
!1699 = !DILocation(line: 639, column: 27, scope: !1673, inlinedAt: !1674)
!1700 = !DILocalVariable(name: "is_negative", scope: !1673, file: !2, line: 640, type: !128, align: 1)
!1701 = !DILocation(line: 640, column: 7, scope: !1673, inlinedAt: !1674)
!1702 = !DILocation(line: 641, column: 10, scope: !1703, inlinedAt: !1674)
!1703 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 641, column: 2)
!1704 = !DILocation(line: 641, column: 17, scope: !1703, inlinedAt: !1674)
!1705 = !DILocation(line: 644, column: 8, scope: !1706, inlinedAt: !1674)
!1706 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 644, column: 4)
!1707 = !DILocation(line: 644, column: 31, scope: !1706, inlinedAt: !1674)
!1708 = !DILocation(line: 648, column: 4, scope: !1709, inlinedAt: !1674)
!1709 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 648, column: 4)
!1710 = !DILocation(line: 650, column: 4, scope: !1711, inlinedAt: !1674)
!1711 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 650, column: 4)
!1712 = !DILocation(line: 652, column: 6, scope: !1673, inlinedAt: !1674)
!1713 = !DILocation(line: 652, column: 13, scope: !1673, inlinedAt: !1674)
!1714 = !DILocation(line: 652, column: 27, scope: !1673, inlinedAt: !1674)
!1715 = !DILocalVariable(name: "base_used", scope: !1673, file: !2, line: 653, type: !1666, align: 16)
!1716 = !DILocation(line: 653, column: 8, scope: !1673, inlinedAt: !1674)
!1717 = !DILocation(line: 653, column: 21, scope: !1673, inlinedAt: !1674)
!1718 = !DILocation(line: 654, column: 6, scope: !1673, inlinedAt: !1674)
!1719 = !DILocation(line: 654, column: 13, scope: !1673, inlinedAt: !1674)
!1720 = !DILocation(line: 654, column: 30, scope: !1673, inlinedAt: !1674)
!1721 = !DILocation(line: 656, column: 3, scope: !1722, inlinedAt: !1674)
!1722 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 655, column: 2)
!1723 = !DILocation(line: 657, column: 7, scope: !1722, inlinedAt: !1674)
!1724 = !DILocation(line: 657, column: 16, scope: !1722, inlinedAt: !1674)
!1725 = !DILocation(line: 657, column: 29, scope: !1722, inlinedAt: !1674)
!1726 = !DILocation(line: 658, column: 11, scope: !1727, inlinedAt: !1674)
!1727 = distinct !DILexicalBlock(scope: !1722, file: !2, line: 658, column: 3)
!1728 = !DILocation(line: 658, column: 18, scope: !1727, inlinedAt: !1674)
!1729 = !DILocation(line: 662, column: 17, scope: !1730, inlinedAt: !1674)
!1730 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 662, column: 5)
!1731 = !DILocation(line: 663, column: 5, scope: !1730, inlinedAt: !1674)
!1732 = !DILocation(line: 666, column: 17, scope: !1733, inlinedAt: !1674)
!1733 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 666, column: 5)
!1734 = !DILocation(line: 667, column: 5, scope: !1733, inlinedAt: !1674)
!1735 = !DILocation(line: 670, column: 17, scope: !1736, inlinedAt: !1674)
!1736 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 670, column: 5)
!1737 = !DILocation(line: 671, column: 5, scope: !1736, inlinedAt: !1674)
!1738 = !DILocation(line: 673, column: 5, scope: !1739, inlinedAt: !1674)
!1739 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 673, column: 5)
!1740 = !DILocation(line: 675, column: 7, scope: !1722, inlinedAt: !1674)
!1741 = !DILocation(line: 675, column: 14, scope: !1722, inlinedAt: !1674)
!1742 = !DILocation(line: 675, column: 28, scope: !1722, inlinedAt: !1674)
!1743 = !DILocalVariable(name: "value", scope: !1673, file: !2, line: 677, type: !1666, align: 16)
!1744 = !DILocation(line: 677, column: 8, scope: !1673, inlinedAt: !1674)
!1745 = !DILocation(line: 677, column: 16, scope: !1673, inlinedAt: !1674)
!1746 = !DILocation(line: 678, column: 2, scope: !1673, inlinedAt: !1674)
!1747 = !DILocation(line: 678, column: 9, scope: !1748, inlinedAt: !1674)
!1748 = distinct !DILexicalBlock(scope: !1673, file: !2, line: 678, column: 2)
!1749 = !DILocation(line: 678, column: 18, scope: !1748, inlinedAt: !1674)
!1750 = !DILocalVariable(name: "c", scope: !1751, file: !2, line: 680, type: !61, align: 1)
!1751 = distinct !DILexicalBlock(scope: !1748, file: !2, line: 679, column: 2)
!1752 = !DILocation(line: 680, column: 8, scope: !1751, inlinedAt: !1674)
!1753 = !DILocalVariable(name: "ch", scope: !1754, file: !2, line: 681, type: !61, align: 1)
!1754 = distinct !DILexicalBlock(scope: !1751, file: !2, line: 681, column: 4)
!1755 = !DILocation(line: 681, column: 9, scope: !1754, inlinedAt: !1674)
!1756 = !DILocation(line: 681, column: 14, scope: !1754, inlinedAt: !1674)
!1757 = !DILocation(line: 681, column: 21, scope: !1754, inlinedAt: !1674)
!1758 = !DILocation(line: 682, column: 8, scope: !1754, inlinedAt: !1674)
!1759 = !DILocation(line: 682, column: 27, scope: !1754, inlinedAt: !1674)
!1760 = !DILocation(line: 682, column: 51, scope: !1754, inlinedAt: !1674)
!1761 = !DILocation(line: 682, column: 45, scope: !1754, inlinedAt: !1674)
!1762 = !DILocation(line: 683, column: 8, scope: !1754, inlinedAt: !1674)
!1763 = !DILocation(line: 683, column: 33, scope: !1754, inlinedAt: !1674)
!1764 = !DILocation(line: 683, column: 27, scope: !1754, inlinedAt: !1674)
!1765 = !DILocation(line: 684, column: 8, scope: !1754, inlinedAt: !1674)
!1766 = !DILocation(line: 684, column: 25, scope: !1754, inlinedAt: !1674)
!1767 = !DILocation(line: 685, column: 8, scope: !1754, inlinedAt: !1674)
!1768 = !DILocation(line: 685, column: 25, scope: !1754, inlinedAt: !1674)
!1769 = !DILocation(line: 686, column: 18, scope: !1754, inlinedAt: !1674)
!1770 = !DILocation(line: 686, column: 12, scope: !1754, inlinedAt: !1674)
!1771 = !DILocation(line: 688, column: 7, scope: !1751, inlinedAt: !1674)
!1772 = !DILocation(line: 688, column: 12, scope: !1751, inlinedAt: !1674)
!1773 = !DILocation(line: 688, column: 30, scope: !1751, inlinedAt: !1674)
!1774 = !DILocation(line: 690, column: 8, scope: !1775, inlinedAt: !1674)
!1775 = distinct !DILexicalBlock(scope: !1751, file: !2, line: 690, column: 4)
!1776 = !DILocalVariable(name: "new_value", scope: !1777, file: !2, line: 692, type: !1666, align: 16)
!1777 = distinct !DILexicalBlock(scope: !1775, file: !2, line: 691, column: 4)
!1778 = !DILocation(line: 692, column: 11, scope: !1777, inlinedAt: !1674)
!1779 = !DILocation(line: 692, column: 23, scope: !1777, inlinedAt: !1674)
!1780 = !DILocation(line: 692, column: 31, scope: !1777, inlinedAt: !1674)
!1781 = !DILocation(line: 692, column: 43, scope: !1777, inlinedAt: !1674)
!1782 = !DILocation(line: 693, column: 9, scope: !1777, inlinedAt: !1674)
!1783 = !DILocation(line: 693, column: 21, scope: !1777, inlinedAt: !1674)
!1784 = !DILocation(line: 693, column: 35, scope: !1777, inlinedAt: !1674)
!1785 = !DILocation(line: 694, column: 12, scope: !1777, inlinedAt: !1674)
!1786 = !DILocalVariable(name: "new_value", scope: !1775, file: !2, line: 696, type: !1666, align: 16)
!1787 = !DILocation(line: 696, column: 10, scope: !1775, inlinedAt: !1674)
!1788 = !DILocation(line: 696, column: 22, scope: !1775, inlinedAt: !1674)
!1789 = !DILocation(line: 696, column: 30, scope: !1775, inlinedAt: !1674)
!1790 = !DILocation(line: 696, column: 42, scope: !1775, inlinedAt: !1674)
!1791 = !DILocation(line: 697, column: 8, scope: !1775, inlinedAt: !1674)
!1792 = !DILocation(line: 697, column: 20, scope: !1775, inlinedAt: !1674)
!1793 = !DILocation(line: 697, column: 34, scope: !1775, inlinedAt: !1674)
!1794 = !DILocation(line: 698, column: 11, scope: !1775, inlinedAt: !1674)
!1795 = !DILocation(line: 701, column: 9, scope: !1673, inlinedAt: !1674)
!1796 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 711, type: !1797, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1797 = !DISubroutineType(types: !1798)
!1798 = !{!324, !1799, !56, !18}
!1799 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !64, size: 64, align: 64, dwarfAddressSpace: 0)
!1800 = !DILocalVariable(name: "s", arg: 1, scope: !1796, file: !2, line: 711, type: !56)
!1801 = !DILocation(line: 711, column: 27, scope: !1796)
!1802 = !DILocalVariable(name: "base", arg: 2, scope: !1796, file: !2, line: 711, type: !18)
!1803 = !DILocation(line: 711, column: 34, scope: !1796)
!1804 = !DILocation(line: 631, column: 12, scope: !1805, inlinedAt: !1807)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !2, line: 634, column: 1)
!1806 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1807 = !DILocation(line: 711, column: 48, scope: !1796)
!1808 = !DILocation(line: 631, column: 26, scope: !1805, inlinedAt: !1807)
!1809 = !DILocation(line: 631, column: 39, scope: !1805, inlinedAt: !1807)
!1810 = !DILocalVariable(name: "len", scope: !1806, file: !2, line: 635, type: !63, align: 8)
!1811 = !DILocation(line: 635, column: 6, scope: !1806, inlinedAt: !1807)
!1812 = !DILocation(line: 635, column: 12, scope: !1806, inlinedAt: !1807)
!1813 = !DILocalVariable(name: "index", scope: !1806, file: !2, line: 636, type: !63, align: 8)
!1814 = !DILocation(line: 636, column: 6, scope: !1806, inlinedAt: !1807)
!1815 = !DILocation(line: 636, column: 14, scope: !1806, inlinedAt: !1807)
!1816 = !DILocalVariable(name: "ptr", scope: !1806, file: !2, line: 637, type: !60, align: 8)
!1817 = !DILocation(line: 637, column: 8, scope: !1806, inlinedAt: !1807)
!1818 = !DILocation(line: 637, column: 14, scope: !1806, inlinedAt: !1807)
!1819 = !DILocation(line: 638, column: 2, scope: !1806, inlinedAt: !1807)
!1820 = !DILocation(line: 638, column: 9, scope: !1821, inlinedAt: !1807)
!1821 = distinct !DILexicalBlock(scope: !1806, file: !2, line: 638, column: 2)
!1822 = !DILocation(line: 638, column: 17, scope: !1821, inlinedAt: !1807)
!1823 = !DILocation(line: 638, column: 42, scope: !1821, inlinedAt: !1807)
!1824 = !DILocation(line: 638, column: 46, scope: !1821, inlinedAt: !1807)
!1825 = !DILocation(line: 16, column: 29, scope: !1826, inlinedAt: !1827)
!1826 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1827 = !DILocation(line: 638, column: 31, scope: !1821, inlinedAt: !1807)
!1828 = !DILocation(line: 16, column: 42, scope: !1826, inlinedAt: !1827)
!1829 = !DILocation(line: 638, column: 55, scope: !1821, inlinedAt: !1807)
!1830 = !DILocation(line: 639, column: 6, scope: !1806, inlinedAt: !1807)
!1831 = !DILocation(line: 639, column: 13, scope: !1806, inlinedAt: !1807)
!1832 = !DILocation(line: 639, column: 27, scope: !1806, inlinedAt: !1807)
!1833 = !DILocalVariable(name: "is_negative", scope: !1806, file: !2, line: 640, type: !128, align: 1)
!1834 = !DILocation(line: 640, column: 7, scope: !1806, inlinedAt: !1807)
!1835 = !DILocation(line: 641, column: 10, scope: !1836, inlinedAt: !1807)
!1836 = distinct !DILexicalBlock(scope: !1806, file: !2, line: 641, column: 2)
!1837 = !DILocation(line: 641, column: 17, scope: !1836, inlinedAt: !1807)
!1838 = !DILocation(line: 644, column: 8, scope: !1839, inlinedAt: !1807)
!1839 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 644, column: 4)
!1840 = !DILocation(line: 644, column: 31, scope: !1839, inlinedAt: !1807)
!1841 = !DILocation(line: 648, column: 4, scope: !1842, inlinedAt: !1807)
!1842 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 648, column: 4)
!1843 = !DILocation(line: 650, column: 4, scope: !1844, inlinedAt: !1807)
!1844 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 650, column: 4)
!1845 = !DILocation(line: 652, column: 6, scope: !1806, inlinedAt: !1807)
!1846 = !DILocation(line: 652, column: 13, scope: !1806, inlinedAt: !1807)
!1847 = !DILocation(line: 652, column: 27, scope: !1806, inlinedAt: !1807)
!1848 = !DILocalVariable(name: "base_used", scope: !1806, file: !2, line: 653, type: !64, align: 8)
!1849 = !DILocation(line: 653, column: 8, scope: !1806, inlinedAt: !1807)
!1850 = !DILocation(line: 653, column: 21, scope: !1806, inlinedAt: !1807)
!1851 = !DILocation(line: 654, column: 6, scope: !1806, inlinedAt: !1807)
!1852 = !DILocation(line: 654, column: 13, scope: !1806, inlinedAt: !1807)
!1853 = !DILocation(line: 654, column: 30, scope: !1806, inlinedAt: !1807)
!1854 = !DILocation(line: 656, column: 3, scope: !1855, inlinedAt: !1807)
!1855 = distinct !DILexicalBlock(scope: !1806, file: !2, line: 655, column: 2)
!1856 = !DILocation(line: 657, column: 7, scope: !1855, inlinedAt: !1807)
!1857 = !DILocation(line: 657, column: 16, scope: !1855, inlinedAt: !1807)
!1858 = !DILocation(line: 657, column: 29, scope: !1855, inlinedAt: !1807)
!1859 = !DILocation(line: 658, column: 11, scope: !1860, inlinedAt: !1807)
!1860 = distinct !DILexicalBlock(scope: !1855, file: !2, line: 658, column: 3)
!1861 = !DILocation(line: 658, column: 18, scope: !1860, inlinedAt: !1807)
!1862 = !DILocation(line: 662, column: 17, scope: !1863, inlinedAt: !1807)
!1863 = distinct !DILexicalBlock(scope: !1860, file: !2, line: 662, column: 5)
!1864 = !DILocation(line: 663, column: 5, scope: !1863, inlinedAt: !1807)
!1865 = !DILocation(line: 666, column: 17, scope: !1866, inlinedAt: !1807)
!1866 = distinct !DILexicalBlock(scope: !1860, file: !2, line: 666, column: 5)
!1867 = !DILocation(line: 667, column: 5, scope: !1866, inlinedAt: !1807)
!1868 = !DILocation(line: 670, column: 17, scope: !1869, inlinedAt: !1807)
!1869 = distinct !DILexicalBlock(scope: !1860, file: !2, line: 670, column: 5)
!1870 = !DILocation(line: 671, column: 5, scope: !1869, inlinedAt: !1807)
!1871 = !DILocation(line: 673, column: 5, scope: !1872, inlinedAt: !1807)
!1872 = distinct !DILexicalBlock(scope: !1860, file: !2, line: 673, column: 5)
!1873 = !DILocation(line: 675, column: 7, scope: !1855, inlinedAt: !1807)
!1874 = !DILocation(line: 675, column: 14, scope: !1855, inlinedAt: !1807)
!1875 = !DILocation(line: 675, column: 28, scope: !1855, inlinedAt: !1807)
!1876 = !DILocalVariable(name: "value", scope: !1806, file: !2, line: 677, type: !64, align: 8)
!1877 = !DILocation(line: 677, column: 8, scope: !1806, inlinedAt: !1807)
!1878 = !DILocation(line: 677, column: 16, scope: !1806, inlinedAt: !1807)
!1879 = !DILocation(line: 678, column: 2, scope: !1806, inlinedAt: !1807)
!1880 = !DILocation(line: 678, column: 9, scope: !1881, inlinedAt: !1807)
!1881 = distinct !DILexicalBlock(scope: !1806, file: !2, line: 678, column: 2)
!1882 = !DILocation(line: 678, column: 18, scope: !1881, inlinedAt: !1807)
!1883 = !DILocalVariable(name: "c", scope: !1884, file: !2, line: 680, type: !61, align: 1)
!1884 = distinct !DILexicalBlock(scope: !1881, file: !2, line: 679, column: 2)
!1885 = !DILocation(line: 680, column: 8, scope: !1884, inlinedAt: !1807)
!1886 = !DILocalVariable(name: "ch", scope: !1887, file: !2, line: 681, type: !61, align: 1)
!1887 = distinct !DILexicalBlock(scope: !1884, file: !2, line: 681, column: 4)
!1888 = !DILocation(line: 681, column: 9, scope: !1887, inlinedAt: !1807)
!1889 = !DILocation(line: 681, column: 14, scope: !1887, inlinedAt: !1807)
!1890 = !DILocation(line: 681, column: 21, scope: !1887, inlinedAt: !1807)
!1891 = !DILocation(line: 682, column: 8, scope: !1887, inlinedAt: !1807)
!1892 = !DILocation(line: 682, column: 27, scope: !1887, inlinedAt: !1807)
!1893 = !DILocation(line: 682, column: 51, scope: !1887, inlinedAt: !1807)
!1894 = !DILocation(line: 682, column: 45, scope: !1887, inlinedAt: !1807)
!1895 = !DILocation(line: 683, column: 8, scope: !1887, inlinedAt: !1807)
!1896 = !DILocation(line: 683, column: 33, scope: !1887, inlinedAt: !1807)
!1897 = !DILocation(line: 683, column: 27, scope: !1887, inlinedAt: !1807)
!1898 = !DILocation(line: 684, column: 8, scope: !1887, inlinedAt: !1807)
!1899 = !DILocation(line: 684, column: 25, scope: !1887, inlinedAt: !1807)
!1900 = !DILocation(line: 685, column: 8, scope: !1887, inlinedAt: !1807)
!1901 = !DILocation(line: 685, column: 25, scope: !1887, inlinedAt: !1807)
!1902 = !DILocation(line: 686, column: 18, scope: !1887, inlinedAt: !1807)
!1903 = !DILocation(line: 686, column: 12, scope: !1887, inlinedAt: !1807)
!1904 = !DILocation(line: 688, column: 7, scope: !1884, inlinedAt: !1807)
!1905 = !DILocation(line: 688, column: 12, scope: !1884, inlinedAt: !1807)
!1906 = !DILocation(line: 688, column: 30, scope: !1884, inlinedAt: !1807)
!1907 = !DILocation(line: 690, column: 8, scope: !1908, inlinedAt: !1807)
!1908 = distinct !DILexicalBlock(scope: !1884, file: !2, line: 690, column: 4)
!1909 = !DILocalVariable(name: "new_value", scope: !1910, file: !2, line: 692, type: !64, align: 8)
!1910 = distinct !DILexicalBlock(scope: !1908, file: !2, line: 691, column: 4)
!1911 = !DILocation(line: 692, column: 11, scope: !1910, inlinedAt: !1807)
!1912 = !DILocation(line: 692, column: 23, scope: !1910, inlinedAt: !1807)
!1913 = !DILocation(line: 692, column: 31, scope: !1910, inlinedAt: !1807)
!1914 = !DILocation(line: 692, column: 43, scope: !1910, inlinedAt: !1807)
!1915 = !DILocation(line: 693, column: 9, scope: !1910, inlinedAt: !1807)
!1916 = !DILocation(line: 693, column: 21, scope: !1910, inlinedAt: !1807)
!1917 = !DILocation(line: 693, column: 35, scope: !1910, inlinedAt: !1807)
!1918 = !DILocation(line: 694, column: 12, scope: !1910, inlinedAt: !1807)
!1919 = !DILocalVariable(name: "new_value", scope: !1908, file: !2, line: 696, type: !64, align: 8)
!1920 = !DILocation(line: 696, column: 10, scope: !1908, inlinedAt: !1807)
!1921 = !DILocation(line: 696, column: 22, scope: !1908, inlinedAt: !1807)
!1922 = !DILocation(line: 696, column: 30, scope: !1908, inlinedAt: !1807)
!1923 = !DILocation(line: 696, column: 42, scope: !1908, inlinedAt: !1807)
!1924 = !DILocation(line: 697, column: 8, scope: !1908, inlinedAt: !1807)
!1925 = !DILocation(line: 697, column: 20, scope: !1908, inlinedAt: !1807)
!1926 = !DILocation(line: 697, column: 34, scope: !1908, inlinedAt: !1807)
!1927 = !DILocation(line: 698, column: 11, scope: !1908, inlinedAt: !1807)
!1928 = !DILocation(line: 701, column: 9, scope: !1806, inlinedAt: !1807)
!1929 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 712, type: !1930, scopeLine: 712, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1930 = !DISubroutineType(types: !1931)
!1931 = !{!324, !1932, !56, !18}
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1933 = !DILocalVariable(name: "s", arg: 1, scope: !1929, file: !2, line: 712, type: !56)
!1934 = !DILocation(line: 712, column: 25, scope: !1929)
!1935 = !DILocalVariable(name: "base", arg: 2, scope: !1929, file: !2, line: 712, type: !18)
!1936 = !DILocation(line: 712, column: 32, scope: !1929)
!1937 = !DILocation(line: 631, column: 12, scope: !1938, inlinedAt: !1940)
!1938 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 634, column: 1)
!1939 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!1940 = !DILocation(line: 712, column: 46, scope: !1929)
!1941 = !DILocation(line: 631, column: 26, scope: !1938, inlinedAt: !1940)
!1942 = !DILocation(line: 631, column: 39, scope: !1938, inlinedAt: !1940)
!1943 = !DILocalVariable(name: "len", scope: !1939, file: !2, line: 635, type: !63, align: 8)
!1944 = !DILocation(line: 635, column: 6, scope: !1939, inlinedAt: !1940)
!1945 = !DILocation(line: 635, column: 12, scope: !1939, inlinedAt: !1940)
!1946 = !DILocalVariable(name: "index", scope: !1939, file: !2, line: 636, type: !63, align: 8)
!1947 = !DILocation(line: 636, column: 6, scope: !1939, inlinedAt: !1940)
!1948 = !DILocation(line: 636, column: 14, scope: !1939, inlinedAt: !1940)
!1949 = !DILocalVariable(name: "ptr", scope: !1939, file: !2, line: 637, type: !60, align: 8)
!1950 = !DILocation(line: 637, column: 8, scope: !1939, inlinedAt: !1940)
!1951 = !DILocation(line: 637, column: 14, scope: !1939, inlinedAt: !1940)
!1952 = !DILocation(line: 638, column: 2, scope: !1939, inlinedAt: !1940)
!1953 = !DILocation(line: 638, column: 9, scope: !1954, inlinedAt: !1940)
!1954 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 638, column: 2)
!1955 = !DILocation(line: 638, column: 17, scope: !1954, inlinedAt: !1940)
!1956 = !DILocation(line: 638, column: 42, scope: !1954, inlinedAt: !1940)
!1957 = !DILocation(line: 638, column: 46, scope: !1954, inlinedAt: !1940)
!1958 = !DILocation(line: 16, column: 29, scope: !1959, inlinedAt: !1960)
!1959 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!1960 = !DILocation(line: 638, column: 31, scope: !1954, inlinedAt: !1940)
!1961 = !DILocation(line: 16, column: 42, scope: !1959, inlinedAt: !1960)
!1962 = !DILocation(line: 638, column: 55, scope: !1954, inlinedAt: !1940)
!1963 = !DILocation(line: 639, column: 6, scope: !1939, inlinedAt: !1940)
!1964 = !DILocation(line: 639, column: 13, scope: !1939, inlinedAt: !1940)
!1965 = !DILocation(line: 639, column: 27, scope: !1939, inlinedAt: !1940)
!1966 = !DILocalVariable(name: "is_negative", scope: !1939, file: !2, line: 640, type: !128, align: 1)
!1967 = !DILocation(line: 640, column: 7, scope: !1939, inlinedAt: !1940)
!1968 = !DILocation(line: 641, column: 10, scope: !1969, inlinedAt: !1940)
!1969 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 641, column: 2)
!1970 = !DILocation(line: 641, column: 17, scope: !1969, inlinedAt: !1940)
!1971 = !DILocation(line: 644, column: 8, scope: !1972, inlinedAt: !1940)
!1972 = distinct !DILexicalBlock(scope: !1969, file: !2, line: 644, column: 4)
!1973 = !DILocation(line: 644, column: 31, scope: !1972, inlinedAt: !1940)
!1974 = !DILocation(line: 648, column: 4, scope: !1975, inlinedAt: !1940)
!1975 = distinct !DILexicalBlock(scope: !1969, file: !2, line: 648, column: 4)
!1976 = !DILocation(line: 650, column: 4, scope: !1977, inlinedAt: !1940)
!1977 = distinct !DILexicalBlock(scope: !1969, file: !2, line: 650, column: 4)
!1978 = !DILocation(line: 652, column: 6, scope: !1939, inlinedAt: !1940)
!1979 = !DILocation(line: 652, column: 13, scope: !1939, inlinedAt: !1940)
!1980 = !DILocation(line: 652, column: 27, scope: !1939, inlinedAt: !1940)
!1981 = !DILocalVariable(name: "base_used", scope: !1939, file: !2, line: 653, type: !3, align: 4)
!1982 = !DILocation(line: 653, column: 8, scope: !1939, inlinedAt: !1940)
!1983 = !DILocation(line: 653, column: 21, scope: !1939, inlinedAt: !1940)
!1984 = !DILocation(line: 654, column: 6, scope: !1939, inlinedAt: !1940)
!1985 = !DILocation(line: 654, column: 13, scope: !1939, inlinedAt: !1940)
!1986 = !DILocation(line: 654, column: 30, scope: !1939, inlinedAt: !1940)
!1987 = !DILocation(line: 656, column: 3, scope: !1988, inlinedAt: !1940)
!1988 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 655, column: 2)
!1989 = !DILocation(line: 657, column: 7, scope: !1988, inlinedAt: !1940)
!1990 = !DILocation(line: 657, column: 16, scope: !1988, inlinedAt: !1940)
!1991 = !DILocation(line: 657, column: 29, scope: !1988, inlinedAt: !1940)
!1992 = !DILocation(line: 658, column: 11, scope: !1993, inlinedAt: !1940)
!1993 = distinct !DILexicalBlock(scope: !1988, file: !2, line: 658, column: 3)
!1994 = !DILocation(line: 658, column: 18, scope: !1993, inlinedAt: !1940)
!1995 = !DILocation(line: 662, column: 17, scope: !1996, inlinedAt: !1940)
!1996 = distinct !DILexicalBlock(scope: !1993, file: !2, line: 662, column: 5)
!1997 = !DILocation(line: 663, column: 5, scope: !1996, inlinedAt: !1940)
!1998 = !DILocation(line: 666, column: 17, scope: !1999, inlinedAt: !1940)
!1999 = distinct !DILexicalBlock(scope: !1993, file: !2, line: 666, column: 5)
!2000 = !DILocation(line: 667, column: 5, scope: !1999, inlinedAt: !1940)
!2001 = !DILocation(line: 670, column: 17, scope: !2002, inlinedAt: !1940)
!2002 = distinct !DILexicalBlock(scope: !1993, file: !2, line: 670, column: 5)
!2003 = !DILocation(line: 671, column: 5, scope: !2002, inlinedAt: !1940)
!2004 = !DILocation(line: 673, column: 5, scope: !2005, inlinedAt: !1940)
!2005 = distinct !DILexicalBlock(scope: !1993, file: !2, line: 673, column: 5)
!2006 = !DILocation(line: 675, column: 7, scope: !1988, inlinedAt: !1940)
!2007 = !DILocation(line: 675, column: 14, scope: !1988, inlinedAt: !1940)
!2008 = !DILocation(line: 675, column: 28, scope: !1988, inlinedAt: !1940)
!2009 = !DILocalVariable(name: "value", scope: !1939, file: !2, line: 677, type: !3, align: 4)
!2010 = !DILocation(line: 677, column: 8, scope: !1939, inlinedAt: !1940)
!2011 = !DILocation(line: 677, column: 16, scope: !1939, inlinedAt: !1940)
!2012 = !DILocation(line: 678, column: 2, scope: !1939, inlinedAt: !1940)
!2013 = !DILocation(line: 678, column: 9, scope: !2014, inlinedAt: !1940)
!2014 = distinct !DILexicalBlock(scope: !1939, file: !2, line: 678, column: 2)
!2015 = !DILocation(line: 678, column: 18, scope: !2014, inlinedAt: !1940)
!2016 = !DILocalVariable(name: "c", scope: !2017, file: !2, line: 680, type: !61, align: 1)
!2017 = distinct !DILexicalBlock(scope: !2014, file: !2, line: 679, column: 2)
!2018 = !DILocation(line: 680, column: 8, scope: !2017, inlinedAt: !1940)
!2019 = !DILocalVariable(name: "ch", scope: !2020, file: !2, line: 681, type: !61, align: 1)
!2020 = distinct !DILexicalBlock(scope: !2017, file: !2, line: 681, column: 4)
!2021 = !DILocation(line: 681, column: 9, scope: !2020, inlinedAt: !1940)
!2022 = !DILocation(line: 681, column: 14, scope: !2020, inlinedAt: !1940)
!2023 = !DILocation(line: 681, column: 21, scope: !2020, inlinedAt: !1940)
!2024 = !DILocation(line: 682, column: 8, scope: !2020, inlinedAt: !1940)
!2025 = !DILocation(line: 682, column: 27, scope: !2020, inlinedAt: !1940)
!2026 = !DILocation(line: 682, column: 51, scope: !2020, inlinedAt: !1940)
!2027 = !DILocation(line: 682, column: 45, scope: !2020, inlinedAt: !1940)
!2028 = !DILocation(line: 683, column: 8, scope: !2020, inlinedAt: !1940)
!2029 = !DILocation(line: 683, column: 33, scope: !2020, inlinedAt: !1940)
!2030 = !DILocation(line: 683, column: 27, scope: !2020, inlinedAt: !1940)
!2031 = !DILocation(line: 684, column: 8, scope: !2020, inlinedAt: !1940)
!2032 = !DILocation(line: 684, column: 25, scope: !2020, inlinedAt: !1940)
!2033 = !DILocation(line: 685, column: 8, scope: !2020, inlinedAt: !1940)
!2034 = !DILocation(line: 685, column: 25, scope: !2020, inlinedAt: !1940)
!2035 = !DILocation(line: 686, column: 18, scope: !2020, inlinedAt: !1940)
!2036 = !DILocation(line: 686, column: 12, scope: !2020, inlinedAt: !1940)
!2037 = !DILocation(line: 688, column: 7, scope: !2017, inlinedAt: !1940)
!2038 = !DILocation(line: 688, column: 12, scope: !2017, inlinedAt: !1940)
!2039 = !DILocation(line: 688, column: 30, scope: !2017, inlinedAt: !1940)
!2040 = !DILocation(line: 690, column: 8, scope: !2041, inlinedAt: !1940)
!2041 = distinct !DILexicalBlock(scope: !2017, file: !2, line: 690, column: 4)
!2042 = !DILocalVariable(name: "new_value", scope: !2043, file: !2, line: 692, type: !3, align: 4)
!2043 = distinct !DILexicalBlock(scope: !2041, file: !2, line: 691, column: 4)
!2044 = !DILocation(line: 692, column: 11, scope: !2043, inlinedAt: !1940)
!2045 = !DILocation(line: 692, column: 23, scope: !2043, inlinedAt: !1940)
!2046 = !DILocation(line: 692, column: 31, scope: !2043, inlinedAt: !1940)
!2047 = !DILocation(line: 692, column: 43, scope: !2043, inlinedAt: !1940)
!2048 = !DILocation(line: 693, column: 9, scope: !2043, inlinedAt: !1940)
!2049 = !DILocation(line: 693, column: 21, scope: !2043, inlinedAt: !1940)
!2050 = !DILocation(line: 693, column: 35, scope: !2043, inlinedAt: !1940)
!2051 = !DILocation(line: 694, column: 12, scope: !2043, inlinedAt: !1940)
!2052 = !DILocalVariable(name: "new_value", scope: !2041, file: !2, line: 696, type: !3, align: 4)
!2053 = !DILocation(line: 696, column: 10, scope: !2041, inlinedAt: !1940)
!2054 = !DILocation(line: 696, column: 22, scope: !2041, inlinedAt: !1940)
!2055 = !DILocation(line: 696, column: 30, scope: !2041, inlinedAt: !1940)
!2056 = !DILocation(line: 696, column: 42, scope: !2041, inlinedAt: !1940)
!2057 = !DILocation(line: 697, column: 8, scope: !2041, inlinedAt: !1940)
!2058 = !DILocation(line: 697, column: 20, scope: !2041, inlinedAt: !1940)
!2059 = !DILocation(line: 697, column: 34, scope: !2041, inlinedAt: !1940)
!2060 = !DILocation(line: 698, column: 11, scope: !2041, inlinedAt: !1940)
!2061 = !DILocation(line: 701, column: 9, scope: !1939, inlinedAt: !1940)
!2062 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 713, type: !2063, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2063 = !DISubroutineType(types: !2064)
!2064 = !{!324, !814, !56, !18}
!2065 = !DILocalVariable(name: "s", arg: 1, scope: !2062, file: !2, line: 713, type: !56)
!2066 = !DILocation(line: 713, column: 29, scope: !2062)
!2067 = !DILocalVariable(name: "base", arg: 2, scope: !2062, file: !2, line: 713, type: !18)
!2068 = !DILocation(line: 713, column: 36, scope: !2062)
!2069 = !DILocation(line: 631, column: 12, scope: !2070, inlinedAt: !2072)
!2070 = distinct !DILexicalBlock(scope: !2071, file: !2, line: 634, column: 1)
!2071 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2072 = !DILocation(line: 713, column: 50, scope: !2062)
!2073 = !DILocation(line: 631, column: 26, scope: !2070, inlinedAt: !2072)
!2074 = !DILocation(line: 631, column: 39, scope: !2070, inlinedAt: !2072)
!2075 = !DILocalVariable(name: "len", scope: !2071, file: !2, line: 635, type: !63, align: 8)
!2076 = !DILocation(line: 635, column: 6, scope: !2071, inlinedAt: !2072)
!2077 = !DILocation(line: 635, column: 12, scope: !2071, inlinedAt: !2072)
!2078 = !DILocalVariable(name: "index", scope: !2071, file: !2, line: 636, type: !63, align: 8)
!2079 = !DILocation(line: 636, column: 6, scope: !2071, inlinedAt: !2072)
!2080 = !DILocation(line: 636, column: 14, scope: !2071, inlinedAt: !2072)
!2081 = !DILocalVariable(name: "ptr", scope: !2071, file: !2, line: 637, type: !60, align: 8)
!2082 = !DILocation(line: 637, column: 8, scope: !2071, inlinedAt: !2072)
!2083 = !DILocation(line: 637, column: 14, scope: !2071, inlinedAt: !2072)
!2084 = !DILocation(line: 638, column: 2, scope: !2071, inlinedAt: !2072)
!2085 = !DILocation(line: 638, column: 9, scope: !2086, inlinedAt: !2072)
!2086 = distinct !DILexicalBlock(scope: !2071, file: !2, line: 638, column: 2)
!2087 = !DILocation(line: 638, column: 17, scope: !2086, inlinedAt: !2072)
!2088 = !DILocation(line: 638, column: 42, scope: !2086, inlinedAt: !2072)
!2089 = !DILocation(line: 638, column: 46, scope: !2086, inlinedAt: !2072)
!2090 = !DILocation(line: 16, column: 29, scope: !2091, inlinedAt: !2092)
!2091 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2092 = !DILocation(line: 638, column: 31, scope: !2086, inlinedAt: !2072)
!2093 = !DILocation(line: 16, column: 42, scope: !2091, inlinedAt: !2092)
!2094 = !DILocation(line: 638, column: 55, scope: !2086, inlinedAt: !2072)
!2095 = !DILocation(line: 639, column: 6, scope: !2071, inlinedAt: !2072)
!2096 = !DILocation(line: 639, column: 13, scope: !2071, inlinedAt: !2072)
!2097 = !DILocation(line: 639, column: 27, scope: !2071, inlinedAt: !2072)
!2098 = !DILocalVariable(name: "is_negative", scope: !2071, file: !2, line: 640, type: !128, align: 1)
!2099 = !DILocation(line: 640, column: 7, scope: !2071, inlinedAt: !2072)
!2100 = !DILocation(line: 641, column: 10, scope: !2101, inlinedAt: !2072)
!2101 = distinct !DILexicalBlock(scope: !2071, file: !2, line: 641, column: 2)
!2102 = !DILocation(line: 641, column: 17, scope: !2101, inlinedAt: !2072)
!2103 = !DILocation(line: 644, column: 8, scope: !2104, inlinedAt: !2072)
!2104 = distinct !DILexicalBlock(scope: !2101, file: !2, line: 644, column: 4)
!2105 = !DILocation(line: 644, column: 31, scope: !2104, inlinedAt: !2072)
!2106 = !DILocation(line: 648, column: 4, scope: !2107, inlinedAt: !2072)
!2107 = distinct !DILexicalBlock(scope: !2101, file: !2, line: 648, column: 4)
!2108 = !DILocation(line: 650, column: 4, scope: !2109, inlinedAt: !2072)
!2109 = distinct !DILexicalBlock(scope: !2101, file: !2, line: 650, column: 4)
!2110 = !DILocation(line: 652, column: 6, scope: !2071, inlinedAt: !2072)
!2111 = !DILocation(line: 652, column: 13, scope: !2071, inlinedAt: !2072)
!2112 = !DILocation(line: 652, column: 27, scope: !2071, inlinedAt: !2072)
!2113 = !DILocalVariable(name: "base_used", scope: !2071, file: !2, line: 653, type: !767, align: 2)
!2114 = !DILocation(line: 653, column: 8, scope: !2071, inlinedAt: !2072)
!2115 = !DILocation(line: 653, column: 21, scope: !2071, inlinedAt: !2072)
!2116 = !DILocation(line: 654, column: 6, scope: !2071, inlinedAt: !2072)
!2117 = !DILocation(line: 654, column: 13, scope: !2071, inlinedAt: !2072)
!2118 = !DILocation(line: 654, column: 30, scope: !2071, inlinedAt: !2072)
!2119 = !DILocation(line: 656, column: 3, scope: !2120, inlinedAt: !2072)
!2120 = distinct !DILexicalBlock(scope: !2071, file: !2, line: 655, column: 2)
!2121 = !DILocation(line: 657, column: 7, scope: !2120, inlinedAt: !2072)
!2122 = !DILocation(line: 657, column: 16, scope: !2120, inlinedAt: !2072)
!2123 = !DILocation(line: 657, column: 29, scope: !2120, inlinedAt: !2072)
!2124 = !DILocation(line: 658, column: 11, scope: !2125, inlinedAt: !2072)
!2125 = distinct !DILexicalBlock(scope: !2120, file: !2, line: 658, column: 3)
!2126 = !DILocation(line: 658, column: 18, scope: !2125, inlinedAt: !2072)
!2127 = !DILocation(line: 662, column: 17, scope: !2128, inlinedAt: !2072)
!2128 = distinct !DILexicalBlock(scope: !2125, file: !2, line: 662, column: 5)
!2129 = !DILocation(line: 663, column: 5, scope: !2128, inlinedAt: !2072)
!2130 = !DILocation(line: 666, column: 17, scope: !2131, inlinedAt: !2072)
!2131 = distinct !DILexicalBlock(scope: !2125, file: !2, line: 666, column: 5)
!2132 = !DILocation(line: 667, column: 5, scope: !2131, inlinedAt: !2072)
!2133 = !DILocation(line: 670, column: 17, scope: !2134, inlinedAt: !2072)
!2134 = distinct !DILexicalBlock(scope: !2125, file: !2, line: 670, column: 5)
!2135 = !DILocation(line: 671, column: 5, scope: !2134, inlinedAt: !2072)
!2136 = !DILocation(line: 673, column: 5, scope: !2137, inlinedAt: !2072)
!2137 = distinct !DILexicalBlock(scope: !2125, file: !2, line: 673, column: 5)
!2138 = !DILocation(line: 675, column: 7, scope: !2120, inlinedAt: !2072)
!2139 = !DILocation(line: 675, column: 14, scope: !2120, inlinedAt: !2072)
!2140 = !DILocation(line: 675, column: 28, scope: !2120, inlinedAt: !2072)
!2141 = !DILocalVariable(name: "value", scope: !2071, file: !2, line: 677, type: !767, align: 2)
!2142 = !DILocation(line: 677, column: 8, scope: !2071, inlinedAt: !2072)
!2143 = !DILocation(line: 677, column: 16, scope: !2071, inlinedAt: !2072)
!2144 = !DILocation(line: 678, column: 2, scope: !2071, inlinedAt: !2072)
!2145 = !DILocation(line: 678, column: 9, scope: !2146, inlinedAt: !2072)
!2146 = distinct !DILexicalBlock(scope: !2071, file: !2, line: 678, column: 2)
!2147 = !DILocation(line: 678, column: 18, scope: !2146, inlinedAt: !2072)
!2148 = !DILocalVariable(name: "c", scope: !2149, file: !2, line: 680, type: !61, align: 1)
!2149 = distinct !DILexicalBlock(scope: !2146, file: !2, line: 679, column: 2)
!2150 = !DILocation(line: 680, column: 8, scope: !2149, inlinedAt: !2072)
!2151 = !DILocalVariable(name: "ch", scope: !2152, file: !2, line: 681, type: !61, align: 1)
!2152 = distinct !DILexicalBlock(scope: !2149, file: !2, line: 681, column: 4)
!2153 = !DILocation(line: 681, column: 9, scope: !2152, inlinedAt: !2072)
!2154 = !DILocation(line: 681, column: 14, scope: !2152, inlinedAt: !2072)
!2155 = !DILocation(line: 681, column: 21, scope: !2152, inlinedAt: !2072)
!2156 = !DILocation(line: 682, column: 8, scope: !2152, inlinedAt: !2072)
!2157 = !DILocation(line: 682, column: 27, scope: !2152, inlinedAt: !2072)
!2158 = !DILocation(line: 682, column: 51, scope: !2152, inlinedAt: !2072)
!2159 = !DILocation(line: 682, column: 45, scope: !2152, inlinedAt: !2072)
!2160 = !DILocation(line: 683, column: 8, scope: !2152, inlinedAt: !2072)
!2161 = !DILocation(line: 683, column: 33, scope: !2152, inlinedAt: !2072)
!2162 = !DILocation(line: 683, column: 27, scope: !2152, inlinedAt: !2072)
!2163 = !DILocation(line: 684, column: 8, scope: !2152, inlinedAt: !2072)
!2164 = !DILocation(line: 684, column: 25, scope: !2152, inlinedAt: !2072)
!2165 = !DILocation(line: 685, column: 8, scope: !2152, inlinedAt: !2072)
!2166 = !DILocation(line: 685, column: 25, scope: !2152, inlinedAt: !2072)
!2167 = !DILocation(line: 686, column: 18, scope: !2152, inlinedAt: !2072)
!2168 = !DILocation(line: 686, column: 12, scope: !2152, inlinedAt: !2072)
!2169 = !DILocation(line: 688, column: 7, scope: !2149, inlinedAt: !2072)
!2170 = !DILocation(line: 688, column: 12, scope: !2149, inlinedAt: !2072)
!2171 = !DILocation(line: 688, column: 30, scope: !2149, inlinedAt: !2072)
!2172 = !DILocation(line: 690, column: 8, scope: !2173, inlinedAt: !2072)
!2173 = distinct !DILexicalBlock(scope: !2149, file: !2, line: 690, column: 4)
!2174 = !DILocalVariable(name: "new_value", scope: !2175, file: !2, line: 692, type: !767, align: 2)
!2175 = distinct !DILexicalBlock(scope: !2173, file: !2, line: 691, column: 4)
!2176 = !DILocation(line: 692, column: 11, scope: !2175, inlinedAt: !2072)
!2177 = !DILocation(line: 692, column: 23, scope: !2175, inlinedAt: !2072)
!2178 = !DILocation(line: 692, column: 31, scope: !2175, inlinedAt: !2072)
!2179 = !DILocation(line: 692, column: 43, scope: !2175, inlinedAt: !2072)
!2180 = !DILocation(line: 693, column: 9, scope: !2175, inlinedAt: !2072)
!2181 = !DILocation(line: 693, column: 21, scope: !2175, inlinedAt: !2072)
!2182 = !DILocation(line: 693, column: 35, scope: !2175, inlinedAt: !2072)
!2183 = !DILocation(line: 694, column: 12, scope: !2175, inlinedAt: !2072)
!2184 = !DILocalVariable(name: "new_value", scope: !2173, file: !2, line: 696, type: !767, align: 2)
!2185 = !DILocation(line: 696, column: 10, scope: !2173, inlinedAt: !2072)
!2186 = !DILocation(line: 696, column: 22, scope: !2173, inlinedAt: !2072)
!2187 = !DILocation(line: 696, column: 30, scope: !2173, inlinedAt: !2072)
!2188 = !DILocation(line: 696, column: 42, scope: !2173, inlinedAt: !2072)
!2189 = !DILocation(line: 697, column: 8, scope: !2173, inlinedAt: !2072)
!2190 = !DILocation(line: 697, column: 20, scope: !2173, inlinedAt: !2072)
!2191 = !DILocation(line: 697, column: 34, scope: !2173, inlinedAt: !2072)
!2192 = !DILocation(line: 698, column: 11, scope: !2173, inlinedAt: !2072)
!2193 = !DILocation(line: 701, column: 9, scope: !2071, inlinedAt: !2072)
!2194 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 714, type: !2195, scopeLine: 714, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2195 = !DISubroutineType(types: !2196)
!2196 = !{!324, !60, !56, !18}
!2197 = !DILocalVariable(name: "s", arg: 1, scope: !2194, file: !2, line: 714, type: !56)
!2198 = !DILocation(line: 714, column: 26, scope: !2194)
!2199 = !DILocalVariable(name: "base", arg: 2, scope: !2194, file: !2, line: 714, type: !18)
!2200 = !DILocation(line: 714, column: 33, scope: !2194)
!2201 = !DILocation(line: 631, column: 12, scope: !2202, inlinedAt: !2204)
!2202 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 634, column: 1)
!2203 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 633, scopeLine: 633, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2204 = !DILocation(line: 714, column: 47, scope: !2194)
!2205 = !DILocation(line: 631, column: 26, scope: !2202, inlinedAt: !2204)
!2206 = !DILocation(line: 631, column: 39, scope: !2202, inlinedAt: !2204)
!2207 = !DILocalVariable(name: "len", scope: !2203, file: !2, line: 635, type: !63, align: 8)
!2208 = !DILocation(line: 635, column: 6, scope: !2203, inlinedAt: !2204)
!2209 = !DILocation(line: 635, column: 12, scope: !2203, inlinedAt: !2204)
!2210 = !DILocalVariable(name: "index", scope: !2203, file: !2, line: 636, type: !63, align: 8)
!2211 = !DILocation(line: 636, column: 6, scope: !2203, inlinedAt: !2204)
!2212 = !DILocation(line: 636, column: 14, scope: !2203, inlinedAt: !2204)
!2213 = !DILocalVariable(name: "ptr", scope: !2203, file: !2, line: 637, type: !60, align: 8)
!2214 = !DILocation(line: 637, column: 8, scope: !2203, inlinedAt: !2204)
!2215 = !DILocation(line: 637, column: 14, scope: !2203, inlinedAt: !2204)
!2216 = !DILocation(line: 638, column: 2, scope: !2203, inlinedAt: !2204)
!2217 = !DILocation(line: 638, column: 9, scope: !2218, inlinedAt: !2204)
!2218 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 638, column: 2)
!2219 = !DILocation(line: 638, column: 17, scope: !2218, inlinedAt: !2204)
!2220 = !DILocation(line: 638, column: 42, scope: !2218, inlinedAt: !2204)
!2221 = !DILocation(line: 638, column: 46, scope: !2218, inlinedAt: !2204)
!2222 = !DILocation(line: 16, column: 29, scope: !2223, inlinedAt: !2224)
!2223 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1020, file: !1020, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2224 = !DILocation(line: 638, column: 31, scope: !2218, inlinedAt: !2204)
!2225 = !DILocation(line: 16, column: 42, scope: !2223, inlinedAt: !2224)
!2226 = !DILocation(line: 638, column: 55, scope: !2218, inlinedAt: !2204)
!2227 = !DILocation(line: 639, column: 6, scope: !2203, inlinedAt: !2204)
!2228 = !DILocation(line: 639, column: 13, scope: !2203, inlinedAt: !2204)
!2229 = !DILocation(line: 639, column: 27, scope: !2203, inlinedAt: !2204)
!2230 = !DILocalVariable(name: "is_negative", scope: !2203, file: !2, line: 640, type: !128, align: 1)
!2231 = !DILocation(line: 640, column: 7, scope: !2203, inlinedAt: !2204)
!2232 = !DILocation(line: 641, column: 10, scope: !2233, inlinedAt: !2204)
!2233 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 641, column: 2)
!2234 = !DILocation(line: 641, column: 17, scope: !2233, inlinedAt: !2204)
!2235 = !DILocation(line: 644, column: 8, scope: !2236, inlinedAt: !2204)
!2236 = distinct !DILexicalBlock(scope: !2233, file: !2, line: 644, column: 4)
!2237 = !DILocation(line: 644, column: 31, scope: !2236, inlinedAt: !2204)
!2238 = !DILocation(line: 648, column: 4, scope: !2239, inlinedAt: !2204)
!2239 = distinct !DILexicalBlock(scope: !2233, file: !2, line: 648, column: 4)
!2240 = !DILocation(line: 650, column: 4, scope: !2241, inlinedAt: !2204)
!2241 = distinct !DILexicalBlock(scope: !2233, file: !2, line: 650, column: 4)
!2242 = !DILocation(line: 652, column: 6, scope: !2203, inlinedAt: !2204)
!2243 = !DILocation(line: 652, column: 13, scope: !2203, inlinedAt: !2204)
!2244 = !DILocation(line: 652, column: 27, scope: !2203, inlinedAt: !2204)
!2245 = !DILocalVariable(name: "base_used", scope: !2203, file: !2, line: 653, type: !61, align: 1)
!2246 = !DILocation(line: 653, column: 8, scope: !2203, inlinedAt: !2204)
!2247 = !DILocation(line: 653, column: 21, scope: !2203, inlinedAt: !2204)
!2248 = !DILocation(line: 654, column: 6, scope: !2203, inlinedAt: !2204)
!2249 = !DILocation(line: 654, column: 13, scope: !2203, inlinedAt: !2204)
!2250 = !DILocation(line: 654, column: 30, scope: !2203, inlinedAt: !2204)
!2251 = !DILocation(line: 656, column: 3, scope: !2252, inlinedAt: !2204)
!2252 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 655, column: 2)
!2253 = !DILocation(line: 657, column: 7, scope: !2252, inlinedAt: !2204)
!2254 = !DILocation(line: 657, column: 16, scope: !2252, inlinedAt: !2204)
!2255 = !DILocation(line: 657, column: 29, scope: !2252, inlinedAt: !2204)
!2256 = !DILocation(line: 658, column: 11, scope: !2257, inlinedAt: !2204)
!2257 = distinct !DILexicalBlock(scope: !2252, file: !2, line: 658, column: 3)
!2258 = !DILocation(line: 658, column: 18, scope: !2257, inlinedAt: !2204)
!2259 = !DILocation(line: 662, column: 17, scope: !2260, inlinedAt: !2204)
!2260 = distinct !DILexicalBlock(scope: !2257, file: !2, line: 662, column: 5)
!2261 = !DILocation(line: 663, column: 5, scope: !2260, inlinedAt: !2204)
!2262 = !DILocation(line: 666, column: 17, scope: !2263, inlinedAt: !2204)
!2263 = distinct !DILexicalBlock(scope: !2257, file: !2, line: 666, column: 5)
!2264 = !DILocation(line: 667, column: 5, scope: !2263, inlinedAt: !2204)
!2265 = !DILocation(line: 670, column: 17, scope: !2266, inlinedAt: !2204)
!2266 = distinct !DILexicalBlock(scope: !2257, file: !2, line: 670, column: 5)
!2267 = !DILocation(line: 671, column: 5, scope: !2266, inlinedAt: !2204)
!2268 = !DILocation(line: 673, column: 5, scope: !2269, inlinedAt: !2204)
!2269 = distinct !DILexicalBlock(scope: !2257, file: !2, line: 673, column: 5)
!2270 = !DILocation(line: 675, column: 7, scope: !2252, inlinedAt: !2204)
!2271 = !DILocation(line: 675, column: 14, scope: !2252, inlinedAt: !2204)
!2272 = !DILocation(line: 675, column: 28, scope: !2252, inlinedAt: !2204)
!2273 = !DILocalVariable(name: "value", scope: !2203, file: !2, line: 677, type: !61, align: 1)
!2274 = !DILocation(line: 677, column: 8, scope: !2203, inlinedAt: !2204)
!2275 = !DILocation(line: 677, column: 16, scope: !2203, inlinedAt: !2204)
!2276 = !DILocation(line: 678, column: 2, scope: !2203, inlinedAt: !2204)
!2277 = !DILocation(line: 678, column: 9, scope: !2278, inlinedAt: !2204)
!2278 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 678, column: 2)
!2279 = !DILocation(line: 678, column: 18, scope: !2278, inlinedAt: !2204)
!2280 = !DILocalVariable(name: "c", scope: !2281, file: !2, line: 680, type: !61, align: 1)
!2281 = distinct !DILexicalBlock(scope: !2278, file: !2, line: 679, column: 2)
!2282 = !DILocation(line: 680, column: 8, scope: !2281, inlinedAt: !2204)
!2283 = !DILocalVariable(name: "ch", scope: !2284, file: !2, line: 681, type: !61, align: 1)
!2284 = distinct !DILexicalBlock(scope: !2281, file: !2, line: 681, column: 4)
!2285 = !DILocation(line: 681, column: 9, scope: !2284, inlinedAt: !2204)
!2286 = !DILocation(line: 681, column: 14, scope: !2284, inlinedAt: !2204)
!2287 = !DILocation(line: 681, column: 21, scope: !2284, inlinedAt: !2204)
!2288 = !DILocation(line: 682, column: 8, scope: !2284, inlinedAt: !2204)
!2289 = !DILocation(line: 682, column: 27, scope: !2284, inlinedAt: !2204)
!2290 = !DILocation(line: 682, column: 51, scope: !2284, inlinedAt: !2204)
!2291 = !DILocation(line: 682, column: 45, scope: !2284, inlinedAt: !2204)
!2292 = !DILocation(line: 683, column: 8, scope: !2284, inlinedAt: !2204)
!2293 = !DILocation(line: 683, column: 33, scope: !2284, inlinedAt: !2204)
!2294 = !DILocation(line: 683, column: 27, scope: !2284, inlinedAt: !2204)
!2295 = !DILocation(line: 684, column: 8, scope: !2284, inlinedAt: !2204)
!2296 = !DILocation(line: 684, column: 25, scope: !2284, inlinedAt: !2204)
!2297 = !DILocation(line: 685, column: 8, scope: !2284, inlinedAt: !2204)
!2298 = !DILocation(line: 685, column: 25, scope: !2284, inlinedAt: !2204)
!2299 = !DILocation(line: 686, column: 18, scope: !2284, inlinedAt: !2204)
!2300 = !DILocation(line: 686, column: 12, scope: !2284, inlinedAt: !2204)
!2301 = !DILocation(line: 688, column: 7, scope: !2281, inlinedAt: !2204)
!2302 = !DILocation(line: 688, column: 12, scope: !2281, inlinedAt: !2204)
!2303 = !DILocation(line: 688, column: 30, scope: !2281, inlinedAt: !2204)
!2304 = !DILocation(line: 690, column: 8, scope: !2305, inlinedAt: !2204)
!2305 = distinct !DILexicalBlock(scope: !2281, file: !2, line: 690, column: 4)
!2306 = !DILocalVariable(name: "new_value", scope: !2307, file: !2, line: 692, type: !61, align: 1)
!2307 = distinct !DILexicalBlock(scope: !2305, file: !2, line: 691, column: 4)
!2308 = !DILocation(line: 692, column: 11, scope: !2307, inlinedAt: !2204)
!2309 = !DILocation(line: 692, column: 23, scope: !2307, inlinedAt: !2204)
!2310 = !DILocation(line: 692, column: 31, scope: !2307, inlinedAt: !2204)
!2311 = !DILocation(line: 692, column: 43, scope: !2307, inlinedAt: !2204)
!2312 = !DILocation(line: 693, column: 9, scope: !2307, inlinedAt: !2204)
!2313 = !DILocation(line: 693, column: 21, scope: !2307, inlinedAt: !2204)
!2314 = !DILocation(line: 693, column: 35, scope: !2307, inlinedAt: !2204)
!2315 = !DILocation(line: 694, column: 12, scope: !2307, inlinedAt: !2204)
!2316 = !DILocalVariable(name: "new_value", scope: !2305, file: !2, line: 696, type: !61, align: 1)
!2317 = !DILocation(line: 696, column: 10, scope: !2305, inlinedAt: !2204)
!2318 = !DILocation(line: 696, column: 22, scope: !2305, inlinedAt: !2204)
!2319 = !DILocation(line: 696, column: 30, scope: !2305, inlinedAt: !2204)
!2320 = !DILocation(line: 696, column: 42, scope: !2305, inlinedAt: !2204)
!2321 = !DILocation(line: 697, column: 8, scope: !2305, inlinedAt: !2204)
!2322 = !DILocation(line: 697, column: 20, scope: !2305, inlinedAt: !2204)
!2323 = !DILocation(line: 697, column: 34, scope: !2305, inlinedAt: !2204)
!2324 = !DILocation(line: 698, column: 11, scope: !2305, inlinedAt: !2204)
!2325 = !DILocation(line: 701, column: 9, scope: !2203, inlinedAt: !2204)
!2326 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 716, type: !2327, scopeLine: 716, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2327 = !DISubroutineType(types: !2328)
!2328 = !{!324, !2329, !56}
!2329 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !2330, size: 64, align: 64, dwarfAddressSpace: 0)
!2330 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2331 = !DILocalVariable(name: "s", arg: 1, scope: !2326, file: !2, line: 716, type: !56)
!2332 = !DILocation(line: 716, column: 29, scope: !2326)
!2333 = !DILocalVariable(name: "sign", scope: !2334, file: !2, line: 454, type: !18, align: 4)
!2334 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2335 = !DILocation(line: 454, column: 6, scope: !2334, inlinedAt: !2336)
!2336 = !DILocation(line: 716, column: 35, scope: !2326)
!2337 = !DILocation(line: 454, column: 13, scope: !2334, inlinedAt: !2336)
!2338 = !DILocation(line: 468, column: 2, scope: !2334, inlinedAt: !2336)
!2339 = !DILocation(line: 468, column: 9, scope: !2340, inlinedAt: !2336)
!2340 = distinct !DILexicalBlock(scope: !2334, file: !41, line: 468, column: 2)
!2341 = !DILocation(line: 468, column: 22, scope: !2340, inlinedAt: !2336)
!2342 = !DILocation(line: 468, column: 28, scope: !2340, inlinedAt: !2336)
!2343 = !DILocation(line: 468, column: 47, scope: !2340, inlinedAt: !2336)
!2344 = !DILocation(line: 468, column: 53, scope: !2340, inlinedAt: !2336)
!2345 = !DILocation(line: 469, column: 7, scope: !2334, inlinedAt: !2336)
!2346 = !DILocation(line: 469, column: 25, scope: !2334, inlinedAt: !2336)
!2347 = !DILocation(line: 470, column: 10, scope: !2348, inlinedAt: !2336)
!2348 = distinct !DILexicalBlock(scope: !2334, file: !41, line: 470, column: 2)
!2349 = !DILocation(line: 470, column: 16, scope: !2348, inlinedAt: !2336)
!2350 = !DILocation(line: 473, column: 11, scope: !2351, inlinedAt: !2336)
!2351 = distinct !DILexicalBlock(scope: !2348, file: !41, line: 473, column: 4)
!2352 = !DILocation(line: 474, column: 4, scope: !2351, inlinedAt: !2336)
!2353 = !DILocation(line: 476, column: 12, scope: !2354, inlinedAt: !2336)
!2354 = distinct !DILexicalBlock(scope: !2348, file: !41, line: 476, column: 4)
!2355 = !DILocation(line: 476, column: 18, scope: !2354, inlinedAt: !2336)
!2356 = !DILocation(line: 478, column: 6, scope: !2334, inlinedAt: !2336)
!2357 = !DILocation(line: 478, column: 29, scope: !2334, inlinedAt: !2336)
!2358 = !DILocation(line: 478, column: 57, scope: !2334, inlinedAt: !2336)
!2359 = !DILocation(line: 479, column: 6, scope: !2334, inlinedAt: !2336)
!2360 = !DILocation(line: 479, column: 24, scope: !2334, inlinedAt: !2336)
!2361 = !DILocation(line: 479, column: 47, scope: !2334, inlinedAt: !2336)
!2362 = !DILocation(line: 481, column: 6, scope: !2334, inlinedAt: !2336)
!2363 = !DILocation(line: 481, column: 23, scope: !2334, inlinedAt: !2336)
!2364 = !DILocation(line: 481, column: 29, scope: !2334, inlinedAt: !2336)
!2365 = !DILocation(line: 481, column: 43, scope: !2334, inlinedAt: !2336)
!2366 = !DILocation(line: 481, column: 49, scope: !2334, inlinedAt: !2336)
!2367 = !DILocation(line: 483, column: 34, scope: !2368, inlinedAt: !2336)
!2368 = distinct !DILexicalBlock(scope: !2334, file: !41, line: 482, column: 2)
!2369 = !DILocation(line: 483, column: 40, scope: !2368, inlinedAt: !2336)
!2370 = !DILocation(line: 483, column: 27, scope: !2368, inlinedAt: !2336)
!2371 = !DILocalVariable(name: "scale", scope: !2372, file: !2, line: 330, type: !2330, align: 8)
!2372 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2373 = !DILocation(line: 330, column: 9, scope: !2372, inlinedAt: !2374)
!2374 = !DILocation(line: 483, column: 11, scope: !2368, inlinedAt: !2336)
!2375 = !DILocation(line: 330, column: 17, scope: !2372, inlinedAt: !2374)
!2376 = !DILocalVariable(name: "x", scope: !2372, file: !2, line: 331, type: !3, align: 4)
!2377 = !DILocation(line: 331, column: 7, scope: !2372, inlinedAt: !2374)
!2378 = !DILocalVariable(name: "rp", scope: !2372, file: !2, line: 332, type: !325, align: 8)
!2379 = !DILocation(line: 332, column: 7, scope: !2372, inlinedAt: !2374)
!2380 = !DILocalVariable(name: "dc", scope: !2372, file: !2, line: 333, type: !325, align: 8)
!2381 = !DILocation(line: 333, column: 7, scope: !2372, inlinedAt: !2374)
!2382 = !DILocalVariable(name: "c", scope: !2372, file: !2, line: 334, type: !61, align: 1)
!2383 = !DILocation(line: 334, column: 7, scope: !2372, inlinedAt: !2374)
!2384 = !DILocalVariable(name: "got_rad", scope: !2372, file: !2, line: 335, type: !128, align: 1)
!2385 = !DILocation(line: 335, column: 7, scope: !2372, inlinedAt: !2374)
!2386 = !DILocalVariable(name: "got_digit", scope: !2372, file: !2, line: 336, type: !128, align: 1)
!2387 = !DILocation(line: 336, column: 7, scope: !2372, inlinedAt: !2374)
!2388 = !DILocalVariable(name: "got_tail", scope: !2372, file: !2, line: 337, type: !128, align: 1)
!2389 = !DILocation(line: 337, column: 7, scope: !2372, inlinedAt: !2374)
!2390 = !DILocalVariable(name: "len", scope: !2372, file: !2, line: 338, type: !63, align: 8)
!2391 = !DILocation(line: 338, column: 6, scope: !2372, inlinedAt: !2374)
!2392 = !DILocation(line: 338, column: 12, scope: !2372, inlinedAt: !2374)
!2393 = !DILocalVariable(name: "last_char", scope: !2372, file: !2, line: 339, type: !63, align: 8)
!2394 = !DILocation(line: 339, column: 6, scope: !2372, inlinedAt: !2374)
!2395 = !DILocation(line: 339, column: 18, scope: !2372, inlinedAt: !2374)
!2396 = !DILocalVariable(name: "index", scope: !2372, file: !2, line: 340, type: !63, align: 8)
!2397 = !DILocation(line: 340, column: 6, scope: !2372, inlinedAt: !2374)
!2398 = !DILocalVariable(name: "y", scope: !2372, file: !2, line: 341, type: !2330, align: 8)
!2399 = !DILocation(line: 341, column: 9, scope: !2372, inlinedAt: !2374)
!2400 = !DILocation(line: 344, column: 2, scope: !2372, inlinedAt: !2374)
!2401 = !DILocation(line: 344, column: 14, scope: !2402, inlinedAt: !2374)
!2402 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 344, column: 2)
!2403 = !DILocation(line: 344, column: 20, scope: !2402, inlinedAt: !2374)
!2404 = !DILocation(line: 344, column: 10, scope: !2402, inlinedAt: !2374)
!2405 = !DILocation(line: 346, column: 7, scope: !2406, inlinedAt: !2374)
!2406 = distinct !DILexicalBlock(scope: !2402, file: !41, line: 345, column: 2)
!2407 = !DILocation(line: 346, column: 16, scope: !2406, inlinedAt: !2374)
!2408 = !DILocation(line: 346, column: 34, scope: !2406, inlinedAt: !2374)
!2409 = !DILocation(line: 347, column: 3, scope: !2406, inlinedAt: !2374)
!2410 = !DILocation(line: 349, column: 6, scope: !2372, inlinedAt: !2374)
!2411 = !DILocation(line: 351, column: 13, scope: !2412, inlinedAt: !2374)
!2412 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 350, column: 2)
!2413 = !DILocation(line: 352, column: 7, scope: !2412, inlinedAt: !2374)
!2414 = !DILocation(line: 352, column: 16, scope: !2412, inlinedAt: !2374)
!2415 = !DILocation(line: 354, column: 9, scope: !2416, inlinedAt: !2374)
!2416 = distinct !DILexicalBlock(scope: !2412, file: !41, line: 353, column: 3)
!2417 = !DILocation(line: 354, column: 27, scope: !2416, inlinedAt: !2374)
!2418 = !DILocation(line: 355, column: 11, scope: !2416, inlinedAt: !2374)
!2419 = !DILocation(line: 357, column: 7, scope: !2412, inlinedAt: !2374)
!2420 = !DILocation(line: 357, column: 16, scope: !2412, inlinedAt: !2374)
!2421 = !DILocation(line: 357, column: 34, scope: !2412, inlinedAt: !2374)
!2422 = !DILocation(line: 357, column: 42, scope: !2412, inlinedAt: !2374)
!2423 = !DILocation(line: 357, column: 40, scope: !2412, inlinedAt: !2374)
!2424 = !DILocation(line: 357, column: 30, scope: !2412, inlinedAt: !2374)
!2425 = !DILocation(line: 359, column: 4, scope: !2426, inlinedAt: !2374)
!2426 = distinct !DILexicalBlock(scope: !2412, file: !41, line: 358, column: 3)
!2427 = !DILocation(line: 360, column: 16, scope: !2426, inlinedAt: !2374)
!2428 = !DILocation(line: 361, column: 4, scope: !2426, inlinedAt: !2374)
!2429 = !DILocation(line: 361, column: 11, scope: !2430, inlinedAt: !2374)
!2430 = distinct !DILexicalBlock(scope: !2426, file: !41, line: 361, column: 4)
!2431 = !DILocation(line: 361, column: 24, scope: !2430, inlinedAt: !2374)
!2432 = !DILocation(line: 361, column: 38, scope: !2430, inlinedAt: !2374)
!2433 = !DILocation(line: 361, column: 46, scope: !2430, inlinedAt: !2374)
!2434 = !DILocation(line: 361, column: 44, scope: !2430, inlinedAt: !2374)
!2435 = !DILocation(line: 361, column: 34, scope: !2430, inlinedAt: !2374)
!2436 = !DILocation(line: 363, column: 5, scope: !2437, inlinedAt: !2374)
!2437 = distinct !DILexicalBlock(scope: !2430, file: !41, line: 362, column: 4)
!2438 = !DILocation(line: 368, column: 2, scope: !2372, inlinedAt: !2374)
!2439 = !DILocation(line: 368, column: 10, scope: !2440, inlinedAt: !2374)
!2440 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 368, column: 2)
!2441 = !DILocation(line: 368, column: 30, scope: !2440, inlinedAt: !2374)
!2442 = !DILocation(line: 368, column: 53, scope: !2440, inlinedAt: !2374)
!2443 = !DILocation(line: 370, column: 7, scope: !2444, inlinedAt: !2374)
!2444 = distinct !DILexicalBlock(scope: !2440, file: !41, line: 369, column: 2)
!2445 = !DILocation(line: 372, column: 8, scope: !2446, inlinedAt: !2374)
!2446 = distinct !DILexicalBlock(scope: !2444, file: !41, line: 371, column: 3)
!2447 = !DILocation(line: 372, column: 24, scope: !2446, inlinedAt: !2374)
!2448 = !DILocation(line: 373, column: 14, scope: !2446, inlinedAt: !2374)
!2449 = !DILocation(line: 374, column: 9, scope: !2446, inlinedAt: !2374)
!2450 = !DILocation(line: 378, column: 16, scope: !2451, inlinedAt: !2374)
!2451 = distinct !DILexicalBlock(scope: !2444, file: !41, line: 377, column: 3)
!2452 = !DILocalVariable(name: "d", scope: !2451, file: !2, line: 379, type: !18, align: 4)
!2453 = !DILocation(line: 379, column: 8, scope: !2451, inlinedAt: !2374)
!2454 = !DILocation(line: 380, column: 9, scope: !2455, inlinedAt: !2374)
!2455 = distinct !DILexicalBlock(scope: !2451, file: !41, line: 380, column: 5)
!2456 = !DILocation(line: 380, column: 26, scope: !2455, inlinedAt: !2374)
!2457 = !DILocation(line: 381, column: 12, scope: !2455, inlinedAt: !2374)
!2458 = !DILocation(line: 385, column: 10, scope: !2459, inlinedAt: !2374)
!2459 = distinct !DILexicalBlock(scope: !2451, file: !41, line: 383, column: 4)
!2460 = !DILocation(line: 386, column: 10, scope: !2461, inlinedAt: !2374)
!2461 = distinct !DILexicalBlock(scope: !2459, file: !41, line: 386, column: 6)
!2462 = !DILocation(line: 386, column: 19, scope: !2461, inlinedAt: !2374)
!2463 = !DILocation(line: 387, column: 10, scope: !2459, inlinedAt: !2374)
!2464 = !DILocation(line: 388, column: 6, scope: !2465, inlinedAt: !2374)
!2465 = distinct !DILexicalBlock(scope: !2459, file: !41, line: 388, column: 6)
!2466 = !DILocation(line: 388, column: 11, scope: !2465, inlinedAt: !2374)
!2467 = !DILocation(line: 388, column: 16, scope: !2465, inlinedAt: !2374)
!2468 = !DILocation(line: 389, column: 17, scope: !2465, inlinedAt: !2374)
!2469 = !DILocation(line: 390, column: 10, scope: !2459, inlinedAt: !2374)
!2470 = !DILocation(line: 390, column: 16, scope: !2459, inlinedAt: !2374)
!2471 = !DILocation(line: 391, column: 6, scope: !2472, inlinedAt: !2374)
!2472 = distinct !DILexicalBlock(scope: !2459, file: !41, line: 391, column: 6)
!2473 = !DILocation(line: 391, column: 17, scope: !2472, inlinedAt: !2374)
!2474 = !DILocation(line: 391, column: 11, scope: !2472, inlinedAt: !2374)
!2475 = !DILocation(line: 392, column: 17, scope: !2472, inlinedAt: !2374)
!2476 = !DILocation(line: 394, column: 4, scope: !2451, inlinedAt: !2374)
!2477 = !DILocation(line: 396, column: 7, scope: !2444, inlinedAt: !2374)
!2478 = !DILocation(line: 396, column: 16, scope: !2444, inlinedAt: !2374)
!2479 = !DILocation(line: 396, column: 27, scope: !2444, inlinedAt: !2374)
!2480 = !DILocation(line: 397, column: 7, scope: !2444, inlinedAt: !2374)
!2481 = !DILocation(line: 397, column: 15, scope: !2444, inlinedAt: !2374)
!2482 = !DILocation(line: 397, column: 13, scope: !2444, inlinedAt: !2374)
!2483 = !DILocation(line: 399, column: 7, scope: !2372, inlinedAt: !2374)
!2484 = !DILocation(line: 399, column: 25, scope: !2372, inlinedAt: !2374)
!2485 = !DILocation(line: 400, column: 7, scope: !2372, inlinedAt: !2374)
!2486 = !DILocation(line: 400, column: 21, scope: !2372, inlinedAt: !2374)
!2487 = !DILocation(line: 401, column: 2, scope: !2372, inlinedAt: !2374)
!2488 = !DILocation(line: 401, column: 9, scope: !2489, inlinedAt: !2374)
!2489 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 401, column: 2)
!2490 = !DILocation(line: 401, column: 23, scope: !2489, inlinedAt: !2374)
!2491 = !DILocation(line: 401, column: 17, scope: !2489, inlinedAt: !2374)
!2492 = !DILocalVariable(name: "e2", scope: !2372, file: !2, line: 403, type: !325, align: 8)
!2493 = !DILocation(line: 403, column: 7, scope: !2372, inlinedAt: !2374)
!2494 = !DILocation(line: 404, column: 7, scope: !2372, inlinedAt: !2374)
!2495 = !DILocalVariable(name: "e2val", scope: !2496, file: !2, line: 406, type: !325, align: 8)
!2496 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 405, column: 2)
!2497 = !DILocation(line: 406, column: 8, scope: !2496, inlinedAt: !2374)
!2498 = !DILocation(line: 406, column: 39, scope: !2496, inlinedAt: !2374)
!2499 = !DILocation(line: 406, column: 45, scope: !2496, inlinedAt: !2374)
!2500 = !DILocation(line: 406, column: 32, scope: !2496, inlinedAt: !2374)
!2501 = !DILocation(line: 406, column: 16, scope: !2496, inlinedAt: !2374)
!2502 = !DILocation(line: 406, column: 63, scope: !2496, inlinedAt: !2374)
!2503 = !DILocation(line: 407, column: 8, scope: !2496, inlinedAt: !2374)
!2504 = !DILocation(line: 409, column: 2, scope: !2372, inlinedAt: !2374)
!2505 = !DILocation(line: 409, column: 12, scope: !2372, inlinedAt: !2374)
!2506 = !DILocation(line: 409, column: 8, scope: !2372, inlinedAt: !2374)
!2507 = !DILocation(line: 410, column: 7, scope: !2372, inlinedAt: !2374)
!2508 = !DILocation(line: 410, column: 17, scope: !2372, inlinedAt: !2374)
!2509 = !DILocation(line: 411, column: 6, scope: !2372, inlinedAt: !2374)
!2510 = !DILocation(line: 411, column: 26, scope: !2372, inlinedAt: !2374)
!2511 = !DILocation(line: 412, column: 6, scope: !2372, inlinedAt: !2374)
!2512 = !DILocation(line: 412, column: 53, scope: !2372, inlinedAt: !2374)
!2513 = !DILocation(line: 414, column: 2, scope: !2372, inlinedAt: !2374)
!2514 = !DILocation(line: 414, column: 9, scope: !2515, inlinedAt: !2374)
!2515 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 414, column: 2)
!2516 = !DILocation(line: 416, column: 7, scope: !2517, inlinedAt: !2374)
!2517 = distinct !DILexicalBlock(scope: !2515, file: !41, line: 415, column: 2)
!2518 = !DILocation(line: 418, column: 4, scope: !2519, inlinedAt: !2374)
!2519 = distinct !DILexicalBlock(scope: !2517, file: !41, line: 417, column: 3)
!2520 = !DILocation(line: 418, column: 9, scope: !2519, inlinedAt: !2374)
!2521 = !DILocation(line: 419, column: 4, scope: !2519, inlinedAt: !2374)
!2522 = !DILocation(line: 419, column: 9, scope: !2519, inlinedAt: !2374)
!2523 = !DILocation(line: 423, column: 4, scope: !2524, inlinedAt: !2374)
!2524 = distinct !DILexicalBlock(scope: !2517, file: !41, line: 422, column: 3)
!2525 = !DILocation(line: 423, column: 9, scope: !2524, inlinedAt: !2374)
!2526 = !DILocation(line: 424, column: 4, scope: !2524, inlinedAt: !2374)
!2527 = !DILocation(line: 424, column: 9, scope: !2524, inlinedAt: !2374)
!2528 = !DILocation(line: 426, column: 3, scope: !2517, inlinedAt: !2374)
!2529 = !DILocalVariable(name: "bits", scope: !2372, file: !2, line: 428, type: !18, align: 4)
!2530 = !DILocation(line: 428, column: 6, scope: !2372, inlinedAt: !2374)
!2531 = !DILocation(line: 428, column: 13, scope: !2372, inlinedAt: !2374)
!2532 = !DILocation(line: 429, column: 19, scope: !2372, inlinedAt: !2374)
!2533 = !DILocation(line: 429, column: 14, scope: !2372, inlinedAt: !2374)
!2534 = !DILocation(line: 429, column: 6, scope: !2372, inlinedAt: !2374)
!2535 = !DILocation(line: 431, column: 21, scope: !2536, inlinedAt: !2374)
!2536 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 430, column: 2)
!2537 = !DILocation(line: 431, column: 16, scope: !2536, inlinedAt: !2374)
!2538 = !DILocation(line: 431, column: 11, scope: !2536, inlinedAt: !2374)
!2539 = !DILocation(line: 432, column: 7, scope: !2536, inlinedAt: !2374)
!2540 = !DILocation(line: 432, column: 24, scope: !2536, inlinedAt: !2374)
!2541 = !DILocalVariable(name: "bias", scope: !2372, file: !2, line: 434, type: !2330, align: 8)
!2542 = !DILocation(line: 434, column: 9, scope: !2372, inlinedAt: !2374)
!2543 = !DILocation(line: 435, column: 6, scope: !2372, inlinedAt: !2374)
!2544 = !DILocation(line: 437, column: 70, scope: !2545, inlinedAt: !2374)
!2545 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 436, column: 2)
!2546 = !DILocation(line: 437, column: 41, scope: !2545, inlinedAt: !2374)
!2547 = !DILocation(line: 1024, column: 52, scope: !2548, inlinedAt: !2550)
!2548 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2549 = !DIFile(filename: "math.c3", directory: "C:/Dev/C3/c3-windows/lib/std/math")
!2550 = !DILocation(line: 437, column: 31, scope: !2545, inlinedAt: !2374)
!2551 = !DILocation(line: 1024, column: 41, scope: !2548, inlinedAt: !2550)
!2552 = !DILocation(line: 437, column: 82, scope: !2545, inlinedAt: !2374)
!2553 = !DILocation(line: 41, column: 10, scope: !2554, inlinedAt: !2556)
!2554 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2555, file: !2555, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2555 = !DIFile(filename: "values.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!2556 = !DILocation(line: 288, column: 48, scope: !2557, inlinedAt: !2558)
!2557 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2549, file: !2549, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2558 = !DILocation(line: 437, column: 16, scope: !2545, inlinedAt: !2374)
!2559 = !DILocation(line: 288, column: 77, scope: !2557, inlinedAt: !2558)
!2560 = !DILocation(line: 440, column: 6, scope: !2372, inlinedAt: !2374)
!2561 = !DILocation(line: 440, column: 19, scope: !2372, inlinedAt: !2374)
!2562 = !DILocation(line: 440, column: 26, scope: !2372, inlinedAt: !2374)
!2563 = !DILocation(line: 442, column: 3, scope: !2564, inlinedAt: !2374)
!2564 = distinct !DILexicalBlock(scope: !2372, file: !41, line: 441, column: 2)
!2565 = !DILocation(line: 443, column: 7, scope: !2564, inlinedAt: !2374)
!2566 = !DILocation(line: 445, column: 6, scope: !2372, inlinedAt: !2374)
!2567 = !DILocation(line: 445, column: 13, scope: !2372, inlinedAt: !2374)
!2568 = !DILocation(line: 445, column: 21, scope: !2372, inlinedAt: !2374)
!2569 = !DILocation(line: 445, column: 32, scope: !2372, inlinedAt: !2374)
!2570 = !DILocation(line: 445, column: 39, scope: !2372, inlinedAt: !2374)
!2571 = !DILocation(line: 446, column: 2, scope: !2372, inlinedAt: !2374)
!2572 = !DILocation(line: 446, column: 7, scope: !2372, inlinedAt: !2374)
!2573 = !DILocation(line: 447, column: 7, scope: !2372, inlinedAt: !2374)
!2574 = !DILocation(line: 447, column: 17, scope: !2372, inlinedAt: !2374)
!2575 = !DILocation(line: 449, column: 26, scope: !2372, inlinedAt: !2374)
!2576 = !DILocation(line: 1024, column: 52, scope: !2577, inlinedAt: !2578)
!2577 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!2578 = !DILocation(line: 449, column: 15, scope: !2372, inlinedAt: !2374)
!2579 = !DILocation(line: 1024, column: 41, scope: !2577, inlinedAt: !2578)
!2580 = !DILocation(line: 35, column: 11, scope: !2581, inlinedAt: !2583)
!2581 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 38, column: 1)
!2582 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!2583 = !DILocation(line: 485, column: 10, scope: !2334, inlinedAt: !2336)
!2584 = !DILocalVariable(name: "x", scope: !2582, file: !2, line: 39, type: !2585, align: 16)
!2585 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !2586)
!2586 = !{!2587}
!2587 = !DISubrange(count: 128, lowerBound: 0)
!2588 = !DILocation(line: 39, column: 13, scope: !2582, inlinedAt: !2583)
!2589 = !DILocalVariable(name: "emax", scope: !2582, file: !2, line: 41, type: !18, align: 4)
!2590 = !DILocation(line: 41, column: 6, scope: !2582, inlinedAt: !2583)
!2591 = !DILocation(line: 41, column: 13, scope: !2582, inlinedAt: !2583)
!2592 = !DILocalVariable(name: "index", scope: !2582, file: !2, line: 44, type: !63, align: 8)
!2593 = !DILocation(line: 44, column: 6, scope: !2582, inlinedAt: !2583)
!2594 = !DILocalVariable(name: "got_digit", scope: !2582, file: !2, line: 45, type: !128, align: 1)
!2595 = !DILocation(line: 45, column: 7, scope: !2582, inlinedAt: !2583)
!2596 = !DILocation(line: 45, column: 19, scope: !2582, inlinedAt: !2583)
!2597 = !DILocation(line: 45, column: 25, scope: !2582, inlinedAt: !2583)
!2598 = !DILocalVariable(name: "got_rad", scope: !2582, file: !2, line: 46, type: !128, align: 1)
!2599 = !DILocation(line: 46, column: 7, scope: !2582, inlinedAt: !2583)
!2600 = !DILocalVariable(name: "lrp", scope: !2582, file: !2, line: 47, type: !325, align: 8)
!2601 = !DILocation(line: 47, column: 7, scope: !2582, inlinedAt: !2583)
!2602 = !DILocalVariable(name: "dc", scope: !2582, file: !2, line: 47, type: !325, align: 8)
!2603 = !DILocation(line: 47, column: 12, scope: !2582, inlinedAt: !2583)
!2604 = !DILocalVariable(name: "k", scope: !2582, file: !2, line: 48, type: !18, align: 4)
!2605 = !DILocation(line: 48, column: 6, scope: !2582, inlinedAt: !2583)
!2606 = !DILocalVariable(name: "j", scope: !2582, file: !2, line: 48, type: !18, align: 4)
!2607 = !DILocation(line: 48, column: 9, scope: !2582, inlinedAt: !2583)
!2608 = !DILocalVariable(name: "lnz", scope: !2582, file: !2, line: 48, type: !18, align: 4)
!2609 = !DILocation(line: 48, column: 12, scope: !2582, inlinedAt: !2583)
!2610 = !DILocalVariable(name: "len", scope: !2582, file: !2, line: 49, type: !63, align: 8)
!2611 = !DILocation(line: 49, column: 6, scope: !2582, inlinedAt: !2583)
!2612 = !DILocation(line: 49, column: 12, scope: !2582, inlinedAt: !2583)
!2613 = !DILocalVariable(name: "last_char", scope: !2582, file: !2, line: 50, type: !63, align: 8)
!2614 = !DILocation(line: 50, column: 6, scope: !2582, inlinedAt: !2583)
!2615 = !DILocation(line: 50, column: 18, scope: !2582, inlinedAt: !2583)
!2616 = !DILocation(line: 52, column: 9, scope: !2582, inlinedAt: !2583)
!2617 = !DILocalVariable(name: "c", scope: !2582, file: !2, line: 54, type: !61, align: 1)
!2618 = !DILocation(line: 54, column: 7, scope: !2582, inlinedAt: !2583)
!2619 = !DILocation(line: 56, column: 2, scope: !2582, inlinedAt: !2583)
!2620 = !DILocation(line: 56, column: 14, scope: !2621, inlinedAt: !2583)
!2621 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 56, column: 2)
!2622 = !DILocation(line: 56, column: 20, scope: !2621, inlinedAt: !2583)
!2623 = !DILocation(line: 56, column: 10, scope: !2621, inlinedAt: !2583)
!2624 = !DILocation(line: 58, column: 7, scope: !2625, inlinedAt: !2583)
!2625 = distinct !DILexicalBlock(scope: !2621, file: !41, line: 57, column: 2)
!2626 = !DILocation(line: 58, column: 16, scope: !2625, inlinedAt: !2583)
!2627 = !DILocation(line: 58, column: 34, scope: !2625, inlinedAt: !2583)
!2628 = !DILocation(line: 59, column: 3, scope: !2625, inlinedAt: !2583)
!2629 = !DILocation(line: 62, column: 6, scope: !2582, inlinedAt: !2583)
!2630 = !DILocation(line: 64, column: 13, scope: !2631, inlinedAt: !2583)
!2631 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 63, column: 2)
!2632 = !DILocation(line: 65, column: 7, scope: !2631, inlinedAt: !2583)
!2633 = !DILocation(line: 65, column: 16, scope: !2631, inlinedAt: !2583)
!2634 = !DILocation(line: 67, column: 9, scope: !2635, inlinedAt: !2583)
!2635 = distinct !DILexicalBlock(scope: !2631, file: !41, line: 66, column: 3)
!2636 = !DILocation(line: 67, column: 27, scope: !2635, inlinedAt: !2583)
!2637 = !DILocation(line: 68, column: 11, scope: !2635, inlinedAt: !2583)
!2638 = !DILocation(line: 70, column: 7, scope: !2631, inlinedAt: !2583)
!2639 = !DILocation(line: 70, column: 16, scope: !2631, inlinedAt: !2583)
!2640 = !DILocation(line: 70, column: 34, scope: !2631, inlinedAt: !2583)
!2641 = !DILocation(line: 70, column: 42, scope: !2631, inlinedAt: !2583)
!2642 = !DILocation(line: 70, column: 40, scope: !2631, inlinedAt: !2583)
!2643 = !DILocation(line: 70, column: 30, scope: !2631, inlinedAt: !2583)
!2644 = !DILocation(line: 72, column: 4, scope: !2645, inlinedAt: !2583)
!2645 = distinct !DILexicalBlock(scope: !2631, file: !41, line: 71, column: 3)
!2646 = !DILocation(line: 73, column: 16, scope: !2645, inlinedAt: !2583)
!2647 = !DILocation(line: 74, column: 4, scope: !2645, inlinedAt: !2583)
!2648 = !DILocation(line: 74, column: 11, scope: !2649, inlinedAt: !2583)
!2649 = distinct !DILexicalBlock(scope: !2645, file: !41, line: 74, column: 4)
!2650 = !DILocation(line: 74, column: 24, scope: !2649, inlinedAt: !2583)
!2651 = !DILocation(line: 74, column: 38, scope: !2649, inlinedAt: !2583)
!2652 = !DILocation(line: 74, column: 46, scope: !2649, inlinedAt: !2583)
!2653 = !DILocation(line: 74, column: 44, scope: !2649, inlinedAt: !2583)
!2654 = !DILocation(line: 74, column: 34, scope: !2649, inlinedAt: !2583)
!2655 = !DILocation(line: 76, column: 5, scope: !2656, inlinedAt: !2583)
!2656 = distinct !DILexicalBlock(scope: !2649, file: !41, line: 75, column: 4)
!2657 = !DILocation(line: 81, column: 2, scope: !2582, inlinedAt: !2583)
!2658 = !DILocation(line: 81, column: 9, scope: !2659, inlinedAt: !2583)
!2659 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 81, column: 2)
!2660 = !DILocation(line: 81, column: 26, scope: !2659, inlinedAt: !2583)
!2661 = !DILocation(line: 85, column: 9, scope: !2662, inlinedAt: !2583)
!2662 = distinct !DILexicalBlock(scope: !2663, file: !41, line: 83, column: 3)
!2663 = distinct !DILexicalBlock(scope: !2659, file: !41, line: 82, column: 2)
!2664 = !DILocation(line: 86, column: 9, scope: !2665, inlinedAt: !2583)
!2665 = distinct !DILexicalBlock(scope: !2662, file: !41, line: 86, column: 5)
!2666 = !DILocation(line: 86, column: 25, scope: !2665, inlinedAt: !2583)
!2667 = !DILocation(line: 87, column: 15, scope: !2665, inlinedAt: !2583)
!2668 = !DILocation(line: 88, column: 11, scope: !2665, inlinedAt: !2583)
!2669 = !DILocation(line: 89, column: 9, scope: !2662, inlinedAt: !2583)
!2670 = !DILocation(line: 90, column: 5, scope: !2671, inlinedAt: !2583)
!2671 = distinct !DILexicalBlock(scope: !2662, file: !41, line: 90, column: 5)
!2672 = !DILocation(line: 91, column: 9, scope: !2671, inlinedAt: !2583)
!2673 = !DILocation(line: 91, column: 26, scope: !2671, inlinedAt: !2583)
!2674 = !DILocation(line: 92, column: 9, scope: !2671, inlinedAt: !2583)
!2675 = !DILocation(line: 94, column: 8, scope: !2676, inlinedAt: !2583)
!2676 = distinct !DILexicalBlock(scope: !2671, file: !41, line: 93, column: 5)
!2677 = !DILocation(line: 94, column: 15, scope: !2676, inlinedAt: !2583)
!2678 = !DILocation(line: 94, column: 13, scope: !2676, inlinedAt: !2583)
!2679 = !DILocation(line: 94, column: 25, scope: !2676, inlinedAt: !2583)
!2680 = !DILocation(line: 98, column: 8, scope: !2681, inlinedAt: !2583)
!2681 = distinct !DILexicalBlock(scope: !2671, file: !41, line: 97, column: 5)
!2682 = !DILocation(line: 98, column: 13, scope: !2681, inlinedAt: !2583)
!2683 = !DILocation(line: 100, column: 11, scope: !2671, inlinedAt: !2583)
!2684 = !DILocation(line: 100, column: 9, scope: !2671, inlinedAt: !2583)
!2685 = !DILocation(line: 102, column: 6, scope: !2686, inlinedAt: !2583)
!2686 = distinct !DILexicalBlock(scope: !2671, file: !41, line: 101, column: 5)
!2687 = !DILocation(line: 103, column: 10, scope: !2686, inlinedAt: !2583)
!2688 = !DILocation(line: 105, column: 17, scope: !2671, inlinedAt: !2583)
!2689 = !DILocation(line: 107, column: 5, scope: !2690, inlinedAt: !2583)
!2690 = distinct !DILexicalBlock(scope: !2662, file: !41, line: 107, column: 5)
!2691 = !DILocation(line: 108, column: 9, scope: !2690, inlinedAt: !2583)
!2692 = !DILocation(line: 108, column: 21, scope: !2690, inlinedAt: !2583)
!2693 = !DILocation(line: 108, column: 19, scope: !2690, inlinedAt: !2583)
!2694 = !DILocation(line: 111, column: 7, scope: !2663, inlinedAt: !2583)
!2695 = !DILocation(line: 111, column: 16, scope: !2663, inlinedAt: !2583)
!2696 = !DILocation(line: 111, column: 27, scope: !2663, inlinedAt: !2583)
!2697 = !DILocation(line: 112, column: 10, scope: !2663, inlinedAt: !2583)
!2698 = !DILocation(line: 112, column: 18, scope: !2663, inlinedAt: !2583)
!2699 = !DILocation(line: 113, column: 7, scope: !2663, inlinedAt: !2583)
!2700 = !DILocation(line: 113, column: 15, scope: !2663, inlinedAt: !2583)
!2701 = !DILocation(line: 113, column: 13, scope: !2663, inlinedAt: !2583)
!2702 = !DILocation(line: 115, column: 7, scope: !2582, inlinedAt: !2583)
!2703 = !DILocation(line: 115, column: 22, scope: !2582, inlinedAt: !2583)
!2704 = !DILocation(line: 116, column: 7, scope: !2582, inlinedAt: !2583)
!2705 = !DILocation(line: 116, column: 25, scope: !2582, inlinedAt: !2583)
!2706 = !DILocation(line: 117, column: 7, scope: !2582, inlinedAt: !2583)
!2707 = !DILocation(line: 119, column: 7, scope: !2708, inlinedAt: !2583)
!2708 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 118, column: 2)
!2709 = !DILocation(line: 119, column: 20, scope: !2708, inlinedAt: !2583)
!2710 = !DILocation(line: 119, column: 34, scope: !2708, inlinedAt: !2583)
!2711 = !DILocalVariable(name: "e10", scope: !2708, file: !2, line: 120, type: !325, align: 8)
!2712 = !DILocation(line: 120, column: 8, scope: !2708, inlinedAt: !2583)
!2713 = !DILocation(line: 120, column: 37, scope: !2708, inlinedAt: !2583)
!2714 = !DILocation(line: 120, column: 43, scope: !2708, inlinedAt: !2583)
!2715 = !DILocation(line: 120, column: 30, scope: !2708, inlinedAt: !2583)
!2716 = !DILocation(line: 120, column: 14, scope: !2708, inlinedAt: !2583)
!2717 = !DILocation(line: 120, column: 60, scope: !2708, inlinedAt: !2583)
!2718 = !DILocation(line: 121, column: 3, scope: !2708, inlinedAt: !2583)
!2719 = !DILocation(line: 121, column: 10, scope: !2708, inlinedAt: !2583)
!2720 = !DILocation(line: 123, column: 11, scope: !2582, inlinedAt: !2583)
!2721 = !DILocation(line: 123, column: 20, scope: !2582, inlinedAt: !2583)
!2722 = !DILocation(line: 125, column: 10, scope: !2723, inlinedAt: !2583)
!2723 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 124, column: 2)
!2724 = !DILocation(line: 128, column: 9, scope: !2582, inlinedAt: !2583)
!2725 = !DILocation(line: 128, column: 20, scope: !2582, inlinedAt: !2583)
!2726 = !DILocation(line: 131, column: 6, scope: !2582, inlinedAt: !2583)
!2727 = !DILocation(line: 131, column: 13, scope: !2582, inlinedAt: !2583)
!2728 = !DILocation(line: 131, column: 19, scope: !2582, inlinedAt: !2583)
!2729 = !DILocation(line: 131, column: 31, scope: !2582, inlinedAt: !2583)
!2730 = !DILocation(line: 131, column: 54, scope: !2582, inlinedAt: !2583)
!2731 = !DILocation(line: 131, column: 46, scope: !2582, inlinedAt: !2583)
!2732 = !DILocation(line: 131, column: 80, scope: !2582, inlinedAt: !2583)
!2733 = !DILocation(line: 131, column: 97, scope: !2582, inlinedAt: !2583)
!2734 = !DILocation(line: 132, column: 6, scope: !2582, inlinedAt: !2583)
!2735 = !DILocation(line: 132, column: 32, scope: !2582, inlinedAt: !2583)
!2736 = !DILocation(line: 133, column: 6, scope: !2582, inlinedAt: !2583)
!2737 = !DILocation(line: 133, column: 54, scope: !2582, inlinedAt: !2583)
!2738 = !DILocation(line: 136, column: 6, scope: !2582, inlinedAt: !2583)
!2739 = !DILocation(line: 138, column: 3, scope: !2740, inlinedAt: !2583)
!2740 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 137, column: 2)
!2741 = !DILocation(line: 138, column: 10, scope: !2742, inlinedAt: !2583)
!2742 = distinct !DILexicalBlock(scope: !2740, file: !41, line: 138, column: 3)
!2743 = !DILocation(line: 138, column: 24, scope: !2742, inlinedAt: !2583)
!2744 = !DILocation(line: 138, column: 22, scope: !2742, inlinedAt: !2583)
!2745 = !DILocation(line: 138, column: 17, scope: !2742, inlinedAt: !2583)
!2746 = !DILocation(line: 139, column: 3, scope: !2740, inlinedAt: !2583)
!2747 = !DILocation(line: 140, column: 7, scope: !2740, inlinedAt: !2583)
!2748 = !DILocalVariable(name: "a", scope: !2582, file: !2, line: 143, type: !18, align: 4)
!2749 = !DILocation(line: 143, column: 6, scope: !2582, inlinedAt: !2583)
!2750 = !DILocalVariable(name: "z", scope: !2582, file: !2, line: 144, type: !18, align: 4)
!2751 = !DILocation(line: 144, column: 6, scope: !2582, inlinedAt: !2583)
!2752 = !DILocation(line: 144, column: 10, scope: !2582, inlinedAt: !2583)
!2753 = !DILocalVariable(name: "e2", scope: !2582, file: !2, line: 145, type: !18, align: 4)
!2754 = !DILocation(line: 145, column: 6, scope: !2582, inlinedAt: !2583)
!2755 = !DILocalVariable(name: "rp", scope: !2582, file: !2, line: 146, type: !325, align: 8)
!2756 = !DILocation(line: 146, column: 7, scope: !2582, inlinedAt: !2583)
!2757 = !DILocation(line: 146, column: 12, scope: !2582, inlinedAt: !2583)
!2758 = !DILocation(line: 149, column: 6, scope: !2582, inlinedAt: !2583)
!2759 = !DILocation(line: 149, column: 17, scope: !2582, inlinedAt: !2583)
!2760 = !DILocation(line: 149, column: 24, scope: !2582, inlinedAt: !2583)
!2761 = !DILocation(line: 149, column: 30, scope: !2582, inlinedAt: !2583)
!2762 = !DILocation(line: 151, column: 7, scope: !2763, inlinedAt: !2583)
!2763 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 150, column: 2)
!2764 = !DILocation(line: 151, column: 23, scope: !2763, inlinedAt: !2583)
!2765 = !DILocation(line: 151, column: 40, scope: !2763, inlinedAt: !2583)
!2766 = !DILocation(line: 152, column: 7, scope: !2763, inlinedAt: !2583)
!2767 = !DILocation(line: 152, column: 22, scope: !2763, inlinedAt: !2583)
!2768 = !DILocation(line: 152, column: 39, scope: !2763, inlinedAt: !2583)
!2769 = !DILocation(line: 152, column: 53, scope: !2763, inlinedAt: !2583)
!2770 = !DILocation(line: 152, column: 49, scope: !2763, inlinedAt: !2583)
!2771 = !DILocalVariable(name: "bitlim", scope: !2763, file: !2, line: 153, type: !18, align: 4)
!2772 = !DILocation(line: 153, column: 7, scope: !2763, inlinedAt: !2583)
!2773 = !DILocation(line: 153, column: 34, scope: !2763, inlinedAt: !2583)
!2774 = !DILocation(line: 153, column: 29, scope: !2763, inlinedAt: !2583)
!2775 = !DILocation(line: 153, column: 24, scope: !2763, inlinedAt: !2583)
!2776 = !DILocation(line: 153, column: 16, scope: !2763, inlinedAt: !2583)
!2777 = !DILocation(line: 154, column: 7, scope: !2763, inlinedAt: !2583)
!2778 = !DILocation(line: 154, column: 24, scope: !2763, inlinedAt: !2583)
!2779 = !DILocation(line: 154, column: 30, scope: !2763, inlinedAt: !2583)
!2780 = !DILocation(line: 154, column: 22, scope: !2763, inlinedAt: !2583)
!2781 = !DILocation(line: 154, column: 50, scope: !2763, inlinedAt: !2583)
!2782 = !DILocation(line: 154, column: 67, scope: !2763, inlinedAt: !2583)
!2783 = !DILocation(line: 154, column: 77, scope: !2763, inlinedAt: !2583)
!2784 = !DILocation(line: 158, column: 6, scope: !2582, inlinedAt: !2583)
!2785 = !DILocalVariable(name: "rpm9", scope: !2786, file: !2, line: 160, type: !325, align: 8)
!2786 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 159, column: 2)
!2787 = !DILocation(line: 160, column: 8, scope: !2786, inlinedAt: !2583)
!2788 = !DILocation(line: 160, column: 15, scope: !2786, inlinedAt: !2583)
!2789 = !DILocation(line: 160, column: 25, scope: !2786, inlinedAt: !2583)
!2790 = !DILocation(line: 160, column: 34, scope: !2786, inlinedAt: !2583)
!2791 = !DILocalVariable(name: "p10", scope: !2786, file: !2, line: 161, type: !18, align: 4)
!2792 = !DILocation(line: 161, column: 7, scope: !2786, inlinedAt: !2583)
!2793 = !DILocation(line: 161, column: 22, scope: !2786, inlinedAt: !2583)
!2794 = !DILocation(line: 161, column: 18, scope: !2786, inlinedAt: !2583)
!2795 = !DILocalVariable(name: "carry", scope: !2786, file: !2, line: 162, type: !3, align: 4)
!2796 = !DILocation(line: 162, column: 8, scope: !2786, inlinedAt: !2583)
!2797 = !DILocation(line: 162, column: 16, scope: !2786, inlinedAt: !2583)
!2798 = !DILocation(line: 163, column: 12, scope: !2799, inlinedAt: !2583)
!2799 = distinct !DILexicalBlock(scope: !2786, file: !41, line: 163, column: 3)
!2800 = !DILocation(line: 163, column: 15, scope: !2799, inlinedAt: !2583)
!2801 = !DILocation(line: 163, column: 20, scope: !2799, inlinedAt: !2583)
!2802 = !DILocalVariable(name: "tmp", scope: !2803, file: !2, line: 165, type: !3, align: 4)
!2803 = distinct !DILexicalBlock(scope: !2799, file: !41, line: 164, column: 3)
!2804 = !DILocation(line: 165, column: 9, scope: !2803, inlinedAt: !2583)
!2805 = !DILocation(line: 165, column: 17, scope: !2803, inlinedAt: !2583)
!2806 = !DILocation(line: 165, column: 22, scope: !2803, inlinedAt: !2583)
!2807 = !DILocation(line: 165, column: 15, scope: !2803, inlinedAt: !2583)
!2808 = !DILocation(line: 166, column: 6, scope: !2803, inlinedAt: !2583)
!2809 = !DILocation(line: 166, column: 13, scope: !2803, inlinedAt: !2583)
!2810 = !DILocation(line: 166, column: 18, scope: !2803, inlinedAt: !2583)
!2811 = !DILocation(line: 166, column: 11, scope: !2803, inlinedAt: !2583)
!2812 = !DILocation(line: 166, column: 24, scope: !2803, inlinedAt: !2583)
!2813 = !DILocation(line: 167, column: 25, scope: !2803, inlinedAt: !2583)
!2814 = !DILocation(line: 167, column: 12, scope: !2803, inlinedAt: !2583)
!2815 = !DILocation(line: 167, column: 31, scope: !2803, inlinedAt: !2583)
!2816 = !DILocation(line: 168, column: 8, scope: !2803, inlinedAt: !2583)
!2817 = !DILocation(line: 168, column: 13, scope: !2803, inlinedAt: !2583)
!2818 = !DILocation(line: 168, column: 21, scope: !2803, inlinedAt: !2583)
!2819 = !DILocation(line: 170, column: 10, scope: !2820, inlinedAt: !2583)
!2820 = distinct !DILexicalBlock(scope: !2803, file: !41, line: 169, column: 4)
!2821 = !DILocation(line: 171, column: 5, scope: !2820, inlinedAt: !2583)
!2822 = !DILocation(line: 163, column: 23, scope: !2799, inlinedAt: !2583)
!2823 = !DILocation(line: 174, column: 7, scope: !2786, inlinedAt: !2583)
!2824 = !DILocation(line: 174, column: 16, scope: !2786, inlinedAt: !2583)
!2825 = !DILocation(line: 174, column: 23, scope: !2786, inlinedAt: !2583)
!2826 = !DILocation(line: 175, column: 3, scope: !2786, inlinedAt: !2583)
!2827 = !DILocation(line: 175, column: 13, scope: !2786, inlinedAt: !2583)
!2828 = !DILocation(line: 175, column: 9, scope: !2786, inlinedAt: !2583)
!2829 = !DILocation(line: 179, column: 2, scope: !2582, inlinedAt: !2583)
!2830 = !DILocation(line: 179, column: 9, scope: !2831, inlinedAt: !2583)
!2831 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 179, column: 2)
!2832 = !DILocation(line: 179, column: 30, scope: !2831, inlinedAt: !2583)
!2833 = !DILocation(line: 179, column: 53, scope: !2831, inlinedAt: !2583)
!2834 = !DILocation(line: 179, column: 51, scope: !2831, inlinedAt: !2583)
!2835 = !DILocalVariable(name: "carry", scope: !2836, file: !2, line: 181, type: !3, align: 4)
!2836 = distinct !DILexicalBlock(scope: !2831, file: !41, line: 180, column: 2)
!2837 = !DILocation(line: 181, column: 8, scope: !2836, inlinedAt: !2583)
!2838 = !DILocation(line: 181, column: 16, scope: !2836, inlinedAt: !2583)
!2839 = !DILocation(line: 182, column: 3, scope: !2836, inlinedAt: !2583)
!2840 = !DILocation(line: 183, column: 13, scope: !2841, inlinedAt: !2583)
!2841 = distinct !DILexicalBlock(scope: !2836, file: !41, line: 183, column: 3)
!2842 = !DILocalVariable(name: "tmp", scope: !2843, file: !2, line: 185, type: !64, align: 8)
!2843 = distinct !DILexicalBlock(scope: !2841, file: !41, line: 184, column: 3)
!2844 = !DILocation(line: 185, column: 10, scope: !2843, inlinedAt: !2583)
!2845 = !DILocation(line: 185, column: 25, scope: !2843, inlinedAt: !2583)
!2846 = !DILocation(line: 185, column: 17, scope: !2843, inlinedAt: !2583)
!2847 = !DILocation(line: 185, column: 36, scope: !2843, inlinedAt: !2583)
!2848 = !DILocation(line: 186, column: 8, scope: !2843, inlinedAt: !2583)
!2849 = !DILocation(line: 188, column: 20, scope: !2850, inlinedAt: !2583)
!2850 = distinct !DILexicalBlock(scope: !2843, file: !41, line: 187, column: 4)
!2851 = !DILocation(line: 188, column: 14, scope: !2850, inlinedAt: !2583)
!2852 = !DILocation(line: 189, column: 7, scope: !2850, inlinedAt: !2583)
!2853 = !DILocation(line: 189, column: 19, scope: !2850, inlinedAt: !2583)
!2854 = !DILocation(line: 189, column: 13, scope: !2850, inlinedAt: !2583)
!2855 = !DILocation(line: 193, column: 13, scope: !2856, inlinedAt: !2583)
!2856 = distinct !DILexicalBlock(scope: !2843, file: !41, line: 192, column: 4)
!2857 = !DILocation(line: 194, column: 7, scope: !2856, inlinedAt: !2583)
!2858 = !DILocation(line: 194, column: 13, scope: !2856, inlinedAt: !2583)
!2859 = !DILocation(line: 196, column: 8, scope: !2843, inlinedAt: !2583)
!2860 = !DILocation(line: 196, column: 14, scope: !2843, inlinedAt: !2583)
!2861 = !DILocation(line: 196, column: 31, scope: !2843, inlinedAt: !2583)
!2862 = !DILocation(line: 196, column: 36, scope: !2843, inlinedAt: !2583)
!2863 = !DILocation(line: 196, column: 44, scope: !2843, inlinedAt: !2583)
!2864 = !DILocation(line: 196, column: 52, scope: !2843, inlinedAt: !2583)
!2865 = !DILocation(line: 197, column: 8, scope: !2843, inlinedAt: !2583)
!2866 = !DILocation(line: 197, column: 13, scope: !2843, inlinedAt: !2583)
!2867 = !DILocation(line: 197, column: 16, scope: !2843, inlinedAt: !2583)
!2868 = !DILocation(line: 183, column: 35, scope: !2841, inlinedAt: !2583)
!2869 = !DILocation(line: 199, column: 7, scope: !2836, inlinedAt: !2583)
!2870 = !DILocation(line: 201, column: 4, scope: !2871, inlinedAt: !2583)
!2871 = distinct !DILexicalBlock(scope: !2836, file: !41, line: 200, column: 3)
!2872 = !DILocation(line: 202, column: 9, scope: !2871, inlinedAt: !2583)
!2873 = !DILocation(line: 203, column: 8, scope: !2871, inlinedAt: !2583)
!2874 = !DILocation(line: 203, column: 13, scope: !2871, inlinedAt: !2583)
!2875 = !DILocation(line: 205, column: 10, scope: !2876, inlinedAt: !2583)
!2876 = distinct !DILexicalBlock(scope: !2871, file: !41, line: 204, column: 4)
!2877 = !DILocation(line: 206, column: 8, scope: !2876, inlinedAt: !2583)
!2878 = !DILocation(line: 206, column: 28, scope: !2876, inlinedAt: !2583)
!2879 = !DILocation(line: 206, column: 5, scope: !2876, inlinedAt: !2583)
!2880 = !DILocation(line: 208, column: 6, scope: !2871, inlinedAt: !2583)
!2881 = !DILocation(line: 208, column: 11, scope: !2871, inlinedAt: !2583)
!2882 = !DILocation(line: 213, column: 2, scope: !2582, inlinedAt: !2583)
!2883 = !DILocalVariable(name: "carry", scope: !2884, file: !2, line: 215, type: !3, align: 4)
!2884 = distinct !DILexicalBlock(scope: !2885, file: !41, line: 214, column: 2)
!2885 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 213, column: 2)
!2886 = !DILocation(line: 215, column: 8, scope: !2884, inlinedAt: !2583)
!2887 = !DILocation(line: 215, column: 16, scope: !2884, inlinedAt: !2583)
!2888 = !DILocalVariable(name: "sh", scope: !2884, file: !2, line: 216, type: !18, align: 4)
!2889 = !DILocation(line: 216, column: 7, scope: !2884, inlinedAt: !2583)
!2890 = !DILocation(line: 216, column: 12, scope: !2884, inlinedAt: !2583)
!2891 = !DILocalVariable(name: "i", scope: !2884, file: !2, line: 217, type: !18, align: 4)
!2892 = !DILocation(line: 217, column: 7, scope: !2884, inlinedAt: !2583)
!2893 = !DILocation(line: 218, column: 12, scope: !2894, inlinedAt: !2583)
!2894 = distinct !DILexicalBlock(scope: !2884, file: !41, line: 218, column: 3)
!2895 = !DILocation(line: 218, column: 15, scope: !2894, inlinedAt: !2583)
!2896 = !DILocation(line: 220, column: 9, scope: !2897, inlinedAt: !2583)
!2897 = distinct !DILexicalBlock(scope: !2894, file: !41, line: 219, column: 3)
!2898 = !DILocation(line: 220, column: 13, scope: !2897, inlinedAt: !2583)
!2899 = !DILocation(line: 221, column: 8, scope: !2897, inlinedAt: !2583)
!2900 = !DILocation(line: 221, column: 13, scope: !2897, inlinedAt: !2583)
!2901 = !DILocation(line: 221, column: 20, scope: !2897, inlinedAt: !2583)
!2902 = !DILocation(line: 221, column: 28, scope: !2897, inlinedAt: !2583)
!2903 = !DILocation(line: 221, column: 18, scope: !2897, inlinedAt: !2583)
!2904 = !DILocation(line: 223, column: 9, scope: !2905, inlinedAt: !2583)
!2905 = distinct !DILexicalBlock(scope: !2897, file: !41, line: 222, column: 4)
!2906 = !DILocation(line: 224, column: 5, scope: !2905, inlinedAt: !2583)
!2907 = !DILocation(line: 226, column: 11, scope: !2897, inlinedAt: !2583)
!2908 = !DILocation(line: 226, column: 15, scope: !2897, inlinedAt: !2583)
!2909 = !DILocation(line: 226, column: 31, scope: !2897, inlinedAt: !2583)
!2910 = !DILocation(line: 226, column: 8, scope: !2897, inlinedAt: !2583)
!2911 = !DILocation(line: 226, column: 35, scope: !2897, inlinedAt: !2583)
!2912 = !DILocation(line: 218, column: 28, scope: !2894, inlinedAt: !2583)
!2913 = !DILocation(line: 228, column: 7, scope: !2884, inlinedAt: !2583)
!2914 = !DILocation(line: 228, column: 23, scope: !2884, inlinedAt: !2583)
!2915 = !DILocation(line: 228, column: 42, scope: !2884, inlinedAt: !2583)
!2916 = !DILocation(line: 229, column: 7, scope: !2884, inlinedAt: !2583)
!2917 = !DILocation(line: 229, column: 34, scope: !2884, inlinedAt: !2583)
!2918 = !DILocation(line: 230, column: 3, scope: !2884, inlinedAt: !2583)
!2919 = !DILocation(line: 230, column: 9, scope: !2884, inlinedAt: !2583)
!2920 = !DILocation(line: 231, column: 12, scope: !2921, inlinedAt: !2583)
!2921 = distinct !DILexicalBlock(scope: !2884, file: !41, line: 231, column: 3)
!2922 = !DILocation(line: 231, column: 15, scope: !2921, inlinedAt: !2583)
!2923 = !DILocation(line: 231, column: 20, scope: !2921, inlinedAt: !2583)
!2924 = !DILocalVariable(name: "tmp", scope: !2925, file: !2, line: 233, type: !3, align: 4)
!2925 = distinct !DILexicalBlock(scope: !2921, file: !41, line: 232, column: 3)
!2926 = !DILocation(line: 233, column: 9, scope: !2925, inlinedAt: !2583)
!2927 = !DILocation(line: 233, column: 17, scope: !2925, inlinedAt: !2583)
!2928 = !DILocation(line: 233, column: 28, scope: !2925, inlinedAt: !2583)
!2929 = !DILocation(line: 233, column: 23, scope: !2925, inlinedAt: !2583)
!2930 = !DILocation(line: 233, column: 15, scope: !2925, inlinedAt: !2583)
!2931 = !DILocation(line: 234, column: 6, scope: !2925, inlinedAt: !2583)
!2932 = !DILocation(line: 234, column: 13, scope: !2925, inlinedAt: !2583)
!2933 = !DILocation(line: 234, column: 19, scope: !2925, inlinedAt: !2583)
!2934 = !DILocation(line: 234, column: 11, scope: !2925, inlinedAt: !2583)
!2935 = !DILocation(line: 234, column: 24, scope: !2925, inlinedAt: !2583)
!2936 = !DILocation(line: 235, column: 27, scope: !2925, inlinedAt: !2583)
!2937 = !DILocation(line: 235, column: 13, scope: !2925, inlinedAt: !2583)
!2938 = !DILocation(line: 235, column: 33, scope: !2925, inlinedAt: !2583)
!2939 = !DILocation(line: 236, column: 8, scope: !2925, inlinedAt: !2583)
!2940 = !DILocation(line: 236, column: 13, scope: !2925, inlinedAt: !2583)
!2941 = !DILocation(line: 236, column: 21, scope: !2925, inlinedAt: !2583)
!2942 = !DILocation(line: 238, column: 10, scope: !2943, inlinedAt: !2583)
!2943 = distinct !DILexicalBlock(scope: !2925, file: !41, line: 237, column: 4)
!2944 = !DILocation(line: 239, column: 5, scope: !2943, inlinedAt: !2583)
!2945 = !DILocation(line: 240, column: 5, scope: !2943, inlinedAt: !2583)
!2946 = !DILocation(line: 231, column: 28, scope: !2921, inlinedAt: !2583)
!2947 = !DILocation(line: 243, column: 7, scope: !2884, inlinedAt: !2583)
!2948 = !DILocation(line: 245, column: 9, scope: !2949, inlinedAt: !2583)
!2949 = distinct !DILexicalBlock(scope: !2884, file: !41, line: 244, column: 3)
!2950 = !DILocation(line: 245, column: 26, scope: !2949, inlinedAt: !2583)
!2951 = !DILocation(line: 247, column: 7, scope: !2952, inlinedAt: !2583)
!2952 = distinct !DILexicalBlock(scope: !2949, file: !41, line: 246, column: 4)
!2953 = !DILocation(line: 247, column: 12, scope: !2952, inlinedAt: !2583)
!2954 = !DILocation(line: 248, column: 10, scope: !2952, inlinedAt: !2583)
!2955 = !DILocation(line: 252, column: 8, scope: !2956, inlinedAt: !2583)
!2956 = distinct !DILexicalBlock(scope: !2949, file: !41, line: 251, column: 4)
!2957 = !DILocation(line: 252, column: 5, scope: !2956, inlinedAt: !2583)
!2958 = !DILocalVariable(name: "y", scope: !2582, file: !2, line: 258, type: !2330, align: 8)
!2959 = !DILocation(line: 258, column: 9, scope: !2582, inlinedAt: !2583)
!2960 = !DILocalVariable(name: "i", scope: !2582, file: !2, line: 259, type: !18, align: 4)
!2961 = !DILocation(line: 259, column: 6, scope: !2582, inlinedAt: !2583)
!2962 = !DILocation(line: 260, column: 11, scope: !2963, inlinedAt: !2583)
!2963 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 260, column: 2)
!2964 = !DILocation(line: 260, column: 14, scope: !2963, inlinedAt: !2583)
!2965 = !DILocation(line: 262, column: 8, scope: !2966, inlinedAt: !2583)
!2966 = distinct !DILexicalBlock(scope: !2963, file: !41, line: 261, column: 2)
!2967 = !DILocation(line: 262, column: 12, scope: !2966, inlinedAt: !2583)
!2968 = !DILocation(line: 262, column: 25, scope: !2966, inlinedAt: !2583)
!2969 = !DILocation(line: 262, column: 36, scope: !2966, inlinedAt: !2583)
!2970 = !DILocation(line: 262, column: 31, scope: !2966, inlinedAt: !2583)
!2971 = !DILocation(line: 262, column: 58, scope: !2966, inlinedAt: !2583)
!2972 = !DILocation(line: 263, column: 22, scope: !2966, inlinedAt: !2583)
!2973 = !DILocation(line: 263, column: 7, scope: !2966, inlinedAt: !2583)
!2974 = !DILocation(line: 263, column: 29, scope: !2966, inlinedAt: !2583)
!2975 = !DILocation(line: 263, column: 33, scope: !2966, inlinedAt: !2583)
!2976 = !DILocation(line: 260, column: 27, scope: !2963, inlinedAt: !2583)
!2977 = !DILocation(line: 266, column: 2, scope: !2582, inlinedAt: !2583)
!2978 = !DILocation(line: 266, column: 7, scope: !2582, inlinedAt: !2583)
!2979 = !DILocalVariable(name: "denormal", scope: !2582, file: !2, line: 268, type: !128, align: 1)
!2980 = !DILocation(line: 268, column: 7, scope: !2582, inlinedAt: !2583)
!2981 = !DILocalVariable(name: "bits", scope: !2582, file: !2, line: 270, type: !3, align: 4)
!2982 = !DILocation(line: 270, column: 7, scope: !2582, inlinedAt: !2583)
!2983 = !DILocation(line: 270, column: 14, scope: !2582, inlinedAt: !2583)
!2984 = !DILocation(line: 271, column: 6, scope: !2582, inlinedAt: !2583)
!2985 = !DILocation(line: 271, column: 37, scope: !2582, inlinedAt: !2583)
!2986 = !DILocation(line: 271, column: 19, scope: !2582, inlinedAt: !2583)
!2987 = !DILocation(line: 273, column: 34, scope: !2988, inlinedAt: !2583)
!2988 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 272, column: 2)
!2989 = !DILocation(line: 273, column: 16, scope: !2988, inlinedAt: !2583)
!2990 = !DILocation(line: 274, column: 7, scope: !2988, inlinedAt: !2583)
!2991 = !DILocation(line: 274, column: 24, scope: !2988, inlinedAt: !2583)
!2992 = !DILocation(line: 275, column: 14, scope: !2988, inlinedAt: !2583)
!2993 = !DILocalVariable(name: "bias", scope: !2582, file: !2, line: 279, type: !2330, align: 8)
!2994 = !DILocation(line: 279, column: 9, scope: !2582, inlinedAt: !2583)
!2995 = !DILocalVariable(name: "frac", scope: !2582, file: !2, line: 280, type: !2330, align: 8)
!2996 = !DILocation(line: 280, column: 9, scope: !2582, inlinedAt: !2583)
!2997 = !DILocation(line: 281, column: 6, scope: !2582, inlinedAt: !2583)
!2998 = !DILocation(line: 283, column: 69, scope: !2999, inlinedAt: !2583)
!2999 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 282, column: 2)
!3000 = !DILocation(line: 283, column: 41, scope: !2999, inlinedAt: !2583)
!3001 = !DILocation(line: 1024, column: 52, scope: !3002, inlinedAt: !3003)
!3002 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3003 = !DILocation(line: 283, column: 31, scope: !2999, inlinedAt: !2583)
!3004 = !DILocation(line: 1024, column: 41, scope: !3002, inlinedAt: !3003)
!3005 = !DILocation(line: 41, column: 10, scope: !3006, inlinedAt: !3007)
!3006 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2555, file: !2555, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3007 = !DILocation(line: 288, column: 48, scope: !3008, inlinedAt: !3009)
!3008 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2549, file: !2549, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3009 = !DILocation(line: 283, column: 16, scope: !2999, inlinedAt: !2583)
!3010 = !DILocation(line: 288, column: 77, scope: !3008, inlinedAt: !3009)
!3011 = !DILocation(line: 284, column: 10, scope: !2999, inlinedAt: !2583)
!3012 = !DILocation(line: 284, column: 54, scope: !2999, inlinedAt: !2583)
!3013 = !DILocation(line: 284, column: 36, scope: !2999, inlinedAt: !2583)
!3014 = !DILocation(line: 1024, column: 52, scope: !3015, inlinedAt: !3016)
!3015 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3016 = !DILocation(line: 284, column: 20, scope: !2999, inlinedAt: !2583)
!3017 = !DILocation(line: 1024, column: 41, scope: !3015, inlinedAt: !3016)
!3018 = !DILocation(line: 285, column: 3, scope: !2999, inlinedAt: !2583)
!3019 = !DILocation(line: 285, column: 8, scope: !2999, inlinedAt: !2583)
!3020 = !DILocation(line: 286, column: 3, scope: !2999, inlinedAt: !2583)
!3021 = !DILocation(line: 286, column: 8, scope: !2999, inlinedAt: !2583)
!3022 = !DILocation(line: 290, column: 7, scope: !2582, inlinedAt: !2583)
!3023 = !DILocation(line: 290, column: 11, scope: !2582, inlinedAt: !2583)
!3024 = !DILocation(line: 290, column: 24, scope: !2582, inlinedAt: !2583)
!3025 = !DILocalVariable(name: "t", scope: !3026, file: !2, line: 292, type: !3, align: 4)
!3026 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 291, column: 2)
!3027 = !DILocation(line: 292, column: 8, scope: !3026, inlinedAt: !2583)
!3028 = !DILocation(line: 292, column: 15, scope: !3026, inlinedAt: !2583)
!3029 = !DILocation(line: 292, column: 19, scope: !3026, inlinedAt: !2583)
!3030 = !DILocation(line: 295, column: 9, scope: !3031, inlinedAt: !2583)
!3031 = distinct !DILexicalBlock(scope: !3026, file: !41, line: 293, column: 3)
!3032 = !DILocation(line: 295, column: 27, scope: !3031, inlinedAt: !2583)
!3033 = !DILocation(line: 295, column: 33, scope: !3031, inlinedAt: !2583)
!3034 = !DILocation(line: 295, column: 37, scope: !3031, inlinedAt: !2583)
!3035 = !DILocation(line: 295, column: 54, scope: !3031, inlinedAt: !2583)
!3036 = !DILocation(line: 296, column: 5, scope: !3037, inlinedAt: !2583)
!3037 = distinct !DILexicalBlock(scope: !3031, file: !41, line: 296, column: 5)
!3038 = !DILocation(line: 296, column: 20, scope: !3037, inlinedAt: !2583)
!3039 = !DILocation(line: 296, column: 13, scope: !3037, inlinedAt: !2583)
!3040 = !DILocation(line: 297, column: 9, scope: !3031, inlinedAt: !2583)
!3041 = !DILocation(line: 298, column: 5, scope: !3042, inlinedAt: !2583)
!3042 = distinct !DILexicalBlock(scope: !3031, file: !41, line: 298, column: 5)
!3043 = !DILocation(line: 298, column: 20, scope: !3042, inlinedAt: !2583)
!3044 = !DILocation(line: 298, column: 13, scope: !3042, inlinedAt: !2583)
!3045 = !DILocation(line: 299, column: 9, scope: !3031, inlinedAt: !2583)
!3046 = !DILocation(line: 300, column: 10, scope: !3047, inlinedAt: !2583)
!3047 = distinct !DILexicalBlock(scope: !3031, file: !41, line: 300, column: 5)
!3048 = !DILocation(line: 300, column: 14, scope: !3047, inlinedAt: !2583)
!3049 = !DILocation(line: 300, column: 31, scope: !3047, inlinedAt: !2583)
!3050 = !DILocation(line: 302, column: 6, scope: !3051, inlinedAt: !2583)
!3051 = distinct !DILexicalBlock(scope: !3047, file: !41, line: 301, column: 5)
!3052 = !DILocation(line: 302, column: 20, scope: !3051, inlinedAt: !2583)
!3053 = !DILocation(line: 302, column: 14, scope: !3051, inlinedAt: !2583)
!3054 = !DILocation(line: 306, column: 6, scope: !3055, inlinedAt: !2583)
!3055 = distinct !DILexicalBlock(scope: !3047, file: !41, line: 305, column: 5)
!3056 = !DILocation(line: 306, column: 21, scope: !3055, inlinedAt: !2583)
!3057 = !DILocation(line: 306, column: 14, scope: !3055, inlinedAt: !2583)
!3058 = !DILocation(line: 309, column: 31, scope: !3026, inlinedAt: !2583)
!3059 = !DILocation(line: 309, column: 13, scope: !3026, inlinedAt: !2583)
!3060 = !DILocation(line: 309, column: 46, scope: !3026, inlinedAt: !2583)
!3061 = !DILocation(line: 309, column: 57, scope: !3026, inlinedAt: !2583)
!3062 = !DILocation(line: 312, column: 2, scope: !2582, inlinedAt: !2583)
!3063 = !DILocation(line: 312, column: 7, scope: !2582, inlinedAt: !2583)
!3064 = !DILocation(line: 313, column: 2, scope: !2582, inlinedAt: !2583)
!3065 = !DILocation(line: 313, column: 7, scope: !2582, inlinedAt: !2583)
!3066 = !DILocation(line: 315, column: 8, scope: !2582, inlinedAt: !2583)
!3067 = !DILocation(line: 315, column: 49, scope: !2582, inlinedAt: !2583)
!3068 = !DILocation(line: 132, column: 23, scope: !3069, inlinedAt: !3070)
!3069 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2549, file: !2549, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3070 = !DILocation(line: 317, column: 13, scope: !3071, inlinedAt: !2583)
!3071 = distinct !DILexicalBlock(scope: !2582, file: !41, line: 316, column: 2)
!3072 = !DILocation(line: 319, column: 8, scope: !3073, inlinedAt: !2583)
!3073 = distinct !DILexicalBlock(scope: !3071, file: !41, line: 318, column: 3)
!3074 = !DILocation(line: 319, column: 20, scope: !3073, inlinedAt: !2583)
!3075 = !DILocation(line: 319, column: 52, scope: !3073, inlinedAt: !2583)
!3076 = !DILocation(line: 319, column: 34, scope: !3073, inlinedAt: !2583)
!3077 = !DILocation(line: 319, column: 75, scope: !3073, inlinedAt: !2583)
!3078 = !DILocation(line: 320, column: 4, scope: !3073, inlinedAt: !2583)
!3079 = !DILocation(line: 321, column: 4, scope: !3073, inlinedAt: !2583)
!3080 = !DILocation(line: 323, column: 7, scope: !3071, inlinedAt: !2583)
!3081 = !DILocation(line: 323, column: 36, scope: !3071, inlinedAt: !2583)
!3082 = !DILocation(line: 323, column: 45, scope: !3071, inlinedAt: !2583)
!3083 = !DILocation(line: 323, column: 57, scope: !3071, inlinedAt: !2583)
!3084 = !DILocation(line: 323, column: 71, scope: !3071, inlinedAt: !2583)
!3085 = !DILocation(line: 1024, column: 52, scope: !3086, inlinedAt: !3087)
!3086 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3087 = !DILocation(line: 325, column: 15, scope: !2582, inlinedAt: !2583)
!3088 = !DILocation(line: 1024, column: 41, scope: !3086, inlinedAt: !3087)
!3089 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 717, type: !3090, scopeLine: 717, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3090 = !DISubroutineType(types: !3091)
!3091 = !{!324, !3092, !56}
!3092 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3093, size: 64, align: 64, dwarfAddressSpace: 0)
!3093 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3094 = !DILocalVariable(name: "s", arg: 1, scope: !3089, file: !2, line: 717, type: !56)
!3095 = !DILocation(line: 717, column: 27, scope: !3089)
!3096 = !DILocalVariable(name: "sign", scope: !3097, file: !2, line: 454, type: !18, align: 4)
!3097 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3098 = !DILocation(line: 454, column: 6, scope: !3097, inlinedAt: !3099)
!3099 = !DILocation(line: 717, column: 33, scope: !3089)
!3100 = !DILocation(line: 454, column: 13, scope: !3097, inlinedAt: !3099)
!3101 = !DILocation(line: 468, column: 2, scope: !3097, inlinedAt: !3099)
!3102 = !DILocation(line: 468, column: 9, scope: !3103, inlinedAt: !3099)
!3103 = distinct !DILexicalBlock(scope: !3097, file: !41, line: 468, column: 2)
!3104 = !DILocation(line: 468, column: 22, scope: !3103, inlinedAt: !3099)
!3105 = !DILocation(line: 468, column: 28, scope: !3103, inlinedAt: !3099)
!3106 = !DILocation(line: 468, column: 47, scope: !3103, inlinedAt: !3099)
!3107 = !DILocation(line: 468, column: 53, scope: !3103, inlinedAt: !3099)
!3108 = !DILocation(line: 469, column: 7, scope: !3097, inlinedAt: !3099)
!3109 = !DILocation(line: 469, column: 25, scope: !3097, inlinedAt: !3099)
!3110 = !DILocation(line: 470, column: 10, scope: !3111, inlinedAt: !3099)
!3111 = distinct !DILexicalBlock(scope: !3097, file: !41, line: 470, column: 2)
!3112 = !DILocation(line: 470, column: 16, scope: !3111, inlinedAt: !3099)
!3113 = !DILocation(line: 473, column: 11, scope: !3114, inlinedAt: !3099)
!3114 = distinct !DILexicalBlock(scope: !3111, file: !41, line: 473, column: 4)
!3115 = !DILocation(line: 474, column: 4, scope: !3114, inlinedAt: !3099)
!3116 = !DILocation(line: 476, column: 12, scope: !3117, inlinedAt: !3099)
!3117 = distinct !DILexicalBlock(scope: !3111, file: !41, line: 476, column: 4)
!3118 = !DILocation(line: 476, column: 18, scope: !3117, inlinedAt: !3099)
!3119 = !DILocation(line: 478, column: 6, scope: !3097, inlinedAt: !3099)
!3120 = !DILocation(line: 478, column: 29, scope: !3097, inlinedAt: !3099)
!3121 = !DILocation(line: 478, column: 57, scope: !3097, inlinedAt: !3099)
!3122 = !DILocation(line: 479, column: 6, scope: !3097, inlinedAt: !3099)
!3123 = !DILocation(line: 479, column: 24, scope: !3097, inlinedAt: !3099)
!3124 = !DILocation(line: 479, column: 47, scope: !3097, inlinedAt: !3099)
!3125 = !DILocation(line: 481, column: 6, scope: !3097, inlinedAt: !3099)
!3126 = !DILocation(line: 481, column: 23, scope: !3097, inlinedAt: !3099)
!3127 = !DILocation(line: 481, column: 29, scope: !3097, inlinedAt: !3099)
!3128 = !DILocation(line: 481, column: 43, scope: !3097, inlinedAt: !3099)
!3129 = !DILocation(line: 481, column: 49, scope: !3097, inlinedAt: !3099)
!3130 = !DILocation(line: 483, column: 34, scope: !3131, inlinedAt: !3099)
!3131 = distinct !DILexicalBlock(scope: !3097, file: !41, line: 482, column: 2)
!3132 = !DILocation(line: 483, column: 40, scope: !3131, inlinedAt: !3099)
!3133 = !DILocation(line: 483, column: 27, scope: !3131, inlinedAt: !3099)
!3134 = !DILocalVariable(name: "scale", scope: !3135, file: !2, line: 330, type: !2330, align: 8)
!3135 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3136 = !DILocation(line: 330, column: 9, scope: !3135, inlinedAt: !3137)
!3137 = !DILocation(line: 483, column: 11, scope: !3131, inlinedAt: !3099)
!3138 = !DILocation(line: 330, column: 17, scope: !3135, inlinedAt: !3137)
!3139 = !DILocalVariable(name: "x", scope: !3135, file: !2, line: 331, type: !3, align: 4)
!3140 = !DILocation(line: 331, column: 7, scope: !3135, inlinedAt: !3137)
!3141 = !DILocalVariable(name: "rp", scope: !3135, file: !2, line: 332, type: !325, align: 8)
!3142 = !DILocation(line: 332, column: 7, scope: !3135, inlinedAt: !3137)
!3143 = !DILocalVariable(name: "dc", scope: !3135, file: !2, line: 333, type: !325, align: 8)
!3144 = !DILocation(line: 333, column: 7, scope: !3135, inlinedAt: !3137)
!3145 = !DILocalVariable(name: "c", scope: !3135, file: !2, line: 334, type: !61, align: 1)
!3146 = !DILocation(line: 334, column: 7, scope: !3135, inlinedAt: !3137)
!3147 = !DILocalVariable(name: "got_rad", scope: !3135, file: !2, line: 335, type: !128, align: 1)
!3148 = !DILocation(line: 335, column: 7, scope: !3135, inlinedAt: !3137)
!3149 = !DILocalVariable(name: "got_digit", scope: !3135, file: !2, line: 336, type: !128, align: 1)
!3150 = !DILocation(line: 336, column: 7, scope: !3135, inlinedAt: !3137)
!3151 = !DILocalVariable(name: "got_tail", scope: !3135, file: !2, line: 337, type: !128, align: 1)
!3152 = !DILocation(line: 337, column: 7, scope: !3135, inlinedAt: !3137)
!3153 = !DILocalVariable(name: "len", scope: !3135, file: !2, line: 338, type: !63, align: 8)
!3154 = !DILocation(line: 338, column: 6, scope: !3135, inlinedAt: !3137)
!3155 = !DILocation(line: 338, column: 12, scope: !3135, inlinedAt: !3137)
!3156 = !DILocalVariable(name: "last_char", scope: !3135, file: !2, line: 339, type: !63, align: 8)
!3157 = !DILocation(line: 339, column: 6, scope: !3135, inlinedAt: !3137)
!3158 = !DILocation(line: 339, column: 18, scope: !3135, inlinedAt: !3137)
!3159 = !DILocalVariable(name: "index", scope: !3135, file: !2, line: 340, type: !63, align: 8)
!3160 = !DILocation(line: 340, column: 6, scope: !3135, inlinedAt: !3137)
!3161 = !DILocalVariable(name: "y", scope: !3135, file: !2, line: 341, type: !2330, align: 8)
!3162 = !DILocation(line: 341, column: 9, scope: !3135, inlinedAt: !3137)
!3163 = !DILocation(line: 344, column: 2, scope: !3135, inlinedAt: !3137)
!3164 = !DILocation(line: 344, column: 14, scope: !3165, inlinedAt: !3137)
!3165 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 344, column: 2)
!3166 = !DILocation(line: 344, column: 20, scope: !3165, inlinedAt: !3137)
!3167 = !DILocation(line: 344, column: 10, scope: !3165, inlinedAt: !3137)
!3168 = !DILocation(line: 346, column: 7, scope: !3169, inlinedAt: !3137)
!3169 = distinct !DILexicalBlock(scope: !3165, file: !41, line: 345, column: 2)
!3170 = !DILocation(line: 346, column: 16, scope: !3169, inlinedAt: !3137)
!3171 = !DILocation(line: 346, column: 34, scope: !3169, inlinedAt: !3137)
!3172 = !DILocation(line: 347, column: 3, scope: !3169, inlinedAt: !3137)
!3173 = !DILocation(line: 349, column: 6, scope: !3135, inlinedAt: !3137)
!3174 = !DILocation(line: 351, column: 13, scope: !3175, inlinedAt: !3137)
!3175 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 350, column: 2)
!3176 = !DILocation(line: 352, column: 7, scope: !3175, inlinedAt: !3137)
!3177 = !DILocation(line: 352, column: 16, scope: !3175, inlinedAt: !3137)
!3178 = !DILocation(line: 354, column: 9, scope: !3179, inlinedAt: !3137)
!3179 = distinct !DILexicalBlock(scope: !3175, file: !41, line: 353, column: 3)
!3180 = !DILocation(line: 354, column: 27, scope: !3179, inlinedAt: !3137)
!3181 = !DILocation(line: 355, column: 11, scope: !3179, inlinedAt: !3137)
!3182 = !DILocation(line: 357, column: 7, scope: !3175, inlinedAt: !3137)
!3183 = !DILocation(line: 357, column: 16, scope: !3175, inlinedAt: !3137)
!3184 = !DILocation(line: 357, column: 34, scope: !3175, inlinedAt: !3137)
!3185 = !DILocation(line: 357, column: 42, scope: !3175, inlinedAt: !3137)
!3186 = !DILocation(line: 357, column: 40, scope: !3175, inlinedAt: !3137)
!3187 = !DILocation(line: 357, column: 30, scope: !3175, inlinedAt: !3137)
!3188 = !DILocation(line: 359, column: 4, scope: !3189, inlinedAt: !3137)
!3189 = distinct !DILexicalBlock(scope: !3175, file: !41, line: 358, column: 3)
!3190 = !DILocation(line: 360, column: 16, scope: !3189, inlinedAt: !3137)
!3191 = !DILocation(line: 361, column: 4, scope: !3189, inlinedAt: !3137)
!3192 = !DILocation(line: 361, column: 11, scope: !3193, inlinedAt: !3137)
!3193 = distinct !DILexicalBlock(scope: !3189, file: !41, line: 361, column: 4)
!3194 = !DILocation(line: 361, column: 24, scope: !3193, inlinedAt: !3137)
!3195 = !DILocation(line: 361, column: 38, scope: !3193, inlinedAt: !3137)
!3196 = !DILocation(line: 361, column: 46, scope: !3193, inlinedAt: !3137)
!3197 = !DILocation(line: 361, column: 44, scope: !3193, inlinedAt: !3137)
!3198 = !DILocation(line: 361, column: 34, scope: !3193, inlinedAt: !3137)
!3199 = !DILocation(line: 363, column: 5, scope: !3200, inlinedAt: !3137)
!3200 = distinct !DILexicalBlock(scope: !3193, file: !41, line: 362, column: 4)
!3201 = !DILocation(line: 368, column: 2, scope: !3135, inlinedAt: !3137)
!3202 = !DILocation(line: 368, column: 10, scope: !3203, inlinedAt: !3137)
!3203 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 368, column: 2)
!3204 = !DILocation(line: 368, column: 30, scope: !3203, inlinedAt: !3137)
!3205 = !DILocation(line: 368, column: 53, scope: !3203, inlinedAt: !3137)
!3206 = !DILocation(line: 370, column: 7, scope: !3207, inlinedAt: !3137)
!3207 = distinct !DILexicalBlock(scope: !3203, file: !41, line: 369, column: 2)
!3208 = !DILocation(line: 372, column: 8, scope: !3209, inlinedAt: !3137)
!3209 = distinct !DILexicalBlock(scope: !3207, file: !41, line: 371, column: 3)
!3210 = !DILocation(line: 372, column: 24, scope: !3209, inlinedAt: !3137)
!3211 = !DILocation(line: 373, column: 14, scope: !3209, inlinedAt: !3137)
!3212 = !DILocation(line: 374, column: 9, scope: !3209, inlinedAt: !3137)
!3213 = !DILocation(line: 378, column: 16, scope: !3214, inlinedAt: !3137)
!3214 = distinct !DILexicalBlock(scope: !3207, file: !41, line: 377, column: 3)
!3215 = !DILocalVariable(name: "d", scope: !3214, file: !2, line: 379, type: !18, align: 4)
!3216 = !DILocation(line: 379, column: 8, scope: !3214, inlinedAt: !3137)
!3217 = !DILocation(line: 380, column: 9, scope: !3218, inlinedAt: !3137)
!3218 = distinct !DILexicalBlock(scope: !3214, file: !41, line: 380, column: 5)
!3219 = !DILocation(line: 380, column: 26, scope: !3218, inlinedAt: !3137)
!3220 = !DILocation(line: 381, column: 12, scope: !3218, inlinedAt: !3137)
!3221 = !DILocation(line: 385, column: 10, scope: !3222, inlinedAt: !3137)
!3222 = distinct !DILexicalBlock(scope: !3214, file: !41, line: 383, column: 4)
!3223 = !DILocation(line: 386, column: 10, scope: !3224, inlinedAt: !3137)
!3224 = distinct !DILexicalBlock(scope: !3222, file: !41, line: 386, column: 6)
!3225 = !DILocation(line: 386, column: 19, scope: !3224, inlinedAt: !3137)
!3226 = !DILocation(line: 387, column: 10, scope: !3222, inlinedAt: !3137)
!3227 = !DILocation(line: 388, column: 6, scope: !3228, inlinedAt: !3137)
!3228 = distinct !DILexicalBlock(scope: !3222, file: !41, line: 388, column: 6)
!3229 = !DILocation(line: 388, column: 11, scope: !3228, inlinedAt: !3137)
!3230 = !DILocation(line: 388, column: 16, scope: !3228, inlinedAt: !3137)
!3231 = !DILocation(line: 389, column: 17, scope: !3228, inlinedAt: !3137)
!3232 = !DILocation(line: 390, column: 10, scope: !3222, inlinedAt: !3137)
!3233 = !DILocation(line: 390, column: 16, scope: !3222, inlinedAt: !3137)
!3234 = !DILocation(line: 391, column: 6, scope: !3235, inlinedAt: !3137)
!3235 = distinct !DILexicalBlock(scope: !3222, file: !41, line: 391, column: 6)
!3236 = !DILocation(line: 391, column: 17, scope: !3235, inlinedAt: !3137)
!3237 = !DILocation(line: 391, column: 11, scope: !3235, inlinedAt: !3137)
!3238 = !DILocation(line: 392, column: 17, scope: !3235, inlinedAt: !3137)
!3239 = !DILocation(line: 394, column: 4, scope: !3214, inlinedAt: !3137)
!3240 = !DILocation(line: 396, column: 7, scope: !3207, inlinedAt: !3137)
!3241 = !DILocation(line: 396, column: 16, scope: !3207, inlinedAt: !3137)
!3242 = !DILocation(line: 396, column: 27, scope: !3207, inlinedAt: !3137)
!3243 = !DILocation(line: 397, column: 7, scope: !3207, inlinedAt: !3137)
!3244 = !DILocation(line: 397, column: 15, scope: !3207, inlinedAt: !3137)
!3245 = !DILocation(line: 397, column: 13, scope: !3207, inlinedAt: !3137)
!3246 = !DILocation(line: 399, column: 7, scope: !3135, inlinedAt: !3137)
!3247 = !DILocation(line: 399, column: 25, scope: !3135, inlinedAt: !3137)
!3248 = !DILocation(line: 400, column: 7, scope: !3135, inlinedAt: !3137)
!3249 = !DILocation(line: 400, column: 21, scope: !3135, inlinedAt: !3137)
!3250 = !DILocation(line: 401, column: 2, scope: !3135, inlinedAt: !3137)
!3251 = !DILocation(line: 401, column: 9, scope: !3252, inlinedAt: !3137)
!3252 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 401, column: 2)
!3253 = !DILocation(line: 401, column: 23, scope: !3252, inlinedAt: !3137)
!3254 = !DILocation(line: 401, column: 17, scope: !3252, inlinedAt: !3137)
!3255 = !DILocalVariable(name: "e2", scope: !3135, file: !2, line: 403, type: !325, align: 8)
!3256 = !DILocation(line: 403, column: 7, scope: !3135, inlinedAt: !3137)
!3257 = !DILocation(line: 404, column: 7, scope: !3135, inlinedAt: !3137)
!3258 = !DILocalVariable(name: "e2val", scope: !3259, file: !2, line: 406, type: !325, align: 8)
!3259 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 405, column: 2)
!3260 = !DILocation(line: 406, column: 8, scope: !3259, inlinedAt: !3137)
!3261 = !DILocation(line: 406, column: 39, scope: !3259, inlinedAt: !3137)
!3262 = !DILocation(line: 406, column: 45, scope: !3259, inlinedAt: !3137)
!3263 = !DILocation(line: 406, column: 32, scope: !3259, inlinedAt: !3137)
!3264 = !DILocation(line: 406, column: 16, scope: !3259, inlinedAt: !3137)
!3265 = !DILocation(line: 406, column: 63, scope: !3259, inlinedAt: !3137)
!3266 = !DILocation(line: 407, column: 8, scope: !3259, inlinedAt: !3137)
!3267 = !DILocation(line: 409, column: 2, scope: !3135, inlinedAt: !3137)
!3268 = !DILocation(line: 409, column: 12, scope: !3135, inlinedAt: !3137)
!3269 = !DILocation(line: 409, column: 8, scope: !3135, inlinedAt: !3137)
!3270 = !DILocation(line: 410, column: 7, scope: !3135, inlinedAt: !3137)
!3271 = !DILocation(line: 410, column: 17, scope: !3135, inlinedAt: !3137)
!3272 = !DILocation(line: 411, column: 6, scope: !3135, inlinedAt: !3137)
!3273 = !DILocation(line: 411, column: 26, scope: !3135, inlinedAt: !3137)
!3274 = !DILocation(line: 412, column: 6, scope: !3135, inlinedAt: !3137)
!3275 = !DILocation(line: 412, column: 53, scope: !3135, inlinedAt: !3137)
!3276 = !DILocation(line: 414, column: 2, scope: !3135, inlinedAt: !3137)
!3277 = !DILocation(line: 414, column: 9, scope: !3278, inlinedAt: !3137)
!3278 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 414, column: 2)
!3279 = !DILocation(line: 416, column: 7, scope: !3280, inlinedAt: !3137)
!3280 = distinct !DILexicalBlock(scope: !3278, file: !41, line: 415, column: 2)
!3281 = !DILocation(line: 418, column: 4, scope: !3282, inlinedAt: !3137)
!3282 = distinct !DILexicalBlock(scope: !3280, file: !41, line: 417, column: 3)
!3283 = !DILocation(line: 418, column: 9, scope: !3282, inlinedAt: !3137)
!3284 = !DILocation(line: 419, column: 4, scope: !3282, inlinedAt: !3137)
!3285 = !DILocation(line: 419, column: 9, scope: !3282, inlinedAt: !3137)
!3286 = !DILocation(line: 423, column: 4, scope: !3287, inlinedAt: !3137)
!3287 = distinct !DILexicalBlock(scope: !3280, file: !41, line: 422, column: 3)
!3288 = !DILocation(line: 423, column: 9, scope: !3287, inlinedAt: !3137)
!3289 = !DILocation(line: 424, column: 4, scope: !3287, inlinedAt: !3137)
!3290 = !DILocation(line: 424, column: 9, scope: !3287, inlinedAt: !3137)
!3291 = !DILocation(line: 426, column: 3, scope: !3280, inlinedAt: !3137)
!3292 = !DILocalVariable(name: "bits", scope: !3135, file: !2, line: 428, type: !18, align: 4)
!3293 = !DILocation(line: 428, column: 6, scope: !3135, inlinedAt: !3137)
!3294 = !DILocation(line: 428, column: 13, scope: !3135, inlinedAt: !3137)
!3295 = !DILocation(line: 429, column: 19, scope: !3135, inlinedAt: !3137)
!3296 = !DILocation(line: 429, column: 14, scope: !3135, inlinedAt: !3137)
!3297 = !DILocation(line: 429, column: 6, scope: !3135, inlinedAt: !3137)
!3298 = !DILocation(line: 431, column: 21, scope: !3299, inlinedAt: !3137)
!3299 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 430, column: 2)
!3300 = !DILocation(line: 431, column: 16, scope: !3299, inlinedAt: !3137)
!3301 = !DILocation(line: 431, column: 11, scope: !3299, inlinedAt: !3137)
!3302 = !DILocation(line: 432, column: 7, scope: !3299, inlinedAt: !3137)
!3303 = !DILocation(line: 432, column: 24, scope: !3299, inlinedAt: !3137)
!3304 = !DILocalVariable(name: "bias", scope: !3135, file: !2, line: 434, type: !2330, align: 8)
!3305 = !DILocation(line: 434, column: 9, scope: !3135, inlinedAt: !3137)
!3306 = !DILocation(line: 435, column: 6, scope: !3135, inlinedAt: !3137)
!3307 = !DILocation(line: 437, column: 70, scope: !3308, inlinedAt: !3137)
!3308 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 436, column: 2)
!3309 = !DILocation(line: 437, column: 41, scope: !3308, inlinedAt: !3137)
!3310 = !DILocation(line: 1024, column: 52, scope: !3311, inlinedAt: !3312)
!3311 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3312 = !DILocation(line: 437, column: 31, scope: !3308, inlinedAt: !3137)
!3313 = !DILocation(line: 1024, column: 41, scope: !3311, inlinedAt: !3312)
!3314 = !DILocation(line: 437, column: 82, scope: !3308, inlinedAt: !3137)
!3315 = !DILocation(line: 41, column: 10, scope: !3316, inlinedAt: !3317)
!3316 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2555, file: !2555, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3317 = !DILocation(line: 288, column: 48, scope: !3318, inlinedAt: !3319)
!3318 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2549, file: !2549, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3319 = !DILocation(line: 437, column: 16, scope: !3308, inlinedAt: !3137)
!3320 = !DILocation(line: 288, column: 77, scope: !3318, inlinedAt: !3319)
!3321 = !DILocation(line: 440, column: 6, scope: !3135, inlinedAt: !3137)
!3322 = !DILocation(line: 440, column: 19, scope: !3135, inlinedAt: !3137)
!3323 = !DILocation(line: 440, column: 26, scope: !3135, inlinedAt: !3137)
!3324 = !DILocation(line: 442, column: 3, scope: !3325, inlinedAt: !3137)
!3325 = distinct !DILexicalBlock(scope: !3135, file: !41, line: 441, column: 2)
!3326 = !DILocation(line: 443, column: 7, scope: !3325, inlinedAt: !3137)
!3327 = !DILocation(line: 445, column: 6, scope: !3135, inlinedAt: !3137)
!3328 = !DILocation(line: 445, column: 13, scope: !3135, inlinedAt: !3137)
!3329 = !DILocation(line: 445, column: 21, scope: !3135, inlinedAt: !3137)
!3330 = !DILocation(line: 445, column: 32, scope: !3135, inlinedAt: !3137)
!3331 = !DILocation(line: 445, column: 39, scope: !3135, inlinedAt: !3137)
!3332 = !DILocation(line: 446, column: 2, scope: !3135, inlinedAt: !3137)
!3333 = !DILocation(line: 446, column: 7, scope: !3135, inlinedAt: !3137)
!3334 = !DILocation(line: 447, column: 7, scope: !3135, inlinedAt: !3137)
!3335 = !DILocation(line: 447, column: 17, scope: !3135, inlinedAt: !3137)
!3336 = !DILocation(line: 449, column: 26, scope: !3135, inlinedAt: !3137)
!3337 = !DILocation(line: 1024, column: 52, scope: !3338, inlinedAt: !3339)
!3338 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3339 = !DILocation(line: 449, column: 15, scope: !3135, inlinedAt: !3137)
!3340 = !DILocation(line: 1024, column: 41, scope: !3338, inlinedAt: !3339)
!3341 = !DILocation(line: 35, column: 11, scope: !3342, inlinedAt: !3344)
!3342 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 38, column: 1)
!3343 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3344 = !DILocation(line: 485, column: 10, scope: !3097, inlinedAt: !3099)
!3345 = !DILocalVariable(name: "x", scope: !3343, file: !2, line: 39, type: !2585, align: 16)
!3346 = !DILocation(line: 39, column: 13, scope: !3343, inlinedAt: !3344)
!3347 = !DILocalVariable(name: "emax", scope: !3343, file: !2, line: 41, type: !18, align: 4)
!3348 = !DILocation(line: 41, column: 6, scope: !3343, inlinedAt: !3344)
!3349 = !DILocation(line: 41, column: 13, scope: !3343, inlinedAt: !3344)
!3350 = !DILocalVariable(name: "index", scope: !3343, file: !2, line: 44, type: !63, align: 8)
!3351 = !DILocation(line: 44, column: 6, scope: !3343, inlinedAt: !3344)
!3352 = !DILocalVariable(name: "got_digit", scope: !3343, file: !2, line: 45, type: !128, align: 1)
!3353 = !DILocation(line: 45, column: 7, scope: !3343, inlinedAt: !3344)
!3354 = !DILocation(line: 45, column: 19, scope: !3343, inlinedAt: !3344)
!3355 = !DILocation(line: 45, column: 25, scope: !3343, inlinedAt: !3344)
!3356 = !DILocalVariable(name: "got_rad", scope: !3343, file: !2, line: 46, type: !128, align: 1)
!3357 = !DILocation(line: 46, column: 7, scope: !3343, inlinedAt: !3344)
!3358 = !DILocalVariable(name: "lrp", scope: !3343, file: !2, line: 47, type: !325, align: 8)
!3359 = !DILocation(line: 47, column: 7, scope: !3343, inlinedAt: !3344)
!3360 = !DILocalVariable(name: "dc", scope: !3343, file: !2, line: 47, type: !325, align: 8)
!3361 = !DILocation(line: 47, column: 12, scope: !3343, inlinedAt: !3344)
!3362 = !DILocalVariable(name: "k", scope: !3343, file: !2, line: 48, type: !18, align: 4)
!3363 = !DILocation(line: 48, column: 6, scope: !3343, inlinedAt: !3344)
!3364 = !DILocalVariable(name: "j", scope: !3343, file: !2, line: 48, type: !18, align: 4)
!3365 = !DILocation(line: 48, column: 9, scope: !3343, inlinedAt: !3344)
!3366 = !DILocalVariable(name: "lnz", scope: !3343, file: !2, line: 48, type: !18, align: 4)
!3367 = !DILocation(line: 48, column: 12, scope: !3343, inlinedAt: !3344)
!3368 = !DILocalVariable(name: "len", scope: !3343, file: !2, line: 49, type: !63, align: 8)
!3369 = !DILocation(line: 49, column: 6, scope: !3343, inlinedAt: !3344)
!3370 = !DILocation(line: 49, column: 12, scope: !3343, inlinedAt: !3344)
!3371 = !DILocalVariable(name: "last_char", scope: !3343, file: !2, line: 50, type: !63, align: 8)
!3372 = !DILocation(line: 50, column: 6, scope: !3343, inlinedAt: !3344)
!3373 = !DILocation(line: 50, column: 18, scope: !3343, inlinedAt: !3344)
!3374 = !DILocation(line: 52, column: 9, scope: !3343, inlinedAt: !3344)
!3375 = !DILocalVariable(name: "c", scope: !3343, file: !2, line: 54, type: !61, align: 1)
!3376 = !DILocation(line: 54, column: 7, scope: !3343, inlinedAt: !3344)
!3377 = !DILocation(line: 56, column: 2, scope: !3343, inlinedAt: !3344)
!3378 = !DILocation(line: 56, column: 14, scope: !3379, inlinedAt: !3344)
!3379 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 56, column: 2)
!3380 = !DILocation(line: 56, column: 20, scope: !3379, inlinedAt: !3344)
!3381 = !DILocation(line: 56, column: 10, scope: !3379, inlinedAt: !3344)
!3382 = !DILocation(line: 58, column: 7, scope: !3383, inlinedAt: !3344)
!3383 = distinct !DILexicalBlock(scope: !3379, file: !41, line: 57, column: 2)
!3384 = !DILocation(line: 58, column: 16, scope: !3383, inlinedAt: !3344)
!3385 = !DILocation(line: 58, column: 34, scope: !3383, inlinedAt: !3344)
!3386 = !DILocation(line: 59, column: 3, scope: !3383, inlinedAt: !3344)
!3387 = !DILocation(line: 62, column: 6, scope: !3343, inlinedAt: !3344)
!3388 = !DILocation(line: 64, column: 13, scope: !3389, inlinedAt: !3344)
!3389 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 63, column: 2)
!3390 = !DILocation(line: 65, column: 7, scope: !3389, inlinedAt: !3344)
!3391 = !DILocation(line: 65, column: 16, scope: !3389, inlinedAt: !3344)
!3392 = !DILocation(line: 67, column: 9, scope: !3393, inlinedAt: !3344)
!3393 = distinct !DILexicalBlock(scope: !3389, file: !41, line: 66, column: 3)
!3394 = !DILocation(line: 67, column: 27, scope: !3393, inlinedAt: !3344)
!3395 = !DILocation(line: 68, column: 11, scope: !3393, inlinedAt: !3344)
!3396 = !DILocation(line: 70, column: 7, scope: !3389, inlinedAt: !3344)
!3397 = !DILocation(line: 70, column: 16, scope: !3389, inlinedAt: !3344)
!3398 = !DILocation(line: 70, column: 34, scope: !3389, inlinedAt: !3344)
!3399 = !DILocation(line: 70, column: 42, scope: !3389, inlinedAt: !3344)
!3400 = !DILocation(line: 70, column: 40, scope: !3389, inlinedAt: !3344)
!3401 = !DILocation(line: 70, column: 30, scope: !3389, inlinedAt: !3344)
!3402 = !DILocation(line: 72, column: 4, scope: !3403, inlinedAt: !3344)
!3403 = distinct !DILexicalBlock(scope: !3389, file: !41, line: 71, column: 3)
!3404 = !DILocation(line: 73, column: 16, scope: !3403, inlinedAt: !3344)
!3405 = !DILocation(line: 74, column: 4, scope: !3403, inlinedAt: !3344)
!3406 = !DILocation(line: 74, column: 11, scope: !3407, inlinedAt: !3344)
!3407 = distinct !DILexicalBlock(scope: !3403, file: !41, line: 74, column: 4)
!3408 = !DILocation(line: 74, column: 24, scope: !3407, inlinedAt: !3344)
!3409 = !DILocation(line: 74, column: 38, scope: !3407, inlinedAt: !3344)
!3410 = !DILocation(line: 74, column: 46, scope: !3407, inlinedAt: !3344)
!3411 = !DILocation(line: 74, column: 44, scope: !3407, inlinedAt: !3344)
!3412 = !DILocation(line: 74, column: 34, scope: !3407, inlinedAt: !3344)
!3413 = !DILocation(line: 76, column: 5, scope: !3414, inlinedAt: !3344)
!3414 = distinct !DILexicalBlock(scope: !3407, file: !41, line: 75, column: 4)
!3415 = !DILocation(line: 81, column: 2, scope: !3343, inlinedAt: !3344)
!3416 = !DILocation(line: 81, column: 9, scope: !3417, inlinedAt: !3344)
!3417 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 81, column: 2)
!3418 = !DILocation(line: 81, column: 26, scope: !3417, inlinedAt: !3344)
!3419 = !DILocation(line: 85, column: 9, scope: !3420, inlinedAt: !3344)
!3420 = distinct !DILexicalBlock(scope: !3421, file: !41, line: 83, column: 3)
!3421 = distinct !DILexicalBlock(scope: !3417, file: !41, line: 82, column: 2)
!3422 = !DILocation(line: 86, column: 9, scope: !3423, inlinedAt: !3344)
!3423 = distinct !DILexicalBlock(scope: !3420, file: !41, line: 86, column: 5)
!3424 = !DILocation(line: 86, column: 25, scope: !3423, inlinedAt: !3344)
!3425 = !DILocation(line: 87, column: 15, scope: !3423, inlinedAt: !3344)
!3426 = !DILocation(line: 88, column: 11, scope: !3423, inlinedAt: !3344)
!3427 = !DILocation(line: 89, column: 9, scope: !3420, inlinedAt: !3344)
!3428 = !DILocation(line: 90, column: 5, scope: !3429, inlinedAt: !3344)
!3429 = distinct !DILexicalBlock(scope: !3420, file: !41, line: 90, column: 5)
!3430 = !DILocation(line: 91, column: 9, scope: !3429, inlinedAt: !3344)
!3431 = !DILocation(line: 91, column: 26, scope: !3429, inlinedAt: !3344)
!3432 = !DILocation(line: 92, column: 9, scope: !3429, inlinedAt: !3344)
!3433 = !DILocation(line: 94, column: 8, scope: !3434, inlinedAt: !3344)
!3434 = distinct !DILexicalBlock(scope: !3429, file: !41, line: 93, column: 5)
!3435 = !DILocation(line: 94, column: 15, scope: !3434, inlinedAt: !3344)
!3436 = !DILocation(line: 94, column: 13, scope: !3434, inlinedAt: !3344)
!3437 = !DILocation(line: 94, column: 25, scope: !3434, inlinedAt: !3344)
!3438 = !DILocation(line: 98, column: 8, scope: !3439, inlinedAt: !3344)
!3439 = distinct !DILexicalBlock(scope: !3429, file: !41, line: 97, column: 5)
!3440 = !DILocation(line: 98, column: 13, scope: !3439, inlinedAt: !3344)
!3441 = !DILocation(line: 100, column: 11, scope: !3429, inlinedAt: !3344)
!3442 = !DILocation(line: 100, column: 9, scope: !3429, inlinedAt: !3344)
!3443 = !DILocation(line: 102, column: 6, scope: !3444, inlinedAt: !3344)
!3444 = distinct !DILexicalBlock(scope: !3429, file: !41, line: 101, column: 5)
!3445 = !DILocation(line: 103, column: 10, scope: !3444, inlinedAt: !3344)
!3446 = !DILocation(line: 105, column: 17, scope: !3429, inlinedAt: !3344)
!3447 = !DILocation(line: 107, column: 5, scope: !3448, inlinedAt: !3344)
!3448 = distinct !DILexicalBlock(scope: !3420, file: !41, line: 107, column: 5)
!3449 = !DILocation(line: 108, column: 9, scope: !3448, inlinedAt: !3344)
!3450 = !DILocation(line: 108, column: 21, scope: !3448, inlinedAt: !3344)
!3451 = !DILocation(line: 108, column: 19, scope: !3448, inlinedAt: !3344)
!3452 = !DILocation(line: 111, column: 7, scope: !3421, inlinedAt: !3344)
!3453 = !DILocation(line: 111, column: 16, scope: !3421, inlinedAt: !3344)
!3454 = !DILocation(line: 111, column: 27, scope: !3421, inlinedAt: !3344)
!3455 = !DILocation(line: 112, column: 10, scope: !3421, inlinedAt: !3344)
!3456 = !DILocation(line: 112, column: 18, scope: !3421, inlinedAt: !3344)
!3457 = !DILocation(line: 113, column: 7, scope: !3421, inlinedAt: !3344)
!3458 = !DILocation(line: 113, column: 15, scope: !3421, inlinedAt: !3344)
!3459 = !DILocation(line: 113, column: 13, scope: !3421, inlinedAt: !3344)
!3460 = !DILocation(line: 115, column: 7, scope: !3343, inlinedAt: !3344)
!3461 = !DILocation(line: 115, column: 22, scope: !3343, inlinedAt: !3344)
!3462 = !DILocation(line: 116, column: 7, scope: !3343, inlinedAt: !3344)
!3463 = !DILocation(line: 116, column: 25, scope: !3343, inlinedAt: !3344)
!3464 = !DILocation(line: 117, column: 7, scope: !3343, inlinedAt: !3344)
!3465 = !DILocation(line: 119, column: 7, scope: !3466, inlinedAt: !3344)
!3466 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 118, column: 2)
!3467 = !DILocation(line: 119, column: 20, scope: !3466, inlinedAt: !3344)
!3468 = !DILocation(line: 119, column: 34, scope: !3466, inlinedAt: !3344)
!3469 = !DILocalVariable(name: "e10", scope: !3466, file: !2, line: 120, type: !325, align: 8)
!3470 = !DILocation(line: 120, column: 8, scope: !3466, inlinedAt: !3344)
!3471 = !DILocation(line: 120, column: 37, scope: !3466, inlinedAt: !3344)
!3472 = !DILocation(line: 120, column: 43, scope: !3466, inlinedAt: !3344)
!3473 = !DILocation(line: 120, column: 30, scope: !3466, inlinedAt: !3344)
!3474 = !DILocation(line: 120, column: 14, scope: !3466, inlinedAt: !3344)
!3475 = !DILocation(line: 120, column: 60, scope: !3466, inlinedAt: !3344)
!3476 = !DILocation(line: 121, column: 3, scope: !3466, inlinedAt: !3344)
!3477 = !DILocation(line: 121, column: 10, scope: !3466, inlinedAt: !3344)
!3478 = !DILocation(line: 123, column: 11, scope: !3343, inlinedAt: !3344)
!3479 = !DILocation(line: 123, column: 20, scope: !3343, inlinedAt: !3344)
!3480 = !DILocation(line: 125, column: 10, scope: !3481, inlinedAt: !3344)
!3481 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 124, column: 2)
!3482 = !DILocation(line: 128, column: 9, scope: !3343, inlinedAt: !3344)
!3483 = !DILocation(line: 128, column: 20, scope: !3343, inlinedAt: !3344)
!3484 = !DILocation(line: 131, column: 6, scope: !3343, inlinedAt: !3344)
!3485 = !DILocation(line: 131, column: 13, scope: !3343, inlinedAt: !3344)
!3486 = !DILocation(line: 131, column: 19, scope: !3343, inlinedAt: !3344)
!3487 = !DILocation(line: 131, column: 31, scope: !3343, inlinedAt: !3344)
!3488 = !DILocation(line: 131, column: 54, scope: !3343, inlinedAt: !3344)
!3489 = !DILocation(line: 131, column: 46, scope: !3343, inlinedAt: !3344)
!3490 = !DILocation(line: 131, column: 80, scope: !3343, inlinedAt: !3344)
!3491 = !DILocation(line: 131, column: 97, scope: !3343, inlinedAt: !3344)
!3492 = !DILocation(line: 132, column: 6, scope: !3343, inlinedAt: !3344)
!3493 = !DILocation(line: 132, column: 32, scope: !3343, inlinedAt: !3344)
!3494 = !DILocation(line: 133, column: 6, scope: !3343, inlinedAt: !3344)
!3495 = !DILocation(line: 133, column: 54, scope: !3343, inlinedAt: !3344)
!3496 = !DILocation(line: 136, column: 6, scope: !3343, inlinedAt: !3344)
!3497 = !DILocation(line: 138, column: 3, scope: !3498, inlinedAt: !3344)
!3498 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 137, column: 2)
!3499 = !DILocation(line: 138, column: 10, scope: !3500, inlinedAt: !3344)
!3500 = distinct !DILexicalBlock(scope: !3498, file: !41, line: 138, column: 3)
!3501 = !DILocation(line: 138, column: 24, scope: !3500, inlinedAt: !3344)
!3502 = !DILocation(line: 138, column: 22, scope: !3500, inlinedAt: !3344)
!3503 = !DILocation(line: 138, column: 17, scope: !3500, inlinedAt: !3344)
!3504 = !DILocation(line: 139, column: 3, scope: !3498, inlinedAt: !3344)
!3505 = !DILocation(line: 140, column: 7, scope: !3498, inlinedAt: !3344)
!3506 = !DILocalVariable(name: "a", scope: !3343, file: !2, line: 143, type: !18, align: 4)
!3507 = !DILocation(line: 143, column: 6, scope: !3343, inlinedAt: !3344)
!3508 = !DILocalVariable(name: "z", scope: !3343, file: !2, line: 144, type: !18, align: 4)
!3509 = !DILocation(line: 144, column: 6, scope: !3343, inlinedAt: !3344)
!3510 = !DILocation(line: 144, column: 10, scope: !3343, inlinedAt: !3344)
!3511 = !DILocalVariable(name: "e2", scope: !3343, file: !2, line: 145, type: !18, align: 4)
!3512 = !DILocation(line: 145, column: 6, scope: !3343, inlinedAt: !3344)
!3513 = !DILocalVariable(name: "rp", scope: !3343, file: !2, line: 146, type: !325, align: 8)
!3514 = !DILocation(line: 146, column: 7, scope: !3343, inlinedAt: !3344)
!3515 = !DILocation(line: 146, column: 12, scope: !3343, inlinedAt: !3344)
!3516 = !DILocation(line: 149, column: 6, scope: !3343, inlinedAt: !3344)
!3517 = !DILocation(line: 149, column: 17, scope: !3343, inlinedAt: !3344)
!3518 = !DILocation(line: 149, column: 24, scope: !3343, inlinedAt: !3344)
!3519 = !DILocation(line: 149, column: 30, scope: !3343, inlinedAt: !3344)
!3520 = !DILocation(line: 151, column: 7, scope: !3521, inlinedAt: !3344)
!3521 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 150, column: 2)
!3522 = !DILocation(line: 151, column: 23, scope: !3521, inlinedAt: !3344)
!3523 = !DILocation(line: 151, column: 40, scope: !3521, inlinedAt: !3344)
!3524 = !DILocation(line: 152, column: 7, scope: !3521, inlinedAt: !3344)
!3525 = !DILocation(line: 152, column: 22, scope: !3521, inlinedAt: !3344)
!3526 = !DILocation(line: 152, column: 39, scope: !3521, inlinedAt: !3344)
!3527 = !DILocation(line: 152, column: 53, scope: !3521, inlinedAt: !3344)
!3528 = !DILocation(line: 152, column: 49, scope: !3521, inlinedAt: !3344)
!3529 = !DILocalVariable(name: "bitlim", scope: !3521, file: !2, line: 153, type: !18, align: 4)
!3530 = !DILocation(line: 153, column: 7, scope: !3521, inlinedAt: !3344)
!3531 = !DILocation(line: 153, column: 34, scope: !3521, inlinedAt: !3344)
!3532 = !DILocation(line: 153, column: 29, scope: !3521, inlinedAt: !3344)
!3533 = !DILocation(line: 153, column: 24, scope: !3521, inlinedAt: !3344)
!3534 = !DILocation(line: 153, column: 16, scope: !3521, inlinedAt: !3344)
!3535 = !DILocation(line: 154, column: 7, scope: !3521, inlinedAt: !3344)
!3536 = !DILocation(line: 154, column: 24, scope: !3521, inlinedAt: !3344)
!3537 = !DILocation(line: 154, column: 30, scope: !3521, inlinedAt: !3344)
!3538 = !DILocation(line: 154, column: 22, scope: !3521, inlinedAt: !3344)
!3539 = !DILocation(line: 154, column: 50, scope: !3521, inlinedAt: !3344)
!3540 = !DILocation(line: 154, column: 67, scope: !3521, inlinedAt: !3344)
!3541 = !DILocation(line: 154, column: 77, scope: !3521, inlinedAt: !3344)
!3542 = !DILocation(line: 158, column: 6, scope: !3343, inlinedAt: !3344)
!3543 = !DILocalVariable(name: "rpm9", scope: !3544, file: !2, line: 160, type: !325, align: 8)
!3544 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 159, column: 2)
!3545 = !DILocation(line: 160, column: 8, scope: !3544, inlinedAt: !3344)
!3546 = !DILocation(line: 160, column: 15, scope: !3544, inlinedAt: !3344)
!3547 = !DILocation(line: 160, column: 25, scope: !3544, inlinedAt: !3344)
!3548 = !DILocation(line: 160, column: 34, scope: !3544, inlinedAt: !3344)
!3549 = !DILocalVariable(name: "p10", scope: !3544, file: !2, line: 161, type: !18, align: 4)
!3550 = !DILocation(line: 161, column: 7, scope: !3544, inlinedAt: !3344)
!3551 = !DILocation(line: 161, column: 22, scope: !3544, inlinedAt: !3344)
!3552 = !DILocation(line: 161, column: 18, scope: !3544, inlinedAt: !3344)
!3553 = !DILocalVariable(name: "carry", scope: !3544, file: !2, line: 162, type: !3, align: 4)
!3554 = !DILocation(line: 162, column: 8, scope: !3544, inlinedAt: !3344)
!3555 = !DILocation(line: 162, column: 16, scope: !3544, inlinedAt: !3344)
!3556 = !DILocation(line: 163, column: 12, scope: !3557, inlinedAt: !3344)
!3557 = distinct !DILexicalBlock(scope: !3544, file: !41, line: 163, column: 3)
!3558 = !DILocation(line: 163, column: 15, scope: !3557, inlinedAt: !3344)
!3559 = !DILocation(line: 163, column: 20, scope: !3557, inlinedAt: !3344)
!3560 = !DILocalVariable(name: "tmp", scope: !3561, file: !2, line: 165, type: !3, align: 4)
!3561 = distinct !DILexicalBlock(scope: !3557, file: !41, line: 164, column: 3)
!3562 = !DILocation(line: 165, column: 9, scope: !3561, inlinedAt: !3344)
!3563 = !DILocation(line: 165, column: 17, scope: !3561, inlinedAt: !3344)
!3564 = !DILocation(line: 165, column: 22, scope: !3561, inlinedAt: !3344)
!3565 = !DILocation(line: 165, column: 15, scope: !3561, inlinedAt: !3344)
!3566 = !DILocation(line: 166, column: 6, scope: !3561, inlinedAt: !3344)
!3567 = !DILocation(line: 166, column: 13, scope: !3561, inlinedAt: !3344)
!3568 = !DILocation(line: 166, column: 18, scope: !3561, inlinedAt: !3344)
!3569 = !DILocation(line: 166, column: 11, scope: !3561, inlinedAt: !3344)
!3570 = !DILocation(line: 166, column: 24, scope: !3561, inlinedAt: !3344)
!3571 = !DILocation(line: 167, column: 25, scope: !3561, inlinedAt: !3344)
!3572 = !DILocation(line: 167, column: 12, scope: !3561, inlinedAt: !3344)
!3573 = !DILocation(line: 167, column: 31, scope: !3561, inlinedAt: !3344)
!3574 = !DILocation(line: 168, column: 8, scope: !3561, inlinedAt: !3344)
!3575 = !DILocation(line: 168, column: 13, scope: !3561, inlinedAt: !3344)
!3576 = !DILocation(line: 168, column: 21, scope: !3561, inlinedAt: !3344)
!3577 = !DILocation(line: 170, column: 10, scope: !3578, inlinedAt: !3344)
!3578 = distinct !DILexicalBlock(scope: !3561, file: !41, line: 169, column: 4)
!3579 = !DILocation(line: 171, column: 5, scope: !3578, inlinedAt: !3344)
!3580 = !DILocation(line: 163, column: 23, scope: !3557, inlinedAt: !3344)
!3581 = !DILocation(line: 174, column: 7, scope: !3544, inlinedAt: !3344)
!3582 = !DILocation(line: 174, column: 16, scope: !3544, inlinedAt: !3344)
!3583 = !DILocation(line: 174, column: 23, scope: !3544, inlinedAt: !3344)
!3584 = !DILocation(line: 175, column: 3, scope: !3544, inlinedAt: !3344)
!3585 = !DILocation(line: 175, column: 13, scope: !3544, inlinedAt: !3344)
!3586 = !DILocation(line: 175, column: 9, scope: !3544, inlinedAt: !3344)
!3587 = !DILocation(line: 179, column: 2, scope: !3343, inlinedAt: !3344)
!3588 = !DILocation(line: 179, column: 9, scope: !3589, inlinedAt: !3344)
!3589 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 179, column: 2)
!3590 = !DILocation(line: 179, column: 30, scope: !3589, inlinedAt: !3344)
!3591 = !DILocation(line: 179, column: 53, scope: !3589, inlinedAt: !3344)
!3592 = !DILocation(line: 179, column: 51, scope: !3589, inlinedAt: !3344)
!3593 = !DILocalVariable(name: "carry", scope: !3594, file: !2, line: 181, type: !3, align: 4)
!3594 = distinct !DILexicalBlock(scope: !3589, file: !41, line: 180, column: 2)
!3595 = !DILocation(line: 181, column: 8, scope: !3594, inlinedAt: !3344)
!3596 = !DILocation(line: 181, column: 16, scope: !3594, inlinedAt: !3344)
!3597 = !DILocation(line: 182, column: 3, scope: !3594, inlinedAt: !3344)
!3598 = !DILocation(line: 183, column: 13, scope: !3599, inlinedAt: !3344)
!3599 = distinct !DILexicalBlock(scope: !3594, file: !41, line: 183, column: 3)
!3600 = !DILocalVariable(name: "tmp", scope: !3601, file: !2, line: 185, type: !64, align: 8)
!3601 = distinct !DILexicalBlock(scope: !3599, file: !41, line: 184, column: 3)
!3602 = !DILocation(line: 185, column: 10, scope: !3601, inlinedAt: !3344)
!3603 = !DILocation(line: 185, column: 25, scope: !3601, inlinedAt: !3344)
!3604 = !DILocation(line: 185, column: 17, scope: !3601, inlinedAt: !3344)
!3605 = !DILocation(line: 185, column: 36, scope: !3601, inlinedAt: !3344)
!3606 = !DILocation(line: 186, column: 8, scope: !3601, inlinedAt: !3344)
!3607 = !DILocation(line: 188, column: 20, scope: !3608, inlinedAt: !3344)
!3608 = distinct !DILexicalBlock(scope: !3601, file: !41, line: 187, column: 4)
!3609 = !DILocation(line: 188, column: 14, scope: !3608, inlinedAt: !3344)
!3610 = !DILocation(line: 189, column: 7, scope: !3608, inlinedAt: !3344)
!3611 = !DILocation(line: 189, column: 19, scope: !3608, inlinedAt: !3344)
!3612 = !DILocation(line: 189, column: 13, scope: !3608, inlinedAt: !3344)
!3613 = !DILocation(line: 193, column: 13, scope: !3614, inlinedAt: !3344)
!3614 = distinct !DILexicalBlock(scope: !3601, file: !41, line: 192, column: 4)
!3615 = !DILocation(line: 194, column: 7, scope: !3614, inlinedAt: !3344)
!3616 = !DILocation(line: 194, column: 13, scope: !3614, inlinedAt: !3344)
!3617 = !DILocation(line: 196, column: 8, scope: !3601, inlinedAt: !3344)
!3618 = !DILocation(line: 196, column: 14, scope: !3601, inlinedAt: !3344)
!3619 = !DILocation(line: 196, column: 31, scope: !3601, inlinedAt: !3344)
!3620 = !DILocation(line: 196, column: 36, scope: !3601, inlinedAt: !3344)
!3621 = !DILocation(line: 196, column: 44, scope: !3601, inlinedAt: !3344)
!3622 = !DILocation(line: 196, column: 52, scope: !3601, inlinedAt: !3344)
!3623 = !DILocation(line: 197, column: 8, scope: !3601, inlinedAt: !3344)
!3624 = !DILocation(line: 197, column: 13, scope: !3601, inlinedAt: !3344)
!3625 = !DILocation(line: 197, column: 16, scope: !3601, inlinedAt: !3344)
!3626 = !DILocation(line: 183, column: 35, scope: !3599, inlinedAt: !3344)
!3627 = !DILocation(line: 199, column: 7, scope: !3594, inlinedAt: !3344)
!3628 = !DILocation(line: 201, column: 4, scope: !3629, inlinedAt: !3344)
!3629 = distinct !DILexicalBlock(scope: !3594, file: !41, line: 200, column: 3)
!3630 = !DILocation(line: 202, column: 9, scope: !3629, inlinedAt: !3344)
!3631 = !DILocation(line: 203, column: 8, scope: !3629, inlinedAt: !3344)
!3632 = !DILocation(line: 203, column: 13, scope: !3629, inlinedAt: !3344)
!3633 = !DILocation(line: 205, column: 10, scope: !3634, inlinedAt: !3344)
!3634 = distinct !DILexicalBlock(scope: !3629, file: !41, line: 204, column: 4)
!3635 = !DILocation(line: 206, column: 8, scope: !3634, inlinedAt: !3344)
!3636 = !DILocation(line: 206, column: 28, scope: !3634, inlinedAt: !3344)
!3637 = !DILocation(line: 206, column: 5, scope: !3634, inlinedAt: !3344)
!3638 = !DILocation(line: 208, column: 6, scope: !3629, inlinedAt: !3344)
!3639 = !DILocation(line: 208, column: 11, scope: !3629, inlinedAt: !3344)
!3640 = !DILocation(line: 213, column: 2, scope: !3343, inlinedAt: !3344)
!3641 = !DILocalVariable(name: "carry", scope: !3642, file: !2, line: 215, type: !3, align: 4)
!3642 = distinct !DILexicalBlock(scope: !3643, file: !41, line: 214, column: 2)
!3643 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 213, column: 2)
!3644 = !DILocation(line: 215, column: 8, scope: !3642, inlinedAt: !3344)
!3645 = !DILocation(line: 215, column: 16, scope: !3642, inlinedAt: !3344)
!3646 = !DILocalVariable(name: "sh", scope: !3642, file: !2, line: 216, type: !18, align: 4)
!3647 = !DILocation(line: 216, column: 7, scope: !3642, inlinedAt: !3344)
!3648 = !DILocation(line: 216, column: 12, scope: !3642, inlinedAt: !3344)
!3649 = !DILocalVariable(name: "i", scope: !3642, file: !2, line: 217, type: !18, align: 4)
!3650 = !DILocation(line: 217, column: 7, scope: !3642, inlinedAt: !3344)
!3651 = !DILocation(line: 218, column: 12, scope: !3652, inlinedAt: !3344)
!3652 = distinct !DILexicalBlock(scope: !3642, file: !41, line: 218, column: 3)
!3653 = !DILocation(line: 218, column: 15, scope: !3652, inlinedAt: !3344)
!3654 = !DILocation(line: 220, column: 9, scope: !3655, inlinedAt: !3344)
!3655 = distinct !DILexicalBlock(scope: !3652, file: !41, line: 219, column: 3)
!3656 = !DILocation(line: 220, column: 13, scope: !3655, inlinedAt: !3344)
!3657 = !DILocation(line: 221, column: 8, scope: !3655, inlinedAt: !3344)
!3658 = !DILocation(line: 221, column: 13, scope: !3655, inlinedAt: !3344)
!3659 = !DILocation(line: 221, column: 20, scope: !3655, inlinedAt: !3344)
!3660 = !DILocation(line: 221, column: 28, scope: !3655, inlinedAt: !3344)
!3661 = !DILocation(line: 221, column: 18, scope: !3655, inlinedAt: !3344)
!3662 = !DILocation(line: 223, column: 9, scope: !3663, inlinedAt: !3344)
!3663 = distinct !DILexicalBlock(scope: !3655, file: !41, line: 222, column: 4)
!3664 = !DILocation(line: 224, column: 5, scope: !3663, inlinedAt: !3344)
!3665 = !DILocation(line: 226, column: 11, scope: !3655, inlinedAt: !3344)
!3666 = !DILocation(line: 226, column: 15, scope: !3655, inlinedAt: !3344)
!3667 = !DILocation(line: 226, column: 31, scope: !3655, inlinedAt: !3344)
!3668 = !DILocation(line: 226, column: 8, scope: !3655, inlinedAt: !3344)
!3669 = !DILocation(line: 226, column: 35, scope: !3655, inlinedAt: !3344)
!3670 = !DILocation(line: 218, column: 28, scope: !3652, inlinedAt: !3344)
!3671 = !DILocation(line: 228, column: 7, scope: !3642, inlinedAt: !3344)
!3672 = !DILocation(line: 228, column: 23, scope: !3642, inlinedAt: !3344)
!3673 = !DILocation(line: 228, column: 42, scope: !3642, inlinedAt: !3344)
!3674 = !DILocation(line: 229, column: 7, scope: !3642, inlinedAt: !3344)
!3675 = !DILocation(line: 229, column: 34, scope: !3642, inlinedAt: !3344)
!3676 = !DILocation(line: 230, column: 3, scope: !3642, inlinedAt: !3344)
!3677 = !DILocation(line: 230, column: 9, scope: !3642, inlinedAt: !3344)
!3678 = !DILocation(line: 231, column: 12, scope: !3679, inlinedAt: !3344)
!3679 = distinct !DILexicalBlock(scope: !3642, file: !41, line: 231, column: 3)
!3680 = !DILocation(line: 231, column: 15, scope: !3679, inlinedAt: !3344)
!3681 = !DILocation(line: 231, column: 20, scope: !3679, inlinedAt: !3344)
!3682 = !DILocalVariable(name: "tmp", scope: !3683, file: !2, line: 233, type: !3, align: 4)
!3683 = distinct !DILexicalBlock(scope: !3679, file: !41, line: 232, column: 3)
!3684 = !DILocation(line: 233, column: 9, scope: !3683, inlinedAt: !3344)
!3685 = !DILocation(line: 233, column: 17, scope: !3683, inlinedAt: !3344)
!3686 = !DILocation(line: 233, column: 28, scope: !3683, inlinedAt: !3344)
!3687 = !DILocation(line: 233, column: 23, scope: !3683, inlinedAt: !3344)
!3688 = !DILocation(line: 233, column: 15, scope: !3683, inlinedAt: !3344)
!3689 = !DILocation(line: 234, column: 6, scope: !3683, inlinedAt: !3344)
!3690 = !DILocation(line: 234, column: 13, scope: !3683, inlinedAt: !3344)
!3691 = !DILocation(line: 234, column: 19, scope: !3683, inlinedAt: !3344)
!3692 = !DILocation(line: 234, column: 11, scope: !3683, inlinedAt: !3344)
!3693 = !DILocation(line: 234, column: 24, scope: !3683, inlinedAt: !3344)
!3694 = !DILocation(line: 235, column: 27, scope: !3683, inlinedAt: !3344)
!3695 = !DILocation(line: 235, column: 13, scope: !3683, inlinedAt: !3344)
!3696 = !DILocation(line: 235, column: 33, scope: !3683, inlinedAt: !3344)
!3697 = !DILocation(line: 236, column: 8, scope: !3683, inlinedAt: !3344)
!3698 = !DILocation(line: 236, column: 13, scope: !3683, inlinedAt: !3344)
!3699 = !DILocation(line: 236, column: 21, scope: !3683, inlinedAt: !3344)
!3700 = !DILocation(line: 238, column: 10, scope: !3701, inlinedAt: !3344)
!3701 = distinct !DILexicalBlock(scope: !3683, file: !41, line: 237, column: 4)
!3702 = !DILocation(line: 239, column: 5, scope: !3701, inlinedAt: !3344)
!3703 = !DILocation(line: 240, column: 5, scope: !3701, inlinedAt: !3344)
!3704 = !DILocation(line: 231, column: 28, scope: !3679, inlinedAt: !3344)
!3705 = !DILocation(line: 243, column: 7, scope: !3642, inlinedAt: !3344)
!3706 = !DILocation(line: 245, column: 9, scope: !3707, inlinedAt: !3344)
!3707 = distinct !DILexicalBlock(scope: !3642, file: !41, line: 244, column: 3)
!3708 = !DILocation(line: 245, column: 26, scope: !3707, inlinedAt: !3344)
!3709 = !DILocation(line: 247, column: 7, scope: !3710, inlinedAt: !3344)
!3710 = distinct !DILexicalBlock(scope: !3707, file: !41, line: 246, column: 4)
!3711 = !DILocation(line: 247, column: 12, scope: !3710, inlinedAt: !3344)
!3712 = !DILocation(line: 248, column: 10, scope: !3710, inlinedAt: !3344)
!3713 = !DILocation(line: 252, column: 8, scope: !3714, inlinedAt: !3344)
!3714 = distinct !DILexicalBlock(scope: !3707, file: !41, line: 251, column: 4)
!3715 = !DILocation(line: 252, column: 5, scope: !3714, inlinedAt: !3344)
!3716 = !DILocalVariable(name: "y", scope: !3343, file: !2, line: 258, type: !2330, align: 8)
!3717 = !DILocation(line: 258, column: 9, scope: !3343, inlinedAt: !3344)
!3718 = !DILocalVariable(name: "i", scope: !3343, file: !2, line: 259, type: !18, align: 4)
!3719 = !DILocation(line: 259, column: 6, scope: !3343, inlinedAt: !3344)
!3720 = !DILocation(line: 260, column: 11, scope: !3721, inlinedAt: !3344)
!3721 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 260, column: 2)
!3722 = !DILocation(line: 260, column: 14, scope: !3721, inlinedAt: !3344)
!3723 = !DILocation(line: 262, column: 8, scope: !3724, inlinedAt: !3344)
!3724 = distinct !DILexicalBlock(scope: !3721, file: !41, line: 261, column: 2)
!3725 = !DILocation(line: 262, column: 12, scope: !3724, inlinedAt: !3344)
!3726 = !DILocation(line: 262, column: 25, scope: !3724, inlinedAt: !3344)
!3727 = !DILocation(line: 262, column: 36, scope: !3724, inlinedAt: !3344)
!3728 = !DILocation(line: 262, column: 31, scope: !3724, inlinedAt: !3344)
!3729 = !DILocation(line: 262, column: 58, scope: !3724, inlinedAt: !3344)
!3730 = !DILocation(line: 263, column: 22, scope: !3724, inlinedAt: !3344)
!3731 = !DILocation(line: 263, column: 7, scope: !3724, inlinedAt: !3344)
!3732 = !DILocation(line: 263, column: 29, scope: !3724, inlinedAt: !3344)
!3733 = !DILocation(line: 263, column: 33, scope: !3724, inlinedAt: !3344)
!3734 = !DILocation(line: 260, column: 27, scope: !3721, inlinedAt: !3344)
!3735 = !DILocation(line: 266, column: 2, scope: !3343, inlinedAt: !3344)
!3736 = !DILocation(line: 266, column: 7, scope: !3343, inlinedAt: !3344)
!3737 = !DILocalVariable(name: "denormal", scope: !3343, file: !2, line: 268, type: !128, align: 1)
!3738 = !DILocation(line: 268, column: 7, scope: !3343, inlinedAt: !3344)
!3739 = !DILocalVariable(name: "bits", scope: !3343, file: !2, line: 270, type: !3, align: 4)
!3740 = !DILocation(line: 270, column: 7, scope: !3343, inlinedAt: !3344)
!3741 = !DILocation(line: 270, column: 14, scope: !3343, inlinedAt: !3344)
!3742 = !DILocation(line: 271, column: 6, scope: !3343, inlinedAt: !3344)
!3743 = !DILocation(line: 271, column: 37, scope: !3343, inlinedAt: !3344)
!3744 = !DILocation(line: 271, column: 19, scope: !3343, inlinedAt: !3344)
!3745 = !DILocation(line: 273, column: 34, scope: !3746, inlinedAt: !3344)
!3746 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 272, column: 2)
!3747 = !DILocation(line: 273, column: 16, scope: !3746, inlinedAt: !3344)
!3748 = !DILocation(line: 274, column: 7, scope: !3746, inlinedAt: !3344)
!3749 = !DILocation(line: 274, column: 24, scope: !3746, inlinedAt: !3344)
!3750 = !DILocation(line: 275, column: 14, scope: !3746, inlinedAt: !3344)
!3751 = !DILocalVariable(name: "bias", scope: !3343, file: !2, line: 279, type: !2330, align: 8)
!3752 = !DILocation(line: 279, column: 9, scope: !3343, inlinedAt: !3344)
!3753 = !DILocalVariable(name: "frac", scope: !3343, file: !2, line: 280, type: !2330, align: 8)
!3754 = !DILocation(line: 280, column: 9, scope: !3343, inlinedAt: !3344)
!3755 = !DILocation(line: 281, column: 6, scope: !3343, inlinedAt: !3344)
!3756 = !DILocation(line: 283, column: 69, scope: !3757, inlinedAt: !3344)
!3757 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 282, column: 2)
!3758 = !DILocation(line: 283, column: 41, scope: !3757, inlinedAt: !3344)
!3759 = !DILocation(line: 1024, column: 52, scope: !3760, inlinedAt: !3761)
!3760 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3761 = !DILocation(line: 283, column: 31, scope: !3757, inlinedAt: !3344)
!3762 = !DILocation(line: 1024, column: 41, scope: !3760, inlinedAt: !3761)
!3763 = !DILocation(line: 41, column: 10, scope: !3764, inlinedAt: !3765)
!3764 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2555, file: !2555, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3765 = !DILocation(line: 288, column: 48, scope: !3766, inlinedAt: !3767)
!3766 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2549, file: !2549, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3767 = !DILocation(line: 283, column: 16, scope: !3757, inlinedAt: !3344)
!3768 = !DILocation(line: 288, column: 77, scope: !3766, inlinedAt: !3767)
!3769 = !DILocation(line: 284, column: 10, scope: !3757, inlinedAt: !3344)
!3770 = !DILocation(line: 284, column: 54, scope: !3757, inlinedAt: !3344)
!3771 = !DILocation(line: 284, column: 36, scope: !3757, inlinedAt: !3344)
!3772 = !DILocation(line: 1024, column: 52, scope: !3773, inlinedAt: !3774)
!3773 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3774 = !DILocation(line: 284, column: 20, scope: !3757, inlinedAt: !3344)
!3775 = !DILocation(line: 1024, column: 41, scope: !3773, inlinedAt: !3774)
!3776 = !DILocation(line: 285, column: 3, scope: !3757, inlinedAt: !3344)
!3777 = !DILocation(line: 285, column: 8, scope: !3757, inlinedAt: !3344)
!3778 = !DILocation(line: 286, column: 3, scope: !3757, inlinedAt: !3344)
!3779 = !DILocation(line: 286, column: 8, scope: !3757, inlinedAt: !3344)
!3780 = !DILocation(line: 290, column: 7, scope: !3343, inlinedAt: !3344)
!3781 = !DILocation(line: 290, column: 11, scope: !3343, inlinedAt: !3344)
!3782 = !DILocation(line: 290, column: 24, scope: !3343, inlinedAt: !3344)
!3783 = !DILocalVariable(name: "t", scope: !3784, file: !2, line: 292, type: !3, align: 4)
!3784 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 291, column: 2)
!3785 = !DILocation(line: 292, column: 8, scope: !3784, inlinedAt: !3344)
!3786 = !DILocation(line: 292, column: 15, scope: !3784, inlinedAt: !3344)
!3787 = !DILocation(line: 292, column: 19, scope: !3784, inlinedAt: !3344)
!3788 = !DILocation(line: 295, column: 9, scope: !3789, inlinedAt: !3344)
!3789 = distinct !DILexicalBlock(scope: !3784, file: !41, line: 293, column: 3)
!3790 = !DILocation(line: 295, column: 27, scope: !3789, inlinedAt: !3344)
!3791 = !DILocation(line: 295, column: 33, scope: !3789, inlinedAt: !3344)
!3792 = !DILocation(line: 295, column: 37, scope: !3789, inlinedAt: !3344)
!3793 = !DILocation(line: 295, column: 54, scope: !3789, inlinedAt: !3344)
!3794 = !DILocation(line: 296, column: 5, scope: !3795, inlinedAt: !3344)
!3795 = distinct !DILexicalBlock(scope: !3789, file: !41, line: 296, column: 5)
!3796 = !DILocation(line: 296, column: 20, scope: !3795, inlinedAt: !3344)
!3797 = !DILocation(line: 296, column: 13, scope: !3795, inlinedAt: !3344)
!3798 = !DILocation(line: 297, column: 9, scope: !3789, inlinedAt: !3344)
!3799 = !DILocation(line: 298, column: 5, scope: !3800, inlinedAt: !3344)
!3800 = distinct !DILexicalBlock(scope: !3789, file: !41, line: 298, column: 5)
!3801 = !DILocation(line: 298, column: 20, scope: !3800, inlinedAt: !3344)
!3802 = !DILocation(line: 298, column: 13, scope: !3800, inlinedAt: !3344)
!3803 = !DILocation(line: 299, column: 9, scope: !3789, inlinedAt: !3344)
!3804 = !DILocation(line: 300, column: 10, scope: !3805, inlinedAt: !3344)
!3805 = distinct !DILexicalBlock(scope: !3789, file: !41, line: 300, column: 5)
!3806 = !DILocation(line: 300, column: 14, scope: !3805, inlinedAt: !3344)
!3807 = !DILocation(line: 300, column: 31, scope: !3805, inlinedAt: !3344)
!3808 = !DILocation(line: 302, column: 6, scope: !3809, inlinedAt: !3344)
!3809 = distinct !DILexicalBlock(scope: !3805, file: !41, line: 301, column: 5)
!3810 = !DILocation(line: 302, column: 20, scope: !3809, inlinedAt: !3344)
!3811 = !DILocation(line: 302, column: 14, scope: !3809, inlinedAt: !3344)
!3812 = !DILocation(line: 306, column: 6, scope: !3813, inlinedAt: !3344)
!3813 = distinct !DILexicalBlock(scope: !3805, file: !41, line: 305, column: 5)
!3814 = !DILocation(line: 306, column: 21, scope: !3813, inlinedAt: !3344)
!3815 = !DILocation(line: 306, column: 14, scope: !3813, inlinedAt: !3344)
!3816 = !DILocation(line: 309, column: 31, scope: !3784, inlinedAt: !3344)
!3817 = !DILocation(line: 309, column: 13, scope: !3784, inlinedAt: !3344)
!3818 = !DILocation(line: 309, column: 46, scope: !3784, inlinedAt: !3344)
!3819 = !DILocation(line: 309, column: 57, scope: !3784, inlinedAt: !3344)
!3820 = !DILocation(line: 312, column: 2, scope: !3343, inlinedAt: !3344)
!3821 = !DILocation(line: 312, column: 7, scope: !3343, inlinedAt: !3344)
!3822 = !DILocation(line: 313, column: 2, scope: !3343, inlinedAt: !3344)
!3823 = !DILocation(line: 313, column: 7, scope: !3343, inlinedAt: !3344)
!3824 = !DILocation(line: 315, column: 8, scope: !3343, inlinedAt: !3344)
!3825 = !DILocation(line: 315, column: 49, scope: !3343, inlinedAt: !3344)
!3826 = !DILocation(line: 132, column: 23, scope: !3827, inlinedAt: !3828)
!3827 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2549, file: !2549, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3828 = !DILocation(line: 317, column: 13, scope: !3829, inlinedAt: !3344)
!3829 = distinct !DILexicalBlock(scope: !3343, file: !41, line: 316, column: 2)
!3830 = !DILocation(line: 319, column: 8, scope: !3831, inlinedAt: !3344)
!3831 = distinct !DILexicalBlock(scope: !3829, file: !41, line: 318, column: 3)
!3832 = !DILocation(line: 319, column: 20, scope: !3831, inlinedAt: !3344)
!3833 = !DILocation(line: 319, column: 52, scope: !3831, inlinedAt: !3344)
!3834 = !DILocation(line: 319, column: 34, scope: !3831, inlinedAt: !3344)
!3835 = !DILocation(line: 319, column: 75, scope: !3831, inlinedAt: !3344)
!3836 = !DILocation(line: 320, column: 4, scope: !3831, inlinedAt: !3344)
!3837 = !DILocation(line: 321, column: 4, scope: !3831, inlinedAt: !3344)
!3838 = !DILocation(line: 323, column: 7, scope: !3829, inlinedAt: !3344)
!3839 = !DILocation(line: 323, column: 36, scope: !3829, inlinedAt: !3344)
!3840 = !DILocation(line: 323, column: 45, scope: !3829, inlinedAt: !3344)
!3841 = !DILocation(line: 323, column: 57, scope: !3829, inlinedAt: !3344)
!3842 = !DILocation(line: 323, column: 71, scope: !3829, inlinedAt: !3344)
!3843 = !DILocation(line: 1024, column: 52, scope: !3844, inlinedAt: !3845)
!3844 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2549, file: !2549, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3845 = !DILocation(line: 325, column: 15, scope: !3343, inlinedAt: !3344)
!3846 = !DILocation(line: 1024, column: 41, scope: !3844, inlinedAt: !3845)
!3847 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 719, type: !3848, scopeLine: 719, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3848 = !DISubroutineType(types: !3849)
!3849 = !{!3850, !56, !56}
!3850 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 724, size: 320, align: 64, elements: !3851, identifier: "std.core.string.Splitter")
!3851 = !{!3852, !3853, !3854}
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3850, file: !2, line: 726, baseType: !56, size: 128, align: 64)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !3850, file: !2, line: 727, baseType: !56, size: 128, align: 64, offset: 128)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3850, file: !2, line: 728, baseType: !63, size: 64, align: 64, offset: 256)
!3855 = !DILocalVariable(name: "self", arg: 1, scope: !3847, file: !2, line: 719, type: !56)
!3856 = !DILocation(line: 719, column: 29, scope: !3847)
!3857 = !DILocalVariable(name: "split", arg: 2, scope: !3847, file: !2, line: 719, type: !56)
!3858 = !DILocation(line: 719, column: 42, scope: !3847)
!3859 = !DILocation(line: 721, column: 9, scope: !3847)
!3860 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 731, type: !3861, scopeLine: 731, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3861 = !DISubroutineType(types: !3862)
!3862 = !{null, !3863}
!3863 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !3850, size: 64, align: 64, dwarfAddressSpace: 0)
!3864 = !DILocation(line: 732, column: 1, scope: !3860)
!3865 = !DILocalVariable(name: "self", arg: 1, scope: !3860, file: !2, line: 731, type: !3863)
!3866 = !DILocation(line: 731, column: 24, scope: !3860)
!3867 = !DILocation(line: 733, column: 2, scope: !3860)
!3868 = !DILocation(line: 733, column: 17, scope: !3860)
!3869 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 736, type: !3870, scopeLine: 736, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3870 = !DISubroutineType(types: !3871)
!3871 = !{!324, !183, !3863}
!3872 = !DILocation(line: 737, column: 1, scope: !3869)
!3873 = !DILocalVariable(name: "self", arg: 1, scope: !3869, file: !2, line: 736, type: !3863)
!3874 = !DILocation(line: 736, column: 26, scope: !3869)
!3875 = !DILocalVariable(name: "len", scope: !3869, file: !2, line: 738, type: !63, align: 8)
!3876 = !DILocation(line: 738, column: 6, scope: !3869)
!3877 = !DILocation(line: 738, column: 12, scope: !3869)
!3878 = !DILocalVariable(name: "current", scope: !3869, file: !2, line: 739, type: !63, align: 8)
!3879 = !DILocation(line: 739, column: 6, scope: !3869)
!3880 = !DILocation(line: 739, column: 16, scope: !3869)
!3881 = !DILocation(line: 740, column: 6, scope: !3869)
!3882 = !DILocation(line: 740, column: 17, scope: !3869)
!3883 = !DILocation(line: 740, column: 29, scope: !3869)
!3884 = !DILocalVariable(name: "remaining", scope: !3869, file: !2, line: 741, type: !56, align: 8)
!3885 = !DILocation(line: 741, column: 9, scope: !3869)
!3886 = !DILocation(line: 741, column: 21, scope: !3869)
!3887 = !DILocation(line: 741, column: 33, scope: !3869)
!3888 = !DILocalVariable(name: "next", scope: !3869, file: !2, line: 742, type: !64, align: 8)
!3889 = !DILocation(line: 742, column: 7, scope: !3869)
!3890 = !DILocation(line: 742, column: 33, scope: !3869)
!3891 = !DILocation(line: 742, column: 14, scope: !3869)
!3892 = !DILocation(line: 743, column: 6, scope: !3869)
!3893 = !DILocation(line: 746, column: 10, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3869, file: !2, line: 744, column: 2)
!3895 = !DILocation(line: 746, column: 20, scope: !3894)
!3896 = !DILocation(line: 746, column: 21, scope: !3894)
!3897 = !DILocation(line: 745, column: 9, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3894, file: !2, line: 745, column: 9)
!3899 = !DILocation(line: 745, column: 24, scope: !3898)
!3900 = !DILocation(line: 745, column: 34, scope: !3898)
!3901 = !DILocation(line: 745, column: 41, scope: !3898)
!3902 = !DILocation(line: 748, column: 2, scope: !3869)
!3903 = !DILocation(line: 748, column: 17, scope: !3869)
!3904 = !DILocation(line: 749, column: 9, scope: !3869)
!3905 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 41, type: !3906, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3906 = !DISubroutineType(types: !3907)
!3907 = !{!489, !56, !3908}
!3908 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !3909, identifier: "any[]")
!3909 = !{!3910, !3916}
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3908, baseType: !3911, size: 64, align: 64)
!3911 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !3912, size: 64, align: 64, dwarfAddressSpace: 0)
!3912 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !3913, identifier: "any")
!3913 = !{!3914, !3915}
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3912, baseType: !188, size: 64, align: 64)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3912, baseType: !190, size: 64, align: 64, offset: 64)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3908, baseType: !63, size: 64, align: 64, offset: 64)
!3917 = !DILocalVariable(name: "fmt", arg: 1, scope: !3905, file: !2, line: 41, type: !56)
!3918 = !DILocation(line: 41, column: 32, scope: !3905)
!3919 = !DILocalVariable(name: "args", arg: 2, scope: !3905, file: !2, line: 41, type: !3908)
!3920 = !DILocation(line: 41, column: 37, scope: !3905)
!3921 = !DILocalVariable(name: "str", scope: !3905, file: !2, line: 43, type: !3922, align: 8)
!3922 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 4, baseType: !188, align: 8)
!3923 = !DILocation(line: 43, column: 10, scope: !3905)
!3924 = !DILocation(line: 43, column: 44, scope: !3905)
!3925 = !DILocation(line: 43, column: 54, scope: !3905)
!3926 = !DILocation(line: 43, column: 25, scope: !3905)
!3927 = !DILocation(line: 44, column: 2, scope: !3905)
!3928 = !DILocation(line: 45, column: 9, scope: !3905)
!3929 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 54, type: !3930, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3930 = !DISubroutineType(types: !3931)
!3931 = !{!56, !56, !3908, !185}
!3932 = !DILocalVariable(name: "fmt", arg: 1, scope: !3929, file: !2, line: 54, type: !56)
!3933 = !DILocation(line: 54, column: 25, scope: !3929)
!3934 = !DILocalVariable(name: "args", arg: 2, scope: !3929, file: !2, line: 54, type: !3908)
!3935 = !DILocation(line: 54, column: 30, scope: !3929)
!3936 = !DILocalVariable(name: "allocator", arg: 3, scope: !3929, file: !2, line: 54, type: !185)
!3937 = !DILocation(line: 54, column: 49, scope: !3929)
!3938 = !DILocalVariable(name: "current", scope: !3939, file: !2, line: 536, type: !3940, align: 8)
!3939 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !558, file: !558, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3940 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !3941, size: 64, align: 64, dwarfAddressSpace: 0)
!3941 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 10, size: 320, align: 64, elements: !3942, identifier: "std.core.mem.allocator.TempAllocator")
!3942 = !{!3943, !3944, !3957, !3958, !3959}
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !3941, file: !2, line: 12, baseType: !185, size: 128, align: 64)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !3941, file: !2, line: 13, baseType: !3945, size: 64, align: 64, offset: 128)
!3945 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !3946, size: 64, align: 64, dwarfAddressSpace: 0)
!3946 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 22, size: 320, align: 64, elements: !3947, identifier: "std.core.mem.allocator.TempAllocatorPage")
!3947 = !{!3948, !3949, !3950, !3951, !3952, !3953}
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !3946, file: !2, line: 24, baseType: !3945, size: 64, align: 64)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !3946, file: !2, line: 25, baseType: !188, size: 64, align: 64, offset: 64)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !3946, file: !2, line: 26, baseType: !63, size: 64, align: 64, offset: 128)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3946, file: !2, line: 27, baseType: !63, size: 64, align: 64, offset: 192)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !3946, file: !2, line: 28, baseType: !63, size: 64, align: 64, offset: 256)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3946, file: !2, line: 29, baseType: !3954, align: 8, offset: 320)
!3954 = !DICompositeType(tag: DW_TAG_array_type, baseType: !61, align: 8, elements: !3955)
!3955 = !{!3956}
!3956 = !DISubrange(count: 0, lowerBound: 0)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3941, file: !2, line: 14, baseType: !63, size: 64, align: 64, offset: 192)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3941, file: !2, line: 15, baseType: !63, size: 64, align: 64, offset: 256)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3941, file: !2, line: 16, baseType: !3954, align: 8, offset: 320)
!3960 = !DILocation(line: 536, column: 17, scope: !3939, inlinedAt: !3961)
!3961 = !DILocation(line: 56, column: 2, scope: !3929)
!3962 = !DILocation(line: 396, column: 7, scope: !3963, inlinedAt: !3964)
!3963 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!3964 = !DILocation(line: 536, column: 38, scope: !3939, inlinedAt: !3961)
!3965 = !DILocation(line: 398, column: 3, scope: !3966, inlinedAt: !3964)
!3966 = distinct !DILexicalBlock(scope: !3963, file: !211, line: 397, column: 2)
!3967 = !DILocation(line: 400, column: 9, scope: !3963, inlinedAt: !3964)
!3968 = !DILocalVariable(name: "original", scope: !3939, file: !2, line: 539, type: !3940, align: 8)
!3969 = !DILocation(line: 539, column: 18, scope: !3939, inlinedAt: !3961)
!3970 = !DILocation(line: 539, column: 29, scope: !3939, inlinedAt: !3961)
!3971 = !DILocation(line: 540, column: 7, scope: !3939, inlinedAt: !3961)
!3972 = !DILocation(line: 540, column: 19, scope: !3939, inlinedAt: !3961)
!3973 = !DILocation(line: 540, column: 59, scope: !3939, inlinedAt: !3961)
!3974 = !DILocalVariable(name: "mark", scope: !3939, file: !2, line: 542, type: !63, align: 8)
!3975 = !DILocation(line: 542, column: 6, scope: !3939, inlinedAt: !3961)
!3976 = !DILocation(line: 542, column: 13, scope: !3939, inlinedAt: !3961)
!3977 = !DILocalVariable(name: "str", scope: !3978, file: !2, line: 58, type: !3922, align: 8)
!3978 = distinct !DILexicalBlock(scope: !3929, file: !2, line: 57, column: 2)
!3979 = !DILocation(line: 58, column: 11, scope: !3978)
!3980 = !DILocation(line: 58, column: 45, scope: !3978)
!3981 = !DILocation(line: 58, column: 55, scope: !3978)
!3982 = !DILocation(line: 58, column: 26, scope: !3978)
!3983 = !DILocation(line: 59, column: 3, scope: !3978)
!3984 = !DILocation(line: 60, column: 10, scope: !3978)
!3985 = !DILocation(line: 545, column: 17, scope: !3986, inlinedAt: !3961)
!3986 = distinct !DILexicalBlock(scope: !3939, file: !558, line: 544, column: 2)
!3987 = !DILocation(line: 545, column: 3, scope: !3986, inlinedAt: !3961)
!3988 = !DILocation(line: 547, column: 39, scope: !3986, inlinedAt: !3961)
!3989 = !DILocation(line: 549, column: 2, scope: !3986, inlinedAt: !3961)
!3990 = distinct !DISubprogram(name: "new_format", linkageName: "std.core.string.new_format", scope: !2, file: !2, line: 69, type: !3930, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!3991 = !DILocalVariable(name: "fmt", arg: 1, scope: !3990, file: !2, line: 69, type: !56)
!3992 = !DILocation(line: 69, column: 29, scope: !3990)
!3993 = !DILocalVariable(name: "args", arg: 2, scope: !3990, file: !2, line: 69, type: !3908)
!3994 = !DILocation(line: 69, column: 34, scope: !3990)
!3995 = !DILocalVariable(name: "allocator", arg: 3, scope: !3990, file: !2, line: 69, type: !185)
!3996 = !DILocation(line: 69, column: 53, scope: !3990)
!3997 = !DILocation(line: 69, column: 106, scope: !3990)
!3998 = !DILocation(line: 392, column: 27, scope: !3999, inlinedAt: !4000)
!3999 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !211, file: !211, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4000 = !DILocation(line: 69, column: 130, scope: !3990)
!4001 = !DILocation(line: 69, column: 74, scope: !3990)
!4002 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 76, type: !4003, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4003 = !DISubroutineType(types: !4004)
!4004 = !{!56, !56, !3908}
!4005 = !DILocalVariable(name: "fmt", arg: 1, scope: !4002, file: !2, line: 76, type: !56)
!4006 = !DILocation(line: 76, column: 26, scope: !4002)
!4007 = !DILocalVariable(name: "args", arg: 2, scope: !4002, file: !2, line: 76, type: !3908)
!4008 = !DILocation(line: 76, column: 31, scope: !4002)
!4009 = !DILocalVariable(name: "str", scope: !4002, file: !2, line: 78, type: !3922, align: 8)
!4010 = !DILocation(line: 78, column: 10, scope: !4002)
!4011 = !DILocation(line: 78, column: 44, scope: !4002)
!4012 = !DILocation(line: 78, column: 54, scope: !4002)
!4013 = !DILocation(line: 78, column: 25, scope: !4002)
!4014 = !DILocation(line: 79, column: 2, scope: !4002)
!4015 = !DILocation(line: 80, column: 9, scope: !4002)
!4016 = distinct !DISubprogram(name: "new_format_zstr", linkageName: "std.core.string.new_format_zstr", scope: !2, file: !2, line: 89, type: !4017, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4017 = !DISubroutineType(types: !4018)
!4018 = !{!489, !56, !3908, !185}
!4019 = !DILocalVariable(name: "fmt", arg: 1, scope: !4016, file: !2, line: 89, type: !56)
!4020 = !DILocation(line: 89, column: 35, scope: !4016)
!4021 = !DILocalVariable(name: "args", arg: 2, scope: !4016, file: !2, line: 89, type: !3908)
!4022 = !DILocation(line: 89, column: 40, scope: !4016)
!4023 = !DILocalVariable(name: "allocator", arg: 3, scope: !4016, file: !2, line: 89, type: !185)
!4024 = !DILocation(line: 89, column: 59, scope: !4016)
!4025 = !DILocalVariable(name: "current", scope: !4026, file: !2, line: 536, type: !3940, align: 8)
!4026 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !558, file: !558, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4027 = !DILocation(line: 536, column: 17, scope: !4026, inlinedAt: !4028)
!4028 = !DILocation(line: 91, column: 2, scope: !4016)
!4029 = !DILocation(line: 396, column: 7, scope: !4030, inlinedAt: !4031)
!4030 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4031 = !DILocation(line: 536, column: 38, scope: !4026, inlinedAt: !4028)
!4032 = !DILocation(line: 398, column: 3, scope: !4033, inlinedAt: !4031)
!4033 = distinct !DILexicalBlock(scope: !4030, file: !211, line: 397, column: 2)
!4034 = !DILocation(line: 400, column: 9, scope: !4030, inlinedAt: !4031)
!4035 = !DILocalVariable(name: "original", scope: !4026, file: !2, line: 539, type: !3940, align: 8)
!4036 = !DILocation(line: 539, column: 18, scope: !4026, inlinedAt: !4028)
!4037 = !DILocation(line: 539, column: 29, scope: !4026, inlinedAt: !4028)
!4038 = !DILocation(line: 540, column: 7, scope: !4026, inlinedAt: !4028)
!4039 = !DILocation(line: 540, column: 19, scope: !4026, inlinedAt: !4028)
!4040 = !DILocation(line: 540, column: 59, scope: !4026, inlinedAt: !4028)
!4041 = !DILocalVariable(name: "mark", scope: !4026, file: !2, line: 542, type: !63, align: 8)
!4042 = !DILocation(line: 542, column: 6, scope: !4026, inlinedAt: !4028)
!4043 = !DILocation(line: 542, column: 13, scope: !4026, inlinedAt: !4028)
!4044 = !DILocalVariable(name: "str", scope: !4045, file: !2, line: 93, type: !3922, align: 8)
!4045 = distinct !DILexicalBlock(scope: !4016, file: !2, line: 92, column: 2)
!4046 = !DILocation(line: 93, column: 11, scope: !4045)
!4047 = !DILocation(line: 93, column: 45, scope: !4045)
!4048 = !DILocation(line: 93, column: 55, scope: !4045)
!4049 = !DILocation(line: 93, column: 26, scope: !4045)
!4050 = !DILocation(line: 94, column: 3, scope: !4045)
!4051 = !DILocation(line: 95, column: 24, scope: !4045)
!4052 = !DILocation(line: 95, column: 10, scope: !4045)
!4053 = !DILocation(line: 545, column: 17, scope: !4054, inlinedAt: !4028)
!4054 = distinct !DILexicalBlock(scope: !4026, file: !558, line: 544, column: 2)
!4055 = !DILocation(line: 545, column: 3, scope: !4054, inlinedAt: !4028)
!4056 = !DILocation(line: 547, column: 39, scope: !4054, inlinedAt: !4028)
!4057 = !DILocation(line: 549, column: 2, scope: !4054, inlinedAt: !4028)
!4058 = distinct !DISubprogram(name: "join_new", linkageName: "std.core.string.join_new", scope: !2, file: !2, line: 113, type: !4059, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4059 = !DISubroutineType(types: !4060)
!4060 = !{!56, !180, !56, !185}
!4061 = !DILocation(line: 115, column: 7, scope: !4058)
!4062 = !DILocalVariable(name: "s", arg: 1, scope: !4058, file: !2, line: 113, type: !180)
!4063 = !DILocation(line: 113, column: 29, scope: !4058)
!4064 = !DILocalVariable(name: "joiner", arg: 2, scope: !4058, file: !2, line: 113, type: !56)
!4065 = !DILocation(line: 113, column: 39, scope: !4058)
!4066 = !DILocalVariable(name: "allocator", arg: 3, scope: !4058, file: !2, line: 113, type: !185)
!4067 = !DILocation(line: 113, column: 57, scope: !4058)
!4068 = !DILocation(line: 252, column: 55, scope: !4069, inlinedAt: !4070)
!4069 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !211, file: !211, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4070 = !DILocation(line: 244, column: 9, scope: !4071, inlinedAt: !4072)
!4071 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !211, file: !211, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4072 = !DILocation(line: 117, column: 29, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4058, file: !2, line: 116, column: 2)
!4074 = !DILocation(line: 252, column: 40, scope: !4069, inlinedAt: !4070)
!4075 = !DILocation(line: 79, column: 7, scope: !4076, inlinedAt: !4077)
!4076 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !211, file: !211, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4077 = !DILocation(line: 252, column: 11, scope: !4069, inlinedAt: !4070)
!4078 = !DILocation(line: 79, column: 20, scope: !4076, inlinedAt: !4077)
!4079 = !DILocation(line: 28, column: 71, scope: !4080, inlinedAt: !4081)
!4080 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4081 = !DILocation(line: 80, column: 9, scope: !4076, inlinedAt: !4077)
!4082 = !DILocation(line: 252, column: 67, scope: !4069, inlinedAt: !4070)
!4083 = !DILocation(line: 117, column: 11, scope: !4073)
!4084 = !DILocalVariable(name: "total_size", scope: !4058, file: !2, line: 120, type: !63, align: 8)
!4085 = !DILocation(line: 120, column: 6, scope: !4058)
!4086 = !DILocation(line: 120, column: 19, scope: !4058)
!4087 = !DILocation(line: 120, column: 32, scope: !4058)
!4088 = !DILocalVariable(name: ".temp", scope: !4089, file: !2, line: 121, type: !63, align: 8)
!4089 = distinct !DILexicalBlock(scope: !4058, file: !2, line: 121, column: 2)
!4090 = !DILocation(line: 121, column: 26, scope: !4089)
!4091 = !DILocalVariable(name: "str", scope: !4092, file: !2, line: 121, type: !183, align: 8)
!4092 = distinct !DILexicalBlock(scope: !4089, file: !2, line: 122, column: 2)
!4093 = !DILocation(line: 121, column: 20, scope: !4092)
!4094 = !DILocation(line: 121, column: 26, scope: !4092)
!4095 = !DILocation(line: 123, column: 3, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4092, file: !2, line: 122, column: 2)
!4097 = !DILocation(line: 123, column: 17, scope: !4096)
!4098 = !DILocalVariable(name: "current", scope: !4099, file: !2, line: 536, type: !3940, align: 8)
!4099 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !558, file: !558, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4100 = !DILocation(line: 536, column: 17, scope: !4099, inlinedAt: !4101)
!4101 = !DILocation(line: 125, column: 2, scope: !4058)
!4102 = !DILocation(line: 396, column: 7, scope: !4103, inlinedAt: !4104)
!4103 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4104 = !DILocation(line: 536, column: 38, scope: !4099, inlinedAt: !4101)
!4105 = !DILocation(line: 398, column: 3, scope: !4106, inlinedAt: !4104)
!4106 = distinct !DILexicalBlock(scope: !4103, file: !211, line: 397, column: 2)
!4107 = !DILocation(line: 400, column: 9, scope: !4103, inlinedAt: !4104)
!4108 = !DILocalVariable(name: "original", scope: !4099, file: !2, line: 539, type: !3940, align: 8)
!4109 = !DILocation(line: 539, column: 18, scope: !4099, inlinedAt: !4101)
!4110 = !DILocation(line: 539, column: 29, scope: !4099, inlinedAt: !4101)
!4111 = !DILocation(line: 540, column: 7, scope: !4099, inlinedAt: !4101)
!4112 = !DILocation(line: 540, column: 19, scope: !4099, inlinedAt: !4101)
!4113 = !DILocation(line: 540, column: 59, scope: !4099, inlinedAt: !4101)
!4114 = !DILocalVariable(name: "mark", scope: !4099, file: !2, line: 542, type: !63, align: 8)
!4115 = !DILocation(line: 542, column: 6, scope: !4099, inlinedAt: !4101)
!4116 = !DILocation(line: 542, column: 13, scope: !4099, inlinedAt: !4101)
!4117 = !DILocalVariable(name: "res", scope: !4118, file: !2, line: 127, type: !3922, align: 8)
!4118 = distinct !DILexicalBlock(scope: !4058, file: !2, line: 126, column: 2)
!4119 = !DILocation(line: 127, column: 11, scope: !4118)
!4120 = !DILocation(line: 127, column: 45, scope: !4118)
!4121 = !DILocation(line: 127, column: 26, scope: !4118)
!4122 = !DILocation(line: 128, column: 14, scope: !4118)
!4123 = !DILocation(line: 128, column: 16, scope: !4118)
!4124 = !DILocation(line: 378, column: 22, scope: !4125, inlinedAt: !4127)
!4125 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4126, file: !4126, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4126 = !DIFile(filename: "dstring.c3", directory: "C:/Dev/C3/c3-windows/lib/std/core")
!4127 = !DILocation(line: 128, column: 3, scope: !4118)
!4128 = !DILocation(line: 378, column: 4, scope: !4125, inlinedAt: !4127)
!4129 = !DILocalVariable(name: ".temp", scope: !4130, file: !2, line: 129, type: !4131, align: 8)
!4130 = distinct !DILexicalBlock(scope: !4118, file: !2, line: 129, column: 3)
!4131 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !180, size: 64, align: 64, dwarfAddressSpace: 0)
!4132 = !DILocation(line: 129, column: 27, scope: !4130)
!4133 = !DILocation(line: 129, column: 29, scope: !4130)
!4134 = !DILocalVariable(name: ".temp", scope: !4130, file: !2, line: 129, type: !63, align: 8)
!4135 = !DILocalVariable(name: "str", scope: !4136, file: !2, line: 129, type: !183, align: 8)
!4136 = distinct !DILexicalBlock(scope: !4130, file: !2, line: 130, column: 3)
!4137 = !DILocation(line: 129, column: 21, scope: !4136)
!4138 = !DILocation(line: 129, column: 27, scope: !4136)
!4139 = !DILocation(line: 378, column: 22, scope: !4140, inlinedAt: !4141)
!4140 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4126, file: !4126, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4141 = !DILocation(line: 131, column: 4, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4136, file: !2, line: 130, column: 3)
!4143 = !DILocation(line: 378, column: 4, scope: !4140, inlinedAt: !4141)
!4144 = !DILocation(line: 132, column: 16, scope: !4142)
!4145 = !DILocation(line: 378, column: 22, scope: !4146, inlinedAt: !4147)
!4146 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4126, file: !4126, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4147 = !DILocation(line: 132, column: 4, scope: !4142)
!4148 = !DILocation(line: 378, column: 4, scope: !4146, inlinedAt: !4147)
!4149 = !DILocation(line: 134, column: 10, scope: !4118)
!4150 = !DILocation(line: 545, column: 17, scope: !4151, inlinedAt: !4101)
!4151 = distinct !DILexicalBlock(scope: !4099, file: !558, line: 544, column: 2)
!4152 = !DILocation(line: 545, column: 3, scope: !4151, inlinedAt: !4101)
!4153 = !DILocation(line: 547, column: 39, scope: !4151, inlinedAt: !4101)
!4154 = !DILocation(line: 549, column: 2, scope: !4151, inlinedAt: !4101)
!4155 = distinct !DISubprogram(name: "new_from_utf32", linkageName: "std.core.string.new_from_utf32", scope: !2, file: !2, line: 588, type: !4156, scopeLine: 588, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4156 = !DISubroutineType(types: !4157)
!4157 = !{!324, !183, !4158, !185}
!4158 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !4159, identifier: "uint[]")
!4159 = !{!4160, !4161}
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4158, baseType: !1932, size: 64, align: 64)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4158, baseType: !63, size: 64, align: 64, offset: 64)
!4162 = !DILocalVariable(name: "utf32", arg: 1, scope: !4155, file: !2, line: 588, type: !840)
!4163 = !DILocation(line: 588, column: 36, scope: !4155)
!4164 = !DILocalVariable(name: "allocator", arg: 2, scope: !4155, file: !2, line: 588, type: !185)
!4165 = !DILocation(line: 588, column: 53, scope: !4155)
!4166 = !DILocalVariable(name: "len", scope: !4155, file: !2, line: 590, type: !63, align: 8)
!4167 = !DILocation(line: 590, column: 6, scope: !4155)
!4168 = !DILocation(line: 590, column: 18, scope: !4155)
!4169 = !DILocalVariable(name: "data", scope: !4155, file: !2, line: 591, type: !60, align: 8)
!4170 = !DILocation(line: 591, column: 8, scope: !4155)
!4171 = !DILocation(line: 591, column: 48, scope: !4155)
!4172 = !DILocation(line: 62, column: 7, scope: !4173, inlinedAt: !4174)
!4173 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4174 = !DILocation(line: 591, column: 26, scope: !4155)
!4175 = !DILocation(line: 62, column: 20, scope: !4173, inlinedAt: !4174)
!4176 = !DILocation(line: 28, column: 71, scope: !4177, inlinedAt: !4178)
!4177 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4178 = !DILocation(line: 68, column: 10, scope: !4173, inlinedAt: !4174)
!4179 = !DILocation(line: 593, column: 8, scope: !4155)
!4180 = !DILocation(line: 594, column: 2, scope: !4155)
!4181 = !DILocation(line: 594, column: 7, scope: !4155)
!4182 = !DILocation(line: 594, column: 14, scope: !4155)
!4183 = !DILocation(line: 595, column: 17, scope: !4155)
!4184 = !DILocation(line: 595, column: 23, scope: !4155)
!4185 = distinct !DISubprogram(name: "new_from_utf16", linkageName: "std.core.string.new_from_utf16", scope: !2, file: !2, line: 598, type: !4186, scopeLine: 598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4186 = !DISubroutineType(types: !4187)
!4187 = !{!324, !183, !4188, !185}
!4188 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !4189, identifier: "ushort[]")
!4189 = !{!4190, !4191}
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4188, baseType: !814, size: 64, align: 64)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4188, baseType: !63, size: 64, align: 64, offset: 64)
!4192 = !DILocalVariable(name: "utf16", arg: 1, scope: !4185, file: !2, line: 598, type: !762)
!4193 = !DILocation(line: 598, column: 36, scope: !4185)
!4194 = !DILocalVariable(name: "allocator", arg: 2, scope: !4185, file: !2, line: 598, type: !185)
!4195 = !DILocation(line: 598, column: 53, scope: !4185)
!4196 = !DILocalVariable(name: "len", scope: !4185, file: !2, line: 600, type: !63, align: 8)
!4197 = !DILocation(line: 600, column: 6, scope: !4185)
!4198 = !DILocation(line: 600, column: 18, scope: !4185)
!4199 = !DILocalVariable(name: "data", scope: !4185, file: !2, line: 601, type: !60, align: 8)
!4200 = !DILocation(line: 601, column: 8, scope: !4185)
!4201 = !DILocation(line: 601, column: 48, scope: !4185)
!4202 = !DILocation(line: 62, column: 7, scope: !4203, inlinedAt: !4204)
!4203 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !211, file: !211, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4204 = !DILocation(line: 601, column: 26, scope: !4185)
!4205 = !DILocation(line: 62, column: 20, scope: !4203, inlinedAt: !4204)
!4206 = !DILocation(line: 28, column: 71, scope: !4207, inlinedAt: !4208)
!4207 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !211, file: !211, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4208 = !DILocation(line: 68, column: 10, scope: !4203, inlinedAt: !4204)
!4209 = !DILocation(line: 603, column: 8, scope: !4185)
!4210 = !DILocation(line: 602, column: 41, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4185, file: !2, line: 602, column: 25)
!4212 = !DILocation(line: 101, column: 7, scope: !4213, inlinedAt: !4214)
!4213 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !211, file: !211, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4214 = !DILocation(line: 602, column: 25, scope: !4211)
!4215 = !DILocation(line: 101, column: 18, scope: !4213, inlinedAt: !4214)
!4216 = !DILocation(line: 105, column: 25, scope: !4213, inlinedAt: !4214)
!4217 = !DILocation(line: 105, column: 2, scope: !4213, inlinedAt: !4214)
!4218 = !DILocation(line: 604, column: 2, scope: !4185)
!4219 = !DILocation(line: 604, column: 7, scope: !4185)
!4220 = !DILocation(line: 604, column: 14, scope: !4185)
!4221 = !DILocation(line: 605, column: 17, scope: !4185)
!4222 = !DILocation(line: 605, column: 23, scope: !4185)
!4223 = distinct !DISubprogram(name: "new_from_wstring", linkageName: "std.core.string.new_from_wstring", scope: !2, file: !2, line: 608, type: !4224, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4224 = !DISubroutineType(types: !4225)
!4225 = !{!324, !183, !813, !185}
!4226 = !DILocalVariable(name: "wstring", arg: 1, scope: !4223, file: !2, line: 608, type: !813)
!4227 = !DILocation(line: 608, column: 37, scope: !4223)
!4228 = !DILocalVariable(name: "allocator", arg: 2, scope: !4223, file: !2, line: 608, type: !185)
!4229 = !DILocation(line: 608, column: 56, scope: !4223)
!4230 = !DILocalVariable(name: "utf16_len", scope: !4223, file: !2, line: 610, type: !63, align: 8)
!4231 = !DILocation(line: 610, column: 6, scope: !4223)
!4232 = !DILocation(line: 611, column: 2, scope: !4223)
!4233 = !DILocation(line: 611, column: 9, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4223, file: !2, line: 611, column: 2)
!4235 = !DILocation(line: 611, column: 17, scope: !4234)
!4236 = !DILocation(line: 611, column: 34, scope: !4234)
!4237 = !DILocalVariable(name: "utf16", scope: !4223, file: !2, line: 612, type: !762, align: 8)
!4238 = !DILocation(line: 612, column: 11, scope: !4223)
!4239 = !DILocation(line: 612, column: 19, scope: !4223)
!4240 = !DILocation(line: 612, column: 28, scope: !4223)
!4241 = !DILocation(line: 613, column: 9, scope: !4223)
!4242 = distinct !DISubprogram(name: "temp_from_wstring", linkageName: "std.core.string.temp_from_wstring", scope: !2, file: !2, line: 616, type: !4243, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4243 = !DISubroutineType(types: !4244)
!4244 = !{!324, !183, !813}
!4245 = !DILocalVariable(name: "wstring", arg: 1, scope: !4242, file: !2, line: 616, type: !813)
!4246 = !DILocation(line: 616, column: 38, scope: !4242)
!4247 = !DILocation(line: 396, column: 7, scope: !4248, inlinedAt: !4249)
!4248 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4249 = !DILocation(line: 616, column: 87, scope: !4242)
!4250 = !DILocation(line: 398, column: 3, scope: !4251, inlinedAt: !4249)
!4251 = distinct !DILexicalBlock(scope: !4248, file: !211, line: 397, column: 2)
!4252 = !DILocation(line: 400, column: 9, scope: !4248, inlinedAt: !4249)
!4253 = !DILocation(line: 616, column: 50, scope: !4242)
!4254 = distinct !DISubprogram(name: "temp_from_utf16", linkageName: "std.core.string.temp_from_utf16", scope: !2, file: !2, line: 617, type: !4255, scopeLine: 617, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !51, retainedNodes: !65)
!4255 = !DISubroutineType(types: !4256)
!4256 = !{!324, !183, !4188}
!4257 = !DILocalVariable(name: "utf16", arg: 1, scope: !4254, file: !2, line: 617, type: !762)
!4258 = !DILocation(line: 617, column: 37, scope: !4254)
!4259 = !DILocation(line: 396, column: 7, scope: !4260, inlinedAt: !4261)
!4260 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !211, file: !211, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !51)
!4261 = !DILocation(line: 617, column: 80, scope: !4254)
!4262 = !DILocation(line: 398, column: 3, scope: !4263, inlinedAt: !4261)
!4263 = distinct !DILexicalBlock(scope: !4260, file: !211, line: 397, column: 2)
!4264 = !DILocation(line: 400, column: 9, scope: !4260, inlinedAt: !4261)
!4265 = !DILocation(line: 617, column: 47, scope: !4254)
